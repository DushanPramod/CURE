rank: 1
score: 99.90257263183594
patch: return position ;
rank: 1
score: 99.7549560546875
patch: return ~ position ;
rank: 1
score: 99.4590835571289
patch: return 0 ;
rank: 2
score: 99.57485961914062
patch: return - 1 ;
rank: 2
score: 99.5247802734375
patch: return ~ 1 ;
rank: 2
score: 99.47756958007812
patch: return ~ ~ position ;
rank: 2
score: 99.43707275390625
patch: return return position ;
rank: 2
score: 99.42022705078125
patch: return true ;
rank: 3
score: 99.41899871826172
patch: return text . length ( ) ;
rank: 3
score: 99.39940795898437
patch: return return 1 ;
rank: 3
score: 99.38467407226562
patch: return position - 1 ;
rank: 3
score: 99.38076346261161
patch: return ~ position + position ;
rank: 3
score: 99.36681111653645
patch: return position + 1 ;
rank: 3
score: 99.35350036621094
patch: return ~ position ; return position ;
rank: 4
score: 99.41145324707031
patch: return position . length ( ) ;
rank: 4
score: 99.38252397017045
patch: return Integer . parse CaMeL Int ( position ) ;
rank: 4
score: 99.36613633897569
patch: return ~ text . length ( ) ;
rank: 4
score: 99.31932576497395
patch: return position ~ position ;
rank: 4
score: 99.29881702769886
patch: return super . parse CaMeL Into ( bucket ) ;
rank: 4
score: 99.27586534288194
patch: return ~ position . length ( ) ;
rank: 4
score: 99.27455139160156
patch: return Integer . length ( ) ;
rank: 4
score: 99.27260916573661
patch: return position ; return position ;
rank: 5
score: 99.39405517578125
patch: return position + position . length ( ) ;
rank: 5
score: 99.30051879882812
patch: return - position ;
rank: 5
score: 99.27762858072917
patch: return ~ position ; }
rank: 5
score: 99.2701924641927
patch: return position ? ALL _ IDS : ALL _ IDS ;
rank: 5
score: 99.23557739257812
patch: throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 5
score: 99.21311442057292
patch: return ~ position ; return ~ position ;
rank: 5
score: 99.13157958984375
patch: return ~ $NUMBER$ ;
rank: 6
score: 99.3861083984375
patch: return position + text . length ( ) ;
rank: 6
score: 99.26715959821429
patch: return ~ ALL _ IDS ;
rank: 6
score: 99.25303431919643
patch: else { return position ; }
rank: 6
score: 99.23740456321023
patch: return this . text . substring ( position ) ;
rank: 6
score: 99.22728474934895
patch: return position + position ;
rank: 6
score: 99.17110188802083
patch: return ~ position ; if ~ position ;
rank: 6
score: 99.10270860460069
patch: throw new Runtime CaMeL Exception ( $STRING$ ;
rank: 7
score: 99.28241521661931
patch: return Integer . parse CaMeL Int ( text ) ;
rank: 7
score: 99.26206461588542
patch: return ALL _ IDS ;
rank: 7
score: 99.2413330078125
patch: else { return position ;
rank: 7
score: 99.22766791449652
patch: return ~ position ? position : 0 ;
rank: 7
score: 99.212890625
patch: return - 0 ;
rank: 7
score: 99.1990234375
patch: return position + str . length ( ) ;
rank: 7
score: 99.16972351074219
patch: return ~ 1 ; return position ;
rank: 7
score: 99.07869466145833
patch: return ;
rank: 8
score: 99.23475138346355
patch: return return ~ position ;
rank: 8
score: 99.22609641335227
patch: return ~ position . to CaMeL String ( ) ;
rank: 8
score: 99.19563432173295
patch: return ~ position + $STRING$ . length ( ) ;
rank: 8
score: 99.0781494140625
patch: return ~ 0 ;
rank: 9
score: 99.27794300426136
patch: return Math . max ( position , position ) ;
rank: 9
score: 99.21088518415179
patch: else { return ~ position ;
rank: 9
score: 99.20608181423611
patch: return ~ ALL _ IDS . length ;
rank: 9
score: 99.195068359375
patch: return text . substring ( position ) ;
rank: 9
score: 99.17828369140625
patch: return ~ ~ ~ position ;
rank: 9
score: 99.14820861816406
patch: return position ; } return position ;
rank: 9
score: 99.06954520089286
patch: } else { return position ;
rank: 10
score: 99.24493963068181
patch: return Integer . value CaMeL Of ( position ) ;
rank: 10
score: 99.2121249112216
patch: return ~ position ? position : ALL _ IDS ;
rank: 10
score: 99.20230865478516
patch: return ~ ~ ALL _ IDS ;
rank: 10
score: 99.17775656960227
patch: return text . substring ( position , position ) ;
rank: 10
score: 99.17276000976562
patch: return position ? position : position ;
rank: 10
score: 99.06711154513889
patch: return ; , position ( position ) ;
rank: 11
score: 99.26014293323864
patch: return text . substring ( position + 1 ) ;
rank: 11
score: 99.22587890625
patch: return position - text . length ( ) ;
rank: 11
score: 99.20899200439453
patch: return position ? position : 0 ;
rank: 11
score: 99.16817626953124
patch: return position - str . length ( ) ;
rank: 11
score: 99.12346857244319
patch: return super . parse CaMeL Into ( text ) ;
rank: 11
score: 99.10731506347656
patch: return position ; return ~ position ;
rank: 11
score: 99.05076090494792
patch: return position + 0 ;
rank: 12
score: 99.2218905362216
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( ) ;
rank: 12
score: 99.20890299479167
patch: return ALL _ IDS + text . length ( ) ;
rank: 12
score: 99.17525024414063
patch: return ~ ~ text . length ( ) ;
rank: 12
score: 99.17106489701705
patch: return text . substring ( 0 , position ) ;
rank: 12
score: 99.151513671875
patch: return position . to CaMeL String ( ) ;
rank: 12
score: 99.13038126627605
patch: return return - 1 ;
rank: 12
score: 99.10599772135417
patch: return ~ position ; if return position ;
rank: 12
score: 99.10355922154018
patch: return ~ ~ position ; }
rank: 12
score: 99.02149963378906
patch: } else { return position ; }
rank: 13
score: 99.21147017045455
patch: return Integer . parse CaMeL Int ( str ) ;
rank: 13
score: 99.20423380533855
patch: return Date CaMeL Time CaMeL Parser CaMeL Bucket . position ;
rank: 13
score: 99.16946072048611
patch: return ~ ALL _ IDS + position ;
rank: 13
score: 99.117431640625
patch: return return - 0 ;
rank: 13
score: 99.09894476996527
patch: return ~ position ; if ~ 1 ;
rank: 13
score: 99.014892578125
patch: return false ;
rank: 14
score: 99.20002092633929
patch: return ~ position + 1 ;
rank: 14
score: 99.19290771484376
patch: return position + name . length ( ) ;
rank: 14
score: 99.165771484375
patch: return parse CaMeL Into ( text , position ) ;
rank: 14
score: 99.1055196126302
patch: return return - position ;
rank: 14
score: 99.08519398082386
patch: return Date CaMeL Time CaMeL Zone . ~ position ;
rank: 14
score: 99.07463073730469
patch: return position ; else return position ;
rank: 15
score: 99.18721147017045
patch: return ~ position + text . length ( ) ;
rank: 15
score: 99.062744140625
patch: return position + position ; return position ;
rank: 15
score: 99.00166829427083
patch: return ; , 0 , ~ 1 ;
rank: 16
score: 99.18043101917614
patch: return position . index CaMeL Of ( $STRING$ ) ;
rank: 16
score: 99.1597567471591
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ;
rank: 16
score: 99.14274458451705
patch: return get CaMeL Zone ( text , position ) ;
rank: 16
score: 99.09687042236328
patch: return ; int ~ position position ;
rank: 16
score: 99.061279296875
patch: return position ; return position ; return position ;
rank: 17
score: 99.1778897372159
patch: return text . substring ( position + position ) ;
rank: 17
score: 99.12466430664062
patch: return position - position ;
rank: 17
score: 99.05775960286458
patch: return ~ position ; } return position ;
rank: 17
score: 99.03879616477273
patch: return super . parse CaMeL Into ( position ) ;
rank: 17
score: 98.98404541015626
patch: } return position ;
rank: 18
score: 99.1732177734375
patch: return position ? position : ALL _ IDS ;
rank: 18
score: 99.1163101196289
patch: return ~ ALL _ IDS ) ;
rank: 18
score: 99.11470336914063
patch: return text . to CaMeL String ( ) ;
rank: 18
score: 99.085888671875
patch: return position == 0 ? position : position ;
rank: 18
score: 99.05091094970703
patch: return return position ; return position ;
rank: 18
score: 99.02939860026042
patch: return ~ ( ALL _ IDS ) ;
rank: 18
score: 98.983642578125
patch: return ; , 0 , position ) ;
rank: 19
score: 99.16691080729167
patch: return ~ bucket . parse CaMeL Into ( bucket ) ;
rank: 19
score: 99.1548184481534
patch: return Math . min ( position , position ) ;
rank: 19
score: 99.06033325195312
patch: return return - $STRING$ ;
rank: 19
score: 99.03569793701172
patch: return position position ; return position ;
rank: 19
score: 99.02760145399306
patch: return ~ position . trim ( ) ;
rank: 19
score: 98.97264099121094
patch: return ; , ~ 1 ) ;
rank: 20
score: 99.16472833806819
patch: return ~ position + position . length ( ) ;
rank: 20
score: 99.1311922940341
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ;
rank: 20
score: 99.09817504882812
patch: return ~ text . substring ( position ) ;
rank: 20
score: 99.06039089626736
patch: return position ? position : - 1 ;
rank: 20
score: 99.05945434570313
patch: return return $NUMBER$ ;
rank: 20
score: 99.02972412109375
patch: return ~ position ; else return position ;
rank: 20
score: 99.02740478515625
patch: return ~ ~ position . length ( ) ;
rank: 21
score: 99.163037109375
patch: return position . length ( ) + 1 ;
rank: 21
score: 99.09138627485795
patch: return ~ position + name . length ( ) ;
rank: 21
score: 99.08365631103516
patch: return * ~ ALL _ IDS ;
rank: 21
score: 99.0591796875
patch: return return 0 ;
rank: 21
score: 99.052978515625
patch: throw new Runtime CaMeL Exception ( position ) ;
rank: 21
score: 99.02625621448864
patch: return super . parse ( text , position ) ;
rank: 21
score: 99.02275933159723
patch: return ~ 1 ; return ~ position ;
rank: 21
score: 98.96107991536458
patch: return ; , position , 0 ) ;
rank: 22
score: 99.1514663696289
patch: return position + ALL _ IDS ;
rank: 22
score: 99.081787109375
patch: return * ~ text . length ( ) ;
rank: 22
score: 99.0451171875
patch: return position ~ name . length ( ) ;
rank: 22
score: 99.04248725043402
patch: return ; int ~ position ~ position ;
rank: 22
score: 99.0255459872159
patch: return ~ bucket . to CaMeL String ( ) ;
rank: 22
score: 99.01669311523438
patch: return position ; if ~ position ;
rank: 22
score: 98.95478166852679
patch: return ; , ~ 1 ;
rank: 23
score: 99.1580810546875
patch: return ~ position . length ( ) + 1 ;
rank: 23
score: 99.13990020751953
patch: return str . length ( ) ;
rank: 23
score: 99.1144510904948
patch: return ~ - 1 ;
rank: 23
score: 99.07591417100694
patch: return ~ ~ ~ ALL _ IDS ;
rank: 23
score: 99.03610665457589
patch: try { return ~ position ;
rank: 23
score: 99.01289876302083
patch: return position ; } return ~ position ;
rank: 24
score: 99.130615234375
patch: return position + $STRING$ . length ( ) ;
rank: 24
score: 99.11390269886364
patch: return Math . max ( 0 , position ) ;
rank: 24
score: 99.08976440429687
patch: return this . text . length ( ) ;
rank: 24
score: 99.03561401367188
patch: return position == 0 ? 0 : position ;
rank: 24
score: 99.03199986049107
patch: return return ~ ~ position ;
rank: 24
score: 99.0074462890625
patch: return ~ position ; break ;
rank: 24
score: 99.00643581814236
patch: return super . parse ( bucket ) ;
rank: 24
score: 98.95197296142578
patch: } else { return ~ position ;
rank: 25
score: 99.154541015625
patch: return position . substring ( position + 1 ) ;
rank: 25
score: 99.10139295789931
patch: return ~ ( position - 1 ) ;
rank: 25
score: 99.08783513849431
patch: return this . parse ( text , position ) ;
rank: 25
score: 99.06991577148438
patch: return position + value . length ( ) ;
rank: 25
score: 99.03299560546876
patch: return position ~ text . length ( ) ;
rank: 25
score: 99.0241928100586
patch: else { return ~ ~ position ;
rank: 25
score: 99.00672743055556
patch: return ~ position ; return ~ 1 ;
rank: 25
score: 98.94840494791667
patch: return ~ ~ 1 ;
rank: 26
score: 99.14899236505681
patch: return ~ Date CaMeL Time CaMeL Parser . position ;
rank: 26
score: 99.06881103515624
patch: return - $NUMBER$ ;
rank: 26
score: 99.03092651367187
patch: return position > 0 ? position : position ;
rank: 26
score: 99.00434027777777
patch: return ~ position ; return - 1 ;
rank: 26
score: 99.0016202059659
patch: return super . parse CaMeL Into ( str ) ;
rank: 26
score: 98.94068739149306
patch: return ; , position , position ) ;
rank: 27
score: 99.0808614095052
patch: return - - 1 ;
rank: 27
score: 99.0112533569336
patch: return ; int ~ - position ;
rank: 27
score: 99.00599975585938
patch: return position > 0 ? position : 0 ;
rank: 27
score: 99.00233459472656
patch: return ~ position ; if position ;
rank: 27
score: 98.92837524414062
patch: return 1 ;
rank: 28
score: 99.13652886284723
patch: return ~ ( position + 1 ) ;
rank: 28
score: 99.07975630326705
patch: return this . parse CaMeL Into ( text ) ;
rank: 28
score: 99.0059585571289
patch: return position + position + 1 ;
rank: 28
score: 99.0023193359375
patch: else { return - 1 ;
rank: 28
score: 98.99860297309027
patch: return ~ position + ALL _ IDS ;
rank: 28
score: 98.99848090277777
patch: return ~ position ; throw ~ position ;
rank: 28
score: 98.92110188802083
patch: } return ~ position ;
rank: 29
score: 99.13560901988636
patch: return ~ text . length ( ) + 1 ;
rank: 29
score: 99.10173950195312
patch: return bucket . to CaMeL String ( ) ;
rank: 29
score: 99.091064453125
patch: return Integer . MAX _ VALUE ;
rank: 29
score: 99.07816162109376
patch: return * 0 ;
rank: 29
score: 99.00499725341797
patch: return position + $STRING$ + position ;
rank: 29
score: 99.00149536132812
patch: return - $STRING$ ;
rank: 29
score: 98.99843528053977
patch: return super . parse ( ALL _ IDS ) ;
rank: 29
score: 98.99649483816964
patch: return position ; ~ position ;
rank: 29
score: 98.91798400878906
patch: return ; , 0 , position ;
rank: 30
score: 99.08911743164063
patch: return Integer . parse CaMeL Int ( position ;
rank: 30
score: 98.99530029296875
patch: return ~ ~ position ; return position ;
rank: 30
score: 98.98671875
patch: return Math . max ( position , position ;
rank: 30
score: 98.91787719726562
patch: return ; , ~ $NUMBER$ ) ;
rank: 31
score: 99.13125610351562
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 31
score: 99.09413840553977
patch: return text . index CaMeL Of ( $STRING$ ) ;
rank: 31
score: 98.9933194247159
patch: return Math . length ( ALL _ IDS ) ;
rank: 31
score: 98.99302673339844
patch: return position ; return - 1 ;
rank: 31
score: 98.9874267578125
patch: return ; int ~ position ;
rank: 31
score: 98.91351318359375
patch: return * * * ~ position ;
rank: 32
score: 99.08034446022727
patch: return Integer . to CaMeL String ( position ) ;
rank: 32
score: 99.0411885579427
patch: return * ~ position ;
rank: 32
score: 98.99320220947266
patch: return ~ ~ position + position ;
rank: 32
score: 98.99276733398438
patch: return position ; ; return position ;
rank: 32
score: 98.98521205357143
patch: finally { return position ; }
rank: 32
score: 98.9756591796875
patch: return position ~ str . length ( ) ;
rank: 32
score: 98.91295623779297
patch: return ; , ~ position ) ;
rank: 33
score: 99.12809244791667
patch: return Date CaMeL Time CaMeL Parser CaMeL Bucket . 0 ;
rank: 33
score: 98.99285333806819
patch: return ~ text . to CaMeL String ( ) ;
rank: 33
score: 98.98710632324219
patch: return position ; if return position ;
rank: 33
score: 98.97059631347656
patch: return position + position + position ;
rank: 33
score: 98.90956624348958
patch: } return ~ 1 ;
rank: 34
score: 99.12646484375
patch: return ~ bucket . parse CaMeL Into ( text ) ;
rank: 34
score: 99.0484619140625
patch: return ~ position + value . length ( ) ;
rank: 34
score: 99.03586832682292
patch: return ~ ALL _ IDS + 0 ;
rank: 34
score: 98.98667907714844
patch: return position ; while ~ position ;
rank: 34
score: 98.97914341517857
patch: return ~ position ~ position ;
rank: 34
score: 98.96881781684027
patch: return position ? - 1 : position ;
rank: 34
score: 98.9051284790039
patch: } else { return ~ 1 ;
rank: 35
score: 99.1235860188802
patch: return ~ position . index CaMeL Of ( $STRING$ ) ;
rank: 35
score: 99.0843838778409
patch: return ~ position + str . length ( ) ;
rank: 35
score: 98.97818603515626
patch: return position position ;
rank: 35
score: 98.96090698242188
patch: return position / $NUMBER$ ;
rank: 35
score: 98.90495954241071
patch: throw new Runtime CaMeL Exception ;
rank: 36
score: 99.11189778645833
patch: return position . to CaMeL Date CaMeL Time ( ) ;
rank: 36
score: 99.0829345703125
patch: return text . length ( ) + position ;
rank: 36
score: 99.0532559481534
patch: return ~ ( Integer . MAX _ VALUE ) ;
rank: 36
score: 99.03511352539063
patch: return position + ALL _ IDS . length ;
rank: 36
score: 98.98225233289931
patch: return position ; else if ~ position ;
rank: 36
score: 98.9600341796875
patch: return position - name . length ( ) ;
rank: 36
score: 98.90253363715277
patch: return ; , position , ~ 1 ;
rank: 37
score: 99.07905883789063
patch: return position + length . length ( ) ;
rank: 37
score: 99.04774305555556
patch: return ~ ( position - position ) ;
rank: 37
score: 99.0454330444336
patch: return long . length ( ) ;
rank: 37
score: 98.98109266493056
patch: return ~ position ; while ~ position ;
rank: 37
score: 98.97695922851562
patch: return ; int ~ - 1 ;
rank: 37
score: 98.9670166015625
patch: return time . to CaMeL String ( ) ;
rank: 37
score: 98.89918348524306
patch: return ; . position ( position ) ;
rank: 38
score: 99.07904730902777
patch: return position . substring ( position ) ;
rank: 38
score: 99.0437899502841
patch: return get CaMeL Zone ( bucket , text ) ;
rank: 38
score: 98.97238498263889
patch: return position ; if return ~ position ;
rank: 38
score: 98.93133544921875
patch: return position * $NUMBER$ ;
rank: 39
score: 98.97097439236111
patch: return ~ 1 ; if ~ 1 ;
rank: 39
score: 98.95905095880681
patch: return to CaMeL String ( ALL _ IDS ) ;
rank: 39
score: 98.92596435546875
patch: return position + str . trim ( ) ;
rank: 39
score: 98.89618791852679
patch: return * * ~ position ;
rank: 40
score: 99.08648681640625
patch: return position ? ALL _ IDS : position ;
rank: 40
score: 99.05942604758523
patch: return text . substring ( position - position ) ;
rank: 40
score: 99.03667449951172
patch: return int . length ( ) ;
rank: 40
score: 99.02479248046875
patch: return ~ ~ ALL _ IDS . length ;
rank: 40
score: 98.96885172526042
patch: return ~ position ; return return position ;
rank: 40
score: 98.95831298828125
patch: return out . to CaMeL String ( ) ;
rank: 40
score: 98.93445696149554
patch: else { return ~ 1 ;
rank: 40
score: 98.91399468315973
patch: return compare CaMeL To ( position ) ;
rank: 40
score: 98.89354112413194
patch: throw new Illegal CaMeL Argument CaMeL Exception ;
rank: 41
score: 99.08648126775569
patch: return ~ position ? ALL _ IDS : position ;
rank: 41
score: 99.05877075195312
patch: return position + bucket . length ( ) ;
rank: 41
score: 99.03492320667614
patch: return * 0 + text . length ( ) ;
rank: 41
score: 99.02362060546875
patch: return position + 0 . length ( ) ;
rank: 41
score: 98.96856689453125
patch: return ~ position ; ~ position ;
rank: 41
score: 98.95486886160714
patch: return ~ position ; } }
rank: 41
score: 98.93351745605469
patch: try { return ~ ~ position ;
rank: 41
score: 98.90948486328125
patch: return Integer . parse CaMeL Int ( str ;
rank: 41
score: 98.89154815673828
patch: return ; , position , 0 ;
rank: 42
score: 99.08441716974431
patch: return position ? ~ ALL _ IDS : position ;
rank: 42
score: 99.0544100674716
patch: return position + text . substring ( position ) ;
rank: 42
score: 98.96247694227431
patch: return ~ 1 ; if ~ position ;
rank: 42
score: 98.93349202473958
patch: return ; int position = ~ position ;
rank: 42
score: 98.90531005859376
patch: return position >= 0 ? position : position ;
rank: 42
score: 98.88657052176339
patch: else { return 0 ; }
rank: 43
score: 99.05305619673295
patch: return text . substring ( position - 1 ) ;
rank: 43
score: 99.01713053385417
patch: return ~ ALL _ IDS : position ;
rank: 43
score: 99.01369406960227
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ;
rank: 43
score: 98.96157836914062
patch: return ~ position ; if return ~ position ;
rank: 43
score: 98.9495340983073
patch: return / - 1 ;
rank: 43
score: 98.93240356445312
patch: return ; int ~ ~ position ;
rank: 43
score: 98.87894015842014
patch: return ; , position ( position position ;
rank: 44
score: 99.027197265625
patch: return this . position . length ( ) ;
rank: 44
score: 99.00931396484376
patch: return ~ ~ ALL _ IDS + position ;
rank: 44
score: 98.96128336588542
patch: return ~ - 1 ; return position ;
rank: 44
score: 98.94225202287946
patch: return else return ~ position ;
rank: 44
score: 98.92898898654514
patch: return position ; try { return position ;
rank: 44
score: 98.8969482421875
patch: return position >= 0 ? position : 0 ;
rank: 44
score: 98.87613254123264
patch: } else { if ; return position ;
rank: 45
score: 99.08095481178977
patch: return ~ ALL _ IDS ? position : 0 ;
rank: 45
score: 99.04560089111328
patch: return position . position ( ) ;
rank: 45
score: 99.026611328125
patch: return get CaMeL Name ( text , position ) ;
rank: 45
score: 99.00836736505681
patch: return Integer . parse CaMeL Int ( start ) ;
rank: 45
score: 98.95778111049107
patch: ~ position ; return position ;
rank: 45
score: 98.91897147042411
patch: else { return - position ;
rank: 45
score: 98.89649454752605
patch: return position ~ 1 ;
rank: 45
score: 98.87580023871527
patch: else { if ; return 0 ; }
rank: 46
score: 99.02261013454861
patch: return - $STRING$ . length ( ) ;
rank: 46
score: 99.00539328835227
patch: throw new Illegal CaMeL Argument CaMeL Exception ( ) ;
rank: 46
score: 98.95537109375
patch: return ~ position ; break ; return position ;
rank: 46
score: 98.93833705357143
patch: return ~ position : position ;
rank: 46
score: 98.91372244698661
patch: / else { return position ;
rank: 46
score: 98.89613560267857
patch: return - 1 ~ position ;
rank: 46
score: 98.87514241536458
patch: return position ? ~ 1 : position ;
rank: 47
score: 99.03589976917614
patch: return ( Date CaMeL Time CaMeL Zone ) position ;
rank: 47
score: 99.02146218039773
patch: return ( int ) position . length ( ) ;
rank: 47
score: 99.00325317382813
patch: return ALL _ IDS . length ( ) ;
rank: 47
score: 98.95402696397569
patch: return return position ; if ~ position ;
rank: 47
score: 98.93806596235795
patch: return long CaMeL Value ( ALL _ IDS ) ;
rank: 47
score: 98.91197204589844
patch: return ; int ~ - 0 ;
rank: 47
score: 98.89543151855469
patch: return position ? position : 1 ;
rank: 47
score: 98.87390814887152
patch: return * * * ~ ~ position ;
rank: 48
score: 99.07354736328125
patch: return position + ALL _ IDS . length ( ) ;
rank: 48
score: 99.03532270951705
patch: else { return position . length ( ) ; }
rank: 48
score: 99.01182972301136
patch: return get CaMeL Value ( text , position ) ;
rank: 48
score: 98.9959716796875
patch: return - ~ position ;
rank: 48
score: 98.95352935791016
patch: return position ; return - position ;
rank: 48
score: 98.93146306818181
patch: return super . text . substring ( position ) ;
rank: 48
score: 98.89042663574219
patch: return position * $NUMBER$ + position ;
rank: 48
score: 98.87358262803819
patch: return ; , 0 , ~ $NUMBER$ ;
rank: 49
score: 99.0318270596591
patch: return position + Integer . length ( position ) ;
rank: 49
score: 99.01171875
patch: return this . ALL _ IDS ;
rank: 49
score: 99.00055541992188
patch: return ALL _ IDS . size ( ) ;
rank: 49
score: 98.99471435546874
patch: return position - text . trim ( ) ;
rank: 49
score: 98.95296478271484
patch: return - 1 ; return position ;
rank: 49
score: 98.9296542080966
patch: return parse CaMeL Into ( ALL _ IDS ) ;
rank: 49
score: 98.91008165147569
patch: return position ; return ~ ~ position ;
rank: 49
score: 98.87166595458984
patch: return ; , position position ) ;
rank: 50
score: 99.0675048828125
patch: return ~ position ? position : position ;
rank: 50
score: 99.03105024857955
patch: return position + - position . length ( ) ;
rank: 50
score: 99.01073109019886
patch: return ~ position + 0 . length ( ) ;
rank: 50
score: 98.99423556857639
patch: return super . position ( position ) ;
rank: 50
score: 98.95280456542969
patch: return position ; ~ - 1 ;
rank: 50
score: 98.92938910590277
patch: return super . parse ( text ) ;
rank: 50
score: 98.9057373046875
patch: else return position ;
rank: 50
score: 98.88151245117187
patch: return position + hash CaMeL Code ( ) ;
rank: 50
score: 98.8705062866211
patch: return ; , ~ - 1 ;
rank: 51
score: 99.06746826171874
patch: return ALL _ IDS ? position : 0 ;
rank: 51
score: 99.00770152698864
patch: return this . ~ position . length ( ) ;
rank: 51
score: 98.99596489800348
patch: return ~ str . length ( ) ;
rank: 51
score: 98.99290161132812
patch: return position + text . trim ( ) ;
rank: 51
score: 98.95261637369792
patch: return position ; } if ~ 1 ;
rank: 51
score: 98.92696804470486
patch: return ~ position . position ( ) ;
rank: 51
score: 98.87039523654514
patch: / * * * / return position ;
rank: 52
score: 99.02686157226563
patch: return ALL _ IDS + ALL _ IDS ;
rank: 52
score: 98.95047336154514
patch: return ~ position ; return position ; }
rank: 52
score: 98.90375518798828
patch: / else { return ~ position ;
rank: 52
score: 98.86984252929688
patch: return position == 0 ? position : 0 ;
rank: 52
score: 98.86793518066406
patch: return ; , position , position ;
rank: 53
score: 99.0595194498698
patch: return ALL _ IDS + position . length ( ) ;
rank: 53
score: 99.02617797851562
patch: else { return text . length ( ) ;
rank: 53
score: 99.00689086914062
patch: parse CaMeL Into ( text , position ) ;
rank: 53
score: 98.99013449928977
patch: return position - text . substring ( position ) ;
rank: 53
score: 98.98684692382812
patch: throw new IO CaMeL Exception ( $STRING$ ) ;
rank: 53
score: 98.94949001736111
patch: return position ; return position ; break ;
rank: 53
score: 98.92532687717014
patch: return ~ position : ALL _ IDS ;
rank: 53
score: 98.89898681640625
patch: return 0 ; return position ;
rank: 53
score: 98.86939348493304
patch: return position position + 1 ;
rank: 53
score: 98.86696370442708
patch: return position * 0 ;
rank: 54
score: 99.05905490451389
patch: return position ? ~ position : 0 ;
rank: 54
score: 99.02492453835227
patch: else { return ~ position . length ( ) ;
rank: 54
score: 99.00485229492188
patch: return - - 0 ;
rank: 54
score: 98.947509765625
patch: return position ; } if ~ position ;
rank: 54
score: 98.89824567522321
patch: else { return - $STRING$ ;
rank: 54
score: 98.86841583251953
patch: return position . trim ( ) ;
rank: 54
score: 98.86669921875
patch: return position - 0 ;
rank: 55
score: 99.0582275390625
patch: return text . length ( ) + 1 ;
rank: 55
score: 99.0247469815341
patch: return position + ~ text . length ( ) ;
rank: 55
score: 99.0044833096591
patch: return str . substring ( 0 , position ) ;
rank: 55
score: 98.98915793678977
patch: return Math . max ( start , position ) ;
rank: 55
score: 98.8672119140625
patch: return Math . min ( position , position ;
rank: 55
score: 98.86648898654514
patch: return ; , 0 , ~ position ;
rank: 56
score: 99.05775035511364
patch: return position ? ~ position : ALL _ IDS ;
rank: 56
score: 99.02472478693181
patch: return position + - text . length ( ) ;
rank: 56
score: 99.00321821732955
patch: return parse CaMeL Into ( str , position ) ;
rank: 56
score: 98.9870849609375
patch: return Integer . value CaMeL Of ( position ;
rank: 56
score: 98.94408501519098
patch: return ~ position ; return - position ;
rank: 56
score: 98.91976318359374
patch: return * position ;
rank: 56
score: 98.89518907335069
patch: return ; int ~ position - position ;
rank: 56
score: 98.86568603515624
patch: return Long . value CaMeL Of ( position ;
rank: 56
score: 98.86537000868056
patch: return ; , 0 , 0 ) ;
rank: 57
score: 99.05381081321023
patch: return ~ text . length ( ) + 0 ;
rank: 57
score: 99.02466430664063
patch: else { return position . length ( ) ;
rank: 57
score: 99.00171508789063
patch: return Integer . length . length ( ) ;
rank: 57
score: 98.982080078125
patch: return position + 1 . length ( ) ;
rank: 57
score: 98.94190131293402
patch: return ~ 1 ; if return position ;
rank: 57
score: 98.91903250558036
patch: return ~ position - position ;
rank: 57
score: 98.89335123697917
patch: return ; int ~ - - 1 ;
rank: 57
score: 98.86550903320312
patch: return position + name . trim ( ) ;
rank: 57
score: 98.86249457465277
patch: return ~ 1 ; return ~ 1 ;
rank: 58
score: 99.05374145507812
patch: return ALL _ IDS ? position : ALL _ IDS ;
rank: 58
score: 99.0210293856534
patch: return str . substring ( position + 1 ) ;
rank: 58
score: 99.00054376775569
patch: return text . substring ( 1 , position ) ;
rank: 58
score: 98.9851318359375
patch: return Integer . parse CaMeL Int ( text ;
rank: 58
score: 98.98095092773437
patch: return * ~ position . length ( ) ;
rank: 58
score: 98.91648864746094
patch: return to CaMeL String ( ) ;
rank: 58
score: 98.86538696289062
patch: if ( position == 0 ) return position ;
rank: 59
score: 99.05259011008523
patch: return position . substring ( position - 1 ) ;
rank: 59
score: 99.01973724365234
patch: return position . size ( ) ;
rank: 59
score: 98.999755859375
patch: return this . ALL _ IDS . length ;
rank: 59
score: 98.93263075086806
patch: return position ; if ; return position ;
rank: 59
score: 98.91357421875
patch: return ~ position + 0 ;
rank: 59
score: 98.86258273654514
patch: return position & 0 x $NUMBER$ f ;
rank: 59
score: 98.85517229352679
patch: return * * * position ;
rank: 60
score: 99.05252075195312
patch: return position ? position : position . length ( ) ;
rank: 60
score: 99.01678466796875
patch: return ( position + position ) ;
rank: 60
score: 98.9967928799716
patch: return * 0 + str . length ( ) ;
rank: 60
score: 98.98041326349431
patch: throw new Illegal CaMeL Argument CaMeL Exception ( position ;
rank: 60
score: 98.98040771484375
patch: return ( position + ALL _ IDS ) ;
rank: 60
score: 98.92392578125
patch: return ~ position ; if ~ - 1 ;
rank: 60
score: 98.91212768554688
patch: return ~ position . substring ( position ) ;
rank: 60
score: 98.88597276475694
patch: else { return ~ position + position ;
rank: 60
score: 98.86149088541667
patch: return Math . max ( position ) ;
rank: 60
score: 98.85106065538194
patch: } else { if ; return 0 ;
rank: 61
score: 99.05237833658855
patch: return ~ ALL _ IDS : ~ ALL _ IDS ;
rank: 61
score: 99.0143155184659
patch: else { return ~ text . length ( ) ;
rank: 61
score: 98.99560546875
patch: return ~ position + 1 . length ( ) ;
rank: 61
score: 98.97659912109376
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( ;
rank: 61
score: 98.97475857204861
patch: return ~ ALL _ IDS ? position ;
rank: 61
score: 98.88590494791667
patch: return ~ position position ;
rank: 61
score: 98.86028374565973
patch: return super . append ( position ) ;
rank: 61
score: 98.84765625
patch: return ; . return - 1 ;
rank: 62
score: 99.0507568359375
patch: return position . length ( ) + 0 ;
rank: 62
score: 98.9937744140625
patch: return Integer . to CaMeL String ( text ) ;
rank: 62
score: 98.97568581321023
patch: return Math . max ( ~ 1 , position ;
rank: 62
score: 98.91486273871527
patch: return ~ 1 ; } return position ;
rank: 62
score: 98.90906871448864
patch: String str = text . substring ( position ) ;
rank: 62
score: 98.88044956752232
patch: return return ~ return position ;
rank: 62
score: 98.84720284598214
patch: return ; . return position ;
rank: 63
score: 98.97553168402777
patch: return ~ ( position * position ) ;
rank: 63
score: 98.91360134548611
patch: return return position ; return ~ position ;
rank: 63
score: 98.90732643821023
patch: return text . substring ( ALL _ IDS ) ;
rank: 63
score: 98.87874058314732
patch: finally { return ~ position ;
rank: 63
score: 98.85347493489583
patch: return position ? - 1 : 0 ;
rank: 63
score: 98.8448486328125
patch: return position ? ~ 1 : 0 ;
rank: 64
score: 99.0459696451823
patch: return ~ bucket . parse CaMeL Into ( position ) ;
rank: 64
score: 98.97404341264205
patch: return - position + text . length ( ) ;
rank: 64
score: 98.912353515625
patch: return position ; ; return ~ position ;
rank: 64
score: 98.90346457741477
patch: return Math . to CaMeL String ( position ) ;
rank: 64
score: 98.87505425347223
patch: return return 1 ; return - position ;
rank: 64
score: 98.85233306884766
patch: return position - position + 1 ;
rank: 64
score: 98.84367152622768
patch: return ; . ~ position ;
rank: 65
score: 99.04590861002605
patch: return Date CaMeL Time CaMeL Parser CaMeL Bucket . bucket ;
rank: 65
score: 98.98808149857955
patch: return ~ position + Integer . length ( ) ;
rank: 65
score: 98.97328404017857
patch: return ~ position - 1 ;
rank: 65
score: 98.91063096788194
patch: return ~ position ; for ~ position ;
rank: 65
score: 98.90340169270833
patch: return long CaMeL Value ( position ) ;
rank: 65
score: 98.8472900390625
patch: return - 1 + position ;
rank: 66
score: 99.04579856178977
patch: return ~ position . length ( ) + 0 ;
rank: 66
score: 98.9724454012784
patch: return Math . max ( ~ position , position ;
rank: 66
score: 98.96099853515625
patch: else { return ~ ALL _ IDS ;
rank: 66
score: 98.91023763020833
patch: return position ; return position + position ;
rank: 66
score: 98.9024658203125
patch: return start . to CaMeL String ( ) ;
rank: 66
score: 98.8734130859375
patch: return position ; return - 0 ;
rank: 66
score: 98.84651692708333
patch: return position + $STRING$ ;
rank: 66
score: 98.83559841579861
patch: return * * * * ~ position ;
rank: 67
score: 99.04463704427083
patch: return ALL _ IDS . to CaMeL String ( ) ;
rank: 67
score: 98.99907769097223
patch: return str . substring ( position ) ;
rank: 67
score: 98.9870272549716
patch: return ALL _ IDS . get ( text ) ;
rank: 67
score: 98.97058783637152
patch: return ~ ( position * $NUMBER$ ) ;
rank: 67
score: 98.9578369140625
patch: return text . substring ( position 1 ) ;
rank: 67
score: 98.9080581665039
patch: return ~ position ; throw position ;
rank: 67
score: 98.86988176618304
patch: return finally { return position ;
rank: 67
score: 98.84638671875
patch: return position - hash CaMeL Code ( ) ;
rank: 67
score: 98.83481174045139
patch: return ; , position , - 1 ;
rank: 68
score: 99.04294259207589
patch: return position + - 1 ;
rank: 68
score: 98.98614501953125
patch: return text . position ( ) ;
rank: 68
score: 98.98586203835227
patch: return ( String ) position . length ( ) ;
rank: 68
score: 98.90511067708333
patch: return position ; if ~ - 1 ;
rank: 68
score: 98.88926003196023
patch: return ~ position . get CaMeL Type ( ) ;
rank: 68
score: 98.86865912543402
patch: return position ; return - - position ;
rank: 68
score: 98.84007568359375
patch: return position == position ? position : position ;
rank: 68
score: 98.83247884114583
patch: return ; , 0 , position position ;
rank: 69
score: 99.04189724392361
patch: return ~ position ? position : 1 ;
rank: 69
score: 98.985595703125
patch: return * 0 . 0 ? 0 : 0 ;
rank: 69
score: 98.96565385298295
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( position ;
rank: 69
score: 98.95390014648437
patch: String str = text . length ( ) ;
rank: 69
score: 98.90436553955078
patch: return position ; return return position ;
rank: 69
score: 98.88850620814732
patch: return * position + position ;
rank: 69
score: 98.866943359375
patch: return position ; ;
rank: 69
score: 98.84002075195312
patch: return position - str . trim ( ) ;
rank: 70
score: 99.03855387369792
patch: return position ? position : ALL _ IDS . length ;
rank: 70
score: 98.97964477539062
patch: return in . to CaMeL String ( ) ;
rank: 70
score: 98.96469948508523
patch: return ~ Math . max ( position , position ;
rank: 70
score: 98.95231628417969
patch: return ( position + 1 ) ;
rank: 70
score: 98.90430450439453
patch: return position ; if ~ 1 ;
rank: 70
score: 98.8854092684659
patch: return ~ position . get CaMeL Value ( ) ;
rank: 70
score: 98.83856201171875
patch: else { return - 1 ; }
rank: 70
score: 98.82929229736328
patch: } else { return 0 ; }
rank: 71
score: 99.03822631835938
patch: return position . length ( ) : 0 ;
rank: 71
score: 98.97919311523438
patch: return return text . substring ( position ) ;
rank: 71
score: 98.95078735351562
patch: return ~ ~ ( ALL _ IDS ) ;
rank: 71
score: 98.89896647135417
patch: return position ; } if return position ;
rank: 71
score: 98.88429260253906
patch: return ~ position + position ; }
rank: 71
score: 98.86591339111328
patch: return ; int position = position ;
rank: 71
score: 98.8379618326823
patch: return position - start ;
rank: 71
score: 98.82797677176339
patch: return position + ~ 1 ;
rank: 72
score: 98.9791259765625
patch: return ~ ALL _ IDS . length ( ) ;
rank: 72
score: 98.975830078125
patch: return position + ALL _ IDS + position ;
rank: 72
score: 98.94997829861111
patch: return ~ ( position + position ) ;
rank: 72
score: 98.89707438151042
patch: return ~ position ; for ~ 1 ;
rank: 72
score: 98.86515045166016
patch: return position ; return - $STRING$ ;
rank: 72
score: 98.83765869140625
patch: return Math . max ( 0 , position ;
rank: 72
score: 98.82725524902344
patch: return * * ~ ~ position ;
rank: 73
score: 99.03688557942708
patch: return ~ ( position + 0 ) ;
rank: 73
score: 98.97687377929688
patch: return return ~ position . length ( ) ;
rank: 73
score: 98.960693359375
patch: return ~ Integer . MAX _ VALUE ;
rank: 73
score: 98.94847954644098
patch: return ~ ~ ALL _ IDS ) ;
rank: 73
score: 98.89678276909723
patch: return return position ; if ~ 1 ;
rank: 73
score: 98.88380432128906
patch: return else { return ~ position ;
rank: 73
score: 98.82630750868056
patch: return ; , 0 , - 1 ;
rank: 74
score: 98.97466362847223
patch: return > 0 ? position : 0 ;
rank: 74
score: 98.9659423828125
patch: return ALL _ IDS : ALL _ IDS ;
rank: 74
score: 98.9433822631836
patch: return ALL _ IDS . length ;
rank: 74
score: 98.89592827690973
patch: return ~ ~ 1 ; return position ;
rank: 74
score: 98.8646748860677
patch: finally { return position ;
rank: 74
score: 98.8357421875
patch: return Boolean . value CaMeL Of ( position ;
rank: 74
score: 98.82437569754464
patch: return ~ 1 + position ;
rank: 75
score: 99.03526722301136
patch: return ~ ALL _ IDS : ALL _ IDS ;
rank: 75
score: 98.97461809430804
patch: return this . ~ position ;
rank: 75
score: 98.9549560546875
patch: return Math . min ( 0 , position ) ;
rank: 75
score: 98.94146118164062
patch: else { return ~ ALL _ IDS ; }
rank: 75
score: 98.89533148871527
patch: return position ; return - - 1 ;
rank: 75
score: 98.87729220920139
patch: return ~ bucket . length ( ) ;
rank: 75
score: 98.82398223876953
patch: return ; , 0 , 0 ;
rank: 76
score: 99.032958984375
patch: return $NUMBER$ + text . length ( ) ;
rank: 76
score: 98.9742431640625
patch: return get CaMeL Id ( text , position ) ;
rank: 76
score: 98.96286010742188
patch: return position + max . length ( ) ;
rank: 76
score: 98.95064697265624
patch: return ~ ~ Integer . MAX _ VALUE ;
rank: 76
score: 98.94012451171875
patch: return ~ ~ ~ ~ ALL _ IDS ;
rank: 76
score: 98.89387342664931
patch: return ~ position ; ; return position ;
rank: 76
score: 98.85882568359375
patch: return return ~ 0 ;
rank: 76
score: 98.82341766357422
patch: } else { return position position ;
rank: 77
score: 98.97203911675348
patch: return >= 0 ? position : 0 ;
rank: 77
score: 98.94008178710938
patch: return ~ ( text . length ( ) ;
rank: 77
score: 98.89232042100694
patch: return position ; else return ~ position ;
rank: 77
score: 98.8740234375
patch: return super . parse ( str , position ) ;
rank: 77
score: 98.85800170898438
patch: } return - $STRING$ ;
rank: 77
score: 98.82822875976562
patch: return position + $STRING$ + position + $STRING$ ;
rank: 77
score: 98.822998046875
patch: return ; . return ~ position ;
rank: 78
score: 98.96952819824219
patch: return Integer . size ( ) ;
rank: 78
score: 98.95833333333333
patch: return Integer . length ( position ) ;
rank: 78
score: 98.94617808948864
patch: return Integer . parse CaMeL Int ( name ) ;
rank: 78
score: 98.9384521484375
patch: return ( position - ALL _ IDS ) ;
rank: 78
score: 98.89149169921875
patch: return ~ position ; if ; return position ;
rank: 78
score: 98.8713134765625
patch: return super . parse CaMeL Into ( ) ;
rank: 78
score: 98.85786946614583
patch: return return position ; return - position ;
rank: 78
score: 98.81790924072266
patch: return * * * * position ;
rank: 79
score: 99.02960205078125
patch: return text . length ( ) . length ( ) ;
rank: 79
score: 98.96833939985795
patch: return ( text . substring ( position ) ) ;
rank: 79
score: 98.95801459418402
patch: return Long . length ( position ) ;
rank: 79
score: 98.93863351004464
patch: return - position - 1 ;
rank: 79
score: 98.93386840820312
patch: } return ~ text . length ( ) ;
rank: 79
score: 98.85516357421875
patch: return - 1 ; return - position ;
rank: 79
score: 98.82684326171875
patch: return position position - 1 ;
rank: 79
score: 98.81658935546875
patch: return ; , ~ position position ) ;
rank: 80
score: 99.0286356608073
patch: return position + 0 . to CaMeL String ( ) ;
rank: 80
score: 98.93604736328125
patch: return position - Integer . MAX _ VALUE ;
rank: 80
score: 98.9335205078125
patch: return * ~ ALL _ IDS . length ;
rank: 80
score: 98.88597869873047
patch: return position ; for ~ position ;
rank: 80
score: 98.86751302083333
patch: return ~ position . size ( ) ;
rank: 80
score: 98.85506184895833
patch: return position ; return - - 0 ;
rank: 80
score: 98.81618923611111
patch: return * * * return ~ position ;
rank: 81
score: 99.02716619318181
patch: return - 1 + text . length ( ) ;
rank: 81
score: 98.9646708170573
patch: return * - 1 ;
rank: 81
score: 98.93349609375
patch: return ALL _ IDS ~ ALL _ IDS ;
rank: 81
score: 98.88360595703125
patch: return position ; return ~ 1 ;
rank: 81
score: 98.86478000217014
patch: return super . parse ( position ) ;
rank: 81
score: 98.85435994466145
patch: return ~ return position ;
rank: 81
score: 98.82180447048611
patch: try { return position ; } catch ;
rank: 82
score: 98.954296875
patch: return position + start . length ( ) ;
rank: 82
score: 98.92573852539063
patch: return position . int CaMeL Value ( ) ;
rank: 82
score: 98.88237847222223
patch: return position position ; return ~ position ;
rank: 82
score: 98.85398356119792
patch: return ; int ~ position + position ;
rank: 82
score: 98.81929931640624
patch: return position == 1 ? position : position ;
rank: 82
score: 98.81386311848958
patch: return ; , position ;
rank: 83
score: 98.95378112792969
patch: return $NUMBER$ ;
rank: 83
score: 98.92411973741319
patch: return / * ~ ALL _ IDS ;
rank: 83
score: 98.8785629272461
patch: return - position ; return position ;
rank: 83
score: 98.85783555772569
patch: return ~ position + position + position ;
rank: 83
score: 98.85298919677734
patch: return return 1 ; return position ;
rank: 83
score: 98.81831665039063
patch: return position ? position : position - 1 ;
rank: 83
score: 98.81294080946181
patch: return ; . position ( 0 ) ;
rank: 84
score: 98.96182686941964
patch: return . length ( ) ;
rank: 84
score: 98.95341491699219
patch: return ALL _ IDS + position ;
rank: 84
score: 98.923828125
patch: return * ~ ~ ALL _ IDS ;
rank: 84
score: 98.87609185112848
patch: return position + 0 ; return position ;
rank: 84
score: 98.8554931640625
patch: return ~ position . length ( ) ; }
rank: 84
score: 98.81793212890625
patch: else { return position ~ position ; }
rank: 84
score: 98.80973815917969
patch: else { return ~ 1 ; }
rank: 85
score: 99.02461381392045
patch: return ALL _ IDS . append ( text ) ;
rank: 85
score: 98.95454545454545
patch: return position . substring ( 0 , position ) ;
rank: 85
score: 98.92459106445312
patch: return position - Long . MAX _ VALUE ;
rank: 85
score: 98.87592163085938
patch: return position ; if position ; return position ;
rank: 85
score: 98.85255015980114
patch: return Date CaMeL Time CaMeL Parser . ~ position ;
rank: 85
score: 98.84933132595486
patch: return ; int ~ - - position ;
rank: 85
score: 98.80946350097656
patch: } else { if return position ;
rank: 86
score: 98.95067749023437
patch: return text . length ( ) + 0 ;
rank: 86
score: 98.94788818359375
patch: finally { return text . length ( ) ;
rank: 86
score: 98.92399088541667
patch: return position + text . length ( ;
rank: 86
score: 98.8756103515625
patch: return position position ; if ~ position ;
rank: 86
score: 98.851318359375
patch: return Integer . to CaMeL String ( str ) ;
rank: 86
score: 98.81673583984374
patch: return position <= 0 ? position : position ;
rank: 86
score: 98.80829535590277
patch: return ; , position , 0 position ;
rank: 87
score: 99.02354939778645
patch: return ALL _ IDS + str . length ( ) ;
rank: 87
score: 98.94921875
patch: return this . position . substring ( position ) ;
rank: 87
score: 98.94713745117187
patch: return position . length ( ) + position ;
rank: 87
score: 98.92320556640625
patch: throw new Illegal CaMeL Argument CaMeL Exception ( ;
rank: 87
score: 98.87491861979167
patch: return position ; break ; return position ;
rank: 87
score: 98.85019938151042
patch: return super . parse ( str ) ;
rank: 87
score: 98.84497748480902
patch: else { return ~ ~ ~ position ;
rank: 87
score: 98.81444091796875
patch: return position ? - 1 : - 1 ;
rank: 87
score: 98.80718315972223
patch: return ; , position ( ~ 1 ;
rank: 88
score: 98.94921875
patch: return str . substring ( position , position ) ;
rank: 88
score: 98.9222412109375
patch: else { return ~ position ; }
rank: 88
score: 98.91773986816406
patch: return position + ( position ) ;
rank: 88
score: 98.87432098388672
patch: return position ; position return position ;
rank: 88
score: 98.8498291015625
patch: return append . to CaMeL String ( ) ;
rank: 88
score: 98.81342230902777
patch: else { return position - 1 ; }
rank: 88
score: 98.80643039279514
patch: / * * * * * * /
rank: 89
score: 98.94828657670455
patch: return get CaMeL Zone ( bucket , position ) ;
rank: 89
score: 98.920068359375
patch: return text . length ( ) - position ;
rank: 89
score: 98.87382676866319
patch: return return ~ position ; return position ;
rank: 89
score: 98.84764268663194
patch: return ~ text . trim ( ) ;
rank: 89
score: 98.84065755208333
patch: else { return position ; return position ;
rank: 89
score: 98.81258544921874
patch: return position > 0 ? position : 1 ;
rank: 89
score: 98.80201212565105
patch: return position * position ;
rank: 90
score: 99.02222789417614
patch: return - $NUMBER$ + text . length ( ) ;
rank: 90
score: 98.94721984863281
patch: return ~ ~ position + 1 ;
rank: 90
score: 98.87246365017361
patch: return ~ 1 ; else return position ;
rank: 90
score: 98.84014129638672
patch: return return - - - 1 ;
rank: 90
score: 98.79820905412946
patch: return ; . ~ $NUMBER$ ;
rank: 91
score: 98.94698333740234
patch: return this . position + 1 ;
rank: 91
score: 98.86988525390625
patch: return ~ position + position ; return position ;
rank: 91
score: 98.839599609375
patch: return return $STRING$ ;
rank: 91
score: 98.81233723958333
patch: else { return position + position ; }
rank: 91
score: 98.79794650607639
patch: if ( ~ 0 == position position ;
rank: 92
score: 99.0175272623698
patch: return position + $NUMBER$ ;
rank: 92
score: 98.94688110351562
patch: text = text . substring ( position ) ;
rank: 92
score: 98.91405029296875
patch: return ~ ALL _ IDS : - 1 ;
rank: 92
score: 98.91252305772569
patch: return ~ ( position / $NUMBER$ ) ;
rank: 92
score: 98.86633978949652
patch: return position ; for ~ - 1 ;
rank: 92
score: 98.84308539496527
patch: return * position . length ( ) ;
rank: 92
score: 98.83951144748264
patch: try { return ~ ~ ~ position ;
rank: 92
score: 98.8122314453125
patch: return position < 0 ? position : position ;
rank: 92
score: 98.7967529296875
patch: return ; . ~ 1 ;
rank: 93
score: 98.91263427734376
patch: return text . char CaMeL Value ( ) ;
rank: 93
score: 98.86381700303819
patch: return ~ position ; final return position ;
rank: 93
score: 98.79670061383929
patch: return position - ~ 1 ;
rank: 94
score: 99.0155362215909
patch: return ~ ALL _ IDS + ALL _ IDS ;
rank: 94
score: 98.93419731987848
patch: return + position . length ( ) ;
rank: 94
score: 98.90943603515625
patch: return - ~ Integer . MAX _ VALUE ;
rank: 94
score: 98.86307101779514
patch: return position ~ position ; return position ;
rank: 94
score: 98.83495076497395
patch: else return ~ position ;
rank: 94
score: 98.80973815917969
patch: return position ~ position + 1 ;
rank: 94
score: 98.79659598214286
patch: return ; , position ) ;
rank: 95
score: 99.0147196451823
patch: return position + 1 . to CaMeL String ( ) ;
rank: 95
score: 98.9428378018466
patch: return text . substring ( position , length ) ;
rank: 95
score: 98.91146511501736
patch: return parse CaMeL Into ( bucket ) ;
rank: 95
score: 98.86241997612848
patch: return position ; } return ~ 1 ;
rank: 95
score: 98.8421630859375
patch: return ~ position + false ;
rank: 95
score: 98.80961100260417
patch: return position * 1 ;
rank: 95
score: 98.7955322265625
patch: else { if ; return position ; }
rank: 96
score: 98.94281005859375
patch: return max . length ( ) ;
rank: 96
score: 98.92828979492188
patch: return text . substring ( position + ) ;
rank: 96
score: 98.86166720920139
patch: return position ; else if ~ 1 ;
rank: 96
score: 98.84191216362848
patch: return ~ this . ALL _ IDS ;
rank: 96
score: 98.83395724826389
patch: try { return ~ return ~ position ;
rank: 96
score: 98.80795288085938
patch: return Long . parse CaMeL Long ( position ;
rank: 96
score: 98.7953109741211
patch: return position ? 0 : position ;
rank: 97
score: 98.94227183948864
patch: return out . substring ( position , position ) ;
rank: 97
score: 98.90962727864583
patch: return ~ text . size ( ) ;
rank: 97
score: 98.90175374348958
patch: if ( position == - 1 ) {
rank: 97
score: 98.85912407769098
patch: return position ; ; if ~ position ;
rank: 97
score: 98.83366394042969
patch: return position ; return - $NUMBER$ ;
rank: 97
score: 98.80724487304687
patch: return text . length ( ) - 1 ;
rank: 97
score: 98.79424370659723
patch: } else { return ~ position ; }
rank: 98
score: 99.01251220703125
patch: return ~ ~ Date CaMeL Time CaMeL Parser . position ;
rank: 98
score: 98.9411376953125
patch: return Integer . length ( ) + 1 ;
rank: 98
score: 98.90846557617188
patch: return position . char CaMeL Value ( ) ;
rank: 98
score: 98.89727783203125
patch: return ~ Long . MAX _ VALUE ;
rank: 98
score: 98.8580322265625
patch: return ~ position ; return position ; else
rank: 98
score: 98.84151204427083
patch: return text . substring ( length ) ;
rank: 98
score: 98.83279418945312
patch: else { return ~ return position ;
rank: 98
score: 98.80706787109375
patch: else { return position + 1 ; }
rank: 98
score: 98.79227701822917
patch: return * * * * * * /
rank: 99
score: 99.00772094726562
patch: return ~ position . substring ( position + 1 ) ;
rank: 99
score: 98.90715196397569
patch: return position + ~ ALL _ IDS ;
rank: 99
score: 98.85463460286458
patch: return position ; return ; return position ;
rank: 99
score: 98.84053548177083
patch: return to CaMeL String ( $STRING$ ) ;
rank: 99
score: 98.80562591552734
patch: return Long . MAX _ VALUE ;
rank: 99
score: 98.79214816623264
patch: } else { return ~ 1 ; }
rank: 100
score: 99.0074129971591
patch: return bucket . parse CaMeL Into ( bucket ) ;
rank: 100
score: 98.94016335227273
patch: return this . parse ( str , position ) ;
rank: 100
score: 98.90543619791667
patch: return ~ ~ 0 ;
rank: 100
score: 98.89317491319444
patch: return ~ ( position & 1 ) ;
rank: 100
score: 98.85446166992188
patch: return ~ position ; return ~ ~ position ;
rank: 100
score: 98.80531819661458
patch: return - 1 ; return - 1 ;
rank: 100
score: 98.79150390625
patch: return * * position ;
rank: 101
score: 98.93907928466797
patch: return Boolean . length ( ) ;
rank: 101
score: 98.90382690429688
patch: return position + ( position - position ) ;
rank: 101
score: 98.85325792100694
patch: return position ; return ~ - 1 ;
rank: 101
score: 98.83921983506944
patch: return long CaMeL Value ( bucket ) ;
rank: 101
score: 98.82770647321429
patch: else { return false ; }
rank: 101
score: 98.80175170898437
patch: assert position >= 0 : $STRING$ + position ;
rank: 102
score: 98.93746512276786
patch: return - - - 1 ;
rank: 102
score: 98.92044067382812
patch: return position + bucket . size ( ) ;
rank: 102
score: 98.90218777126736
patch: return ( text . length ( ) ;
rank: 102
score: 98.85128784179688
patch: ~ position ; return ~ position ;
rank: 102
score: 98.83832465277777
patch: return to CaMeL String ( bucket ) ;
rank: 102
score: 98.82669067382812
patch: return 0 ; return - 1 ;
rank: 102
score: 98.7981689453125
patch: return position != 0 ? position : 0 ;
rank: 102
score: 98.7896728515625
patch: return ; , ~ position ;
rank: 103
score: 98.93655056423611
patch: return * $STRING$ . length ( ) ;
rank: 103
score: 98.90116373697917
patch: ~ ALL _ IDS ;
rank: 103
score: 98.88480050223214
patch: return ~ ~ - 1 ;
rank: 103
score: 98.85127766927083
patch: return position position ; if ~ 1 ;
rank: 103
score: 98.82652282714844
patch: / else { return position ; }
rank: 103
score: 98.79730224609375
patch: return position ~ position + position ;
rank: 103
score: 98.78946533203126
patch: return * * ;
rank: 104
score: 99.00609241832386
patch: else { return text . length ( ) ; }
rank: 104
score: 98.93603515625
patch: return [ 0 ] . length ( ) ;
rank: 104
score: 98.92010498046875
patch: return text . size ( ) ;
rank: 104
score: 98.87633056640625
patch: this . position = position ; return position ;
rank: 104
score: 98.84888916015625
patch: return ~ position ; return ; return position ;
rank: 104
score: 98.83653259277344
patch: return long CaMeL Value ( ) ;
rank: 104
score: 98.82620239257812
patch: return return - 1 + position ;
rank: 104
score: 98.796533203125
patch: if ( position < 0 ) return position ;
rank: 104
score: 98.7887191772461
patch: return * * return ~ position ;
rank: 105
score: 98.93586869673295
patch: return ~ position - $STRING$ . length ( ) ;
rank: 105
score: 98.9005126953125
patch: return ~ ALL _ IDS + 1 ;
rank: 105
score: 98.87614135742187
patch: return position + Long . MAX _ VALUE ;
rank: 105
score: 98.84832000732422
patch: return position ; for ~ 1 ;
rank: 105
score: 98.79632568359375
patch: return position != 0 ? position : position ;
rank: 105
score: 98.7850570678711
patch: return position ? 0 : 0 ;
rank: 106
score: 99.0049161044034
patch: return ~ position . length ( ) : 0 ;
rank: 106
score: 98.93553577769886
patch: return get CaMeL Zone ( str , position ) ;
rank: 106
score: 98.91703033447266
patch: else { return position + position ;
rank: 106
score: 98.89788818359375
patch: return ALL _ IDS . trim ( ) ;
rank: 106
score: 98.87325032552083
patch: return super . ~ ( position ) ;
rank: 106
score: 98.84819200303819
patch: return - 1 ; return ~ position ;
rank: 106
score: 98.83643341064453
patch: return ~ position : ~ position ;
rank: 106
score: 98.82449340820312
patch: return return return position ;
rank: 106
score: 98.79613647460937
patch: throw new Runtime CaMeL Exception ( $STRING$ + ;
rank: 106
score: 98.78472028459821
patch: return ; . return 0 ;
rank: 107
score: 99.00172932942708
patch: return position . length ( ) ? position : 0 ;
rank: 107
score: 98.93505859375
patch: return super . substring ( position , position ) ;
rank: 107
score: 98.87318115234375
patch: return position - text . position ( ) ;
rank: 107
score: 98.84738159179688
patch: return position ; ~ position ; return position ;
rank: 107
score: 98.79200575086806
patch: return Math . position ( position ) ;
rank: 107
score: 98.78436957465277
patch: return ; , position , ~ position ;
rank: 108
score: 98.91168823242188
patch: return $NUMBER$ + position . length ( ) ;
rank: 108
score: 98.89678955078125
patch: return ( position ~ ALL _ IDS ) ;
rank: 108
score: 98.87150065104167
patch: return ~ Double . MAX _ VALUE ;
rank: 108
score: 98.84233262803819
patch: return ~ position ; if ~ 0 ;
rank: 108
score: 98.83384874131944
patch: return . to CaMeL String ( ) ;
rank: 108
score: 98.82257952008929
patch: return return - - position ;
rank: 108
score: 98.79164428710938
patch: return position == position ? 0 : position ;
rank: 108
score: 98.78208414713542
patch: return ; , position , 1 ) ;
rank: 109
score: 98.91019897460937
patch: return position + date . length ( ) ;
rank: 109
score: 98.8399658203125
patch: return position + position ; if position ;
rank: 109
score: 98.83371803977273
patch: return to CaMeL String ( text , position ) ;
rank: 109
score: 98.78964233398438
patch: return position - position + position ;
rank: 109
score: 98.78145926339286
patch: return * * return position ;
rank: 110
score: 98.99715169270833
patch: return position + $STRING$ + text . length ( ) ;
rank: 110
score: 98.894677734375
patch: return * ~ ALL _ IDS + position ;
rank: 110
score: 98.86866106305804
patch: return super . ~ position ;
rank: 110
score: 98.83849419487848
patch: return return position ; if return position ;
rank: 110
score: 98.83171251085069
patch: return to CaMeL String ( text ) ;
rank: 110
score: 98.82158067491319
patch: } else { return ~ ~ position ;
rank: 110
score: 98.78099229600694
patch: return position [ 0 ] ~ position ;
rank: 111
score: 98.90989990234375
patch: return text . text . length ( ) ;
rank: 111
score: 98.8927001953125
patch: } return ~ ~ position ;
rank: 111
score: 98.86807250976562
patch: return position - start + position ;
rank: 111
score: 98.83638916015624
patch: return position ; }
rank: 111
score: 98.82936789772727
patch: return super . parse ( bucket , text ) ;
rank: 111
score: 98.82074652777777
patch: return 0 ; try { return position ;
rank: 111
score: 98.78855590820312
patch: synchronized ( this ) { return position ; }
rank: 112
score: 98.93266157670455
patch: return this . parse CaMeL Into ( str ) ;
rank: 112
score: 98.86732700892857
patch: return return ~ - 1 ;
rank: 112
score: 98.83565266927083
patch: return position ; while ; return position ;
rank: 112
score: 98.82852172851562
patch: return char CaMeL Value ( ) ;
rank: 112
score: 98.78546142578125
patch: throw new Assertion CaMeL Error ( $STRING$ ) ;
rank: 112
score: 98.77898297991071
patch: / * * * * /
rank: 113
score: 98.99425159801136
patch: return * / ~ position . length ( ) ;
rank: 113
score: 98.90977647569444
patch: return text . length ( ) ) ;
rank: 113
score: 98.89127604166667
patch: } return - 1 ;
rank: 113
score: 98.86473999023437
patch: return position . length ( ) - 1 ;
rank: 113
score: 98.83503553602431
patch: return position ; while return ~ position ;
rank: 113
score: 98.82433319091797
patch: return ~ position + ~ position ;
rank: 113
score: 98.81891547309027
patch: return return - 1 ; return position ;
rank: 113
score: 98.78512573242188
patch: return ] . to CaMeL String ( ) ;
rank: 113
score: 98.77749972873264
patch: return ; , position , $NUMBER$ ) ;
rank: 114
score: 98.9940673828125
patch: return text + text . length ( ) ;
rank: 114
score: 98.9321621981534
patch: return ( String ) text . length ( ) ;
rank: 114
score: 98.9090576171875
patch: return position + length ;
rank: 114
score: 98.88935852050781
patch: } return ~ ALL _ IDS ;
rank: 114
score: 98.83497450086806
patch: return ~ 1 ; return - 1 ;
rank: 114
score: 98.82304243607955
patch: return Math . to CaMeL String ( str ) ;
rank: 114
score: 98.81771414620536
patch: return return position + position ;
rank: 114
score: 98.77711486816406
patch: } else { return ~ $NUMBER$ ;
rank: 115
score: 98.99322509765625
patch: return ~ ~ bucket . to CaMeL String ( ) ;
rank: 115
score: 98.93147416548295
patch: return value . substring ( position , position ) ;
rank: 115
score: 98.88626437717014
patch: return - ( position + 1 ) ;
rank: 115
score: 98.83421834309895
patch: return position ; break ;
rank: 115
score: 98.78256225585938
patch: return position * position + position ;
rank: 116
score: 98.93012029474431
patch: return ( int ) text . length ( ) ;
rank: 116
score: 98.85982937282986
patch: return ~ ( position & position ) ;
rank: 116
score: 98.81710815429688
patch: return ; int position ~ position ;
rank: 116
score: 98.78169555664063
patch: return position ? position + 1 : position ;
rank: 116
score: 98.77672322591145
patch: return ; , 0 ;
rank: 117
score: 98.99154663085938
patch: return text . length ( ) ? position : 0 ;
rank: 117
score: 98.93004608154297
patch: return ~ position + - 1 ;
rank: 117
score: 98.89970703125
patch: return position . text . length ( ) ;
rank: 117
score: 98.88482666015625
patch: return Boolean . length ( position ) ;
rank: 117
score: 98.85633196149554
patch: return - position + 1 ;
rank: 117
score: 98.83277893066406
patch: return ~ $NUMBER$ ; return position ;
rank: 117
score: 98.78085327148438
patch: return Long . parse CaMeL Int ( position ;
rank: 117
score: 98.77488490513393
patch: return position [ 0 ] ;
rank: 118
score: 98.9295321377841
patch: return this . parse CaMeL Into ( position ) ;
rank: 118
score: 98.88447265625
patch: return text . substring ( - 1 ) ;
rank: 118
score: 98.85628051757813
patch: return position ~ Long . MAX _ VALUE ;
rank: 118
score: 98.83247375488281
patch: return position ; return position ; }
rank: 118
score: 98.81390380859375
patch: finally { return ~ ~ position ;
rank: 118
score: 98.78016662597656
patch: return position - 1 + position ;
rank: 119
score: 98.99052211216518
patch: return * / ~ position ;
rank: 119
score: 98.92887739701705
patch: return <= 0 ? 0 : ALL _ IDS ;
rank: 119
score: 98.85360107421874
patch: return ~ ~ Long . MAX _ VALUE ;
rank: 119
score: 98.83189086914062
patch: return ~ position ; if ~ ~ position ;
rank: 119
score: 98.81633966619319
patch: return ~ this . ALL _ IDS + position ;
rank: 119
score: 98.81351725260417
patch: return ~ 1 ; return - position ;
rank: 119
score: 98.77973090277777
patch: return position ? position : ~ position ;
rank: 119
score: 98.77337646484375
patch: return ; , position ( position ;
rank: 120
score: 98.9286776455966
patch: return [ 0 ] . substring ( position ) ;
rank: 120
score: 98.88435668945313
patch: return position + ( ALL _ IDS ) ;
rank: 120
score: 98.85198974609375
patch: return position - text . length ( ;
rank: 120
score: 98.83112182617188
patch: return ~ position ; return ~ - 1 ;
rank: 120
score: 98.8126220703125
patch: return ~ - position ;
rank: 120
score: 98.77584228515624
patch: return position ? position : position + 1 ;
rank: 120
score: 98.77194213867188
patch: return * * * return position ;
rank: 121
score: 98.98981267755681
patch: return ~ position . length ( ) + $NUMBER$ ;
rank: 121
score: 98.92683549360795
patch: return text . substring ( position + length ) ;
rank: 121
score: 98.8891357421875
patch: return position + ( position + position ) ;
rank: 121
score: 98.81195940290179
patch: try { return position ; }
rank: 121
score: 98.77545166015625
patch: return position ~ hash CaMeL Code ;
rank: 121
score: 98.77165876116071
patch: } else { return 0 ;
rank: 122
score: 98.98939098011364
patch: return parse CaMeL Into ( bucket , text ) ;
rank: 122
score: 98.8285888671875
patch: ~ position ; return position ; return position ;
rank: 122
score: 98.81119384765626
patch: return ~ position ( ALL _ IDS ) ;
rank: 122
score: 98.77164035373264
patch: * * * * / return position ;
rank: 123
score: 98.9889424641927
patch: return * ~ Date CaMeL Time CaMeL Parser . position ;
rank: 123
score: 98.92363739013672
patch: return text . trim ( ) ;
rank: 123
score: 98.88248901367187
patch: return ~ ~ str . length ( ) ;
rank: 123
score: 98.8824462890625
patch: return ~ bucket ;
rank: 123
score: 98.849853515625
patch: return position + text . length ;
rank: 123
score: 98.82857259114583
patch: return position ; while ~ - 1 ;
rank: 123
score: 98.81156412760417
patch: return ; int ~ ~ ~ position ;
rank: 123
score: 98.80913628472223
patch: return Math . length ( position ) ;
rank: 123
score: 98.770751953125
patch: return ; . position ~ position ;
rank: 124
score: 98.9884745279948
patch: return ~ text . substring ( position + 1 ) ;
rank: 124
score: 98.9235506924716
patch: return Integer . index CaMeL Of ( str ) ;
rank: 124
score: 98.82821994357639
patch: return ~ 1 ; throw ~ position ;
rank: 124
score: 98.81063406808036
patch: return return - - 1 ;
rank: 124
score: 98.80888671875
patch: return ~ false ;
rank: 124
score: 98.77004665798611
patch: throw new Runtime CaMeL Exception ( position ;
rank: 124
score: 98.76811387803819
patch: return * * * * * * ;
rank: 125
score: 98.92283935546875
patch: return text . substring ( ~ position ) ;
rank: 125
score: 98.84589233398438
patch: return super . parse CaMeL Into ( position ;
rank: 125
score: 98.82736206054688
patch: return ~ position ; if position ~ position ;
rank: 125
score: 98.80841064453125
patch: return return - 0 ; return position ;
rank: 125
score: 98.76724243164062
patch: sb . append ( position ) ;
rank: 125
score: 98.76621791294643
patch: return ; . return 1 ;
rank: 126
score: 98.98765980113636
patch: return ~ position . length ( ) * 1 ;
rank: 126
score: 98.92205255681819
patch: return ~ position + length . length ( ) ;
rank: 126
score: 98.88074408637152
patch: return ~ ALL _ IDS . 0 ;
rank: 126
score: 98.82688395182292
patch: return position ; ~ - - 1 ;
rank: 126
score: 98.80616590711806
patch: else { else { return position ; }
rank: 126
score: 98.76613362630208
patch: } else { return position ~ position ;
rank: 127
score: 98.98748224431819
patch: return position ? ALL _ IDS : ~ position ;
rank: 127
score: 98.87911648220486
patch: return return text . length ( ) ;
rank: 127
score: 98.87882080078126
patch: return ( text . length ( ) ) ;
rank: 127
score: 98.82521565755208
patch: return position ; return return ~ position ;
rank: 127
score: 98.80577850341797
patch: else { return ~ position position ;
rank: 127
score: 98.76636962890625
patch: return position ? position + 1 : 0 ;
rank: 127
score: 98.76561821831598
patch: if ( ; else { return position ;
rank: 128
score: 98.91869506835937
patch: str = text . substring ( position ) ;
rank: 128
score: 98.87638549804687
patch: return return ~ text . length ( ) ;
rank: 128
score: 98.875927734375
patch: try { return text . length ( ) ;
rank: 128
score: 98.82359619140625
patch: return ~ position ; return position ; break ;
rank: 128
score: 98.80574035644531
patch: return 0 ; return ~ position ;
rank: 128
score: 98.76616753472223
patch: return position + str . length ( ;
rank: 128
score: 98.76544952392578
patch: if ( ~ 0 == position ;
rank: 129
score: 98.98673502604167
patch: return Date CaMeL Time CaMeL Parser CaMeL Bucket . true ;
rank: 129
score: 98.91796875
patch: return ~ ALL _ IDS . size ( ) ;
rank: 129
score: 98.87603759765625
patch: } return ~ ~ ALL _ IDS ;
rank: 129
score: 98.8056973544034
patch: return ~ position + ( ALL _ IDS ) ;
rank: 129
score: 98.80556911892361
patch: return ; int position return ~ position ;
rank: 129
score: 98.76412527901786
patch: return position position + position ;
rank: 129
score: 98.76117706298828
patch: / * * * * * /
rank: 130
score: 98.87572021484375
patch: return ~ ALL _ IDS : ~ position ;
rank: 130
score: 98.83547634548611
patch: return Integer . parse CaMeL Int ( ;
rank: 130
score: 98.82061767578125
patch: return position + - position ; return position ;
rank: 130
score: 98.80360243055556
patch: return * ( ALL _ IDS ) ;
rank: 130
score: 98.76264784071181
patch: return position . to CaMeL String ( ;
rank: 130
score: 98.75771755642361
patch: } else if ; return ~ position ;
rank: 131
score: 98.98572887073864
patch: return parse CaMeL Into ( bucket , position ) ;
rank: 131
score: 98.9178133877841
patch: return ~ ~ text . substring ( position ) ;
rank: 131
score: 98.86964721679688
patch: ~ ALL _ IDS . length ( ) ;
rank: 131
score: 98.8199951171875
patch: return ~ position ; if ~ position position ;
rank: 131
score: 98.8026123046875
patch: } return - position ;
rank: 131
score: 98.75740559895833
patch: return ; . size ( position ) ;
rank: 132
score: 98.9855069247159
patch: return position ? - 1 : ALL _ IDS ;
rank: 132
score: 98.91773681640625
patch: return - - $STRING$ . length ( ) ;
rank: 132
score: 98.87122938368056
patch: return += text . length ( ) ;
rank: 132
score: 98.80259874131944
patch: return to CaMeL String ( position ) ;
rank: 132
score: 98.80068969726562
patch: return return ~ 1 ;
rank: 132
score: 98.75636800130208
patch: if ( ~ position ; return 0 ;
rank: 133
score: 98.917236328125
patch: return long CaMeL Time . length ( ) ;
rank: 133
score: 98.87102661132812
patch: return position + $STRING$ + ALL _ IDS ;
rank: 133
score: 98.7996114095052
patch: return return position position ;
rank: 133
score: 98.7537841796875
patch: return ; . position ( position position ;
rank: 134
score: 98.9823330965909
patch: return Math . max ( position , 0 ) ;
rank: 134
score: 98.869775390625
patch: return 0 + text . length ( ) ;
rank: 134
score: 98.82659301757812
patch: return return ~ Integer . MAX _ VALUE ;
rank: 134
score: 98.81731499565973
patch: return ~ 1 ; while ~ position ;
rank: 134
score: 98.802001953125
patch: return ~ ~ position . trim ( ) ;
rank: 134
score: 98.7982406616211
patch: try { return ~ return position ;
rank: 134
score: 98.75459594726563
patch: return position ~ text . trim ( ) ;
rank: 134
score: 98.75264739990234
patch: return * * * * * ;
rank: 135
score: 98.98229217529297
patch: return * / return ~ position ;
rank: 135
score: 98.91590118408203
patch: return $STRING$ . length ( ) ;
rank: 135
score: 98.8691650390625
patch: return position + bucket . trim ( ) ;
rank: 135
score: 98.81631808810764
patch: return position ; } throw ~ position ;
rank: 135
score: 98.80175170898437
patch: return else if ( ALL _ IDS ) {
rank: 135
score: 98.798095703125
patch: return return ~ ~ ~ position ;
rank: 135
score: 98.7520751953125
patch: } else { / * * * /
rank: 136
score: 98.86699829101562
patch: return position - position . length ( ) ;
rank: 136
score: 98.86615600585938
patch: ~ ALL _ IDS + ALL _ IDS ;
rank: 136
score: 98.82591756184895
patch: return - 1 ; ;
rank: 136
score: 98.75365600585937
patch: return Long . parse CaMeL Long ( str ;
rank: 137
score: 98.91344105113636
patch: return > 0 + text . length ( ) ;
rank: 137
score: 98.86514892578126
patch: return * + position . length ( ) ;
rank: 137
score: 98.82260567801339
patch: return return position - 1 ;
rank: 137
score: 98.80012730189732
patch: return ~ position + true ;
rank: 137
score: 98.79701063368056
patch: if ~ ~ position ; return position ;
rank: 137
score: 98.75247192382812
patch: return position + position - 1 ;
rank: 137
score: 98.7474365234375
patch: return ; , - 1 ;
rank: 138
score: 98.98096720377605
patch: return ALL _ IDS ? ALL _ IDS : position ;
rank: 138
score: 98.9132967862216
patch: return / 0 + text . length ( ) ;
rank: 138
score: 98.86461639404297
patch: return ( position - position ) ;
rank: 138
score: 98.82039184570313
patch: synchronized ( position ) { return position ; }
rank: 138
score: 98.81182250976562
patch: return ~ 1 ; if return ~ position ;
rank: 138
score: 98.79780717329545
patch: return position . to CaMeL String ( ) ; }
rank: 138
score: 98.79646301269531
patch: return return - 0 + position ;
rank: 138
score: 98.75211181640626
patch: return position == 0 ? 1 : position ;
rank: 138
score: 98.74459499782986
patch: return ~ 1 ; return ~ $NUMBER$ ;
rank: 139
score: 98.980908203125
patch: return position . length ( ) * 1 ;
rank: 139
score: 98.9131747159091
patch: return return ~ text . substring ( position ) ;
rank: 139
score: 98.86348266601563
patch: finally { return str . length ( ) ;
rank: 139
score: 98.86289469401042
patch: return ~ position + ( position ) ;
rank: 139
score: 98.81008572048611
patch: return ; = position ; return position ;
rank: 139
score: 98.79510498046875
patch: return return 1 ; return - 1 ;
rank: 139
score: 98.75147840711806
patch: return Math . round ( position ) ;
rank: 139
score: 98.74400111607143
patch: return position + position position ;
rank: 140
score: 98.97934977213542
patch: return position ? position : text . length ( ) ;
rank: 140
score: 98.91162109375
patch: return ~ position . length ( ) - 1 ;
rank: 140
score: 98.86305067274306
patch: return return position . length ( ) ;
rank: 140
score: 98.81694793701172
patch: return position - position - 1 ;
rank: 140
score: 98.80960083007812
patch: return ~ 1 ; if position ;
rank: 140
score: 98.79691938920455
patch: return Math . to CaMeL String ( text ) ;
rank: 140
score: 98.794189453125
patch: try { return position ;
rank: 140
score: 98.75081176757813
patch: if ( ~ position ) { return position ;
rank: 141
score: 98.97846013849431
patch: return ~ str . length ( ) + 1 ;
rank: 141
score: 98.91037819602273
patch: return ALL _ IDS . substring ( position ) ;
rank: 141
score: 98.86303100585937
patch: return text . substring ( position ] ) ;
rank: 141
score: 98.86196463448661
patch: return ~ ( position ) ;
rank: 141
score: 98.81651000976562
patch: return position - Double . MAX _ VALUE ;
rank: 141
score: 98.80932006835937
patch: return ~ 1 ; break ; return position ;
rank: 141
score: 98.79401312934027
patch: return ~ position . close ( ) ;
rank: 141
score: 98.79236602783203
patch: return ; int position = 0 ;
rank: 141
score: 98.74341583251953
patch: return position - position + 0 ;
rank: 142
score: 98.9776611328125
patch: throw new IO CaMeL Exception ( $STRING$ + text ) ;
rank: 142
score: 98.90964577414773
patch: return >= 0 . 0 ? position : 0 ;
rank: 142
score: 98.86268310546875
patch: return position ? position . length ( ) ;
rank: 142
score: 98.86015014648437
patch: return ( text . trim ( ) ) ;
rank: 142
score: 98.808837890625
patch: return ~ position ; while return position ;
rank: 142
score: 98.79249572753906
patch: return ~ position ; } else {
rank: 142
score: 98.79228864397321
patch: return false ; return position ;
rank: 143
score: 98.9774502840909
patch: return ~ text . length ( ) + $NUMBER$ ;
rank: 143
score: 98.86260986328125
patch: return position + this . ALL _ IDS ;
rank: 143
score: 98.85814751519098
patch: return * * ~ ALL _ IDS ;
rank: 143
score: 98.81489868164063
patch: return position - list . size ( ) ;
rank: 143
score: 98.80863189697266
patch: return position ; } ~ position ;
rank: 143
score: 98.79195149739583
patch: return return 1 ; return ~ position ;
rank: 143
score: 98.7482177734375
patch: return position > 1 ? position : 0 ;
rank: 143
score: 98.74239773220486
patch: throw new Runtime CaMeL Exception ( ) ;
rank: 144
score: 98.97704060872395
patch: return ~ position ? ~ ALL _ IDS : position ;
rank: 144
score: 98.90767822265624
patch: return str . to CaMeL String ( ) ;
rank: 144
score: 98.86256103515625
patch: return position + out . length ( ) ;
rank: 144
score: 98.85604858398438
patch: return ~ ~ ~ ALL _ IDS ) ;
rank: 144
score: 98.80816650390625
patch: return ~ position ; while ~ 1 ;
rank: 144
score: 98.79098946707589
patch: return ( ~ position ) ;
rank: 144
score: 98.74721069335938
patch: return position > 1 ? position : position ;
rank: 145
score: 98.90617231889205
patch: return get CaMeL Type ( text , position ) ;
rank: 145
score: 98.8531723022461
patch: return ( position + 0 ) ;
rank: 145
score: 98.81411743164062
patch: return this . position ;
rank: 145
score: 98.80802001953126
patch: return ~ position ; if ~ ~ 1 ;
rank: 145
score: 98.78697858537946
patch: else { return position ; ;
rank: 145
score: 98.74500122070313
patch: return Integer . to CaMeL String ( position ;
rank: 145
score: 98.74091448102679
patch: return ; return ~ 1 ;
rank: 146
score: 98.85938720703125
patch: return position . length ( ) ( ) ;
rank: 146
score: 98.85299072265624
patch: return ~ ~ ALL _ IDS + 0 ;
rank: 146
score: 98.80729844835069
patch: return - 1 ; if ~ position ;
rank: 146
score: 98.78658621651786
patch: else { return return position ;
rank: 146
score: 98.78319091796875
patch: return ~ position . parse ( text ) ;
rank: 146
score: 98.74083116319444
patch: return position ? 0 : ~ 1 ;
rank: 147
score: 98.90484619140625
patch: return - - 1 . length ( ) ;
rank: 147
score: 98.85892333984376
patch: return str . length ( ) + position ;
rank: 147
score: 98.85286254882813
patch: return ( 0 - ALL _ IDS ) ;
rank: 147
score: 98.80397033691406
patch: return position ; while return position ;
rank: 147
score: 98.78286743164062
patch: return ~ position . parse ( str ) ;
rank: 147
score: 98.7427734375
patch: assert position > 0 : $STRING$ + position ;
rank: 147
score: 98.74081759982639
patch: if ( ~ position ; return position ;
rank: 148
score: 98.97312233664773
patch: return * * ~ text . length ( ) ;
rank: 148
score: 98.90357055664063
patch: return Integer . length ( ) + 0 ;
rank: 148
score: 98.85838623046875
patch: return 0 + position . length ( ) ;
rank: 148
score: 98.85255126953125
patch: return ~ ALL _ IDS ) + position ;
rank: 148
score: 98.81231689453125
patch: return - ~ text . length ( ) ;
rank: 148
score: 98.80155436197917
patch: return position ; else ; return position ;
rank: 149
score: 98.9728116122159
patch: return ~ text . length ( ) - 1 ;
rank: 149
score: 98.903076171875
patch: return text . length ( ) - 0 ;
rank: 149
score: 98.85091552734374
patch: return ~ parse CaMeL Into ( bucket ) ;
rank: 149
score: 98.80133734809027
patch: return position ; if ~ ~ 1 ;
rank: 149
score: 98.78563774956598
patch: return position ; return ~ - position ;
rank: 149
score: 98.74220106336806
patch: return Date CaMeL Time CaMeL Formatter . ;
rank: 149
score: 98.73839569091797
patch: return ; , ~ position position ;
rank: 150
score: 98.97268676757812
patch: return ~ bucket . parse ( text , position ) ;
rank: 150
score: 98.90104844835069
patch: return ~ position ? 0 : 0 ;
rank: 150
score: 98.80892508370536
patch: return - position - position ;
rank: 150
score: 98.80109998914931
patch: return position ; if ~ position position ;
rank: 150
score: 98.78402273995536
patch: return ~ return ~ position ;
rank: 150
score: 98.76809692382812
patch: return += text . substring ( position ) ;
rank: 150
score: 98.74120415581598
patch: return Math . abs ( position ) ;
rank: 150
score: 98.7381362915039
patch: return position + 0 + position ;
rank: 151
score: 98.9722188313802
patch: return ALL _ IDS + ALL _ IDS + position ;
rank: 151
score: 98.84779052734375
patch: return position + ( position + 1 ) ;
rank: 151
score: 98.80865478515625
patch: return Math . max ( position ;
rank: 151
score: 98.80028618706598
patch: return position ; while ~ ~ position ;
rank: 151
score: 98.78401692708333
patch: return ; int ~ position ~ 0 ;
rank: 151
score: 98.76774291992187
patch: return text . substring ( position ) ; }
rank: 151
score: 98.73822784423828
patch: return super . position ( ) ;
rank: 151
score: 98.73802354600694
patch: return ; , position , ~ $NUMBER$ ;
rank: 152
score: 98.97168646918402
patch: return ~ position ? position : $NUMBER$ ;
rank: 152
score: 98.85285034179688
patch: return = text . substring ( position ) ;
rank: 152
score: 98.84689331054688
patch: return ~ position + ~ ALL _ IDS ;
rank: 152
score: 98.80864800347223
patch: if ( position ; return - 1 ;
rank: 152
score: 98.80016411675348
patch: return position + 1 ; return position ;
rank: 152
score: 98.78371853298611
patch: return - 1 ; return - 0 ;
rank: 152
score: 98.76284450954861
patch: return long CaMeL Value ( text ) ;
rank: 152
score: 98.73573133680556
patch: throw new Illegal CaMeL State CaMeL Exception ;
rank: 152
score: 98.73081461588542
patch: return Date CaMeL Time CaMeL Zone . ;
rank: 153
score: 98.97153930664062
patch: return position . length ( ) + $NUMBER$ ;
rank: 153
score: 98.89929877387152
patch: return - 1 . length ( ) ;
rank: 153
score: 98.85252685546875
patch: return position + position + ALL _ IDS ;
rank: 153
score: 98.84651014539931
patch: return ~ ALL _ IDS - 0 ;
rank: 153
score: 98.80804443359375
patch: return ~ ( position - position ;
rank: 153
score: 98.79999457465277
patch: return ~ position ; ~ - 1 ;
rank: 153
score: 98.78336334228516
patch: return finally { return - 1 ;
rank: 153
score: 98.76175362723214
patch: return * ~ ~ position ;
rank: 153
score: 98.73502022879464
patch: return position * ~ position ;
rank: 153
score: 98.73078002929688
patch: if ( position != 0 ) return position ;
rank: 154
score: 98.97085571289062
patch: return ALL _ IDS + position + 1 ;
rank: 154
score: 98.89884440104167
patch: return this . ~ position + 1 ;
rank: 154
score: 98.84385986328125
patch: return ~ ALL _ IDS . - position ;
rank: 154
score: 98.80774536132813
patch: return Math . ~ position ( position ) ;
rank: 154
score: 98.799560546875
patch: return ~ position ; if position / /
rank: 154
score: 98.78277587890625
patch: return return ~ ~ - 1 ;
rank: 154
score: 98.75999232700893
patch: return position + ~ position ;
rank: 154
score: 98.73484802246094
patch: } else if ; return position ;
rank: 154
score: 98.72904205322266
patch: return position * position + 1 ;
rank: 155
score: 98.84378051757812
patch: return ~ ~ this . ALL _ IDS ;
rank: 155
score: 98.79950823102679
patch: return ~ 1 ; break ;
rank: 155
score: 98.78211127387152
patch: return - 1 ; return - $STRING$ ;
rank: 155
score: 98.75629534040179
patch: return position + position ; }
rank: 155
score: 98.73426649305556
patch: return ; , ~ 1 , position ;
rank: 156
score: 98.96741832386364
patch: return position . length ( ) : - 1 ;
rank: 156
score: 98.89581298828125
patch: return value . length ( ) ;
rank: 156
score: 98.84155883789063
patch: return ~ ALL _ IDS , position ) ;
rank: 156
score: 98.79894341362848
patch: return position ; ; if return position ;
rank: 156
score: 98.78181287977431
patch: / else { return ~ ~ position ;
rank: 156
score: 98.75574493408203
patch: return ~ ALL _ IDS ; }
rank: 156
score: 98.73415120442708
patch: return 0 + position ;
rank: 156
score: 98.72754516601563
patch: if ( position >= position ) return position ;
rank: 157
score: 98.89366455078125
patch: return * 1 ;
rank: 157
score: 98.84600830078125
patch: return position . length ( ) ) ;
rank: 157
score: 98.77953338623047
patch: return return - $STRING$ + position ;
rank: 157
score: 98.75472005208333
patch: return if ( ALL _ IDS ) {
rank: 157
score: 98.73333740234375
patch: return ; , ~ $NUMBER$ ;
rank: 157
score: 98.72684054904514
patch: return position == - 1 ? position ;
rank: 158
score: 98.84401245117188
patch: return ALL _ IDS ? position : position ;
rank: 158
score: 98.83738403320312
patch: return ~ text . substring ( length ) ;
rank: 158
score: 98.79781494140624
patch: return position ; if ~ position ; break ;
rank: 158
score: 98.77769252232143
patch: / * ] return position ;
rank: 158
score: 98.75344509548611
patch: return long CaMeL Value ( str ) ;
rank: 158
score: 98.73086547851562
patch: return ~ ~ $NUMBER$ ;
rank: 158
score: 98.7261962890625
patch: final position = position ; return position ;
rank: 159
score: 98.84393310546875
patch: return text . position . length ( ) ;
rank: 159
score: 98.835693359375
patch: return ~ ~ ~ ~ position ;
rank: 159
score: 98.79764811197917
patch: return ~ position ; if ~ $NUMBER$ ;
rank: 159
score: 98.77751159667969
patch: return return ~ return - 1 ;
rank: 159
score: 98.75272369384766
patch: return ~ position ; break ; }
rank: 159
score: 98.73061116536458
patch: / * * * return ~ position ;
rank: 160
score: 98.96399943033855
patch: return ~ bucket . parse CaMeL Into ( str ) ;
rank: 160
score: 98.8436279296875
patch: return ALL _ IDS . position ( ) ;
rank: 160
score: 98.83516235351563
patch: return ~ ~ ALL _ IDS : position ;
rank: 160
score: 98.79740142822266
patch: return ~ position ; return start ;
rank: 160
score: 98.79568917410714
patch: return ~ position * $NUMBER$ ;
rank: 160
score: 98.7286376953125
patch: return * * * * ;
rank: 160
score: 98.7257080078125
patch: throw new Unsupported CaMeL Operation CaMeL Exception ;
rank: 161
score: 98.96310424804688
patch: return position ? position > 0 : ALL _ IDS ;
rank: 161
score: 98.88826497395833
patch: return - Integer . length ( ) ;
rank: 161
score: 98.84139404296874
patch: return text . length ( ) + $STRING$ ;
rank: 161
score: 98.83441840277777
patch: return ~ ALL _ IDS : 0 ;
rank: 161
score: 98.79727783203126
patch: return ~ position ; } return ~ position ;
rank: 161
score: 98.77606201171875
patch: return ; int ~ position position position ;
rank: 161
score: 98.75214979383681
patch: return ~ text . position ( ) ;
rank: 161
score: 98.72858276367188
patch: return ; , ;
rank: 161
score: 98.7250244140625
patch: return position == 0 ? null : position ;
rank: 162
score: 98.9628573330966
patch: return bucket . parse ( text , position ) ;
rank: 162
score: 98.88793267144098
patch: return get CaMeL Zone ( text ) ;
rank: 162
score: 98.83431667751736
patch: return position + ALL _ IDS ) ;
rank: 162
score: 98.79581027560764
patch: return position ; ; if ~ 1 ;
rank: 162
score: 98.79155731201172
patch: return Integer . MIN _ VALUE ;
rank: 162
score: 98.77521430121527
patch: else { return ~ return ~ position ;
rank: 162
score: 98.75126647949219
patch: return ~ ( ~ position ) ;
rank: 163
score: 98.88746643066406
patch: return ( int ) ~ position ;
rank: 163
score: 98.84074096679687
patch: return position + position . size ( ) ;
rank: 163
score: 98.83241102430556
patch: return ~ bucket . for CaMeL ID ;
rank: 163
score: 98.79572143554688
patch: return ~ position ; return ~ position ; }
rank: 163
score: 98.79002380371094
patch: return position + 1 + position ;
rank: 163
score: 98.77519226074219
patch: else { else { return position ;
rank: 163
score: 98.74973754882812
patch: return ~ str . substring ( position ) ;
rank: 163
score: 98.72765435112848
patch: / * * / return ~ position ;
rank: 163
score: 98.72302856445313
patch: return Long . parse CaMeL Int ( str ;
rank: 164
score: 98.96195845170455
patch: return ~ text . length ( ) : 0 ;
rank: 164
score: 98.84064331054688
patch: return text . length ( ) ( ) ;
rank: 164
score: 98.83188205295139
patch: return -- text . length ( ) ;
rank: 164
score: 98.79337565104167
patch: return ~ position ; return position ; ;
rank: 164
score: 98.78921847873264
patch: return Integer . position ( position ) ;
rank: 164
score: 98.77424452039931
patch: finally { return ~ ~ ~ position ;
rank: 164
score: 98.748388671875
patch: return ~ Math . length ( position ) ;
rank: 164
score: 98.72722625732422
patch: / * * / return position ;
rank: 164
score: 98.7223388671875
patch: return position == 1 ? 0 : position ;
rank: 165
score: 98.96176147460938
patch: return position . length ( ) . length ( ) ;
rank: 165
score: 98.83115234375
patch: return ~ ~ position + ALL _ IDS ;
rank: 165
score: 98.79306640625
patch: return position + position ; if ~ position ;
rank: 165
score: 98.78828938802083
patch: return position + name . length ( ;
rank: 165
score: 98.77407836914062
patch: return - - $STRING$ ;
rank: 165
score: 98.74737548828125
patch: return super . parse ( ) ;
rank: 165
score: 98.72086007254464
patch: return - position + position ;
rank: 166
score: 98.96054909446023
patch: return position . substring ( position + $NUMBER$ ) ;
rank: 166
score: 98.881396484375
patch: return int . to CaMeL String ( ) ;
rank: 166
score: 98.84039306640625
patch: return position ) ;
rank: 166
score: 98.8299560546875
patch: return ~ ALL _ IDS - position ;
rank: 166
score: 98.79182942708333
patch: return position ; if position ~ position ;
rank: 166
score: 98.78823852539062
patch: throw new Internal CaMeL Error ( $STRING$ ) ;
rank: 166
score: 98.7262674967448
patch: return ; . value ;
rank: 166
score: 98.72006564670139
patch: return position + . length ( ) ;
rank: 167
score: 98.79041137695313
patch: return ~ position ; return position + position ;
rank: 167
score: 98.78609619140624
patch: return Math . max ( start , position ;
rank: 167
score: 98.74537876674107
patch: return / * ~ position ;
rank: 167
score: 98.718310546875
patch: return position >= 0 ? position : 1 ;
rank: 168
score: 98.9570645419034
patch: return ~ text . length ( ) ? position ;
rank: 168
score: 98.88074340820313
patch: return long . to CaMeL String ( ) ;
rank: 168
score: 98.79006618923611
patch: return position ; if position = position ;
rank: 168
score: 98.78605651855469
patch: return position - position - position ;
rank: 168
score: 98.77097574869792
patch: return position ; return ~ - 0 ;
rank: 168
score: 98.74537353515625
patch: return ~ true ;
rank: 168
score: 98.7177734375
patch: return position ? ~ position : position ;
rank: 169
score: 98.95694986979167
patch: return position . length ( ) ? ALL _ IDS ;
rank: 169
score: 98.83671875
patch: return position + ALL _ IDS : position ;
rank: 169
score: 98.827001953125
patch: String str = text . trim ( ) ;
rank: 169
score: 98.78944905598958
patch: return position ; else if return position ;
rank: 169
score: 98.78283013237848
patch: return Math . max ( position , ;
rank: 169
score: 98.77058919270833
patch: return start ~ position ;
rank: 169
score: 98.72309112548828
patch: return ; . ~ ~ position ;
rank: 169
score: 98.71613311767578
patch: assert position >= 0 : $STRING$ ;
rank: 170
score: 98.95636541193181
patch: return position ? position : ~ ALL _ IDS ;
rank: 170
score: 98.87975396050348
patch: return * Integer . length ( ) ;
rank: 170
score: 98.83605194091797
patch: return new String ( position ) ;
rank: 170
score: 98.7894287109375
patch: return ~ position ; } ~ position ;
rank: 170
score: 98.78271484375
patch: return position - text . length ;
rank: 170
score: 98.76968383789062
patch: / * ] return ~ position ;
rank: 170
score: 98.74482073102679
patch: return else { return position ;
rank: 170
score: 98.72239854600694
patch: if ( 0 == ~ 1 position ;
rank: 170
score: 98.71611938476562
patch: return position == null ? 0 : position ;
rank: 171
score: 98.8265380859375
patch: return text . substring ( position $NUMBER$ ) ;
rank: 171
score: 98.788330078125
patch: return position ; if ~ ~ position ;
rank: 171
score: 98.76967366536458
patch: return 0 ; return ~ ~ position ;
rank: 171
score: 98.72205268012152
patch: } else { if return position ; }
rank: 171
score: 98.71284790039063
patch: return position + to CaMeL String ( ) ;
rank: 172
score: 98.83431396484374
patch: return position : position . length ( ) ;
rank: 172
score: 98.82618543836806
patch: throw new IO CaMeL Exception ( $STRING$ ;
rank: 172
score: 98.78760443793402
patch: return ~ position ; int ~ position ;
rank: 172
score: 98.76911272321429
patch: return return - ~ position ;
rank: 172
score: 98.7420654296875
patch: return return ~ position ; }
rank: 172
score: 98.72178141276042
patch: return ; , 0 ~ position ) ;
rank: 172
score: 98.71077270507813
patch: return position <= 0 ? 0 : position ;
rank: 173
score: 98.95404052734375
patch: return ~ position . append ( $STRING$ ) ;
rank: 173
score: 98.78744845920139
patch: return ~ 1 ; return return position ;
rank: 173
score: 98.7814453125
patch: throw new Illegal CaMeL State CaMeL Exception ( ;
rank: 173
score: 98.76818169487848
patch: return < 1 ? position : position ;
rank: 173
score: 98.74200439453125
patch: return to CaMeL String ( str ) ;
rank: 173
score: 98.72148980034723
patch: return * * return ~ ~ position ;
rank: 173
score: 98.7098388671875
patch: return compare CaMeL To ( position position ) ;
rank: 174
score: 98.95396931966145
patch: return ~ position . parse CaMeL Into ( bucket ) ;
rank: 174
score: 98.87491607666016
patch: return short . length ( ) ;
rank: 174
score: 98.83185424804688
patch: return position + text . position ( ) ;
rank: 174
score: 98.82506646050348
patch: return ~ bucket . trim ( ) ;
rank: 174
score: 98.78719753689236
patch: return ~ 1 ; return position ; }
rank: 174
score: 98.76799011230469
patch: return ; int while ~ position ;
rank: 175
score: 98.95309787326389
patch: return ~ position ? position : null ;
rank: 175
score: 98.87217881944444
patch: return value . substring ( position ) ;
rank: 175
score: 98.82131958007812
patch: else { return position + ALL _ IDS ;
rank: 175
score: 98.78719482421874
patch: return position + position ; while ~ position ;
rank: 175
score: 98.7677230834961
patch: return return - - - 0 ;
rank: 175
score: 98.740478515625
patch: return ~ position . equals ( position ) ;
rank: 175
score: 98.72033013237848
patch: return * * * / return position ;
rank: 175
score: 98.70919799804688
patch: return position ~ position - 1 ;
rank: 176
score: 98.95071411132812
patch: return ~ position ? ~ position : ALL _ IDS ;
rank: 176
score: 98.82116021050348
patch: return ~ ALL _ IDS return position ;
rank: 176
score: 98.7860107421875
patch: return ~ position ; throw return position ;
rank: 176
score: 98.77875366210938
patch: return position - 1 . length ( ) ;
rank: 176
score: 98.76763916015625
patch: return position ; else { return position ;
rank: 176
score: 98.73980712890625
patch: return ~ position ; else {
rank: 176
score: 98.72022247314453
patch: return * * * * * /
rank: 177
score: 98.78569030761719
patch: return position ; throw ~ position ;
rank: 177
score: 98.77848815917969
patch: return position + $STRING$ + text ;
rank: 177
score: 98.76704624720982
patch: else return ~ ~ position ;
rank: 177
score: 98.73817274305556
patch: return ~ position ~ ALL _ IDS ;
rank: 177
score: 98.72020721435547
patch: throw new Runtime CaMeL Exception ( ;
rank: 177
score: 98.70851643880208
patch: return position & position ;
rank: 178
score: 98.87014770507812
patch: return * - 0 ;
rank: 178
score: 98.82809109157986
patch: return position ( text , position ) ;
rank: 178
score: 98.81690809461806
patch: return ~ ALL _ IDS + $NUMBER$ ;
rank: 178
score: 98.78557739257812
patch: return position ; } if ~ - 1 ;
rank: 178
score: 98.76688385009766
patch: return return ~ return - 0 ;
rank: 178
score: 98.72006225585938
patch: return ~ 1 ; return false ;
rank: 179
score: 98.82806396484375
patch: return position . length ( ) + $STRING$ ;
rank: 179
score: 98.81589762369792
patch: return - ( position - position ) ;
rank: 179
score: 98.77744140625
patch: return ~ text . length ( position ) ;
rank: 179
score: 98.76643202039931
patch: else { return ~ position + 0 ;
rank: 179
score: 98.73751491970486
patch: return ~ ~ ALL _ IDS ; }
rank: 179
score: 98.71915980747768
patch: return ; , 0 ) ;
rank: 179
score: 98.70579833984375
patch: return position ? position : position + position ;
rank: 180
score: 98.94939630681819
patch: return bucket . parse CaMeL Into ( text ) ;
rank: 180
score: 98.8158447265625
patch: return text . substring ( position $STRING$ ) ;
rank: 180
score: 98.78314208984375
patch: return position position ; if return position ;
rank: 180
score: 98.766357421875
patch: return ~ - $STRING$ ;
rank: 180
score: 98.71846771240234
patch: } else { return 1 ; }
rank: 180
score: 98.705322265625
patch: return position ( ) ;
rank: 181
score: 98.94760131835938
patch: return new Date CaMeL Time CaMeL Parser CaMeL Bucket bucket ;
rank: 181
score: 98.865283203125
patch: bucket . parse ( text , position ) ;
rank: 181
score: 98.82634887695312
patch: return Date CaMeL Time CaMeL Parser . position ;
rank: 181
score: 98.78301323784723
patch: return position ; } return position ; }
rank: 181
score: 98.7745361328125
patch: return ~ position + $STRING$ + position ;
rank: 181
score: 98.76369900173611
patch: return return - $STRING$ + ~ position ;
rank: 181
score: 98.71832953559027
patch: return ; . return ~ ~ $NUMBER$ ;
rank: 181
score: 98.7048095703125
patch: return position == 0 ? position : start ;
rank: 182
score: 98.94684392755681
patch: return position . parse ( text , position ) ;
rank: 182
score: 98.86522216796875
patch: return Integer . length ( ) - 1 ;
rank: 182
score: 98.81524658203125
patch: return * ~ ALL _ IDS ) ;
rank: 182
score: 98.78270128038194
patch: return - position ; return ~ position ;
rank: 182
score: 98.772119140625
patch: return ~ get CaMeL Id ( position ) ;
rank: 182
score: 98.76295301649306
patch: return return position ; return - 1 ;
rank: 182
score: 98.71832275390625
patch: return ; . return $NUMBER$ ;
rank: 182
score: 98.70464477539062
patch: if ( position == 0 ) return 0 ;
rank: 183
score: 98.94683283025569
patch: return position . parse CaMeL Into ( bucket ) ;
rank: 183
score: 98.78249782986111
patch: return position ; position if ~ 1 ;
rank: 183
score: 98.77017211914062
patch: return ~ position ; ;
rank: 183
score: 98.76291232638889
patch: else { return - $STRING$ + position ;
rank: 183
score: 98.733544921875
patch: return ~ ~ bucket . length ( ) ;
rank: 183
score: 98.71824815538194
patch: return * * ~ ~ ~ position ;
rank: 183
score: 98.70389404296876
patch: return position ~ hash CaMeL Code ( ) ;
rank: 184
score: 98.94676717122395
patch: return Date CaMeL Time CaMeL Parser CaMeL Bucket . 1 ;
rank: 184
score: 98.78160942925348
patch: return position ; position if ~ position ;
rank: 184
score: 98.76186794704861
patch: return ; int while ~ ~ position ;
rank: 184
score: 98.7034912109375
patch: return position < 0 ? 0 : position ;
rank: 185
score: 98.94627796519886
patch: return ~ ALL _ IDS ? position : 1 ;
rank: 185
score: 98.81964721679688
patch: return ( position * ALL _ IDS ) ;
rank: 185
score: 98.77831353081598
patch: return position ; } else return position ;
rank: 185
score: 98.76532745361328
patch: finally { return - 1 ; }
rank: 185
score: 98.76153564453125
patch: return return 1 ; ;
rank: 185
score: 98.71591186523438
patch: return position [ ~ 1 ] ;
rank: 186
score: 98.86339111328125
patch: return new String ( text , position ) ;
rank: 186
score: 98.81848754882813
patch: return text . str . length ( ) ;
rank: 186
score: 98.81221923828124
patch: return ~ ( ~ ALL _ IDS ) ;
rank: 186
score: 98.77783813476563
patch: return position ; return position ; throw position ;
rank: 186
score: 98.76480102539062
patch: Collections . sort ( position , position ) ;
rank: 186
score: 98.71582709418402
patch: return ; . return ~ ~ position ;
rank: 186
score: 98.70279541015626
patch: return super . ~ ( ~ position ) ;
rank: 187
score: 98.94512384588069
patch: return ALL _ IDS ? position : - 1 ;
rank: 187
score: 98.81801350911458
patch: } return position . length ( ) ;
rank: 187
score: 98.80951538085938
patch: return ~ position + ALL _ IDS ) ;
rank: 187
score: 98.7753173828125
patch: return ~ position ; if return return position ;
rank: 187
score: 98.76417236328125
patch: return ~ ~ ( position - 1 ) ;
rank: 187
score: 98.76113891601562
patch: return return - $NUMBER$ ;
rank: 187
score: 98.72871229383681
patch: return parse CaMeL Into ( text ) ;
rank: 188
score: 98.81707153320312
patch: return ALL _ IDS + position + position ;
rank: 188
score: 98.80895385742187
patch: } else { return ~ ALL _ IDS ;
rank: 188
score: 98.77189127604167
patch: return position ; return ~ position ; }
rank: 188
score: 98.76372680664062
patch: return Integer . parse CaMeL Int ( start ;
rank: 188
score: 98.75982666015625
patch: return ~ $STRING$ ;
rank: 188
score: 98.71571180555556
patch: return ; , position ~ position ) ;
rank: 188
score: 98.70057983398438
patch: return position + position + position + 1 ;
rank: 189
score: 98.94354248046875
patch: return * ( position + 1 ) ;
rank: 189
score: 98.77179633246527
patch: return position ; } return - 1 ;
rank: 189
score: 98.76272583007812
patch: if ( position == - 1 )
rank: 189
score: 98.7594985961914
patch: return return ~ - - 1 ;
rank: 189
score: 98.72773088727679
patch: return ~ position + $NUMBER$ ;
rank: 189
score: 98.71360560825893
patch: return ; , position position ;
rank: 189
score: 98.69927978515625
patch: return position position + position + 1 ;
rank: 190
score: 98.9432881673177
patch: return ~ ALL _ IDS ? ~ ALL _ IDS ;
rank: 190
score: 98.85983276367188
patch: return Double . length ( ) ;
rank: 190
score: 98.81585693359375
patch: } return text . length ( ) ;
rank: 190
score: 98.76919894748264
patch: return position + $STRING$ ; return position ;
rank: 190
score: 98.7622802734375
patch: return position - 1 ? position : position ;
rank: 190
score: 98.75905064174107
patch: else { return ~ $STRING$ ;
rank: 190
score: 98.71102905273438
patch: } return ~ $NUMBER$ ;
rank: 190
score: 98.698974609375
patch: return position == 0 ? position ;
rank: 191
score: 98.9425048828125
patch: throw new IO CaMeL Exception ( $STRING$ + str ) ;
rank: 191
score: 98.85982055664063
patch: return this . text . trim ( ) ;
rank: 191
score: 98.80799696180556
patch: return ~ ( position - 0 ) ;
rank: 191
score: 98.76742892795139
patch: return return position ; else return position ;
rank: 191
score: 98.76225450303819
patch: return ~ ( position | position ) ;
rank: 191
score: 98.75826009114583
patch: return - - position ;
rank: 191
score: 98.72743733723958
patch: return long CaMeL Value ( $STRING$ ) ;
rank: 191
score: 98.71041870117188
patch: } else { return $NUMBER$ ; }
rank: 191
score: 98.69879760742188
patch: throw new Assertion CaMeL Error ( position ) ;
rank: 192
score: 98.85895647321429
patch: return - - - 0 ;
rank: 192
score: 98.7673095703125
patch: return ~ position ; return - - 1 ;
rank: 192
score: 98.76019287109375
patch: return text . length ( ) - start ;
rank: 192
score: 98.7572021484375
patch: try { return return ~ position ;
rank: 192
score: 98.72490692138672
patch: if ( ALL _ IDS ) {
rank: 192
score: 98.70964813232422
patch: } if ; return ~ position ;
rank: 192
score: 98.69873046875
patch: return compare CaMeL To ( str ) ;
rank: 193
score: 98.85895385742188
patch: return if . length ( ) - 0 ;
rank: 193
score: 98.80696411132813
patch: return ~ ALL _ IDS . - 0 ;
rank: 193
score: 98.76616668701172
patch: return position ; ~ - position ;
rank: 193
score: 98.75861952039931
patch: return ~ ( position | 1 ) ;
rank: 193
score: 98.756103515625
patch: return ; int ~ - ~ position ;
rank: 193
score: 98.7241719563802
patch: return -- ~ position ;
rank: 193
score: 98.70892333984375
patch: return ; return position ;
rank: 193
score: 98.69862874348958
patch: return position ? position : - position ;
rank: 194
score: 98.94137573242188
patch: return ( Date CaMeL Time CaMeL Parser CaMeL Bucket ) ;
rank: 194
score: 98.85801696777344
patch: return return ~ position + 1 ;
rank: 194
score: 98.81104871961806
patch: return position ) . length ( ) ;
rank: 194
score: 98.80673828125
patch: return - ( text . length ( ) ;
rank: 194
score: 98.76582166883681
patch: return position ; ; else return position ;
rank: 194
score: 98.75680881076389
patch: return ~ 0 ? position : position ;
rank: 194
score: 98.75550188337054
patch: return ; int ~ 0 ;
rank: 194
score: 98.72410074869792
patch: return super . parse ( $STRING$ ) ;
rank: 194
score: 98.7088623046875
patch: return ; . ~ - 1 ;
rank: 194
score: 98.69792344835069
patch: assert position >= 0 ; return position ;
rank: 195
score: 98.85432739257813
patch: return * - $STRING$ . length ( ) ;
rank: 195
score: 98.80894775390625
patch: return bucket . text . length ( ) ;
rank: 195
score: 98.80631510416667
patch: return - * ~ ALL _ IDS ;
rank: 195
score: 98.76531982421875
patch: return ~ 1 ; if ~ - 1 ;
rank: 195
score: 98.75567626953125
patch: else { return ~ ~ position ; }
rank: 195
score: 98.75525580512152
patch: return ; int ~ - - 0 ;
rank: 195
score: 98.72249930245536
patch: return ~ position - 0 ;
rank: 196
score: 98.85256958007812
patch: return new int [ 0 ] ;
rank: 196
score: 98.8058837890625
patch: return ~ ALL _ IDS + - 0 ;
rank: 196
score: 98.76517062717014
patch: return ~ position ; return position position ;
rank: 196
score: 98.75521087646484
patch: return start ;
rank: 196
score: 98.71906389508929
patch: return ~ position + ) ;
rank: 197
score: 98.85242309570313
patch: return int [ ] . position ( ) ;
rank: 197
score: 98.8082275390625
patch: return + text . length ( ) ;
rank: 197
score: 98.80564880371094
patch: return ~ ALL _ IDS 1 ;
rank: 197
score: 98.76504177517361
patch: return position ; return position - position ;
rank: 197
score: 98.75435384114583
patch: return return - position ; return position ;
rank: 197
score: 98.71888950892857
patch: return else { ~ position ;
rank: 197
score: 98.70714569091797
patch: } else { return false ; }
rank: 197
score: 98.69597778320312
patch: return position == 0 ? 0 : 0 ;
rank: 198
score: 98.84974975585938
patch: parse CaMeL Into ( str , position ) ;
rank: 198
score: 98.80794270833333
patch: return position + - ALL _ IDS ;
rank: 198
score: 98.80471801757812
patch: return ALL _ IDS - ALL _ IDS ;
rank: 198
score: 98.763671875
patch: return position + - position ;
rank: 198
score: 98.75367567274306
patch: if ~ position position ; return position ;
rank: 198
score: 98.70606825086806
patch: throw new Runtime CaMeL Exception return $STRING$ ;
rank: 198
score: 98.69525146484375
patch: return - 1 + position + 1 ;
rank: 199
score: 98.762890625
patch: return position ; } return position + position ;
rank: 199
score: 98.75279405381944
patch: return return - $STRING$ ; return position ;
rank: 199
score: 98.70537651909723
patch: } else { if ( ~ position ;
rank: 199
score: 98.69524536132812
patch: return position . replace ( $STRING$ , $STRING$ ;
rank: 200
score: 98.84839545355902
patch: return start . substring ( position ) ;
rank: 200
score: 98.80633544921875
patch: return text . length ( ) : position ;
rank: 200
score: 98.76260715060764
patch: return position position ; else return position ;
rank: 200
score: 98.75419108072917
patch: return - ~ 1 ;
rank: 200
score: 98.7520980834961
patch: else { return return ~ position ;
rank: 200
score: 98.71540069580078
patch: return ~ ~ ~ position ; }
rank: 200
score: 98.70537651909723
patch: return ; , 0 return ~ 1 ;
rank: 200
score: 98.69509887695312
patch: return position > position ? position : position ;
rank: 201
score: 98.93569113991477
patch: return ~ text . length ( ) * 1 ;
rank: 201
score: 98.8040771484375
patch: return += position . length ( ) ;
rank: 201
score: 98.76253933376736
patch: return return position ; } return position ;
rank: 201
score: 98.75273301866319
patch: return text . length ( position ) ;
rank: 201
score: 98.75173611111111
patch: return return 1 ; return - 0 ;
rank: 201
score: 98.71456570095486
patch: return char CaMeL Value ( bucket ) ;
rank: 201
score: 98.70517985026042
patch: return ~ 1 ; return ~ 0 ;
rank: 201
score: 98.693359375
patch: return - 1 + position + position ;
rank: 202
score: 98.93559126420455
patch: return ~ bucket . get CaMeL Zone ( ) ;
rank: 202
score: 98.80311279296875
patch: return ALL _ IDS . length + position ;
rank: 202
score: 98.80221218532986
patch: return text . . length ( ) ;
rank: 202
score: 98.75971221923828
patch: return position + - - position ;
rank: 202
score: 98.75046212332589
patch: return return ~ position position ;
rank: 202
score: 98.70412190755208
patch: return ; , 0 , $NUMBER$ ) ;
rank: 202
score: 98.69232855902777
patch: return position - str . length ( ;
rank: 203
score: 98.93538041548295
patch: return position . length ( ) + - 1 ;
rank: 203
score: 98.8007080078125
patch: return ~ text . length ( ) ; }
rank: 203
score: 98.75940551757813
patch: return position + position ; return ~ position ;
rank: 203
score: 98.751220703125
patch: return ~ ( position * 1 ) ;
rank: 203
score: 98.75028228759766
patch: return ; int ~ - $NUMBER$ ;
rank: 203
score: 98.71430053710938
patch: return ~ position . equals ( $STRING$ ) ;
rank: 203
score: 98.70353868272569
patch: return * * * * position * /
rank: 203
score: 98.69164360894098
patch: return position - 1 ; return position ;
rank: 204
score: 98.84536404079861
patch: return * 0 ? 0 : 0 ;
rank: 204
score: 98.799169921875
patch: return ~ ~ ( position + 1 ) ;
rank: 204
score: 98.79855346679688
patch: return position . max ( ) ;
rank: 204
score: 98.7588882446289
patch: return position ; position ~ position ;
rank: 204
score: 98.75010850694444
patch: return ; int position ~ ~ position ;
rank: 204
score: 98.71387736002605
patch: return ~ position ] ;
rank: 204
score: 98.69093627929688
patch: return super . position ( ) + position ;
rank: 205
score: 98.9346923828125
patch: return position . length ( ) + ALL _ IDS ;
rank: 205
score: 98.8446273803711
patch: return - - - - 1 ;
rank: 205
score: 98.79776611328126
patch: return position + position . position ( ) ;
rank: 205
score: 98.7588623046875
patch: return ~ position ; if position return position ;
rank: 205
score: 98.74985080295139
patch: return ~ ( position - start ) ;
rank: 205
score: 98.74907090928819
patch: return return position ; return - 0 ;
rank: 205
score: 98.71319580078125
patch: return ~ position - ALL _ IDS ;
rank: 205
score: 98.70333862304688
patch: if ( position == 0 position ;
rank: 205
score: 98.69091118706598
patch: for ( String position : position ) {
rank: 206
score: 98.93467203776042
patch: return position . to CaMeL String ( ) + 0 ;
rank: 206
score: 98.84408908420139
patch: return get ( text , position ) ;
rank: 206
score: 98.7982177734375
patch: return ~ bucket . close ( ) ;
rank: 206
score: 98.75757514105902
patch: return ~ position ; throw ~ 1 ;
rank: 206
score: 98.7493667602539
patch: return ~ ( Integer ) position ;
rank: 206
score: 98.74759928385417
patch: else if ~ position ; return position ;
rank: 206
score: 98.70272827148438
patch: return * * * * ~ ;
rank: 206
score: 98.69082302517361
patch: return position position ? position : 0 ;
rank: 207
score: 98.79791259765625
patch: } return ~ ~ ~ ALL _ IDS ;
rank: 207
score: 98.75692138671874
patch: return ~ 1 ; if ; return position ;
rank: 207
score: 98.74752371651786
patch: return return 1 + position ;
rank: 207
score: 98.74747467041016
patch: return ~ ( position - 1 ;
rank: 207
score: 98.71178521050348
patch: return to CaMeL String ( ) ; }
rank: 207
score: 98.70217556423611
patch: return ; . return ~ ~ 1 ;
rank: 207
score: 98.69060601128473
patch: return Math . min ( position ) ;
rank: 208
score: 98.93285023082386
patch: return ~ position . length ( ) * $NUMBER$ ;
rank: 208
score: 98.84288194444444
patch: return <= 0 ? 0 : position ;
rank: 208
score: 98.79720306396484
patch: else { return ALL _ IDS ;
rank: 208
score: 98.7562255859375
patch: return new position ; return position ;
rank: 208
score: 98.74715169270833
patch: return return position ; ;
rank: 208
score: 98.7116190592448
patch: return ~ ~ false ;
rank: 208
score: 98.70166887555804
patch: return * * * * /
rank: 208
score: 98.68950059678819
patch: return Math . ceil ( position ) ;
rank: 209
score: 98.93274536132813
patch: return position ? position > 0 : 0 ;
rank: 209
score: 98.8403076171875
patch: return if . length ( ) - 1 ;
rank: 209
score: 98.7562255859375
patch: return ~ - position ; return position ;
rank: 209
score: 98.7469991048177
patch: return ~ - 0 ;
rank: 209
score: 98.71008978949652
patch: return ALL _ IDS : ~ position ;
rank: 209
score: 98.70140838623047
patch: } if ; else return position ;
rank: 209
score: 98.689453125
patch: return position ? position : position ; ;
rank: 210
score: 98.83988952636719
patch: return ] . length ( ) ;
rank: 210
score: 98.79417724609375
patch: return text . length ( ) + $NUMBER$ ;
rank: 210
score: 98.75555419921875
patch: return position + ~ position ; return position ;
rank: 210
score: 98.74640570746527
patch: try { return return ~ ~ position ;
rank: 210
score: 98.74403599330357
patch: return return position - position ;
rank: 210
score: 98.71006266276042
patch: return arraycopy ( ALL _ IDS ) ;
rank: 210
score: 98.70110405815973
patch: } else { return position + position ;
rank: 210
score: 98.68878784179688
patch: return position + name . substring ( ) ;
rank: 211
score: 98.93053089488636
patch: return position ? ~ 0 : ALL _ IDS ;
rank: 211
score: 98.83987426757812
patch: return long [ ] . position ( ) ;
rank: 211
score: 98.79404296875
patch: return ~ ~ bucket . for CaMeL ID ;
rank: 211
score: 98.75535753038194
patch: return position ; return position ; / /
rank: 211
score: 98.74578094482422
patch: else { return ~ - position ;
rank: 211
score: 98.70897216796875
patch: return else parse CaMeL Into ( bucket ) ;
rank: 211
score: 98.70044623480902
patch: / * * ; return ~ position ;
rank: 211
score: 98.68804931640625
patch: return position > position ? position : 0 ;
rank: 212
score: 98.93037553267045
patch: return Long . to CaMeL String ( position ) ;
rank: 212
score: 98.75531005859375
patch: ~ ~ position ; return position ;
rank: 212
score: 98.7440185546875
patch: return false ; return ~ position ;
rank: 212
score: 98.7403076171875
patch: return position == null ? position : position ;
rank: 212
score: 98.70787963867187
patch: return ~ position . equals ( text ) ;
rank: 212
score: 98.6990966796875
patch: } return ~ 0 ;
rank: 212
score: 98.68789672851562
patch: return position + str . length ;
rank: 213
score: 98.93013139204545
patch: return * / return position . length ( ) ;
rank: 213
score: 98.837353515625
patch: return str . length ( ) + 1 ;
rank: 213
score: 98.79349093967014
patch: return - ( position + position ) ;
rank: 213
score: 98.7896484375
patch: return position . length ( ) ? position ;
rank: 213
score: 98.75499131944444
patch: return ~ position ; set ~ position ;
rank: 213
score: 98.74401177300348
patch: return ; int ~ return ~ position ;
rank: 213
score: 98.70735677083333
patch: return int CaMeL Value ( position ) ;
rank: 213
score: 98.6990737915039
patch: return ~ 1 + ~ 1 ;
rank: 213
score: 98.68681640625
patch: return position <= 0 ? position : 0 ;
rank: 214
score: 98.92919049944196
patch: return * / return position ;
rank: 214
score: 98.83643188476563
patch: return Integer . length ( ) - 0 ;
rank: 214
score: 98.79000244140624
patch: return ~ ALL _ IDS ( position ) ;
rank: 214
score: 98.78910827636719
patch: return position ~ ALL _ IDS ;
rank: 214
score: 98.75402153862848
patch: return position ; position return ~ position ;
rank: 214
score: 98.74312046595982
patch: return return position ~ position ;
rank: 214
score: 98.73970540364583
patch: return Math . max ( ~ position ;
rank: 214
score: 98.70614963107639
patch: return super . substring ( position ) ;
rank: 214
score: 98.6977310180664
patch: return ; , ~ 1 position ;
rank: 214
score: 98.68510606553819
patch: return - 1 ; position += position ;
rank: 215
score: 98.8359375
patch: return double . length ( ) ;
rank: 215
score: 98.75400390625
patch: return return position ; if ~ - 1 ;
rank: 215
score: 98.70519341362848
patch: return char CaMeL Value ( position ) ;
rank: 215
score: 98.69759792751736
patch: return ; , position ( 0 ) ;
rank: 215
score: 98.6840576171875
patch: return position < 0 ? position : 0 ;
rank: 216
score: 98.9287353515625
patch: return ALL _ IDS ? position : 1 ;
rank: 216
score: 98.7888916015625
patch: return ( ~ ~ ALL _ IDS ) ;
rank: 216
score: 98.7878662109375
patch: return position + size . length ( ) ;
rank: 216
score: 98.75366889105902
patch: return ~ position ; ~ ~ position ;
rank: 216
score: 98.74156842912946
patch: return return return ~ position ;
rank: 216
score: 98.68284776475694
patch: return position ? position : ~ 1 ;
rank: 217
score: 98.92803955078125
patch: return position ? position : $NUMBER$ ;
rank: 217
score: 98.83402709960937
patch: return ( int ) ~ ALL _ IDS ;
rank: 217
score: 98.75290256076389
patch: return ~ position ; for ~ 0 ;
rank: 217
score: 98.74155680338542
patch: return position ; return ~ position position ;
rank: 217
score: 98.73771667480469
patch: return ~ ( int ) position ;
rank: 217
score: 98.69738091362848
patch: return ; , 0 , 0 position ;
rank: 217
score: 98.68279266357422
patch: return position + hash CaMeL Code ;
rank: 218
score: 98.83346557617188
patch: return this . ALL _ IDS + position ;
rank: 218
score: 98.78606567382812
patch: bucket . set CaMeL Zone ( null ) ;
rank: 218
score: 98.75253295898438
patch: return ~ position + - position ;
rank: 218
score: 98.74129486083984
patch: if ~ position ; return position ;
rank: 218
score: 98.70159912109375
patch: return return ~ position + position ;
rank: 218
score: 98.69697401258681
patch: } else if ; else return position ;
rank: 218
score: 98.68109741210938
patch: if ( position > 0 ) return position ;
rank: 219
score: 98.92630004882812
patch: return position * ALL _ IDS ;
rank: 219
score: 98.833251953125
patch: return ~ position + $STRING$ ;
rank: 219
score: 98.78595581054688
patch: return ~ bucket . append ( position ) ;
rank: 219
score: 98.78451199001736
patch: return text . append ( position ) ;
rank: 219
score: 98.75210910373264
patch: return ~ 1 ; for ~ 1 ;
rank: 219
score: 98.73829650878906
patch: } else { return - 1 ;
rank: 219
score: 98.69631522042411
patch: return ~ ~ position position ;
rank: 219
score: 98.67969512939453
patch: return position + position + $NUMBER$ ;
rank: 220
score: 98.92620849609375
patch: return ~ position * ALL _ IDS ;
rank: 220
score: 98.83281792534723
patch: return return Integer . length ( ) ;
rank: 220
score: 98.78595581054688
patch: return ~ ALL _ IDS : - 0 ;
rank: 220
score: 98.78416442871094
patch: return position - ALL _ IDS ;
rank: 220
score: 98.75208282470703
patch: return ~ 1 ; ~ position ;
rank: 220
score: 98.73811558314732
patch: return position ~ ~ position ;
rank: 221
score: 98.92579956054688
patch: return text . length ( ) : 0 ;
rank: 221
score: 98.7838363647461
patch: return bucket . length ( ) ;
rank: 221
score: 98.7515625
patch: return position ; } if ; return position ;
rank: 221
score: 98.73772515190973
patch: return ; int ~ ; - 0 ;
rank: 221
score: 98.73553466796875
patch: return - ~ ~ position ;
rank: 221
score: 98.69602457682292
patch: return ; , position , position position ;
rank: 221
score: 98.6783935546875
patch: return position + get CaMeL Id ( ) ;
rank: 222
score: 98.92537064985795
patch: return Integer . to CaMeL String ( bucket ) ;
rank: 222
score: 98.83067491319444
patch: return this . position + - 1 ;
rank: 222
score: 98.78303833007813
patch: return text . length ( ) ? position ;
rank: 222
score: 98.75155978732639
patch: return - 1 ; if return position ;
rank: 222
score: 98.73698594835069
patch: return ; int position = - position ;
rank: 222
score: 98.73548126220703
patch: return ~ ( position * position ;
rank: 222
score: 98.69529893663194
patch: return ; , ~ * * * /
rank: 222
score: 98.67720336914063
patch: if ( position == position ) return position ;
rank: 223
score: 98.92410278320312
patch: return Date CaMeL Time CaMeL Zone . for CaMeL ID ;
rank: 223
score: 98.78362358940973
patch: return Float . length ( position ) ;
rank: 223
score: 98.75147094726563
patch: return ~ position ; return return ~ position ;
rank: 223
score: 98.73505859375
patch: return position + text . substring ( position ;
rank: 223
score: 98.6969502766927
patch: return - 1 ; }
rank: 223
score: 98.69503445095486
patch: return * * * return ~ $NUMBER$ ;
rank: 224
score: 98.82931518554688
patch: return ~ parse CaMeL Into ( text ) ;
rank: 224
score: 98.78268093532986
patch: return ( ~ ALL _ IDS ) ;
rank: 224
score: 98.7513671875
patch: return ~ position ; if ~ - position ;
rank: 224
score: 98.69691685267857
patch: return ~ position + length ;
rank: 224
score: 98.69493950737848
patch: return ; . length ( position ) ;
rank: 224
score: 98.67595672607422
patch: return position && position > 0 ;
rank: 225
score: 98.92360617897727
patch: return ~ ALL _ IDS + position + 1 ;
rank: 225
score: 98.82871500651042
patch: return get CaMeL Zone ( bucket ) ;
rank: 225
score: 98.78248426649306
patch: return ~ ALL _ IDS + null ;
rank: 225
score: 98.77916259765625
patch: return position + ALL _ IDS + 0 ;
rank: 225
score: 98.75025092230902
patch: return ~ position ; if position / ;
rank: 225
score: 98.73532443576389
patch: return ; int ~ position - 0 ;
rank: 225
score: 98.7341064453125
patch: return position - text . substring ( position ;
rank: 225
score: 98.69532606336806
patch: return else { return ~ position ; }
rank: 225
score: 98.67425537109375
patch: final int position = position - 1 ;
rank: 226
score: 98.9231669108073
patch: return ~ ~ position ? position : ALL _ IDS ;
rank: 226
score: 98.82757568359375
patch: return min . length ( ) ;
rank: 226
score: 98.78204345703125
patch: bucket . set CaMeL Zone ( $STRING$ ) ;
rank: 226
score: 98.77838134765625
patch: return * / ~ ALL _ IDS ;
rank: 226
score: 98.75009155273438
patch: return ~ position ; return 1 ;
rank: 226
score: 98.69483100043402
patch: return ~ position ? position : ) ;
rank: 226
score: 98.69400363498264
patch: return ; , 0 , 1 ) ;
rank: 226
score: 98.67408243815105
patch: return position / position ;
rank: 227
score: 98.92287375710227
patch: return ~ position . length ( ) ? position ;
rank: 227
score: 98.82701873779297
patch: return length . length ( ) ;
rank: 227
score: 98.78169759114583
patch: return ~ ( 0 - position ) ;
rank: 227
score: 98.75
patch: return ~ position ; else if ~ position ;
rank: 227
score: 98.69426879882812
patch: return . parse CaMeL Into ( text ) ;
rank: 227
score: 98.69380696614583
patch: } else { return ~ ~ 1 ;
rank: 227
score: 98.67125592912946
patch: return position , position ) ;
rank: 228
score: 98.74972873263889
patch: int position = position ; return position ;
rank: 228
score: 98.73094346788194
patch: return ~ Math . max ( position ;
rank: 228
score: 98.69325764973958
patch: if ( ~ position ;
rank: 228
score: 98.67037963867188
patch: return position ? position / $NUMBER$ : 0 ;
rank: 229
score: 98.92174183238636
patch: return Integer . max ( position + 1 ) ;
rank: 229
score: 98.8234619140625
patch: return Boolean . length . length ( ) ;
rank: 229
score: 98.77542114257812
patch: return bucket . get CaMeL Zone ( ) ;
rank: 229
score: 98.74780883789063
patch: return position position ; if ~ - 1 ;
rank: 229
score: 98.7317606608073
patch: return ; int position ;
rank: 229
score: 98.73018646240234
patch: else { return - position ; }
rank: 229
score: 98.69329833984375
patch: return ~ position . parse ( ) ;
rank: 229
score: 98.69312879774306
patch: return ; , ~ 1 + position ;
rank: 230
score: 98.92132013494319
patch: return text . length ( ) + - 1 ;
rank: 230
score: 98.82282850477431
patch: return ~ int . length ( ) ;
rank: 230
score: 98.78084716796874
patch: return ~ ( str . length ( ) ;
rank: 230
score: 98.74746365017361
patch: return position ; try if ~ position ;
rank: 230
score: 98.73162163628473
patch: try { return return ~ return position ;
rank: 230
score: 98.73003472222223
patch: return get CaMeL Id ( position ) ;
rank: 230
score: 98.69304063585069
patch: if ( ~ 0 == 0 position ;
rank: 230
score: 98.69240112304688
patch: return Date CaMeL Time CaMeL Zone . position ;
rank: 230
score: 98.67006225585938
patch: return compare CaMeL To ( position , position ;
rank: 231
score: 98.92127482096355
patch: return position : 0 ;
rank: 231
score: 98.82250213623047
patch: return ( String ) ~ position ;
rank: 231
score: 98.78023952907986
patch: return ~ ALL _ IDS - 1 ;
rank: 231
score: 98.74651227678571
patch: return position ; if position ;
rank: 231
score: 98.73023817274306
patch: return ; int position = - 1 ;
rank: 231
score: 98.72914123535156
patch: return position - start + 1 ;
rank: 231
score: 98.69303385416667
patch: / * * * ; return position ;
rank: 231
score: 98.69101969401042
patch: return : ~ position ;
rank: 231
score: 98.66913519965277
patch: return position position + $STRING$ + position ;
rank: 232
score: 98.82111952039931
patch: return ~ ~ position + - 1 ;
rank: 232
score: 98.74624972873264
patch: return position ; return position ; return ;
rank: 232
score: 98.73019748263889
patch: return ~ position ; return - 0 ;
rank: 232
score: 98.72682495117188
patch: return ~ - 1 ? position : position ;
rank: 232
score: 98.69088745117188
patch: return else parse CaMeL Into ( text ) ;
rank: 232
score: 98.66903076171874
patch: assert position != 0 : $STRING$ + position ;
rank: 233
score: 98.74592420789931
patch: return return position ; throw ~ position ;
rank: 233
score: 98.73001437717014
patch: return return - 1 + ~ position ;
rank: 233
score: 98.72578938802083
patch: return ~ $NUMBER$ * position + position ;
rank: 233
score: 98.69019571940105
patch: return * * * /
rank: 233
score: 98.68867323133681
patch: return ~ this . position + position ;
rank: 233
score: 98.66883680555556
patch: return position ? position : position position ;
rank: 234
score: 98.91982014973958
patch: return position + 1 + position . length ( ) ;
rank: 234
score: 98.77344512939453
patch: return new Integer ( position ) ;
rank: 234
score: 98.77254231770833
patch: return Long . max ( position ) ;
rank: 234
score: 98.74578857421875
patch: return ~ position position ; return position ;
rank: 234
score: 98.72980499267578
patch: else { return ~ position ; ;
rank: 234
score: 98.69015066964286
patch: } else { return false ;
rank: 234
score: 98.6884765625
patch: return ~ position ) ;
rank: 234
score: 98.66842651367188
patch: return position - hash CaMeL Code ;
rank: 235
score: 98.91888982599431
patch: return position . char CaMeL At ( position ) ;
rank: 235
score: 98.81888834635417
patch: return this . ~ ALL _ IDS ;
rank: 235
score: 98.77237548828126
patch: return ALL _ IDS ? ALL _ IDS ;
rank: 235
score: 98.77140977647569
patch: return - 1 . position ( ) ;
rank: 235
score: 98.74437713623047
patch: return position + ; return position ;
rank: 235
score: 98.72881317138672
patch: return return ~ return ~ position ;
rank: 235
score: 98.7236099243164
patch: return return ~ position - 1 ;
rank: 235
score: 98.68983459472656
patch: else { if return position ; }
rank: 235
score: 98.68812561035156
patch: return time . length ( ) ;
rank: 236
score: 98.81873779296875
patch: return for CaMeL Name . length ( ) ;
rank: 236
score: 98.7701416015625
patch: try { return ~ ALL _ IDS ;
rank: 236
score: 98.74403686523438
patch: return position ; else return position + position ;
rank: 236
score: 98.72820172991071
patch: return position ; return 0 ;
rank: 236
score: 98.72306518554687
patch: return Math . position ( position , position ;
rank: 236
score: 98.68954467773438
patch: } return ;
rank: 236
score: 98.68809678819444
patch: return super . equals ( bucket ) ;
rank: 236
score: 98.66767578125
patch: return position >= 1 ? position : 0 ;
rank: 237
score: 98.91822306315105
patch: return position + 0 + position . length ( ) ;
rank: 237
score: 98.81856079101563
patch: return int . length ( ) + 1 ;
rank: 237
score: 98.76947699652777
patch: else { return - - 1 ; }
rank: 237
score: 98.7437973022461
patch: return ~ - 1 ; break ;
rank: 237
score: 98.72608100043402
patch: return false ; try { return position ;
rank: 237
score: 98.72304958767361
patch: return ~ ( 1 * position ) ;
rank: 237
score: 98.68941243489583
patch: if ( position == 0 ) return ;
rank: 237
score: 98.66646728515624
patch: synchronized ( lock ) { return position ; }
rank: 238
score: 98.91754150390625
patch: return ~ position ? position : - 1 ;
rank: 238
score: 98.81831868489583
patch: return out . substring ( position ) ;
rank: 238
score: 98.77144775390624
patch: return position + ( text . position ) ;
rank: 238
score: 98.76930067274306
patch: return ~ ALL _ IDS + $STRING$ ;
rank: 238
score: 98.74320475260417
patch: return ~ 1 ; ; return position ;
rank: 238
score: 98.72478569878473
patch: return position ; return return - position ;
rank: 238
score: 98.68888854980469
patch: return ; . position return position ;
rank: 238
score: 98.66515096028645
patch: return position ^ position ;
rank: 239
score: 98.77116394042969
patch: return position . value ( ) ;
rank: 239
score: 98.76706368582589
patch: else { return - 0 ;
rank: 239
score: 98.74239095052083
patch: return ~ position ; if position position ;
rank: 239
score: 98.72470092773438
patch: return position ; return position ; ;
rank: 239
score: 98.722021484375
patch: return Integer . value CaMeL Of ( str ;
rank: 239
score: 98.66474151611328
patch: return position > 0 ? position ;
rank: 240
score: 98.81733534071181
patch: return ~ Integer . length ( ) ;
rank: 240
score: 98.76927490234375
patch: return ( position + position + position ) ;
rank: 240
score: 98.76553683810764
patch: throw new IO CaMeL Exception ( ) ;
rank: 240
score: 98.74187469482422
patch: return ~ position ; return false ;
rank: 240
score: 98.68824598524306
patch: if ; else { return position ; }
rank: 240
score: 98.68458557128906
patch: return else {
rank: 240
score: 98.66448296440973
patch: else { return position - position ; }
rank: 241
score: 98.81593540736607
patch: return * 0 . 0 ;
rank: 241
score: 98.76912434895833
patch: return Boolean . max ( position ) ;
rank: 241
score: 98.74043104383681
patch: return position ; if ~ position ; position
rank: 241
score: 98.72306605747768
patch: return return - - 0 ;
rank: 241
score: 98.71965942382812
patch: synchronized ( position ) { return ~ position ;
rank: 241
score: 98.68762969970703
patch: return position + 0 + 0 ;
rank: 242
score: 98.81578369140625
patch: return return ~ ALL _ IDS . length ;
rank: 242
score: 98.76438685825893
patch: return ~ ~ ~ 0 ;
rank: 242
score: 98.74007839626736
patch: return ~ $NUMBER$ ; return ~ position ;
rank: 242
score: 98.7227554321289
patch: return return - - - position ;
rank: 242
score: 98.71904907226562
patch: return Math . max ( 1 , position ;
rank: 242
score: 98.68216552734376
patch: return ~ position ] . length ( ) ;
rank: 242
score: 98.66385226779514
patch: return starts CaMeL With ( position ) ;
rank: 243
score: 98.81326293945312
patch: return Long . length ( ) ;
rank: 243
score: 98.76248168945312
patch: else { return 0 ;
rank: 243
score: 98.73954772949219
patch: return position + - - 1 ;
rank: 243
score: 98.71815321180556
patch: return ~ $NUMBER$ * position + 1 ;
rank: 243
score: 98.68557739257812
patch: return position * position + 0 ;
rank: 243
score: 98.66383056640625
patch: return position == 0 ? position : length ;
rank: 244
score: 98.91557173295455
patch: return ~ bucket . parse CaMeL Into ( ) ;
rank: 244
score: 98.76683213975694
patch: return position . append ( $STRING$ ) ;
rank: 244
score: 98.761962890625
patch: return ~ ALL _ IDS position ;
rank: 244
score: 98.738525390625
patch: return ~ 1 ; for ~ position ;
rank: 244
score: 98.72101508246527
patch: return - 1 ; return - $NUMBER$ ;
rank: 244
score: 98.718017578125
patch: return Math . min ( 0 , position ;
rank: 244
score: 98.68521457248264
patch: return 0 ; return position ~ position ;
rank: 244
score: 98.66362915039062
patch: return position + $STRING$ + position + position ;
rank: 245
score: 98.8114013671875
patch: return ( String ) position + 1 ;
rank: 245
score: 98.76180013020833
patch: return ~ ( 0 + position ) ;
rank: 245
score: 98.73843044704861
patch: return ~ position ; position return position ;
rank: 245
score: 98.7209701538086
patch: return ; int ~ - $STRING$ ;
rank: 245
score: 98.71776123046875
patch: synchronized ( this ) { return ~ position ;
rank: 245
score: 98.68510606553819
patch: return ~ 1 ? 0 : position ;
rank: 245
score: 98.67559814453125
patch: return . position ( ) ;
rank: 245
score: 98.66082153320312
patch: return position < position ? position : position ;
rank: 246
score: 98.80985514322917
patch: return ( int ) position + 1 ;
rank: 246
score: 98.73786078559027
patch: return position ; else return position ; }
rank: 246
score: 98.72096470424107
patch: return return ~ - position ;
rank: 246
score: 98.71759711371527
patch: return super . parse CaMeL Into ( ;
rank: 246
score: 98.68455505371094
patch: return ; . start ~ position ;
rank: 246
score: 98.67557779947917
patch: return ++ ~ position ;
rank: 247
score: 98.76496717664931
patch: else return text . length ( ) ;
rank: 247
score: 98.76011827256944
patch: return parse ( text , position ) ;
rank: 247
score: 98.73768920898438
patch: return ~ ~ position ; return ~ position ;
rank: 247
score: 98.72042846679688
patch: return return ~ ~ position position ;
rank: 247
score: 98.68429904513889
patch: return ; , position ( 1 ) ;
rank: 247
score: 98.67527262369792
patch: return text . substring ( 0 ) ;
rank: 247
score: 98.65967559814453
patch: if ( position == 0 ) {
rank: 248
score: 98.91471354166667
patch: return ~ position . parse CaMeL Into ( text ) ;
rank: 248
score: 98.80933380126953
patch: return this . position + 0 ;
rank: 248
score: 98.76421356201172
patch: throw new Exception ( $STRING$ ) ;
rank: 248
score: 98.75987413194444
patch: return ~ ( position + $NUMBER$ ) ;
rank: 248
score: 98.73671468098958
patch: return position ; } return position ; else
rank: 248
score: 98.71941460503473
patch: return return ~ return - - position ;
rank: 248
score: 98.71681043836806
patch: return position - text . ~ position ;
rank: 249
score: 98.80931396484375
patch: return . substring ( position , position ) ;
rank: 249
score: 98.75966389973958
patch: return ~ ALL _ IDS * 0 ;
rank: 249
score: 98.73659939236111
patch: return ~ position ; try return position ;
rank: 249
score: 98.71921115451389
patch: return return - 0 + ~ position ;
rank: 249
score: 98.716796875
patch: return ~ position * position ;
rank: 249
score: 98.68254089355469
patch: return position + position + 0 ;
rank: 249
score: 98.67387559678819
patch: return long CaMeL Value ( 1 ) ;
rank: 249
score: 98.65914577907986
patch: return position position ? position : position ;
rank: 250
score: 98.91330788352273
patch: return ~ ALL _ IDS ? position : position ;
rank: 250
score: 98.76040649414062
patch: return text . position + ALL _ IDS ;
rank: 250
score: 98.75953504774306
patch: return ~ ALL _ IDS + false ;
rank: 250
score: 98.73621215820313
patch: return ~ position ; while ; return position ;
rank: 250
score: 98.71890694754464
patch: finally { return - 1 ;
rank: 250
score: 98.71672712053571
patch: return - ~ - 1 ;
rank: 250
score: 98.68159993489583
patch: return position ; return position ~ position ;
rank: 250
score: 98.65861206054687
patch: if position >= position ) { return position ;
rank: 251
score: 98.80864800347223
patch: return ~ position ? 1 : 0 ;
rank: 251
score: 98.75952758789063
patch: return ALL _ IDS . max ( ) ;
rank: 251
score: 98.75697835286458
patch: return ~ ALL _ IDS * position ;
rank: 251
score: 98.73560926649306
patch: return new return position ; return position ;
rank: 251
score: 98.71871609157986
patch: / * ] return position + position ;
rank: 251
score: 98.68016357421875
patch: return ; . ;
rank: 251
score: 98.65802001953125
patch: return position == 0 ? $STRING$ : position ;
rank: 252
score: 98.91282348632812
patch: return position ? position : 0 . 0 ;
rank: 252
score: 98.80855712890624
patch: return position . length ( ) - 0 ;
rank: 252
score: 98.75948486328124
patch: return position . index CaMeL Of ( ) ;
rank: 252
score: 98.73546752929687
patch: return ~ position ; if ~ position 1 ;
rank: 252
score: 98.71805572509766
patch: return finally { return ~ position ;
rank: 252
score: 98.71492004394531
patch: return ~ ~ position - 1 ;
rank: 252
score: 98.67974175347223
patch: return * * * * * position ;
rank: 252
score: 98.67286682128906
patch: return * ~ position + position ;
rank: 252
score: 98.65775146484376
patch: return position == 0 ? position : 1 ;
rank: 253
score: 98.91265314275569
patch: return Integer . length ( position + 1 ) ;
rank: 253
score: 98.8076171875
patch: return - 0 . length ( ) ;
rank: 253
score: 98.75789184570313
patch: return position + chars . length ( ) ;
rank: 253
score: 98.75370958116319
patch: return - ( position + 0 ) ;
rank: 253
score: 98.73505859375
patch: return ~ position ; if ~ position ; position
rank: 253
score: 98.71788872612848
patch: return position ; return return - 0 ;
rank: 253
score: 98.67866346571181
patch: return ; . return position ~ position ;
rank: 253
score: 98.6727523803711
patch: return int CaMeL Value ( ) ;
rank: 253
score: 98.6563720703125
patch: return position ~ position ; ;
rank: 254
score: 98.91189575195312
patch: return position ? position . length ( ) : 0 ;
rank: 254
score: 98.80687866210937
patch: return this . ~ position + - 1 ;
rank: 254
score: 98.75697631835938
patch: return ~ bucket . substring ( position ) ;
rank: 254
score: 98.753662109375
patch: else { return ~ - 1 ; }
rank: 254
score: 98.71756998697917
patch: else { return - 1 + position ;
rank: 254
score: 98.67850748697917
patch: return ; , $NUMBER$ , position ) ;
rank: 255
score: 98.911669921875
patch: return ~ bucket . parse ( text ) ;
rank: 255
score: 98.80649820963542
patch: return ~ position + - - 1 ;
rank: 255
score: 98.75164794921875
patch: return case 1 : return ~ position ;
rank: 255
score: 98.73416476779514
patch: return ~ position ; public return position ;
rank: 255
score: 98.71348741319444
patch: return ~ ( position << 1 ) ;
rank: 255
score: 98.67836507161458
patch: } else { if return ~ position ;
rank: 255
score: 98.67180786132812
patch: return ~ ( ALL _ IDS ) ; }
rank: 255
score: 98.6557846069336
patch: assert position > 0 : $STRING$ ;
rank: 256
score: 98.80484347873264
patch: return Math . length ( 0 ) ;
rank: 256
score: 98.75031195746527
patch: return ~ ALL _ IDS ? 0 ;
rank: 256
score: 98.73375786675348
patch: return position ; if position return position ;
rank: 256
score: 98.71575927734375
patch: else { return ~ $NUMBER$ ;
rank: 256
score: 98.7133560180664
patch: return position + 1 + 1 ;
rank: 256
score: 98.67817034040179
patch: } ; return ~ position ;
rank: 256
score: 98.65559217664931
patch: if ( ~ position ) return position ;
rank: 257
score: 98.91037819602273
patch: return ~ position . length ( ) / 1 ;
rank: 257
score: 98.80369262695312
patch: return return position . substring ( position ) ;
rank: 257
score: 98.755615234375
patch: return text . length ( + position ) ;
rank: 257
score: 98.73246934678819
patch: return position ; if return ~ 1 ;
rank: 257
score: 98.71559143066406
patch: return this . position ~ position ;
rank: 257
score: 98.67804827008929
patch: return ; . ~ 0 ;
rank: 257
score: 98.67115783691406
patch: return ~ ~ position ; break ;
rank: 257
score: 98.65442766462054
patch: return position ( position ) ;
rank: 258
score: 98.91023763020833
patch: return ( position ? position : ALL _ IDS ) ;
rank: 258
score: 98.75551350911458
patch: return position . append ( position ) ;
rank: 258
score: 98.748779296875
patch: return - new Integer ( position ) ;
rank: 258
score: 98.71492767333984
patch: return false ; return - 1 ;
rank: 258
score: 98.70960693359375
patch: if ( position == - 1 ) break ;
rank: 258
score: 98.67784288194444
patch: return position ? 0 : ~ position ;
rank: 259
score: 98.80140380859375
patch: return <= 0 ? 0 : ~ position ;
rank: 259
score: 98.74771457248264
patch: return Double . length ( position ) ;
rank: 259
score: 98.73174285888672
patch: return position ; while ~ 1 ;
rank: 259
score: 98.71479797363281
patch: else { return - - position ;
rank: 259
score: 98.70880126953125
patch: return position - $STRING$ + position ;
rank: 259
score: 98.67660861545139
patch: return ; . to CaMeL String ( ;
rank: 259
score: 98.66973005022321
patch: return += position + position ;
rank: 259
score: 98.65269470214844
patch: return position ~ position ~ position ;
rank: 260
score: 98.80034790039062
patch: return str . length ( ) + 0 ;
rank: 260
score: 98.73066541883681
patch: return position ; ~ position ; break ;
rank: 260
score: 98.71430969238281
patch: } else { return return position ;
rank: 260
score: 98.70761108398438
patch: return position - 1 ? position : 0 ;
rank: 260
score: 98.67649841308594
patch: return * * * * return ;
rank: 260
score: 98.66954210069444
patch: return ~ position && ALL _ IDS ;
rank: 260
score: 98.6517842610677
patch: return position - length ;
rank: 261
score: 98.90845404730902
patch: return position ? ~ 0 : 0 ;
rank: 261
score: 98.79973493303571
patch: return * - - 1 ;
rank: 261
score: 98.75384521484375
patch: else return position . length ( ) ;
rank: 261
score: 98.73063151041667
patch: return return position ; return ~ 1 ;
rank: 261
score: 98.71365356445312
patch: return return ~ ~ - 0 ;
rank: 261
score: 98.70708356584821
patch: return ~ $NUMBER$ * position ;
rank: 261
score: 98.67630343967014
patch: return ; , ~ 1 position ) ;
rank: 261
score: 98.6691650390625
patch: return long CaMeL Value ( ~ position ) ;
rank: 261
score: 98.65166558159723
patch: return position ? 0 : - 1 ;
rank: 262
score: 98.90819549560547
patch: return position ? position : null ;
rank: 262
score: 98.79931640625
patch: return - $STRING$ . substring ( position ) ;
rank: 262
score: 98.7528564453125
patch: try { return position . length ( ) ;
rank: 262
score: 98.74327256944444
patch: } else { return - 1 ; }
rank: 262
score: 98.72996012369792
patch: return position ; if return - 1 ;
rank: 262
score: 98.71328735351562
patch: return return - position + position ;
rank: 262
score: 98.70493570963542
patch: return ~ Character . MAX _ VALUE ;
rank: 262
score: 98.67551967075893
patch: } if ; return position ;
rank: 262
score: 98.66806466238839
patch: return ~ position | position ;
rank: 262
score: 98.65040588378906
patch: final ~ position ; return position ;
rank: 263
score: 98.79917399088542
patch: return >= 1 ? position : 0 ;
rank: 263
score: 98.75237358940973
patch: return Long . length ( str ) ;
rank: 263
score: 98.72991943359375
patch: return position ; for return ~ position ;
rank: 263
score: 98.71261160714286
patch: return this . position position ;
rank: 263
score: 98.70463053385417
patch: return - position ? position : position ;
rank: 263
score: 98.67464870876736
patch: if ( ~ 0 ; return 0 ;
rank: 263
score: 98.66768798828124
patch: if ( position >= ALL _ IDS ) {
rank: 264
score: 98.79888044084821
patch: return ( int ) position ;
rank: 264
score: 98.72975667317708
patch: return position ; if ~ position 1 ;
rank: 264
score: 98.71257781982422
patch: return return - - - $STRING$ ;
rank: 264
score: 98.70444742838542
patch: return ~ new Integer ( position ) ;
rank: 264
score: 98.67435709635417
patch: return * * * position ~ position ;
rank: 264
score: 98.64931233723958
patch: if position >= position ) return position ;
rank: 265
score: 98.90704345703125
patch: return ( text . length ( ) + 1 ) ;
rank: 265
score: 98.7981689453125
patch: return this . parse CaMeL Into ( ) ;
rank: 265
score: 98.7425537109375
patch: return ( position - 0 ) ;
rank: 265
score: 98.72933620876736
patch: return ~ position ; else ~ position ;
rank: 265
score: 98.71212005615234
patch: return return ~ return - position ;
rank: 265
score: 98.70308685302734
patch: return position + name . length ;
rank: 265
score: 98.67408752441406
patch: return * * position + position ;
rank: 265
score: 98.6670150756836
patch: return ~ position ( position ) ;
rank: 266
score: 98.797509765625
patch: return Integer . length ( ) + position ;
rank: 266
score: 98.72928195529514
patch: return - - 1 ; return position ;
rank: 266
score: 98.71171351841518
patch: return - $STRING$ + position ;
rank: 266
score: 98.7010009765625
patch: return ~ position ? - 1 : position ;
rank: 266
score: 98.67399379185268
patch: else { return 1 ; }
rank: 266
score: 98.66669311523438
patch: return += position ;
rank: 267
score: 98.9068270596591
patch: return Long . to CaMeL String ( text ) ;
rank: 267
score: 98.74995422363281
patch: return ALL _ IDS : position ;
rank: 267
score: 98.73994276258681
patch: return * return ~ ALL _ IDS ;
rank: 267
score: 98.729052734375
patch: return position ; return ~ position ; break ;
rank: 267
score: 98.708251953125
patch: try { return return position ;
rank: 267
score: 98.69880894252232
patch: return position - ~ position ;
rank: 267
score: 98.6664810180664
patch: return ~ ~ position ; } }
rank: 268
score: 98.9065829190341
patch: return text . substring ( position + $NUMBER$ ) ;
rank: 268
score: 98.79475911458333
patch: return == 0 ? 0 : position ;
rank: 268
score: 98.74956665039062
patch: return position . length ( ) : 1 ;
rank: 268
score: 98.73982747395833
patch: return ~ ( position + $STRING$ ) ;
rank: 268
score: 98.69635687934027
patch: return position ~ text . length ( ;
rank: 268
score: 98.6727294921875
patch: } else { if ~ position ;
rank: 268
score: 98.6651611328125
patch: return ~ position . parse ( position ) ;
rank: 269
score: 98.79473876953125
patch: return - ] . length ( ) ;
rank: 269
score: 98.74836730957031
patch: return position + position + length ;
rank: 269
score: 98.73851013183594
patch: } return ~ ~ ~ position ;
rank: 269
score: 98.72862548828125
patch: return ~ 1 ; return ; return position ;
rank: 269
score: 98.70665740966797
patch: return 0 ; return - position ;
rank: 269
score: 98.6951675415039
patch: return position + start + position ;
rank: 269
score: 98.67251925998264
patch: return ; , ~ $NUMBER$ position ) ;
rank: 269
score: 98.66449652777777
patch: return ~ position + this . position ;
rank: 269
score: 98.64589436848958
patch: final position += position ; return position ;
rank: 270
score: 98.90428670247395
patch: return ( text . length ( ) + 0 ) ;
rank: 270
score: 98.79435221354167
patch: return ! text . length ( ) ;
rank: 270
score: 98.73812866210938
patch: return ~ ~ ( position ) ;
rank: 270
score: 98.7281494140625
patch: return position ; try if ~ 1 ;
rank: 270
score: 98.70653424944196
patch: return position ; return false ;
rank: 270
score: 98.69054565429687
patch: return position - new Integer ( position ) ;
rank: 270
score: 98.67227935791016
patch: else { if ; return 0 ;
rank: 270
score: 98.66423950195312
patch: return else { return ~ ALL _ IDS ;
rank: 270
score: 98.64541190011161
patch: return position - 1 ; ;
rank: 271
score: 98.90415261008523
patch: return ~ position ? position : 0 . 0 ;
rank: 271
score: 98.73808942522321
patch: return * return ~ position ;
rank: 271
score: 98.7270736694336
patch: return ~ 1 ; throw position ;
rank: 271
score: 98.690087890625
patch: return return ~ ( position - 1 ) ;
rank: 271
score: 98.67071533203125
patch: return ~ 1 + position position ;
rank: 271
score: 98.64414978027344
patch: return position * position - 1 ;
rank: 272
score: 98.90348307291667
patch: else { return ~ text . length ( ) ; }
rank: 272
score: 98.79360961914062
patch: return Float . length ( ) ;
rank: 272
score: 98.73788791232639
patch: return ( position + - position ) ;
rank: 272
score: 98.7269287109375
patch: return position ; if ; ~ position ;
rank: 272
score: 98.70250592912946
patch: else { return - $NUMBER$ ;
rank: 272
score: 98.68922932942708
patch: if ( position != - 1 ) {
rank: 272
score: 98.670654296875
patch: * * * * * * * /
rank: 272
score: 98.66410609654018
patch: return + position + position ;
rank: 273
score: 98.90333251953125
patch: return position ? 0 : ALL _ IDS ;
rank: 273
score: 98.7920166015625
patch: return long . length ( ) + 1 ;
rank: 273
score: 98.73737250434027
patch: return ( str . length ( ) ;
rank: 273
score: 98.72689480251736
patch: return - position ; if ~ position ;
rank: 273
score: 98.701904296875
patch: return * return position ;
rank: 273
score: 98.67044067382812
patch: return ; , position ~ position ;
rank: 274
score: 98.90329811789773
patch: return position + Long . length ( position ) ;
rank: 274
score: 98.7918701171875
patch: return float . length ( ) ;
rank: 274
score: 98.73694610595703
patch: return ~ ~ ~ - 1 ;
rank: 274
score: 98.7264892578125
patch: return position ; else if ~ - 1 ;
rank: 274
score: 98.70164489746094
patch: return ; int return - position ;
rank: 274
score: 98.68745422363281
patch: finally { return ~ position ; }
rank: 274
score: 98.67028130425348
patch: return ; . position return ~ 1 ;
rank: 274
score: 98.66357421875
patch: return ~ position : false ;
rank: 274
score: 98.64263153076172
patch: throw new Error ( $STRING$ ) ;
rank: 275
score: 98.90194702148438
patch: return ~ position . substring ( position - 1 ) ;
rank: 275
score: 98.7445556640625
patch: return position . substring ( position + ) ;
rank: 275
score: 98.72615966796874
patch: return ~ position ; else ; return position ;
rank: 275
score: 98.66924370659723
patch: return ~ 0 ; return ~ 1 ;
rank: 275
score: 98.66325547960069
patch: return ~ position . max ( ) ;
rank: 276
score: 98.78974609375
patch: return * false ;
rank: 276
score: 98.725146484375
patch: return ; = ~ position ; return position ;
rank: 276
score: 98.69451032366071
patch: return return - - $STRING$ ;
rank: 276
score: 98.66863335503473
patch: if ( ~ 0 ; return position ;
rank: 276
score: 98.64045545789931
patch: return value CaMeL Of ( position ) ;
rank: 277
score: 98.90047607421874
patch: return position . length ( ) * $NUMBER$ ;
rank: 277
score: 98.78963012695313
patch: return if . length ( ) + 1 ;
rank: 277
score: 98.74167209201389
patch: return bucket . substring ( position ) ;
rank: 277
score: 98.73486328125
patch: return * ( position + position ) ;
rank: 277
score: 98.72426147460938
patch: return return position ; break ; return position ;
rank: 277
score: 98.66838921440973
patch: return ; . position ( ~ 1 ;
rank: 277
score: 98.6612548828125
patch: return char CaMeL At ( position ) ;
rank: 277
score: 98.64044867621527
patch: return position + hash CaMeL Code ( ;
rank: 278
score: 98.789404296875
patch: return this . bucket . position ( ) ;
rank: 278
score: 98.74156358506944
patch: return position + * ALL _ IDS ;
rank: 278
score: 98.72388373480902
patch: return ~ + position ; return position ;
rank: 278
score: 98.69397735595703
patch: logger . append ( position ) ;
rank: 278
score: 98.660888671875
patch: return ~ ~ ~ position + position ;
rank: 278
score: 98.63993072509766
patch: sb . append ( str ) ;
rank: 279
score: 98.899365234375
patch: return position * ALL _ IDS . length ;
rank: 279
score: 98.78932020399306
patch: return * ( position - 1 ) ;
rank: 279
score: 98.7415283203125
patch: return text . index CaMeL Of ( ) ;
rank: 279
score: 98.73092990451389
patch: return += ALL _ IDS . length ;
rank: 279
score: 98.72370910644531
patch: return ~ position ; break ; int
rank: 279
score: 98.69151960100446
patch: else ; return ~ position ;
rank: 279
score: 98.68515625
patch: return position - 1 ? position : 1 ;
rank: 279
score: 98.66804334852431
patch: return ; , length ( position ) ;
rank: 279
score: 98.66052924262152
patch: return int CaMeL Value ( bucket ) ;
rank: 280
score: 98.89910888671875
patch: return Date CaMeL Time CaMeL Parser CaMeL Bucket . false ;
rank: 280
score: 98.72990199497768
patch: return ALL _ IDS ) ;
rank: 280
score: 98.72236463758681
patch: return ~ position ; else if position ;
rank: 280
score: 98.6914291381836
patch: return ; int position ~ 0 ;
rank: 280
score: 98.68340454101562
patch: return position - position ? position : position ;
rank: 280
score: 98.66690063476562
patch: return ; , 0 position ) ;
rank: 280
score: 98.65713065011161
patch: return position : ~ position ;
rank: 280
score: 98.63841417100694
patch: return position + to CaMeL String ( ;
rank: 281
score: 98.78831176757812
patch: return ~ ~ ALL _ IDS + 1 ;
rank: 281
score: 98.74043273925781
patch: return position . start ( ) ;
rank: 281
score: 98.72829861111111
patch: return text . position ( position ) ;
rank: 281
score: 98.721923828125
patch: return position ; else throw ~ position ;
rank: 281
score: 98.69134521484375
patch: } else { return - position ;
rank: 281
score: 98.6829833984375
patch: return super . ;
rank: 281
score: 98.63834635416667
patch: return - position + position + 1 ;
rank: 282
score: 98.8971835049716
patch: return Math . start ( text , position ) ;
rank: 282
score: 98.72724745008681
patch: return ~ ~ ~ position + 1 ;
rank: 282
score: 98.72049560546876
patch: return ~ position ; if ~ position ; else
rank: 282
score: 98.69129180908203
patch: return 0 ; return - $STRING$ ;
rank: 282
score: 98.6821060180664
patch: return - 1 return - 1 ;
rank: 282
score: 98.65603637695312
patch: return ~ ~ true ;
rank: 282
score: 98.63705783420139
patch: final int position = position + 1 ;
rank: 283
score: 98.89694213867188
patch: return Date CaMeL Time CaMeL Parser CaMeL Bucket . $STRING$ ;
rank: 283
score: 98.72032335069444
patch: return ~ position ; append ~ position ;
rank: 283
score: 98.66612413194444
patch: return ; . ~ position ~ position ;
rank: 283
score: 98.65586547851562
patch: return Math . length ( ~ position ) ;
rank: 283
score: 98.63667805989583
patch: assert position >= position ; return position ;
rank: 284
score: 98.89647327769886
patch: return * * ~ position . length ( ) ;
rank: 284
score: 98.73926391601563
patch: return text . length ( ) ~ position ;
rank: 284
score: 98.72696940104167
patch: return - 1 + ALL _ IDS ;
rank: 284
score: 98.72012939453126
patch: return ~ position ; for ~ - 1 ;
rank: 284
score: 98.68989562988281
patch: / else { return - position ;
rank: 284
score: 98.68036499023438
patch: try { return position ; } catch ( ;
rank: 284
score: 98.66558159722223
patch: return ; , 0 return ~ $NUMBER$ ;
rank: 284
score: 98.65522003173828
patch: return byte CaMeL Value ( ) ;
rank: 285
score: 98.89498901367188
patch: return text . length ( ) ? ALL _ IDS ;
rank: 285
score: 98.78535461425781
patch: return this . position + position ;
rank: 285
score: 98.73914794921875
patch: return text . length ( ) + false ;
rank: 285
score: 98.72640991210938
patch: ~ text . length ( ) ;
rank: 285
score: 98.71994357638889
patch: return position position ; return ~ 1 ;
rank: 285
score: 98.67921447753906
patch: return Float . MAX _ VALUE ;
rank: 285
score: 98.66474151611328
patch: if ( ~ 0 == 0 ;
rank: 285
score: 98.65403529575893
patch: return / - 1 ; }
rank: 285
score: 98.63336859809027
patch: return position & 0 x 1 f ;
rank: 286
score: 98.89497514204545
patch: return ~ text . length ( ) : position ;
rank: 286
score: 98.78388807508681
patch: return this . parse CaMeL Into 0 ;
rank: 286
score: 98.72538926866319
patch: return position + ( position 1 ) ;
rank: 286
score: 98.71940104166667
patch: return new return position ;
rank: 286
score: 98.67856174045139
patch: return position . trim ( position ) ;
rank: 286
score: 98.66464669363839
patch: return ~ $NUMBER$ + position ;
rank: 286
score: 98.6531494140625
patch: return ~ position . append ( text ) ;
rank: 287
score: 98.89455344460227
patch: return ~ ALL _ IDS ? ALL _ IDS ;
rank: 287
score: 98.7822036743164
patch: return byte . length ( ) ;
rank: 287
score: 98.73739013671874
patch: return position + ALL _ IDS ? position ;
rank: 287
score: 98.72506713867188
patch: return Math . size ( ) ;
rank: 287
score: 98.68891906738281
patch: return finally { return - position ;
rank: 287
score: 98.67820739746094
patch: return position * $NUMBER$ * $NUMBER$ ;
rank: 287
score: 98.66427273220486
patch: if ( ~ 0 == ~ 1 ;
rank: 288
score: 98.89442138671875
patch: return position + ( position + 0 ) ;
rank: 288
score: 98.78173149956598
patch: return get CaMeL Name ( text ) ;
rank: 288
score: 98.71909586588542
patch: return return position ; while ~ position ;
rank: 288
score: 98.68888854980469
patch: return return ~ position - position ;
rank: 288
score: 98.66419219970703
patch: return ; , 0 ~ position ;
rank: 289
score: 98.8943379720052
patch: return ~ parse CaMeL Into ( text , position ) ;
rank: 289
score: 98.77974243164063
patch: return Integer . length ( ) + $STRING$ ;
rank: 289
score: 98.7349853515625
patch: } return text . substring ( position ) ;
rank: 289
score: 98.71816677517361
patch: return position ; if return return position ;
rank: 289
score: 98.67678493923611
patch: return position . length ( position ) ;
rank: 289
score: 98.66416713169643
patch: return ~ 1 + 0 ;
rank: 289
score: 98.6517822265625
patch: return ~ position . trim ( ) ; }
rank: 289
score: 98.63033040364583
patch: synchronized ( position ) { return position ;
rank: 290
score: 98.89414284446023
patch: return ~ Date CaMeL Time CaMeL Parser . bucket ;
rank: 290
score: 98.77848052978516
patch: return return ~ ALL _ IDS ;
rank: 290
score: 98.73430786132812
patch: return text . position ( ) + position ;
rank: 290
score: 98.72139739990234
patch: return ALL _ IDS + 0 ;
rank: 290
score: 98.71771240234375
patch: return ~ position ; return ~ - position ;
rank: 290
score: 98.68633270263672
patch: return finally { return - $STRING$ ;
rank: 290
score: 98.6767578125
patch: return ~ position * $NUMBER$ + position ;
rank: 290
score: 98.66400824652777
patch: if ( ~ 1 == position position ;
rank: 290
score: 98.65154266357422
patch: return time . trim ( ) ;
rank: 290
score: 98.628662109375
patch: final position = position - 1 ;
rank: 291
score: 98.89368785511364
patch: return position . substring ( position - $NUMBER$ ) ;
rank: 291
score: 98.77809651692708
patch: return >= 0 ? position : 1 ;
rank: 291
score: 98.73358154296875
patch: return Boolean . size ( position ) ;
rank: 291
score: 98.72108289930556
patch: return - ( ALL _ IDS ) ;
rank: 291
score: 98.71763392857143
patch: return ~ position ; return ;
rank: 291
score: 98.68609619140625
patch: } return ~ return position ;
rank: 291
score: 98.67569732666016
patch: / * return position - 1 ;
rank: 291
score: 98.65089111328125
patch: return ~ ~ position . position ( ) ;
rank: 291
score: 98.62836371527777
patch: throw new Assertion CaMeL Error ( $STRING$ ;
rank: 292
score: 98.8933438387784
patch: return Math . length ( position , position ) ;
rank: 292
score: 98.77797444661458
patch: return > 1 ? position : 0 ;
rank: 292
score: 98.7330322265625
patch: return position ( position , position ) ;
rank: 292
score: 98.72024875217014
patch: throw new Interrupted CaMeL Exception ( ) ;
rank: 292
score: 98.71759033203125
patch: return position ; else ~ position ;
rank: 292
score: 98.6834487915039
patch: / else { return - 1 ;
rank: 292
score: 98.67569580078126
patch: assert text . length ( ) > 0 ;
rank: 292
score: 98.66291155133929
patch: } else { return 1 ;
rank: 292
score: 98.65076293945313
patch: return ~ ~ position : ALL _ IDS ;
rank: 293
score: 98.8931172688802
patch: throw new Runtime CaMeL Exception ( $STRING$ + text ) ;
rank: 293
score: 98.73225402832031
patch: return str . position ( ) ;
rank: 293
score: 98.71636352539062
patch: return position + position ; if ~ 1 ;
rank: 293
score: 98.68254089355469
patch: return ~ 0 ; return position ;
rank: 293
score: 98.67565239800348
patch: return ~ ( position / position ) ;
rank: 293
score: 98.66289605034723
patch: } if ( 0 == position position ;
rank: 293
score: 98.65052490234375
patch: return super . parse ( bucket ) ; }
rank: 294
score: 98.8930996981534
patch: return Integer . value CaMeL Of ( text ) ;
rank: 294
score: 98.73110961914062
patch: return ( position + position ) + position ;
rank: 294
score: 98.71859305245536
patch: return ~ ALL _ IDS }
rank: 294
score: 98.71558380126953
patch: return position ; for ~ 0 ;
rank: 294
score: 98.68238830566406
patch: int * / return ~ position ;
rank: 294
score: 98.67303466796875
patch: return super . position ( position ;
rank: 294
score: 98.66275024414062
patch: else { if ; return position ;
rank: 295
score: 98.77584228515624
patch: return Integer . to CaMeL String ( ) ;
rank: 295
score: 98.72984619140625
patch: return ( position + position + 1 ) ;
rank: 295
score: 98.68227713448661
patch: finally { return - position ;
rank: 295
score: 98.67208099365234
patch: return position + position - position ;
rank: 295
score: 98.66272735595703
patch: return * * * position position ;
rank: 295
score: 98.64937337239583
patch: return int ~ position ;
rank: 295
score: 98.62570626395089
patch: return position ~ - 1 ;
rank: 296
score: 98.89227849786931
patch: return ~ ALL _ IDS ? position : $NUMBER$ ;
rank: 296
score: 98.77544487847223
patch: return > 0 ? position : 1 ;
rank: 296
score: 98.71644422743056
patch: return Math . size ( position ) ;
rank: 296
score: 98.71535034179688
patch: return ~ ~ ~ position ; return position ;
rank: 296
score: 98.680908203125
patch: } finally { return position ;
rank: 296
score: 98.67178955078126
patch: return - ~ ( position - 1 ) ;
rank: 296
score: 98.66209581163194
patch: return * * * position * * /
rank: 297
score: 98.89177911931819
patch: return Locale . for CaMeL ID ( text ) ;
rank: 297
score: 98.77521514892578
patch: return 0 . length ( ) ;
rank: 297
score: 98.72684054904514
patch: return position . substring ( length ) ;
rank: 297
score: 98.67015380859375
patch: return position + ( position - 1 ) ;
rank: 297
score: 98.66189139229911
patch: * * * * * /
rank: 297
score: 98.62251112196181
patch: synchronized ( this ) { return position ;
rank: 298
score: 98.89162190755208
patch: return ~ position ? ALL _ IDS ;
rank: 298
score: 98.77418212890625
patch: return * true ;
rank: 298
score: 98.7152099609375
patch: return position ; final return position ;
rank: 298
score: 98.71257019042969
patch: ~ ALL _ IDS . length ;
rank: 298
score: 98.67739868164062
patch: catch ~ $STRING$ ; return position ;
rank: 298
score: 98.66104465060764
patch: } else { return ~ $NUMBER$ ; }
rank: 298
score: 98.647900390625
patch: return . parse ( text , position ) ;
rank: 298
score: 98.62078857421875
patch: return position - 1 ~ position ;
rank: 299
score: 98.77373046875
patch: return this . ALL _ IDS + 0 ;
rank: 299
score: 98.7243896484375
patch: return ~ text ;
rank: 299
score: 98.714599609375
patch: ~ - 1 ; return position ;
rank: 299
score: 98.71060943603516
patch: return - 1 . - position ;
rank: 299
score: 98.67596435546875
patch: return return ~ ~ - position ;
rank: 299
score: 98.66914876302083
patch: return - 1 position ;
rank: 299
score: 98.66053602430556
patch: if ( ~ $NUMBER$ == position position ;
rank: 299
score: 98.64675903320312
patch: return ~ position ? position : ~ position ;
rank: 299
score: 98.62017144097223
patch: return >= 0 ? position : position ;
rank: 300
score: 98.88970947265625
patch: return ~ text . substring ( position , position ) ;
rank: 300
score: 98.77365112304688
patch: return ~ position + - 0 ;
rank: 300
score: 98.72370147705078
patch: return in . length ( ) ;
rank: 300
score: 98.71392822265625
patch: return position ; for ~ position ; break ;
rank: 300
score: 98.67572021484375
patch: else { return position ; } ;
rank: 300
score: 98.6691162109375
patch: return ~ - 1 ? position : 0 ;
rank: 300
score: 98.65993245442708
patch: } if return position ;
rank: 300
score: 98.64584350585938
patch: return ~ position : ~ ALL _ IDS ;
rank: 301
score: 98.8888827237216
patch: return position . substring ( position , position ) ;
rank: 301
score: 98.77351684570313
patch: return int . length ( ) + 0 ;
rank: 301
score: 98.71363525390625
patch: return position ; } if return ~ position ;
rank: 301
score: 98.70993381076389
patch: return ~ ALL _ IDS && 0 ;
rank: 301
score: 98.67544555664062
patch: else { return position ~ position ;
rank: 301
score: 98.64579554966518
patch: return ~ this . position ;
rank: 301
score: 98.61886257595486
patch: return super . append ( str ) ;
rank: 302
score: 98.8876444498698
patch: return ~ ~ position . length ( ) + 1 ;
rank: 302
score: 98.7734375
patch: return if . length ( ) + 0 ;
rank: 302
score: 98.72103881835938
patch: return position ? text . length ( ) ;
rank: 302
score: 98.71333821614583
patch: return ~ position ; add ~ position ;
rank: 302
score: 98.67539760044643
patch: finally { return - $STRING$ ;
rank: 302
score: 98.66822052001953
patch: return ~ ( long ) position ;
rank: 302
score: 98.65839494977679
patch: return ; return ~ position ;
rank: 302
score: 98.64494493272569
patch: return ALL _ IDS + ~ position ;
rank: 303
score: 98.88747151692708
patch: return position ? ~ position : 1 ;
rank: 303
score: 98.77311401367187
patch: return int . length ( ) - 1 ;
rank: 303
score: 98.71274820963542
patch: return ~ position ; for return position ;
rank: 303
score: 98.70797390407986
patch: return ~ ALL _ IDS + true ;
rank: 303
score: 98.6748046875
patch: / * ] return position position ;
rank: 303
score: 98.65830993652344
patch: return * * position + 1 ;
rank: 303
score: 98.64433070591518
patch: return ~ ( false ) ;
rank: 304
score: 98.88639692826705
patch: return ~ str . length ( ) + 0 ;
rank: 304
score: 98.77240753173828
patch: return int . size ( ) ;
rank: 304
score: 98.72024197048611
patch: return Integer . length ( str ) ;
rank: 304
score: 98.71195678710937
patch: return ~ position ; else return ~ position ;
rank: 304
score: 98.70598602294922
patch: return ( position - 1 ) ;
rank: 304
score: 98.67411804199219
patch: return ; int ~ return position ;
rank: 304
score: 98.65810721261161
patch: return position * ~ 1 ;
rank: 304
score: 98.64395751953126
patch: return ~ this . ALL _ IDS ; }
rank: 305
score: 98.77210998535156
patch: return out . length ( ) ;
rank: 305
score: 98.70365905761719
patch: return ( 0 - position ) ;
rank: 305
score: 98.67373221261161
patch: return position ~ position position ;
rank: 305
score: 98.66627807617188
patch: return position - position ? position : 1 ;
rank: 305
score: 98.65684678819444
patch: return * * * position + position ;
rank: 305
score: 98.61445617675781
patch: return position + $STRING$ + str ;
rank: 306
score: 98.88594193892045
patch: return ~ text . length ( ) * $NUMBER$ ;
rank: 306
score: 98.77189331054687
patch: return / 0 ;
rank: 306
score: 98.71149359809027
patch: return position ; if return - position ;
rank: 306
score: 98.703369140625
patch: ~ ~ position ; return ~ position ;
rank: 306
score: 98.65681966145833
patch: return * * * * return position ;
rank: 307
score: 98.771240234375
patch: return this . ~ ~ position ;
rank: 307
score: 98.71919759114583
patch: return ~ ( position + length ) ;
rank: 307
score: 98.71106567382813
patch: return ~ position ; if position = position ;
rank: 307
score: 98.70263671875
patch: return ~ ALL _ IDS ? position
rank: 307
score: 98.67081451416016
patch: try { return ~ position ; }
rank: 307
score: 98.64165581597223
patch: return ~ position + this . length ;
rank: 307
score: 98.61336844308036
patch: return position & - 1 ;
rank: 308
score: 98.77066802978516
patch: return long . position ( ) ;
rank: 308
score: 98.71907348632813
patch: return ( position ? position : position ) ;
rank: 308
score: 98.71059841579861
patch: return ~ position ; / return position ;
rank: 308
score: 98.67047119140625
patch: return ; int ~ ~ 1 ;
rank: 308
score: 98.66436767578125
patch: return ~ ( position position - 1 ) ;
rank: 308
score: 98.65656280517578
patch: return ; , return $NUMBER$ ) ;
rank: 308
score: 98.6410888671875
patch: return ~ position . get ( position ) ;
rank: 309
score: 98.88535853794643
patch: return ~ position : 0 ;
rank: 309
score: 98.71048990885417
patch: return ~ 1 ; ~ - 1 ;
rank: 309
score: 98.70092095269098
patch: return ~ position ? 0 : position ;
rank: 309
score: 98.67031860351562
patch: return return position + - 1 ;
rank: 309
score: 98.66316223144531
patch: return position - start - start ;
rank: 309
score: 98.65629069010417
patch: return * * * ;
rank: 309
score: 98.63996233258929
patch: return ~ position : ) ;
rank: 309
score: 98.60802459716797
patch: return position * 1 + position ;
rank: 310
score: 98.88519287109375
patch: return - $NUMBER$ ? position : 0 ;
rank: 310
score: 98.7704345703125
patch: return int . length ( ) - 0 ;
rank: 310
score: 98.70907156808036
patch: return ~ position ; / /
rank: 310
score: 98.70020209418402
patch: return ~ ALL _ IDS ~ position ;
rank: 310
score: 98.6691385904948
patch: else ; return position ;
rank: 310
score: 98.65614827473958
patch: } if ; else { return position ;
rank: 310
score: 98.63972981770833
patch: return position . length ( ) ; }
rank: 310
score: 98.60793728298611
patch: return position ~ name . length ( ;
rank: 311
score: 98.88480224609376
patch: return position . length ( ) / 1 ;
rank: 311
score: 98.76983642578125
patch: return start . length ( ) ;
rank: 311
score: 98.71756998697917
patch: return position . parse ( text ) ;
rank: 311
score: 98.70871988932292
patch: return position ; try = ~ position ;
rank: 311
score: 98.69749620225694
patch: else { return ALL _ IDS ; }
rank: 311
score: 98.66881561279297
patch: return 0 ; return - 0 ;
rank: 311
score: 98.66259765625
patch: return position - text . position ;
rank: 311
score: 98.65242004394531
patch: return ; , position + 0 ;
rank: 311
score: 98.63965454101563
patch: return . to CaMeL String ( ) ; }
rank: 312
score: 98.88399658203124
patch: return ALL _ IDS ? position : $NUMBER$ ;
rank: 312
score: 98.76879204644098
patch: return return int . length ( ) ;
rank: 312
score: 98.7087158203125
patch: return ~ position ; break ; if position ;
rank: 312
score: 98.66830444335938
patch: } return - $STRING$ + position ;
rank: 312
score: 98.66242980957031
patch: return ~ ( position * $NUMBER$ ;
rank: 312
score: 98.63837280273438
patch: return + position ;
rank: 312
score: 98.60540093315973
patch: else { return position / $NUMBER$ ; }
rank: 313
score: 98.76773834228516
patch: return list . length ( ) ;
rank: 313
score: 98.71623992919922
patch: return text . position + position ;
rank: 313
score: 98.7086669921875
patch: return position ; } return ~ - 1 ;
rank: 313
score: 98.69493865966797
patch: return ~ ~ position + 0 ;
rank: 313
score: 98.6674575805664
patch: return position ; return ~ 0 ;
rank: 313
score: 98.65119171142578
patch: return ; . ~ position position ;
rank: 313
score: 98.63762071397569
patch: return super . equals ( text ) ;
rank: 313
score: 98.60526529947917
patch: return position ? position : 0 ; ;
rank: 314
score: 98.76642608642578
patch: return String . length ( ) ;
rank: 314
score: 98.70863647460938
patch: return position ; } if position = position ;
rank: 314
score: 98.69485909598214
patch: } return - - 1 ;
rank: 314
score: 98.66693115234375
patch: return return position + 0 ;
rank: 314
score: 98.64991760253906
patch: return ; , ~ 0 ) ;
rank: 314
score: 98.63717041015624
patch: return ~ position + ALL _ IDS ; }
rank: 315
score: 98.88361273871527
patch: return * position ? position : 0 ;
rank: 315
score: 98.76636352539063
patch: return str . length ( ) - 0 ;
rank: 315
score: 98.70859375
patch: return ~ position ; if return ~ 1 ;
rank: 315
score: 98.6927261352539
patch: return ~ ~ ~ ~ 0 ;
rank: 315
score: 98.66676330566406
patch: return - - 1 + position ;
rank: 315
score: 98.66155327690973
patch: return ~ ( position >> $NUMBER$ ) ;
rank: 315
score: 98.63711886935764
patch: return long CaMeL Value ( ) ; }
rank: 315
score: 98.60405731201172
patch: int position = position - 1 ;
rank: 316
score: 98.7658203125
patch: return ! text . substring ( position ) ;
rank: 316
score: 98.71400756835938
patch: return text . substring ( position + $STRING$ ;
rank: 316
score: 98.70821533203124
patch: return position ; return position ; if position ;
rank: 316
score: 98.66477966308594
patch: return return return - - 1 ;
rank: 316
score: 98.66095648871527
patch: return Math . ~ position ( position ;
rank: 316
score: 98.64873504638672
patch: return * * * * position /
rank: 316
score: 98.63661024305556
patch: return ~ position + position + 1 ;
rank: 316
score: 98.60151502821181
patch: return hash CaMeL Code ( position ) ;
rank: 317
score: 98.88330078125
patch: return position ? position + 1 : ALL _ IDS ;
rank: 317
score: 98.76575927734375
patch: return ( String ) ~ ALL _ IDS ;
rank: 317
score: 98.71261935763889
patch: return Long . size ( position ) ;
rank: 317
score: 98.7080078125
patch: return position ; } if position ;
rank: 317
score: 98.66316986083984
patch: else { return - ~ position ;
rank: 317
score: 98.66061740451389
patch: return - 1 ? position : position ;
rank: 317
score: 98.64817810058594
patch: return * * return ~ $NUMBER$ ;
rank: 317
score: 98.63397216796875
patch: return ~ position + 0 . 0 ;
rank: 317
score: 98.60057067871094
patch: return position / $NUMBER$ + position ;
rank: 318
score: 98.70775604248047
patch: return position ; for return position ;
rank: 318
score: 98.69188096788194
patch: return Math . start ( position ) ;
rank: 318
score: 98.66052856445313
patch: return ~ ~ ( position - position ) ;
rank: 318
score: 98.64786202566964
patch: } else { return $NUMBER$ ;
rank: 318
score: 98.62900119357639
patch: return ~ position + position . length ;
rank: 319
score: 98.88035365513393
patch: return position : - 1 ;
rank: 319
score: 98.76519775390625
patch: return ( int ) ~ ~ position ;
rank: 319
score: 98.70738389756944
patch: return position ; } return position ; ;
rank: 319
score: 98.6615219116211
patch: return return 1 ; return 0 ;
rank: 319
score: 98.66001674107143
patch: return - position * $NUMBER$ ;
rank: 319
score: 98.646484375
patch: } return * * ~ position ;
rank: 319
score: 98.62761579241071
patch: return substring ( position ) ;
rank: 320
score: 98.7646240234375
patch: return >= 0 ? ~ position : 0 ;
rank: 320
score: 98.70881652832031
patch: return Long . size ( ) ;
rank: 320
score: 98.69083658854167
patch: return ~ ALL _ IDS . 1 ;
rank: 320
score: 98.65997992621527
patch: return ~ position * position + position ;
rank: 320
score: 98.59769439697266
patch: sb . append ( $STRING$ ) ;
rank: 321
score: 98.87914021809895
patch: else { return ~ position . length ( ) ; }
rank: 321
score: 98.76315307617188
patch: parse ( bucket , text , position ) ;
rank: 321
score: 98.70724826388889
patch: return - 1 ; } return position ;
rank: 321
score: 98.65930938720703
patch: return position * $NUMBER$ + 1 ;
rank: 321
score: 98.6574478149414
patch: } return ~ return ~ position ;
rank: 321
score: 98.64598846435547
patch: } return ; , position ) ;
rank: 321
score: 98.62662506103516
patch: return ~ ~ position : position ;
rank: 321
score: 98.59501139322917
patch: return position position + position + position ;
rank: 322
score: 98.87894694010417
patch: return Integer . max ( position ) ;
rank: 322
score: 98.76300659179688
patch: return max . length ( ) + 1 ;
rank: 322
score: 98.708642578125
patch: try { return position + ALL _ IDS ;
rank: 322
score: 98.70703803168402
patch: return position ; ; throw ~ position ;
rank: 322
score: 98.65667724609375
patch: return 0 ; return - $NUMBER$ ;
rank: 322
score: 98.64588928222656
patch: return ; . return ~ 1 ;
rank: 322
score: 98.59471130371094
patch: assert position == 0 : $STRING$ ;
rank: 323
score: 98.8784688313802
patch: return position ? position == ALL _ IDS : position ;
rank: 323
score: 98.762890625
patch: return long . length ( ) + position ;
rank: 323
score: 98.70831298828125
patch: return ~ position ? position ;
rank: 323
score: 98.70647430419922
patch: return position + position ; break ;
rank: 323
score: 98.69011773003473
patch: return -= ALL _ IDS . length ;
rank: 323
score: 98.65923394097223
patch: return ~ ( position << $NUMBER$ ) ;
rank: 323
score: 98.65607452392578
patch: return - 1 ; return 0 ;
rank: 323
score: 98.64537048339844
patch: if ( 0 == position position ;
rank: 323
score: 98.59429059709821
patch: return position position - position ;
rank: 324
score: 98.762255859375
patch: return str . length ( ) - 1 ;
rank: 324
score: 98.70769500732422
patch: return date . length ( ) ;
rank: 324
score: 98.70522732204861
patch: return position ; } return - position ;
rank: 324
score: 98.68900299072266
patch: ~ ALL _ IDS + position ;
rank: 324
score: 98.65780978732639
patch: return super . start ( position ) ;
rank: 324
score: 98.65603637695312
patch: / else { return return position ;
rank: 324
score: 98.64438883463542
patch: return * * 0 ;
rank: 324
score: 98.62434217664931
patch: return text . length ( ) ; }
rank: 325
score: 98.76213243272569
patch: return get CaMeL Zone ( position ) ;
rank: 325
score: 98.70517306857639
patch: return position ; for position = position ;
rank: 325
score: 98.65740288628473
patch: return position , text , position ) ;
rank: 325
score: 98.65589904785156
patch: return ~ return - - 1 ;
rank: 325
score: 98.64286295572917
patch: / * * * /
rank: 325
score: 98.62418365478516
patch: return else { return position ; }
rank: 326
score: 98.87593217329545
patch: return ~ text . length ( ) + position ;
rank: 326
score: 98.76023864746094
patch: return Boolean . size ( ) ;
rank: 326
score: 98.70534261067708
patch: return text . substring ( size ) ;
rank: 326
score: 98.70491027832031
patch: ~ ~ 1 ; return position ;
rank: 326
score: 98.65531158447266
patch: else { return ~ - 0 ;
rank: 326
score: 98.64143371582031
patch: / * * * * * ;
rank: 327
score: 98.87458939985795
patch: return ~ Date CaMeL Time CaMeL Zone . position ;
rank: 327
score: 98.75999620225694
patch: return > 0 ? position : true ;
rank: 327
score: 98.70443115234374
patch: return ~ position ; while ~ - 1 ;
rank: 327
score: 98.68710327148438
patch: else { return - 0 ; }
rank: 327
score: 98.65692901611328
patch: return ~ text . length ( ;
rank: 327
score: 98.65530395507812
patch: return return - 1 + 0 ;
rank: 327
score: 98.64051055908203
patch: return ; , return ~ position ;
rank: 327
score: 98.62227957589286
patch: return ~ position ; } else
rank: 327
score: 98.59126790364583
patch: return position - hash CaMeL Code ( ;
rank: 328
score: 98.75957489013672
patch: return int . position ( ) ;
rank: 328
score: 98.70439147949219
patch: return position ? ALL _ IDS ;
rank: 328
score: 98.70330810546875
patch: return ; if ~ position ; return position ;
rank: 328
score: 98.68581136067708
patch: return ~ ALL _ IDS . false ;
rank: 328
score: 98.65658230251736
patch: return position - new Integer ( position ;
rank: 328
score: 98.6390609741211
patch: return position ; return position position ;
rank: 328
score: 98.62180786132812
patch: return ~ position . ~ position . length ;
rank: 328
score: 98.59016927083333
patch: else { return position * $NUMBER$ ; }
rank: 329
score: 98.75955539279514
patch: return text . get ( position ) ;
rank: 329
score: 98.7032470703125
patch: return position ; return ; { return position ;
rank: 329
score: 98.6534652709961
patch: return position ; return ~ $NUMBER$ ;
rank: 329
score: 98.63813999720982
patch: return position - position position ;
rank: 329
score: 98.62119838169643
patch: return * ~ position ; }
rank: 330
score: 98.759326171875
patch: return > 0 ? ~ position : 0 ;
rank: 330
score: 98.70322875976562
patch: return position ; if ~ position - position ;
rank: 330
score: 98.68392508370536
patch: } } return ~ position ;
rank: 330
score: 98.65542602539062
patch: return position ~ ( position - 1 ) ;
rank: 330
score: 98.65235137939453
patch: return ~ ~ 0 + position ;
rank: 330
score: 98.63789367675781
patch: if ( position ; return position ;
rank: 330
score: 98.62041015625
patch: return ~ position ? ~ position : position ;
rank: 330
score: 98.58821868896484
patch: return position ; position += position ;
rank: 331
score: 98.70296902126736
patch: return position ; break ; if position ;
rank: 331
score: 98.70181274414062
patch: return $STRING$ ;
rank: 331
score: 98.68324110243056
patch: return ~ ALL _ IDS : 1 ;
rank: 331
score: 98.63740539550781
patch: return ~ 1 ; ~ 1 ;
rank: 331
score: 98.58790806361607
patch: if ( position == 0 )
rank: 332
score: 98.70159149169922
patch: else { return position + 1 ;
rank: 332
score: 98.65526123046875
patch: return - position ? - 1 : position ;
rank: 332
score: 98.61944580078125
patch: return ALL _ IDS + position ; }
rank: 332
score: 98.58786010742188
patch: return position % position ;
rank: 333
score: 98.86973876953125
patch: return position . length ( ) * 0 ;
rank: 333
score: 98.7578633626302
patch: return 0 . 0 ;
rank: 333
score: 98.70158555772569
patch: return * * / return ~ position ;
rank: 333
score: 98.70047336154514
patch: return ~ 1 ; return position ; else
rank: 333
score: 98.65449741908482
patch: return position position * $NUMBER$ ;
rank: 333
score: 98.64990234375
patch: } finally { return ~ position ;
rank: 333
score: 98.6350326538086
patch: return position + position ~ position ;
rank: 333
score: 98.6175537109375
patch: return ~ ~ position + position ; }
rank: 334
score: 98.70035129123264
patch: return position ; } } return position ;
rank: 334
score: 98.64918518066406
patch: return return 0 ; return position ;
rank: 334
score: 98.63477325439453
patch: return * * / return position ;
rank: 334
score: 98.61737823486328
patch: return ~ this . ~ position ;
rank: 335
score: 98.75624593098958
patch: return this . ~ position + 0 ;
rank: 335
score: 98.70028076171874
patch: return ~ - 1 ; return ~ position ;
rank: 335
score: 98.64855194091797
patch: try { return ~ position ; ;
rank: 335
score: 98.63469587053571
patch: return ; return ~ $NUMBER$ ;
rank: 335
score: 98.61728922526042
patch: return char CaMeL Value ( ) ; }
rank: 335
score: 98.58736165364583
patch: String position = position ; return position ;
rank: 336
score: 98.7560302734375
patch: return return ~ ALL _ IDS + position ;
rank: 336
score: 98.70026991102431
patch: return position ; position ; return position ;
rank: 336
score: 98.69883510044643
patch: return ~ text . position ;
rank: 336
score: 98.65422712053571
patch: return return position + 1 ;
rank: 336
score: 98.64812360491071
patch: return ; int ~ $NUMBER$ ;
rank: 336
score: 98.63453674316406
patch: return ; , ~ $NUMBER$ position ;
rank: 336
score: 98.61640082465277
patch: return float CaMeL Value = ~ position ;
rank: 337
score: 98.86692116477273
patch: return ~ position ? position . length ( ) ;
rank: 337
score: 98.7559814453125
patch: return - name . length ( ) ;
rank: 337
score: 98.67620849609375
patch: return ~ ALL _ IDS = position ;
rank: 337
score: 98.65421549479167
patch: return position position * $NUMBER$ + position ;
rank: 338
score: 98.8669100674716
patch: return * ( ALL _ IDS + position ) ;
rank: 338
score: 98.69898681640625
patch: return position + position ; else return position ;
rank: 338
score: 98.69766845703126
patch: return position . length ( ) : position ;
rank: 338
score: 98.6335220336914
patch: / * * ; return position ;
rank: 338
score: 98.61563110351562
patch: return / - position ;
rank: 339
score: 98.75505235460069
patch: return * 0 . 0 . 0 ;
rank: 339
score: 98.69701538085937
patch: return ~ bucket . equals ( text ) ;
rank: 339
score: 98.65232543945312
patch: return return ~ ( position - position ) ;
rank: 339
score: 98.64689636230469
patch: return position ~ ~ - 1 ;
rank: 339
score: 98.61515502929687
patch: return ~ ~ ( position + position ) ;
rank: 340
score: 98.86563720703126
patch: return ALL _ IDS ? position : null ;
rank: 340
score: 98.75479465060764
patch: return * 0 . 0 + position ;
rank: 340
score: 98.69846801757812
patch: return new return ~ position ; return position ;
rank: 340
score: 98.674072265625
patch: return parse CaMeL Into ( position ) ;
rank: 340
score: 98.65166625976562
patch: return ~ ~ 0 ? position : position ;
rank: 340
score: 98.64683532714844
patch: return return - - - $NUMBER$ ;
rank: 340
score: 98.6326171875
patch: } return 0 ;
rank: 340
score: 98.58601379394531
patch: final position = position + 1 ;
rank: 341
score: 98.75472005208333
patch: return max . substring ( position ) ;
rank: 341
score: 98.698095703125
patch: return ~ position ; / ; return position ;
rank: 341
score: 98.65164523654514
patch: return position + ( String ) position ;
rank: 341
score: 98.64654541015625
patch: return * ? position : 0 ;
rank: 341
score: 98.63247680664062
patch: return ~ position [ 0 ] ;
rank: 341
score: 98.58540852864583
patch: return super . append ( text ) ;
rank: 342
score: 98.86482543945313
patch: throw new Exception ( $STRING$ + text ) ;
rank: 342
score: 98.69391632080078
patch: return position : ALL _ IDS ;
rank: 342
score: 98.67202758789062
patch: return * ~ position + 1 ;
rank: 342
score: 98.6310806274414
patch: return ; , position + position ;
rank: 342
score: 98.58522033691406
patch: return position + position + $STRING$ ;
rank: 343
score: 98.75377061631944
patch: return - - - - - 1 ;
rank: 343
score: 98.69685194227431
patch: return position + position ; throw position ;
rank: 343
score: 98.67142740885417
patch: result ~ position ; return ~ position ;
rank: 343
score: 98.64593505859375
patch: return return position ; return 0 ;
rank: 343
score: 98.62963104248047
patch: } else { return ~ 0 ;
rank: 343
score: 98.61173502604167
patch: return / - $NUMBER$ ;
rank: 343
score: 98.58449300130208
patch: assert position == - 1 : $STRING$ ;
rank: 344
score: 98.86426890980114
patch: return position ? position : ALL _ IDS ) ;
rank: 344
score: 98.75314670138889
patch: return * null . length ( ) ;
rank: 344
score: 98.69668579101562
patch: return new int ~ position ; return position ;
rank: 344
score: 98.67107476128473
patch: return ~ position + ( 0 ) ;
rank: 344
score: 98.65057373046875
patch: return position + text . trim ( ;
rank: 344
score: 98.64569854736328
patch: else { return - - 1 ;
rank: 344
score: 98.62918853759766
patch: return ; , ~ + 1 ;
rank: 344
score: 98.58426666259766
patch: return Integer . parse CaMeL Int ;
rank: 345
score: 98.75307210286458
patch: return ] . substring ( position ) ;
rank: 345
score: 98.69667561848958
patch: return ~ 1 ; while ~ 1 ;
rank: 345
score: 98.69278717041016
patch: return ( position + length ) ;
rank: 345
score: 98.65013122558594
patch: return position + text . position ;
rank: 345
score: 98.64554850260417
patch: return return ~ $STRING$ ;
rank: 345
score: 98.62840270996094
patch: return * * * + position ;
rank: 345
score: 98.610107421875
patch: return ) ;
rank: 345
score: 98.58293914794922
patch: return Double . MAX _ VALUE ;
rank: 346
score: 98.75165557861328
patch: return size . length ( ) ;
rank: 346
score: 98.69658745659723
patch: return position ; for ~ position ; ;
rank: 346
score: 98.67025756835938
patch: return ~ ( ALL _ IDS ;
rank: 346
score: 98.64968532986111
patch: return ~ position * position + 1 ;
rank: 346
score: 98.6454849243164
patch: return finally { return - 0 ;
rank: 346
score: 98.62799835205078
patch: return ; . position ( position ;
rank: 346
score: 98.61006673177083
patch: return else return position ;
rank: 346
score: 98.58199734157986
patch: final ~ position ; return ~ position ;
rank: 347
score: 98.86204944957386
patch: return ~ Date CaMeL Time CaMeL Parser . 0 ;
rank: 347
score: 98.75090026855469
patch: return new String ( text ) ;
rank: 347
score: 98.69646538628473
patch: return position ; ; return ~ 1 ;
rank: 347
score: 98.69131905691964
patch: return ( String ) position ;
rank: 347
score: 98.644775390625
patch: return 0 ; while ~ position ;
rank: 347
score: 98.626708984375
patch: return ; , position + 1 ;
rank: 347
score: 98.57929338727679
patch: return position + position ; ;
rank: 348
score: 98.75025092230902
patch: return . length ( ) + 1 ;
rank: 348
score: 98.69587537977431
patch: return position ; else return ~ 1 ;
rank: 348
score: 98.6911865234375
patch: return ( position + position - position ) ;
rank: 348
score: 98.6478042602539
patch: return position + $NUMBER$ + position ;
rank: 348
score: 98.62628936767578
patch: return position * 0 + position ;
rank: 348
score: 98.60890706380208
patch: return long ~ position ;
rank: 349
score: 98.74953206380208
patch: return return ~ position + - 1 ;
rank: 349
score: 98.69579399956598
patch: return position ; position else return position ;
rank: 349
score: 98.69097290039062
patch: return position + ( position + length ) ;
rank: 349
score: 98.6436767578125
patch: return - 0 ; return position ;
rank: 349
score: 98.62622833251953
patch: return ; . to CaMeL String ;
rank: 349
score: 98.60831705729167
patch: return / * position ;
rank: 350
score: 98.69548882378473
patch: return ~ position ; if ~ null ;
rank: 350
score: 98.66741943359375
patch: return ~ - $NUMBER$ ;
rank: 350
score: 98.64170837402344
patch: / * ; return ~ position ;
rank: 351
score: 98.8606289950284
patch: return new Date CaMeL Time CaMeL Parser CaMeL Bucket ;
rank: 351
score: 98.69485473632812
patch: return position ; while ~ position ; break ;
rank: 351
score: 98.64725748697917
patch: return Math . ~ ( position ) ;
rank: 351
score: 98.60608673095703
patch: return boolean CaMeL Value ( ) ;
rank: 352
score: 98.64151000976562
patch: return finally { while ~ position ;
rank: 352
score: 98.62344360351562
patch: return position [ 0 ] position ;
rank: 352
score: 98.60513916015626
patch: return super . parse CaMeL Into ( bucket ,
rank: 352
score: 98.5769271850586
patch: return null ;
rank: 353
score: 98.74756622314453
patch: return true . length ( ) ;
rank: 353
score: 98.69404296875
patch: return ~ position ; if return - position ;
rank: 353
score: 98.66585286458333
patch: return ~ ALL _ IDS . true ;
rank: 353
score: 98.64649115668402
patch: return ~ position ? 1 : position ;
rank: 353
score: 98.6404037475586
patch: Iterator else { return ~ position ;
rank: 353
score: 98.62322235107422
patch: / * * return ~ position ;
rank: 354
score: 98.7459228515625
patch: bucket . set CaMeL Date ( position ) ;
rank: 354
score: 98.69395141601562
patch: ~ position ; ~ position ; return position ;
rank: 354
score: 98.68616400824652
patch: return text . substring ( 1 ) ;
rank: 354
score: 98.66544342041016
patch: return ( 0 + position ) ;
rank: 354
score: 98.64534912109374
patch: return ~ 0 ? - 1 : position ;
rank: 354
score: 98.63968658447266
patch: else { return - $STRING$ ; }
rank: 354
score: 98.622802734375
patch: else { return $NUMBER$ ; }
rank: 355
score: 98.74471706814236
patch: return * text . length ( ) ;
rank: 355
score: 98.69384155273437
patch: return position ; ; if ; return position ;
rank: 355
score: 98.6446533203125
patch: return Math . min ( position , ;
rank: 355
score: 98.63941955566406
patch: return ; int ~ ~ 0 ;
rank: 355
score: 98.62232971191406
patch: return position + $NUMBER$ + 1 ;
rank: 355
score: 98.60377197265625
patch: return to CaMeL String ( - 1 ) ;
rank: 355
score: 98.57321506076389
patch: assert position == position ; return position ;
rank: 356
score: 98.74460274832589
patch: return int [ 0 ] ;
rank: 356
score: 98.69329155815973
patch: return return ~ 1 ; return position ;
rank: 356
score: 98.66358947753906
patch: return / * return ~ position ;
rank: 356
score: 98.64409528459821
patch: return ~ 1 ~ position ;
rank: 356
score: 98.63900756835938
patch: return true ; return - 1 ;
rank: 356
score: 98.62203216552734
patch: else { / * * * /
rank: 357
score: 98.85585715553977
patch: return position ? ~ text . length ( ) ;
rank: 357
score: 98.74455430772569
patch: return this . bucket . ~ position ;
rank: 357
score: 98.69327799479167
patch: return ~ position ; position ~ position ;
rank: 357
score: 98.68465847439236
patch: return bucket . append ( position ) ;
rank: 357
score: 98.66358947753906
patch: return ~ ( - 1 ) ;
rank: 357
score: 98.64407348632812
patch: if ( position > position ) return position ;
rank: 357
score: 98.62202453613281
patch: return * * return ~ 1 ;
rank: 357
score: 98.5705795288086
patch: try { return position + position ;
rank: 358
score: 98.74445936414931
patch: return Integer . length ( 1 ) ;
rank: 358
score: 98.69322509765625
patch: return position ; while position ; return position ;
rank: 358
score: 98.66299099392361
patch: return ~ ~ ~ ~ ~ position ;
rank: 358
score: 98.64371337890626
patch: return ~ ( Integer . MAX _ VALUE )
rank: 358
score: 98.62130301339286
patch: return ~ ~ ~ 1 ;
rank: 358
score: 98.60233154296876
patch: return -= position ;
rank: 358
score: 98.56960720486111
patch: return position - substring ( position ) ;
rank: 359
score: 98.74424438476562
patch: return int . length ( ) + position ;
rank: 359
score: 98.69309488932292
patch: return ~ position ; try
rank: 359
score: 98.68406677246094
patch: return bucket . trim ( ) ;
rank: 359
score: 98.6434814453125
patch: return ~ - 1 ? position : 1 ;
rank: 359
score: 98.63873291015625
patch: return return ~ 0 + position ;
rank: 359
score: 98.62090301513672
patch: return * * * - position ;
rank: 359
score: 98.60149536132812
patch: return super . parse CaMeL Into ( text ,
rank: 359
score: 98.56953648158482
patch: return - position ~ position ;
rank: 360
score: 98.85352918836806
patch: return position ? ~ 0 : position ;
rank: 360
score: 98.69304809570312
patch: return ~ position ; if position ~ 1 ;
rank: 360
score: 98.66218397352431
patch: return ~ bucket . for CaMeL Name ;
rank: 360
score: 98.63844299316406
patch: return false ; return - position ;
rank: 360
score: 98.62069702148438
patch: * * * / return position ;
rank: 360
score: 98.60055541992188
patch: return ~ position . substring ( length ) ;
rank: 360
score: 98.56920623779297
patch: return position && position > position ;
rank: 361
score: 98.69293891059027
patch: return new position ; return ~ position ;
rank: 361
score: 98.68185424804688
patch: return ( text != null ) ? position ;
rank: 361
score: 98.6431884765625
patch: return position - text . trim ( ;
rank: 361
score: 98.6378402709961
patch: return ~ ~ ~ position position ;
rank: 361
score: 98.61998748779297
patch: return ~ 1 + ~ $NUMBER$ ;
rank: 361
score: 98.600390625
patch: return ~ ALL _ IDS + position ; }
rank: 361
score: 98.56875610351562
patch: assert position != 0 : $STRING$ ;
rank: 362
score: 98.7420654296875
patch: return this . ~ position + position ;
rank: 362
score: 98.68157196044922
patch: return bucket . size ( ) ;
rank: 362
score: 98.6377944946289
patch: return return $NUMBER$ ; return position ;
rank: 362
score: 98.61875915527344
patch: return position [ position 1 ] ;
rank: 362
score: 98.59966278076172
patch: return else return ~ ~ position ;
rank: 362
score: 98.56710476345486
patch: return Character . max ( position ) ;
rank: 363
score: 98.84957546657986
patch: return * ( position + 0 ) ;
rank: 363
score: 98.69255981445312
patch: return ~ position ; throw ~ - 1 ;
rank: 363
score: 98.68057686941964
patch: return position + - length ;
rank: 363
score: 98.66109890407986
patch: return ( position int ) ~ position ;
rank: 363
score: 98.64161512586806
patch: return - position ? position : 0 ;
rank: 363
score: 98.63687133789062
patch: else { return ~ - 1 ;
rank: 363
score: 98.61843872070312
patch: return ; return ~ - 1 ;
rank: 363
score: 98.59827532087054
patch: return ~ position - $NUMBER$ ;
rank: 363
score: 98.56529235839844
patch: throw new Error ( position ) ;
rank: 364
score: 98.74153137207031
patch: return this . position + $STRING$ ;
rank: 364
score: 98.6923828125
patch: return position ; return ~ position ; else
rank: 364
score: 98.66071912977431
patch: else { return / - 1 ; }
rank: 364
score: 98.64160919189453
patch: return Math . min ( position ;
rank: 364
score: 98.63684953962054
patch: return true ; return position ;
rank: 364
score: 98.6182861328125
patch: return position * position position ;
rank: 364
score: 98.5650634765625
patch: return position . substring ( 1 ) ;
rank: 365
score: 98.84946695963542
patch: return ~ position ? position : $STRING$ ;
rank: 365
score: 98.74130588107639
patch: return get CaMeL Name ( position ) ;
rank: 365
score: 98.68004353841145
patch: return text . position ;
rank: 365
score: 98.66014862060547
patch: ~ position ; return - 1 ;
rank: 365
score: 98.641357421875
patch: return - ~ position - 1 ;
rank: 365
score: 98.63639831542969
patch: return return ~ - - 0 ;
rank: 365
score: 98.61808013916016
patch: return ; , ~ * * /
rank: 365
score: 98.56401231553819
patch: ~ position ~ position ; return position ;
rank: 366
score: 98.84906005859375
patch: throw new Exception ( $STRING$ + str ) ;
rank: 366
score: 98.74075927734376
patch: return int != position . length ( ) ;
rank: 366
score: 98.69221801757813
patch: return ~ 1 + position ; return position ;
rank: 366
score: 98.65938991970486
patch: ~ position ; return ~ ~ position ;
rank: 366
score: 98.61762237548828
patch: return ; , 0 return position ;
rank: 366
score: 98.59749145507813
patch: return else if ( ALL _ IDS ) ;
rank: 366
score: 98.5634536743164
patch: return Short . MAX _ VALUE ;
rank: 367
score: 98.84721235795455
patch: return ~ text . length ( ) ? position }
rank: 367
score: 98.73978271484376
patch: return == 0 ? 0 : ~ position ;
rank: 367
score: 98.69184705946181
patch: return ~ 1 ; if ~ 0 ;
rank: 367
score: 98.63947889539931
patch: return ~ 0 ? position : 0 ;
rank: 367
score: 98.63450622558594
patch: return return - position + 0 ;
rank: 367
score: 98.61654663085938
patch: return 0 + 0 ;
rank: 367
score: 98.56314522879464
patch: final int position = position ;
rank: 368
score: 98.69174533420139
patch: return position ; if ~ - position ;
rank: 368
score: 98.67478942871094
patch: return ALL _ IDS ? position ;
rank: 368
score: 98.65827178955078
patch: return * += ALL _ IDS ;
rank: 368
score: 98.6341552734375
patch: return * int ~ position ;
rank: 368
score: 98.61646270751953
patch: } else { / * * /
rank: 368
score: 98.59632703993056
patch: return ~ position ; } } else {
rank: 368
score: 98.561279296875
patch: if ( position == - 1 ;
rank: 369
score: 98.69151611328125
patch: return position ; return ~ position + position ;
rank: 369
score: 98.65787760416667
patch: return ~ ALL _ IDS * 1 ;
rank: 369
score: 98.6376708984375
patch: return - ~ ( position + 1 ) ;
rank: 369
score: 98.63398742675781
patch: return ~ position ; return 0 ;
rank: 369
score: 98.6158447265625
patch: } else { final return position ;
rank: 369
score: 98.59626988002232
patch: return ALL _ IDS ; }
rank: 370
score: 98.73783365885417
patch: return >= 0 ? position : true ;
rank: 370
score: 98.65785047743056
patch: return ~ ALL _ IDS || 0 ;
rank: 370
score: 98.63761683872768
patch: return ~ position / $NUMBER$ ;
rank: 370
score: 98.63357543945312
patch: return ; Integer ~ position position ;
rank: 370
score: 98.6154073079427
patch: if ; return 0 ;
rank: 370
score: 98.595703125
patch: return position + position ) ;
rank: 370
score: 98.55968221028645
patch: return position - $NUMBER$ ;
rank: 371
score: 98.84356689453125
patch: return text . length ( ) * 1 ;
rank: 371
score: 98.73770904541016
patch: return name . length ( ) ;
rank: 371
score: 98.69104766845703
patch: return return position ; if position ;
rank: 371
score: 98.63758002387152
patch: return - position ? position : 1 ;
rank: 371
score: 98.63314056396484
patch: return return - $STRING$ + 0 ;
rank: 371
score: 98.6150894165039
patch: return ; , position , 1 ;
rank: 371
score: 98.59508666992187
patch: return ~ ALL _ IDS + ~ position ;
rank: 372
score: 98.84309525923295
patch: return ~ text . length ( ) * 0 ;
rank: 372
score: 98.69086371527777
patch: return position + position ; while position ;
rank: 372
score: 98.6365966796875
patch: return Math . max ( position , position )
rank: 372
score: 98.6328125
patch: return finally { return position ; }
rank: 372
score: 98.61433628627232
patch: return ; , 0 position ;
rank: 372
score: 98.5571517944336
patch: return position + chars . length ;
rank: 373
score: 98.84304470486111
patch: return ~ position ? position : false ;
rank: 373
score: 98.73571014404297
patch: return - - - - 0 ;
rank: 373
score: 98.69032796223958
patch: return - 1 ; if ~ 1 ;
rank: 373
score: 98.65652126736111
patch: return ~ ALL _ IDS . start ;
rank: 373
score: 98.63243865966797
patch: return ~ ~ - - 1 ;
rank: 373
score: 98.59434509277344
patch: return ~ ~ this . position ;
rank: 373
score: 98.55624050564236
patch: this . ~ position ; return position ;
rank: 374
score: 98.84300537109375
patch: return position . length ( ) : $NUMBER$ ;
rank: 374
score: 98.735693359375
patch: return Integer . length ( ) ? 0 ;
rank: 374
score: 98.69004991319444
patch: return - position ; if return position ;
rank: 374
score: 98.65635850694444
patch: return ~ ALL _ IDS - $NUMBER$ ;
rank: 374
score: 98.6342544555664
patch: return ~ - 1 | position ;
rank: 374
score: 98.63102504185268
patch: else { return position position ;
rank: 374
score: 98.61294119698661
patch: } if return ~ position ;
rank: 374
score: 98.555908203125
patch: return 0 ~ position ;
rank: 375
score: 98.8425064086914
patch: return ~ position : - 1 ;
rank: 375
score: 98.68996853298611
patch: return position ; if ~ position ; ;
rank: 375
score: 98.67188110351563
patch: return ~ position ? position . length ( )
rank: 375
score: 98.62937709263393
patch: finally { return 0 ; }
rank: 375
score: 98.61270904541016
patch: return position + 0 + 1 ;
rank: 375
score: 98.55552673339844
patch: final position = position + position ;
rank: 376
score: 98.73511505126953
patch: parse ( text , position ) ;
rank: 376
score: 98.68858032226562
patch: return return position ; if return ~ position ;
rank: 376
score: 98.6282730102539
patch: return return ~ - - position ;
rank: 376
score: 98.61085728236607
patch: return * * position position ;
rank: 376
score: 98.59326171875
patch: return else if ( ALL _ IDS )
rank: 376
score: 98.55494520399306
patch: throw new Null CaMeL Pointer CaMeL Exception ;
rank: 377
score: 98.68812866210938
patch: return ~ 1 ; if position ~ position ;
rank: 377
score: 98.67106119791667
patch: return != null ? position : 0 ;
rank: 377
score: 98.62662506103516
patch: } return position ; return position ;
rank: 377
score: 98.61067199707031
patch: return 0 ; return ~ 1 ;
rank: 377
score: 98.5546875
patch: else { return position - 1 ;
rank: 378
score: 98.83935546875
patch: return $NUMBER$ ? position : 0 ;
rank: 378
score: 98.7342529296875
patch: return this . position + - 0 ;
rank: 378
score: 98.6877197265625
patch: return ~ position ; if ~ position ; ;
rank: 378
score: 98.6543197631836
patch: return ( ALL _ IDS ) ;
rank: 378
score: 98.63357204861111
patch: return super . ~ position ~ position ;
rank: 378
score: 98.62662179129464
patch: else { return return 1 ;
rank: 378
score: 98.61016845703125
patch: return * * * ~ ~ ;
rank: 378
score: 98.5910873413086
patch: return ~ ~ position ~ position ;
rank: 379
score: 98.68737030029297
patch: return ~ position ; while position ;
rank: 379
score: 98.65315077039931
patch: return ~ ALL _ IDS | position ;
rank: 379
score: 98.6265640258789
patch: return return - 0 + 0 ;
rank: 379
score: 98.59047241210938
patch: return << 1 ;
rank: 380
score: 98.8359375
patch: return ~ position ? ~ position : 0 ;
rank: 380
score: 98.73284149169922
patch: return String . position ( ) ;
rank: 380
score: 98.68523406982422
patch: ~ position ; return return position ;
rank: 380
score: 98.65232849121094
patch: else { return ~ 0 ; }
rank: 380
score: 98.63316127232143
patch: this . return ~ position ;
rank: 380
score: 98.62462615966797
patch: return - $STRING$ ; return position ;
rank: 381
score: 98.83511962890626
patch: return position + 0 . max ( ) ;
rank: 381
score: 98.73263888888889
patch: return ~ position ? 0 : true ;
rank: 381
score: 98.68416748046874
patch: return ~ position ; if position / / /
rank: 381
score: 98.65114920479911
patch: return ~ - - 1 ;
rank: 381
score: 98.6246109008789
patch: else { return - - 0 ;
rank: 381
score: 98.60820007324219
patch: return * * position + 0 ;
rank: 381
score: 98.58851841517857
patch: return ~ position ^ position ;
rank: 382
score: 98.83477172851562
patch: return position + 0 + ALL _ IDS ;
rank: 382
score: 98.73222351074219
patch: return break . length ( ) ;
rank: 382
score: 98.68410034179688
patch: return ~ 1 ; return ~ - 1 ;
rank: 382
score: 98.63263811383929
patch: return position + text . ;
rank: 382
score: 98.62382507324219
patch: return return ? position : 0 ;
rank: 382
score: 98.60784912109375
patch: if ( ~ $NUMBER$ == position ;
rank: 382
score: 98.55106353759766
patch: return position & position - 1 ;
rank: 383
score: 98.73101043701172
patch: return char . length ( ) ;
rank: 383
score: 98.68403930664063
patch: return ~ position ; return - - position ;
rank: 383
score: 98.6641845703125
patch: return text . append ( $STRING$ ) ;
rank: 383
score: 98.64740668402777
patch: return ~ ALL _ IDS ? - 1
rank: 383
score: 98.62335968017578
patch: return finally { return position ; ;
rank: 383
score: 98.60784912109375
patch: } if ; return ~ $NUMBER$ ;
rank: 383
score: 98.58699544270833
patch: return append ( text , position ) ;
rank: 383
score: 98.55064561631944
patch: throw new Internal CaMeL Error ( $STRING$ ;
rank: 384
score: 98.83460083007813
patch: return position + 1 + ALL _ IDS ;
rank: 384
score: 98.73100280761719
patch: return ~ ~ position + $STRING$ ;
rank: 384
score: 98.68380737304688
patch: return ~ 1 ; return position ; break ;
rank: 384
score: 98.64691162109375
patch: return ALL _ IDS ~ position ;
rank: 384
score: 98.63090006510417
patch: return position position * position + 1 ;
rank: 384
score: 98.62073516845703
patch: else { return - - $STRING$ ;
rank: 384
score: 98.60777064732143
patch: return position - ~ $NUMBER$ ;
rank: 384
score: 98.58653428819444
patch: return position + ALL _ IDS ; }
rank: 384
score: 98.55026245117188
patch: return position - str . length ;
rank: 385
score: 98.73049587673611
patch: return get CaMeL Value ( position ) ;
rank: 385
score: 98.683056640625
patch: return ~ position ; return ~ position ; else
rank: 385
score: 98.66292572021484
patch: return text ;
rank: 385
score: 98.64666748046875
patch: return ( position + $NUMBER$ ) ;
rank: 385
score: 98.62013244628906
patch: return super . return ~ position ;
rank: 385
score: 98.6073226928711
patch: return * * ~ ~ $NUMBER$ ;
rank: 385
score: 98.58565521240234
patch: return / - ALL _ IDS ;
rank: 385
score: 98.55023193359375
patch: return - 1 - position ;
rank: 386
score: 98.83408203125
patch: return ~ bucket . parse ( bucket ) ;
rank: 386
score: 98.73039415147569
patch: return / 0 ? 0 : 0 ;
rank: 386
score: 98.682861328125
patch: return ~ - - 1 ; return position ;
rank: 386
score: 98.64613172743056
patch: return ( position ? ALL _ IDS ;
rank: 386
score: 98.60616302490234
patch: else { return ~ $NUMBER$ ; }
rank: 386
score: 98.58376057942708
patch: return ~ ~ position ; } else {
rank: 386
score: 98.54945203993056
patch: long position = position ; return position ;
rank: 387
score: 98.73021782769098
patch: return * 0 ? 1 : 0 ;
rank: 387
score: 98.682373046875
patch: return position ; ; return position + position ;
rank: 387
score: 98.62961154513889
patch: return Integer . MAX _ VALUE ; ;
rank: 387
score: 98.60548400878906
patch: return ; . return ~ 0 ;
rank: 387
score: 98.5492935180664
patch: return position ( ) + position ;
rank: 388
score: 98.72947862413194
patch: return * 0 . length ( ) ;
rank: 388
score: 98.68204345703126
patch: return ~ position ; if ; ~ position ;
rank: 388
score: 98.65778944227431
patch: return position . parse ( position ) ;
rank: 388
score: 98.6430892944336
patch: return position + ( 0 ) ;
rank: 388
score: 98.61909702845982
patch: return ~ return - position ;
rank: 388
score: 98.60406494140625
patch: return position + $NUMBER$ + 0 ;
rank: 388
score: 98.58161163330078
patch: return . position ( position ) ;
rank: 389
score: 98.83114284939236
patch: return * / return ~ ~ position ;
rank: 389
score: 98.72909545898438
patch: return text . length ( ) ? true ;
rank: 389
score: 98.68180541992187
patch: return position ; ; if ~ - 1 ;
rank: 389
score: 98.65753173828125
patch: return position + position . length ;
rank: 389
score: 98.642578125
patch: return / - 0 ;
rank: 389
score: 98.62930908203126
patch: / * return position - position - 1 ;
rank: 389
score: 98.61875406901042
patch: else { return false ;
rank: 389
score: 98.60346221923828
patch: return position ? 1 : 0 ;
rank: 390
score: 98.6800537109375
patch: return position + position ; if return position ;
rank: 390
score: 98.65668402777777
patch: return str . length ( ) ) ;
rank: 390
score: 98.64113362630208
patch: return case $NUMBER$ : return ~ position ;
rank: 390
score: 98.61832682291667
patch: else return ~ 1 ;
rank: 390
score: 98.60298156738281
patch: if ( ~ 1 == position ;
rank: 390
score: 98.58067491319444
patch: return else { return ~ ~ position ;
rank: 390
score: 98.54624430338542
patch: return position ~ $NUMBER$ ;
rank: 391
score: 98.83052978515624
patch: return position ? ALL _ IDS : 0 ;
rank: 391
score: 98.72893524169922
patch: return Short . length ( ) ;
rank: 391
score: 98.67974853515625
patch: return ~ position ; if position - position ;
rank: 391
score: 98.64065987723214
patch: } return ALL _ IDS ;
rank: 391
score: 98.617919921875
patch: else { try { return position ;
rank: 391
score: 98.60291399274554
patch: return 0 + ~ position ;
rank: 391
score: 98.54615783691406
patch: try { return position ~ position ;
rank: 392
score: 98.82977849786931
patch: return ~ position . starts CaMeL With ( $STRING$ )
rank: 392
score: 98.6795166015625
patch: return position ; return position ; ~ position ;
rank: 392
score: 98.655517578125
patch: return position + position . position ;
rank: 392
score: 98.64057074652777
patch: return position + ( ALL _ IDS ;
rank: 392
score: 98.60261535644531
patch: return ~ 1 ; return 0 ;
rank: 392
score: 98.54539659288194
patch: switch ( position ) { case position :
rank: 393
score: 98.6792724609375
patch: return return position ; if ; return position ;
rank: 393
score: 98.64040701729911
patch: } return ~ - 1 ;
rank: 393
score: 98.60239955357143
patch: } else if return position ;
rank: 393
score: 98.579345703125
patch: return ~ super . parse ( bucket ) ;
rank: 393
score: 98.5452168782552
patch: return position | position ;
rank: 394
score: 98.8273193359375
patch: return ALL _ IDS + position + 0 ;
rank: 394
score: 98.67799682617188
patch: return ~ position ; if return - 1 ;
rank: 394
score: 98.6530990600586
patch: else { return position + length ;
rank: 394
score: 98.64038957868304
patch: return ~ ( 0 ) ;
rank: 394
score: 98.62640380859375
patch: return ~ ( position - 1 position ) ;
rank: 394
score: 98.61639404296875
patch: return return ~ - 0 ;
rank: 394
score: 98.60111236572266
patch: return ; . read ~ position ;
rank: 394
score: 98.57877022879464
patch: return ~ ~ position ] ;
rank: 394
score: 98.54407501220703
patch: long position = position - 1 ;
rank: 395
score: 98.72471110026042
patch: return & null . length ( ) ;
rank: 395
score: 98.67796630859375
patch: return ~ position ; return ~ ~ 1 ;
rank: 395
score: 98.65253363715277
patch: return text . parse ( position ) ;
rank: 395
score: 98.640380859375
patch: return ~ ~ - 0 ;
rank: 395
score: 98.61536516462054
patch: try { return - position ;
rank: 395
score: 98.59952218191964
patch: if ; return ~ position ;
rank: 395
score: 98.54334259033203
patch: return position ? $STRING$ : position ;
rank: 396
score: 98.82587890625
patch: return position . starts CaMeL With ( $STRING$ )
rank: 396
score: 98.65193176269531
patch: return position + this . position ;
rank: 396
score: 98.64028930664062
patch: return case 1 : return position ;
rank: 396
score: 98.62461344401042
patch: return ~ ( position ;
rank: 396
score: 98.59933471679688
patch: } else if ; return 0 ;
rank: 396
score: 98.57870483398438
patch: return * ( ~ position ) ;
rank: 397
score: 98.82527299360795
patch: return position . starts CaMeL With ( $STRING$ ) ;
rank: 397
score: 98.72391764322917
patch: return read ( text , position ) ;
rank: 397
score: 98.6771240234375
patch: return position ; } throw position ;
rank: 397
score: 98.63905164930556
patch: return ~ ALL _ IDS + bucket ;
rank: 397
score: 98.62390814887152
patch: Collections . sort ( position , position ;
rank: 397
score: 98.61460658482143
patch: throw new $STRING$ ~ position ;
rank: 397
score: 98.59918212890625
patch: return * * position ~ position ;
rank: 397
score: 98.5784912109375
patch: return super . parse ( text ) ; }
rank: 397
score: 98.54193115234375
patch: return position + to CaMeL String ;
rank: 398
score: 98.67666015625
patch: return ~ position ; if ~ position ; throw
rank: 398
score: 98.65041097005208
patch: return position int [ - 1 ] ;
rank: 398
score: 98.62353515625
patch: return - ~ $NUMBER$ ;
rank: 398
score: 98.6142349243164
patch: return - 1 ; return false ;
rank: 398
score: 98.59915924072266
patch: return 0 ; return position position ;
rank: 398
score: 98.57807268415179
patch: return -= position + position ;
rank: 399
score: 98.82514784071181
patch: } else { return position + 1 ;
rank: 399
score: 98.72237548828124
patch: return text . length ( ) ? 0 ;
rank: 399
score: 98.67662353515625
patch: return position position ; if ; return position ;
rank: 399
score: 98.63754272460938
patch: } return ~ position + 1 ;
rank: 399
score: 98.61405944824219
patch: return super . position ~ position ;
rank: 399
score: 98.59867858886719
patch: return position - 0 + position ;
rank: 399
score: 98.57748413085938
patch: return ] . position ( ) ;
rank: 399
score: 98.53875732421875
patch: return Character . MAX _ VALUE ;
rank: 400
score: 98.72235107421875
patch: return get CaMeL Id ( text ) ;
rank: 400
score: 98.6763427734375
patch: return ~ position ; while return ~ position ;
rank: 400
score: 98.64920383029514
patch: ~ position ; else { return position ;
rank: 400
score: 98.62222290039062
patch: synchronized ( lock ) { return ~ position ;
rank: 400
score: 98.61404854910714
patch: return - 1 + 0 ;
rank: 400
score: 98.5982894897461
patch: return ; , position ( 0 ;
rank: 400
score: 98.57665143694196
patch: return -- ~ ~ position ;
rank: 401
score: 98.8248291015625
patch: return ~ position ? ~ ALL _ IDS ;
rank: 401
score: 98.7211181640625
patch: return ~ parse ( text , position ) ;
rank: 401
score: 98.67610931396484
patch: return position ; else if position ;
rank: 401
score: 98.64893934461806
patch: return ( position + position 1 ) ;
rank: 401
score: 98.62168579101562
patch: return return ~ 0 ? position : position ;
rank: 401
score: 98.61280059814453
patch: return ~ position ~ position position ;
rank: 401
score: 98.59721374511719
patch: if ; / * * * /
rank: 401
score: 98.576220703125
patch: return super . parse ( text , ) ;
rank: 401
score: 98.53744506835938
patch: assert position >= 0 : position ;
rank: 402
score: 98.82468668619792
patch: return - 1 ? position : 0 ;
rank: 402
score: 98.71920437282986
patch: return & Integer . length ( ) ;
rank: 402
score: 98.67569580078126
patch: return ~ ~ - 1 ; return position ;
rank: 402
score: 98.64881388346355
patch: return position + false ;
rank: 402
score: 98.62069702148438
patch: return ~ ~ position | position ;
rank: 402
score: 98.57615356445312
patch: return ~ position : ALL _ IDS ; }
rank: 402
score: 98.53666687011719
patch: return position ? 1 : position ;
rank: 403
score: 98.71869659423828
patch: return * 0 . - 1 ;
rank: 403
score: 98.6752685546875
patch: return ~ position ; if position + position ;
rank: 403
score: 98.64869689941406
patch: return new String ( str ) ;
rank: 403
score: 98.63212076822917
patch: return ~ ALL _ IDS . value ;
rank: 403
score: 98.61923556857639
patch: if ( position ; return position ) ;
rank: 403
score: 98.61121477399554
patch: return ~ ~ return position ;
rank: 403
score: 98.53434753417969
patch: final int start = ~ position ;
rank: 404
score: 98.71592203776042
patch: return this . ~ position + $STRING$ ;
rank: 404
score: 98.67493896484375
patch: return ~ position ; / / return position ;
rank: 404
score: 98.64796665736607
patch: return ~ position . position ;
rank: 404
score: 98.63070242745536
patch: return - ( position ) ;
rank: 404
score: 98.61861165364583
patch: return position + start ;
rank: 404
score: 98.59600830078125
patch: return ; . ; return position ;
rank: 404
score: 98.57568359375
patch: return Date CaMeL Time CaMeL Zone . for CaMeL
rank: 404
score: 98.53276062011719
patch: return position * $NUMBER$ ~ position ;
rank: 405
score: 98.71580810546875
patch: return ( String ) ~ position + 1 ;
rank: 405
score: 98.67462158203125
patch: return ~ position ; ; return ~ position ;
rank: 405
score: 98.63023158482143
patch: } } return - 1 ;
rank: 405
score: 98.6112060546875
patch: return start ~ ~ position ;
rank: 405
score: 98.59571838378906
patch: return ; . position ~ 0 ;
rank: 406
score: 98.6739501953125
patch: return ~ position ; if ~ position ; try
rank: 406
score: 98.62982177734375
patch: return ~ ~ bucket ;
rank: 406
score: 98.61846923828125
patch: return - position ? position : - 1 ;
rank: 406
score: 98.59571838378906
patch: return * * * return $NUMBER$ ;
rank: 406
score: 98.57490844726563
patch: return ~ ( Date CaMeL Time CaMeL Zone .
rank: 406
score: 98.5309829711914
patch: return - 1 ; ~ position ;
rank: 407
score: 98.82210693359374
patch: return position ? position > 0 : position ;
rank: 407
score: 98.67369842529297
patch: position ~ position ; return position ;
rank: 407
score: 98.64686414930556
patch: return ( text == null ) ? 0
rank: 407
score: 98.62939453125
patch: result = ~ ALL _ IDS ;
rank: 407
score: 98.6183090209961
patch: return return - position - 1 ;
rank: 407
score: 98.61083112444196
patch: else return return ~ position ;
rank: 407
score: 98.57362060546875
patch: return ~ position . length ( ) ] ;
rank: 407
score: 98.5309066772461
patch: return length ;
rank: 408
score: 98.82195366753473
patch: return position ? position : - $NUMBER$ ;
rank: 408
score: 98.71541595458984
patch: return long . size ( ) ;
rank: 408
score: 98.67361886160714
patch: return ; = ~ position ;
rank: 408
score: 98.62838745117188
patch: } } return ~ ~ position ;
rank: 408
score: 98.61062622070312
patch: return return ~ position + 0 ;
rank: 408
score: 98.59562683105469
patch: return ; , 0 , 1 ;
rank: 408
score: 98.57274780273437
patch: return ~ text . substring ( 0 ) ;
rank: 409
score: 98.714306640625
patch: return new String ( position , position ) ;
rank: 409
score: 98.6720703125
patch: return position + - 1 ; return position ;
rank: 409
score: 98.64631652832031
patch: try { return ALL _ IDS ;
rank: 409
score: 98.61760796440973
patch: if ( position == ~ position ) {
rank: 409
score: 98.61040496826172
patch: else ; return ~ ~ position ;
rank: 409
score: 98.59456634521484
patch: } return ~ ~ position position ;
rank: 409
score: 98.57261827256944
patch: return text . trim ( ) ; }
rank: 409
score: 98.52969796316964
patch: return position position ~ position ;
rank: 410
score: 98.82175514914773
patch: return ~ position . length ( ) * 0 ;
rank: 410
score: 98.71417236328125
patch: return this . position + length ;
rank: 410
score: 98.67158813476563
patch: return position ; ; if position = position ;
rank: 410
score: 98.64602661132812
patch: return position : position ;
rank: 410
score: 98.62749372209821
patch: return / * ~ 0 ;
rank: 410
score: 98.61725463867188
patch: return position != null ? position : position ;
rank: 410
score: 98.61024475097656
patch: return ~ - $STRING$ + position ;
rank: 410
score: 98.59420013427734
patch: return ; . value ~ position ;
rank: 411
score: 98.81953938802083
patch: return position ? ~ position : $NUMBER$ ;
rank: 411
score: 98.71378580729167
patch: return this . ~ position + length ;
rank: 411
score: 98.67155238560268
patch: return ~ position ; if ;
rank: 411
score: 98.60892740885417
patch: } return - 0 ;
rank: 411
score: 98.59307861328125
patch: return * * return $NUMBER$ ;
rank: 411
score: 98.57205200195312
patch: return & position ;
rank: 412
score: 98.71342637803819
patch: return ( int ) position + position ;
rank: 412
score: 98.64372422960069
patch: return position . length ( ) 1 ;
rank: 412
score: 98.61577690972223
patch: return - position * $NUMBER$ + position ;
rank: 412
score: 98.60883331298828
patch: return new int ~ position position ;
rank: 412
score: 98.57199096679688
patch: return ~ ~ position . length ;
rank: 412
score: 98.52828216552734
patch: return position + length + 1 ;
rank: 413
score: 98.71318901909723
patch: return this . parse ( text ) ;
rank: 413
score: 98.66873168945312
patch: return position ; ; if return ~ position ;
rank: 413
score: 98.64286295572917
patch: return position ( ALL _ IDS ) ;
rank: 413
score: 98.62586975097656
patch: return text . substring ( ) ;
rank: 413
score: 98.60819498697917
patch: return ~ 1 ; ;
rank: 413
score: 98.59254455566406
patch: return ; . return - 0 ;
rank: 413
score: 98.57183837890625
patch: return ~ 0 + position ;
rank: 413
score: 98.52826799665179
patch: result = position - 1 ;
rank: 414
score: 98.81790924072266
patch: return position ? position : false ;
rank: 414
score: 98.71310763888889
patch: return ~ position ? 0 : 1 ;
rank: 414
score: 98.6669677734375
patch: return position ; } return position ; break ;
rank: 414
score: 98.6419677734375
patch: return ALL _ IDS ? ALL _ IDS
rank: 414
score: 98.61553083147321
patch: return position - text . ;
rank: 414
score: 98.60791015625
patch: return return 1 ; return false ;
rank: 414
score: 98.59192657470703
patch: * * * * * * /
rank: 414
score: 98.52698516845703
patch: return compare CaMeL To ( position ;
rank: 415
score: 98.71275499131944
patch: return . length ( ) + 0 ;
rank: 415
score: 98.66630859375
patch: return position ; return - 1 ; break ;
rank: 415
score: 98.61522827148437
patch: return position - position ? position : 0 ;
rank: 415
score: 98.6076889038086
patch: return ; int return ~ position ;
rank: 415
score: 98.59077453613281
patch: else if ; else return position ;
rank: 415
score: 98.57027180989583
patch: return * position ; }
rank: 416
score: 98.81669477982955
patch: return ~ position ? text . length ( ) ;
rank: 416
score: 98.66612243652344
patch: return ; = ~ - 1 ;
rank: 416
score: 98.61505889892578
patch: return position - 1 - position ;
rank: 416
score: 98.58878326416016
patch: return ~ 1 + ~ position ;
rank: 417
score: 98.71129692925348
patch: return <= 0 ? 0 : 0 ;
rank: 417
score: 98.66549682617188
patch: return position ; return position ; else
rank: 417
score: 98.63904571533203
patch: return position ? position + position ;
rank: 417
score: 98.62083435058594
patch: } return ~ position + position ;
rank: 417
score: 98.60721588134766
patch: return ; int ~ position ; ;
rank: 417
score: 98.58870697021484
patch: return ; , ~ ~ position ;
rank: 417
score: 98.52085876464844
patch: return position ~ date CaMeL Time ;
rank: 418
score: 98.71072726779514
patch: return size . substring ( position ) ;
rank: 418
score: 98.66505126953125
patch: return ~ position ; return position ; return ;
rank: 418
score: 98.60719807942708
patch: return ~ return 1 ;
rank: 418
score: 98.58843122209821
patch: } return position + position ;
rank: 418
score: 98.5690409342448
patch: return & ~ position ;
rank: 418
score: 98.51985931396484
patch: return position ~ position + $STRING$ ;
rank: 419
score: 98.81546630859376
patch: return * / position . length ( ) ;
rank: 419
score: 98.70960693359375
patch: return * - 0 ? 0 : 0 ;
rank: 419
score: 98.66474609375
patch: return ~ position ; if ~ 1 ; else
rank: 419
score: 98.63776312934027
patch: return bucket . append ( text ) ;
rank: 419
score: 98.6203842163086
patch: return ~ ALL _ IDS $NUMBER$ ;
rank: 419
score: 98.58823939732143
patch: return position * ~ $NUMBER$ ;
rank: 419
score: 98.56896362304687
patch: return Date CaMeL Time CaMeL Parser CaMeL Bucket .
rank: 419
score: 98.51873779296875
patch: this . position = - 1 ;
rank: 420
score: 98.6644287109375
patch: return ~ position ; if position ; break ;
rank: 420
score: 98.6371841430664
patch: return / * ALL _ IDS ;
rank: 420
score: 98.61949920654297
patch: return ~ ( position 1 ) ;
rank: 420
score: 98.6064682006836
patch: return position ~ ~ ~ position ;
rank: 420
score: 98.51783752441406
patch: final int position = ~ position ;
rank: 421
score: 98.81514892578124
patch: return position ? position > 1 : 0 ;
rank: 421
score: 98.70762803819444
patch: return ~ position ? true : 0 ;
rank: 421
score: 98.66387176513672
patch: return ~ position ; / / /
rank: 421
score: 98.6369400024414
patch: return chars . length ( ) ;
rank: 421
score: 98.61313302176339
patch: return ~ 0 . $NUMBER$ ;
rank: 421
score: 98.60627964564732
patch: return ; int ~ 1 ;
rank: 421
score: 98.56865692138672
patch: return ~ ~ position - position ;
rank: 421
score: 98.51718139648438
patch: final int ~ position = position ;
rank: 422
score: 98.70720757378473
patch: return ~ new int [ 0 ] ;
rank: 422
score: 98.6635971069336
patch: return ~ position ; / / ;
rank: 422
score: 98.61841692243304
patch: else { return ~ 0 ;
rank: 422
score: 98.61094156901042
patch: return Integer . value CaMeL Of ( ;
rank: 422
score: 98.60565185546875
patch: return start ; return ~ position ;
rank: 422
score: 98.5859603881836
patch: } else { if return 0 ;
rank: 422
score: 98.56850760323661
patch: return ~ position & position ;
rank: 422
score: 98.51717703683036
patch: return position - start ) ;
rank: 423
score: 98.70710584852431
patch: return length . substring ( position ) ;
rank: 423
score: 98.63475206163194
patch: return text . parse ( text ) ;
rank: 423
score: 98.58588409423828
patch: return ; . return - position ;
rank: 423
score: 98.56829155815973
patch: return ~ position + position + 0 ;
rank: 423
score: 98.51565115792411
patch: return position == - 1 ;
rank: 424
score: 98.81168989701705
patch: return ~ position . length ( ) : position ;
rank: 424
score: 98.70608859592014
patch: return != null . length ( ) ;
rank: 424
score: 98.66307373046875
patch: return position + position ; return - 1 ;
rank: 424
score: 98.61807686941964
patch: return / - - 1 ;
rank: 424
score: 98.60321044921875
patch: return finally { return - $NUMBER$ ;
rank: 424
score: 98.58586883544922
patch: if ; * * * * /
rank: 424
score: 98.51522064208984
patch: for ( String position : position )
rank: 425
score: 98.81026611328124
patch: return position ? ~ position : - 1 ;
rank: 425
score: 98.70604112413194
patch: return * 0 + ALL _ IDS ;
rank: 425
score: 98.63315836588542
patch: return * / position ;
rank: 425
score: 98.6179707845052
patch: result = ~ position ;
rank: 425
score: 98.60242571149554
patch: return return return - position ;
rank: 425
score: 98.58548736572266
patch: } return position ; return false ;
rank: 426
score: 98.8099365234375
patch: return * / ~ ~ position ;
rank: 426
score: 98.70597330729167
patch: return ~ String . position ( ) ;
rank: 426
score: 98.66244506835938
patch: return ~ position ; if ~ - $NUMBER$ ;
rank: 426
score: 98.60834418402777
patch: return position + position . length ( ;
rank: 426
score: 98.6023941040039
patch: else { return position ; break ;
rank: 426
score: 98.58526611328125
patch: return position + 0 position ;
rank: 426
score: 98.56650119357639
patch: return ~ ~ position : ~ position ;
rank: 427
score: 98.70453643798828
patch: return get CaMeL Id ( ) ;
rank: 427
score: 98.66195068359374
patch: return position ; if return position ; break ;
rank: 427
score: 98.63218180338542
patch: return / * ~ position + position ;
rank: 427
score: 98.61531066894531
patch: return ~ ALL _ IDS ? 0
rank: 427
score: 98.600830078125
patch: return ~ ~ - position ;
rank: 427
score: 98.58523559570312
patch: return 0 ; return ~ $NUMBER$ ;
rank: 427
score: 98.56466064453124
patch: return ~ position . position ( ) ; }
rank: 427
score: 98.51464080810547
patch: return super . append ( position ;
rank: 428
score: 98.80887451171876
patch: return position * ALL _ IDS + position ;
rank: 428
score: 98.6606689453125
patch: return position ; if ; return ~ position ;
rank: 428
score: 98.61286163330078
patch: return new Long ( position ) ;
rank: 428
score: 98.60780552455357
patch: return - position * position ;
rank: 428
score: 98.58489990234375
patch: if ( ; return ~ position ;
rank: 428
score: 98.51455688476562
patch: return position * $NUMBER$ * position ;
rank: 429
score: 98.70411028180804
patch: return * 0 . 1 ;
rank: 429
score: 98.65928344726562
patch: return ~ position ; } if ~ position ;
rank: 429
score: 98.63123914930556
patch: return ~ bucket . ALL _ IDS ;
rank: 429
score: 98.60574001736111
patch: return position position * position + position ;
rank: 429
score: 98.5980453491211
patch: return return position ~ position position ;
rank: 429
score: 98.58488464355469
patch: if ( 0 == ~ 1 ;
rank: 429
score: 98.51422119140625
patch: return position ~ position * $NUMBER$ ;
rank: 430
score: 98.7024917602539
patch: return ~ ~ position + length ;
rank: 430
score: 98.658154296875
patch: return ~ position ; return / + position ;
rank: 430
score: 98.61065673828125
patch: ~ ALL _ IDS ) ;
rank: 430
score: 98.60491943359375
patch: return text . length ( ;
rank: 430
score: 98.59658813476562
patch: return ~ - 1 + position ;
rank: 430
score: 98.5845718383789
patch: return * * * - 1 ;
rank: 430
score: 98.56275770399306
patch: return * position + position + position ;
rank: 430
score: 98.51351928710938
patch: return - 1 ; position ++ ;
rank: 431
score: 98.65660400390625
patch: return position position ; return position + position ;
rank: 431
score: 98.60994466145833
patch: return * ~ 0 ;
rank: 431
score: 98.59626770019531
patch: return - - $STRING$ + position ;
rank: 431
score: 98.51156616210938
patch: return position ~ position - position ;
rank: 432
score: 98.70214165581598
patch: return name . substring ( position ) ;
rank: 432
score: 98.656494140625
patch: return position ; } if ~ - position ;
rank: 432
score: 98.59613800048828
patch: return return 1 ; ~ position ;
rank: 432
score: 98.58380889892578
patch: return ; . return position position ;
rank: 432
score: 98.56202697753906
patch: return ~ ~ 0 . 1 ;
rank: 432
score: 98.51123046875
patch: return position ? position ;
rank: 433
score: 98.80648193359374
patch: return position . substring ( position 1 ) ;
rank: 433
score: 98.7020263671875
patch: return return ~ ~ position + 1 ;
rank: 433
score: 98.65640258789062
patch: return position ; if ~ 1 ; break ;
rank: 433
score: 98.59564208984375
patch: return ; int start = position ;
rank: 433
score: 98.58354187011719
patch: return position * position ~ position ;
rank: 433
score: 98.56195068359375
patch: return int ~ ~ position ;
rank: 433
score: 98.50923919677734
patch: return Char CaMeL Sequence . EMPTY ;
rank: 434
score: 98.80599365234374
patch: return * ~ ( position + 1 ) ;
rank: 434
score: 98.70118543836806
patch: return list . get ( position ) ;
rank: 434
score: 98.65584716796874
patch: return ~ position ; return position ; else ;
rank: 434
score: 98.60635715060764
patch: else { return ~ position + 1 ;
rank: 434
score: 98.60293918185764
patch: return ~ position + $STRING$ + text ;
rank: 434
score: 98.5956039428711
patch: return false ; return - 0 ;
rank: 434
score: 98.58352661132812
patch: if ( ~ ~ position position ;
rank: 434
score: 98.56150817871094
patch: return ~ position . ~ position ;
rank: 434
score: 98.50856526692708
patch: return position ~ 0 ;
rank: 435
score: 98.80439976283482
patch: return position + - 0 ;
rank: 435
score: 98.70072428385417
patch: return <= 0 ? 1 : 0 ;
rank: 435
score: 98.6542724609375
patch: return - 1 ; break ; return position ;
rank: 435
score: 98.60600934709821
patch: } return * ~ position ;
rank: 435
score: 98.60014343261719
patch: return position - this . position ;
rank: 435
score: 98.59538922991071
patch: return position ; return $STRING$ ;
rank: 435
score: 98.58300018310547
patch: return ; . return $NUMBER$ position ;
rank: 435
score: 98.56098022460938
patch: return long CaMeL Value ( position ) ; }
rank: 435
score: 98.50635528564453
patch: return position && position == 0 ;
rank: 436
score: 98.70062255859375
patch: return * ( position - 0 ) ;
rank: 436
score: 98.65422973632812
patch: return position + position ; return - position ;
rank: 436
score: 98.60507202148438
patch: return ~ ~ ALL _ IDS }
rank: 436
score: 98.60014343261719
patch: return return - position - position ;
rank: 436
score: 98.594482421875
patch: else { return - 1 ; ;
rank: 436
score: 98.58163452148438
patch: / * * * return position ;
rank: 436
score: 98.50281524658203
patch: return position ? null : position ;
rank: 437
score: 98.69993760850694
patch: return substring ( position , position ) ;
rank: 437
score: 98.65396728515626
patch: return position ; ~ - 1 ; break ;
rank: 437
score: 98.60404459635417
patch: = text . substring ( position ) ;
rank: 437
score: 98.60000949435764
patch: if ( position == - position ) {
rank: 437
score: 98.59352111816406
patch: return false ; return - $STRING$ ;
rank: 437
score: 98.58111572265625
patch: if ( position ; return 0 ;
rank: 437
score: 98.56029663085937
patch: return ~ ~ position + position + position ;
rank: 437
score: 98.50243377685547
patch: return position ~ this . position ;
rank: 438
score: 98.8023193359375
patch: return position + $NUMBER$ + ALL _ IDS ;
rank: 438
score: 98.69988403320312
patch: bucket . set CaMeL Date ( text ) ;
rank: 438
score: 98.65374145507812
patch: return position + position ; return position ; }
rank: 438
score: 98.5806884765625
patch: return * * return ~ 0 ;
rank: 438
score: 98.56016235351562
patch: return ~ ~ position ? position : position ;
rank: 439
score: 98.80202907986111
patch: return ~ position ? position : true ;
rank: 439
score: 98.6533203125
patch: return position ; return position ; try
rank: 439
score: 98.59796142578125
patch: return ~ position . length ( ;
rank: 439
score: 98.59302520751953
patch: / finally { return ~ position ;
rank: 439
score: 98.57911682128906
patch: if ( ; else { return ;
rank: 439
score: 98.55965169270833
patch: return Date CaMeL Time CaMeL Zone . }
rank: 439
score: 98.49972534179688
patch: return position ~ position + $NUMBER$ ;
rank: 440
score: 98.69388156467014
patch: return * this . ALL _ IDS ;
rank: 440
score: 98.65305786132812
patch: return position ; if ~ position ; return ;
rank: 440
score: 98.57722691127232
patch: return ; , ~ 0 ;
rank: 440
score: 98.55836317274306
patch: return ~ position + bucket . length ;
rank: 440
score: 98.49960327148438
patch: return hash CaMeL Code ( ) ;
rank: 441
score: 98.69384765625
patch: return new String ( str , position ) ;
rank: 441
score: 98.65187377929688
patch: return position ; } else { return position ;
rank: 441
score: 98.622314453125
patch: return / * return position + position ;
rank: 441
score: 98.59226989746094
patch: return return position ; ~ position ;
rank: 441
score: 98.57716369628906
patch: return position - position ~ position ;
rank: 441
score: 98.55832248263889
patch: return super . parse CaMeL Into ( }
rank: 441
score: 98.49835968017578
patch: return - 1 ; position -- ;
rank: 442
score: 98.6932373046875
patch: return * - - - 1 ;
rank: 442
score: 98.60094451904297
patch: return & ~ ALL _ IDS ;
rank: 442
score: 98.59752655029297
patch: return this . position - position ;
rank: 442
score: 98.592041015625
patch: try { return ~ position position ;
rank: 442
score: 98.57698059082031
patch: return ; . start return position ;
rank: 442
score: 98.55594482421876
patch: return -- position ;
rank: 442
score: 98.49835968017578
patch: return position ~ $STRING$ + position ;
rank: 443
score: 98.79705810546875
patch: return ~ ~ position ? position : 0 ;
rank: 443
score: 98.65043334960937
patch: return ; return ~ position ; return position ;
rank: 443
score: 98.62179565429688
patch: return bucket ;
rank: 443
score: 98.59931945800781
patch: else return ~ ALL _ IDS ;
rank: 443
score: 98.59151458740234
patch: return return ~ return - $NUMBER$ ;
rank: 443
score: 98.57582600911458
patch: return $NUMBER$ + position ;
rank: 443
score: 98.55567762586806
patch: return >= 0 ? ALL _ IDS ;
rank: 443
score: 98.49803924560547
patch: return position + short CaMeL Value ;
rank: 444
score: 98.79688178168402
patch: return position ? ~ ALL _ IDS ;
rank: 444
score: 98.69297790527344
patch: return int [ ] - 1 ;
rank: 444
score: 98.64992065429688
patch: return position ; for ~ 1 ; break ;
rank: 444
score: 98.59860229492188
patch: return ( ~ ~ position ) ;
rank: 444
score: 98.59615652901786
patch: return ~ $NUMBER$ | position ;
rank: 444
score: 98.5914306640625
patch: return ~ return 0 ;
rank: 444
score: 98.55538504464286
patch: return / : ~ position ;
rank: 444
score: 98.49787902832031
patch: return position . substring ( position ;
rank: 445
score: 98.69259982638889
patch: return >= position ? position : 0 ;
rank: 445
score: 98.64946899414062
patch: return ~ 1 ; if ~ position position ;
rank: 445
score: 98.59656524658203
patch: return ~ ~ ( 0 ) ;
rank: 445
score: 98.59102630615234
patch: else return ~ ~ ~ position ;
rank: 445
score: 98.57538713727679
patch: return 0 + ~ 1 ;
rank: 445
score: 98.55485704210069
patch: return ~ position + position ; break ;
rank: 445
score: 98.49777221679688
patch: return length - 1 ;
rank: 446
score: 98.79581909179687
patch: return text . length ( ) * 0 ;
rank: 446
score: 98.69251844618056
patch: return ( String ) position + 0 ;
rank: 446
score: 98.64943237304688
patch: return ~ position ; if return position ; }
rank: 446
score: 98.61800808376736
patch: return == 0 ? position : position ;
rank: 446
score: 98.59578704833984
patch: return - 1 . ~ position ;
rank: 446
score: 98.59241485595703
patch: return position + position / $NUMBER$ ;
rank: 446
score: 98.59093366350446
patch: finally { return false ; }
rank: 446
score: 98.57527923583984
patch: } if ( ~ position position ;
rank: 446
score: 98.5545654296875
patch: return < position ? position : position ;
rank: 447
score: 98.6481201171875
patch: return position + position ; for ~ 1 ;
rank: 447
score: 98.59524536132812
patch: else { return true ;
rank: 447
score: 98.59225463867188
patch: return position * $NUMBER$ | position ;
rank: 447
score: 98.59034729003906
patch: return return ~ ~ - $NUMBER$ ;
rank: 447
score: 98.5544204711914
patch: return int ~ ALL _ IDS ;
rank: 447
score: 98.496826171875
patch: return position + name ;
rank: 448
score: 98.6480712890625
patch: return ~ 1 ; } return ~ position ;
rank: 448
score: 98.61634657118056
patch: return * / ~ position + position ;
rank: 448
score: 98.59402029854911
patch: return - $NUMBER$ + position ;
rank: 448
score: 98.57484436035156
patch: } else { return position ; ;
rank: 448
score: 98.55378069196429
patch: return * position ~ position ;
rank: 448
score: 98.49603271484375
patch: return position >= 0 ? position ;
rank: 449
score: 98.79304334852431
patch: return position ? * 1 : 0 ;
rank: 449
score: 98.6915283203125
patch: return ( int ) ~ position + 1 ;
rank: 449
score: 98.64801788330078
patch: return * position ; return position ;
rank: 449
score: 98.61585235595703
patch: return position + bucket . length ;
rank: 449
score: 98.59369659423828
patch: return / * return - 1 ;
rank: 449
score: 98.59105682373047
patch: return position ~ text . length ;
rank: 449
score: 98.58909388950893
patch: } return return ~ position ;
rank: 449
score: 98.55354817708333
patch: return ~ position + position - 1 ;
rank: 449
score: 98.49537004743304
patch: return position - position ; ;
rank: 450
score: 98.7924560546875
patch: return ~ ~ ( position + 0 ) ;
rank: 450
score: 98.6910400390625
patch: return [ 0 ] ;
rank: 450
score: 98.64788208007812
patch: return ~ position - position ; return position ;
rank: 450
score: 98.61328125
patch: return text . substring ( start ) ;
rank: 450
score: 98.59078979492188
patch: return position - position * $NUMBER$ ;
rank: 450
score: 98.58873748779297
patch: / else { return position ; ;
rank: 450
score: 98.55266571044922
patch: return . substring ( position ) ;
rank: 451
score: 98.69049072265625
patch: return ~ position + - - 0 ;
rank: 451
score: 98.6477294921875
patch: return ~ position ; try / return position ;
rank: 451
score: 98.5880126953125
patch: return return position + - position ;
rank: 451
score: 98.5725326538086
patch: else { if ; * * /
rank: 451
score: 98.55262974330357
patch: return ~ position + start ;
rank: 451
score: 98.49443054199219
patch: return position && position - 1 ;
rank: 452
score: 98.69000922309027
patch: return * 0 ? position : 0 ;
rank: 452
score: 98.64772338867188
patch: return position ; if return position + position ;
rank: 452
score: 98.61190795898438
patch: return * * / ~ position ;
rank: 452
score: 98.590087890625
patch: return super . ~ ~ position ;
rank: 452
score: 98.59004974365234
patch: else { return - $NUMBER$ ; }
rank: 452
score: 98.58767700195312
patch: return - $NUMBER$ ; return position ;
rank: 452
score: 98.55217742919922
patch: return ~ position ; } break ;
rank: 453
score: 98.78837754991319
patch: return ~ position ? $NUMBER$ : 0 ;
rank: 453
score: 98.68987358940973
patch: return > 0 ? 0 : 0 ;
rank: 453
score: 98.647119140625
patch: return ~ position ; if position / / ;
rank: 453
score: 98.58695983886719
patch: return ~ ~ ~ - position ;
rank: 453
score: 98.55105154854911
patch: return ~ position * 1 ;
rank: 453
score: 98.4924087524414
patch: int position = position + 1 ;
rank: 454
score: 98.78656005859375
patch: return position / 1 ;
rank: 454
score: 98.68918185763889
patch: return * Boolean . length ( ) ;
rank: 454
score: 98.64645821707589
patch: return return position ; break ;
rank: 454
score: 98.58900960286458
patch: return ( position ) ;
rank: 454
score: 98.58679962158203
patch: return - 1 + ~ position ;
rank: 454
score: 98.57194519042969
patch: return value ;
rank: 454
score: 98.49150739397321
patch: return position + 1 ; ;
rank: 455
score: 98.6463623046875
patch: return position ; ~ ~ position ;
rank: 455
score: 98.60847303602431
patch: return position ? position . length ( )
rank: 455
score: 98.58732386997768
patch: throw new return - 1 ;
rank: 455
score: 98.58649444580078
patch: else { ; return ~ position ;
rank: 455
score: 98.56941986083984
patch: } else { if ; return ;
rank: 456
score: 98.68819173177083
patch: return > 0 . 0 + position ;
rank: 456
score: 98.64616088867187
patch: return position + position ; while ~ 1 ;
rank: 456
score: 98.58726501464844
patch: return - $NUMBER$ . - position ;
rank: 456
score: 98.58679962158203
patch: return position - position / $NUMBER$ ;
rank: 456
score: 98.58638218470982
patch: return ; int ~ $STRING$ ;
rank: 456
score: 98.56905364990234
patch: if ( ~ position ; return ;
rank: 457
score: 98.68777804904514
patch: return * 0 . 0 : 0 ;
rank: 457
score: 98.64610595703125
patch: return ~ position ; if ~ return position ;
rank: 457
score: 98.60738372802734
patch: return bucket . close ( ) ;
rank: 457
score: 98.5870132446289
patch: return ~ ~ ~ ~ 1 ;
rank: 457
score: 98.586181640625
patch: return position ; return 1 ;
rank: 457
score: 98.56880696614583
patch: return * + position ;
rank: 457
score: 98.54600016276042
patch: return ~ ~ ( ALL _ IDS ;
rank: 457
score: 98.49042510986328
patch: assert position <= 0 : $STRING$ ;
rank: 458
score: 98.78472900390625
patch: return * ( position - position ) ;
rank: 458
score: 98.68745252821181
patch: return ( int ) position + 0 ;
rank: 458
score: 98.5863265991211
patch: if ( position == position ) {
rank: 458
score: 98.58525739397321
patch: else { ; return position ;
rank: 458
score: 98.56832885742188
patch: return * * ; return position ;
rank: 458
score: 98.54544406467014
patch: return ~ position ~ position + position ;
rank: 458
score: 98.48982238769531
patch: return position ~ chars . length ;
rank: 459
score: 98.78441704644098
patch: return position ? ~ $NUMBER$ : 0 ;
rank: 459
score: 98.68699137369792
patch: return $STRING$ . substring ( position ) ;
rank: 459
score: 98.64520263671875
patch: return position ; position = position ;
rank: 459
score: 98.58627755301339
patch: return ~ $NUMBER$ ~ position ;
rank: 459
score: 98.58474731445312
patch: return return 1 + ~ position ;
rank: 459
score: 98.58358001708984
patch: return ~ ~ position + $NUMBER$ ;
rank: 459
score: 98.56766183035714
patch: return ; , 0 , ;
rank: 459
score: 98.54499647352431
patch: return ~ ~ ( ~ position ) ;
rank: 459
score: 98.48942565917969
patch: return position + 1 ~ position ;
rank: 460
score: 98.78323364257812
patch: return * ~ ALL _ IDS : position ;
rank: 460
score: 98.68688286675348
patch: return in . substring ( position ) ;
rank: 460
score: 98.64471435546875
patch: return position + position ; for ~ position ;
rank: 460
score: 98.5836410522461
patch: return return ~ position ~ position ;
rank: 460
score: 98.56728515625
patch: } return false ;
rank: 461
score: 98.68679373604911
patch: return * 0 + position ;
rank: 461
score: 98.64395141601562
patch: return ~ position ; if ~ position ; int
rank: 461
score: 98.6045150756836
patch: * / else { return position ;
rank: 461
score: 98.58518981933594
patch: return position + 1 - position ;
rank: 461
score: 98.58309936523438
patch: return ~ - 0 + position ;
rank: 461
score: 98.58142852783203
patch: } return ~ ~ - 1 ;
rank: 461
score: 98.54363250732422
patch: return / - 1 + position ;
rank: 461
score: 98.48797607421875
patch: final position -- ; return position ;
rank: 462
score: 98.68650309244792
patch: return get CaMeL Value ( text ) ;
rank: 462
score: 98.6437744140625
patch: return ~ position ; if ~ position ; {
rank: 462
score: 98.60418701171875
patch: return , text , position ) ;
rank: 462
score: 98.58295549665179
patch: return return $NUMBER$ + position ;
rank: 462
score: 98.56686401367188
patch: return ; , 0 ( return ;
rank: 462
score: 98.54307725694444
patch: return if ( ALL _ IDS ) ;
rank: 462
score: 98.4874979654948
patch: return position << 1 ;
rank: 463
score: 98.68333435058594
patch: return > 0 : ~ position ;
rank: 463
score: 98.64360961914062
patch: return position + position ; } return position ;
rank: 463
score: 98.58283996582031
patch: else { if ~ return position ;
rank: 463
score: 98.58243560791016
patch: return super . parse CaMeL Into ;
rank: 463
score: 98.58036295572917
patch: return - - $NUMBER$ ;
rank: 463
score: 98.56671142578125
patch: } else return position ;
rank: 463
score: 98.54305594308036
patch: return >> : ~ position ;
rank: 463
score: 98.48721313476562
patch: return position ~ $STRING$ ;
rank: 464
score: 98.78125762939453
patch: return position ? position : true ;
rank: 464
score: 98.682373046875
patch: return >= 0 ? 0 : 0 ;
rank: 464
score: 98.643408203125
patch: return ~ position + 1 ; return position ;
rank: 464
score: 98.60182698567708
patch: return position + max ;
rank: 464
score: 98.582763671875
patch: else { return ~ - $STRING$ ;
rank: 464
score: 98.5821304321289
patch: return position * position * $NUMBER$ ;
rank: 464
score: 98.5660400390625
patch: return position + ~ $NUMBER$ ;
rank: 464
score: 98.54302368164062
patch: return ~ length ;
rank: 464
score: 98.48670196533203
patch: throw new ~ $NUMBER$ + $STRING$ ;
rank: 465
score: 98.78102620442708
patch: return $NUMBER$ ? ~ position : 0 ;
rank: 465
score: 98.64284057617188
patch: return ~ position ; if return position ; else
rank: 465
score: 98.58261108398438
patch: return ; int position return position ;
rank: 465
score: 98.56575775146484
patch: else { if return 0 ; }
rank: 465
score: 98.48601684570312
patch: return position 1 ;
rank: 466
score: 98.78021918402777
patch: return position * ~ ALL _ IDS ;
rank: 466
score: 98.67934163411458
patch: return . length ( ) - 1 ;
rank: 466
score: 98.64247436523438
patch: return ~ position ; final return ~ position ;
rank: 466
score: 98.60101318359375
patch: return ~ position ? position + position ;
rank: 466
score: 98.58231608072917
patch: / * return position ;
rank: 466
score: 98.57862200055804
patch: return ~ ~ - $NUMBER$ ;
rank: 466
score: 98.56537737165179
patch: if ( ~ position position ;
rank: 466
score: 98.48471069335938
patch: return position & position + 1 ;
rank: 467
score: 98.77992078993056
patch: return position ? ~ position : null ;
rank: 467
score: 98.64235229492188
patch: return position ; if position ; ~ position ;
rank: 467
score: 98.60057830810547
patch: return ( position / 0 ) ;
rank: 467
score: 98.58184051513672
patch: int * ; return ~ position ;
rank: 467
score: 98.57855987548828
patch: return ALL _ IDS - position ;
rank: 467
score: 98.56442260742188
patch: return ; . value return position ;
rank: 467
score: 98.48455810546875
patch: return position - - 1 ;
rank: 468
score: 98.77964952256944
patch: return <= 0 ? position : 0 ;
rank: 468
score: 98.67778015136719
patch: return while . length ( ) ;
rank: 468
score: 98.64195251464844
patch: return ~ position ; try / /
rank: 468
score: 98.60009087456598
patch: return else { return position + position ;
rank: 468
score: 98.58100891113281
patch: else { int ~ ~ position ;
rank: 468
score: 98.57778930664062
patch: return * return ~ ~ position ;
rank: 468
score: 98.56324986049107
patch: / * return ~ position ;
rank: 468
score: 98.54226345486111
patch: return super . parse ( ) ; }
rank: 468
score: 98.48433430989583
patch: return position ~ length ;
rank: 469
score: 98.77826538085938
patch: return ( position + 0 ) + position ;
rank: 469
score: 98.67698160807292
patch: return get CaMeL Zone ( $STRING$ ) ;
rank: 469
score: 98.64190063476562
patch: return position ; } if ~ position position ;
rank: 469
score: 98.59848361545139
patch: synchronized ( bucket ) { return position ;
rank: 469
score: 98.57810465494792
patch: return position + size ;
rank: 469
score: 98.57741001674107
patch: return - * ~ position ;
rank: 469
score: 98.5411376953125
patch: return ~ position ~ position ; }
rank: 469
score: 98.48326873779297
patch: return position . to CaMeL String ;
rank: 470
score: 98.67656114366319
patch: return return ( int ) ~ position ;
rank: 470
score: 98.58028411865234
patch: return return ~ ~ return position ;
rank: 470
score: 98.57794189453125
patch: return ~ ( Long ) position ;
rank: 470
score: 98.5765380859375
patch: result ~ ~ ALL _ IDS ;
rank: 470
score: 98.56205531529018
patch: } else return ~ position ;
rank: 470
score: 98.5393575032552
patch: return += ~ position ;
rank: 470
score: 98.48274230957031
patch: return position + position * $NUMBER$ ;
rank: 471
score: 98.77570190429688
patch: return position ? ~ 0 : - 1 ;
rank: 471
score: 98.64140625
patch: return ~ position ; while ~ ~ position ;
rank: 471
score: 98.59745788574219
patch: return position + bucket . value ;
rank: 471
score: 98.57775115966797
patch: return ~ ( position & position ;
rank: 471
score: 98.55985260009766
patch: return Integer . value CaMeL Of ;
rank: 471
score: 98.53855895996094
patch: return long ~ ALL _ IDS ;
rank: 471
score: 98.48251342773438
patch: if ( position != 0 ) {
rank: 472
score: 98.64137573242188
patch: return position ; if ~ - - 1 ;
rank: 472
score: 98.59723663330078
patch: return new Boolean ( position ) ;
rank: 472
score: 98.57962036132812
patch: return - $STRING$ + ~ position ;
rank: 472
score: 98.57667759486607
patch: return ~ - 1 ; ;
rank: 472
score: 98.55830383300781
patch: return ~ 1 [ 0 ] ;
rank: 472
score: 98.53795514787946
patch: return ++ ~ ~ position ;
rank: 472
score: 98.4814961751302
patch: this . ~ position ;
rank: 473
score: 98.67433675130208
patch: return - - - - - 0 ;
rank: 473
score: 98.64080047607422
patch: return position position ; if position ;
rank: 473
score: 98.57958984375
patch: else { return ~ ~ 0 ;
rank: 473
score: 98.57642618815105
patch: return position + text ;
rank: 473
score: 98.55769348144531
patch: return ; . position ( 0 ;
rank: 473
score: 98.53755950927734
patch: return ~ position ~ ~ position ;
rank: 473
score: 98.4801025390625
patch: return position && position == position ;
rank: 474
score: 98.77375623914931
patch: return ( position + - 0 ) ;
rank: 474
score: 98.67317708333333
patch: return ! ALL _ IDS . length ;
rank: 474
score: 98.64048461914062
patch: return ~ 1 ; return position + position ;
rank: 474
score: 98.59664577907986
patch: / * return ~ position + position ;
rank: 474
score: 98.57957240513393
patch: return position ~ return position ;
rank: 474
score: 98.57516915457589
patch: return * return - 1 ;
rank: 474
score: 98.55679321289062
patch: return ; , 0 , start ;
rank: 474
score: 98.53751918247768
patch: return ~ position ; * /
rank: 474
score: 98.47971598307292
patch: return length ~ position ;
rank: 475
score: 98.64024658203125
patch: return position ; if ~ ; return position ;
rank: 475
score: 98.5965576171875
patch: return position . min ( ) ;
rank: 475
score: 98.57911173502605
patch: } return return position ;
rank: 475
score: 98.57463073730469
patch: -- position ; return ~ position ;
rank: 475
score: 98.55677795410156
patch: return ; , 0 + position ;
rank: 475
score: 98.53695339626736
patch: return ~ ALL _ IDS ; } }
rank: 475
score: 98.47937774658203
patch: return position + length + position ;
rank: 476
score: 98.6710433959961
patch: return int [ - 0 ] ;
rank: 476
score: 98.64014892578125
patch: return - 1 ; if return ~ position ;
rank: 476
score: 98.5790786743164
patch: for ~ position ; return position ;
rank: 476
score: 98.5758056640625
patch: return - 1 return position ;
rank: 476
score: 98.57304164341518
patch: ~ ~ ALL _ IDS ;
rank: 476
score: 98.55387369791667
patch: if ; return position ;
rank: 477
score: 98.67032296316964
patch: return * - - 0 ;
rank: 477
score: 98.64000854492187
patch: return position ; return position ; = position ;
rank: 477
score: 98.57870483398438
patch: return position ~ return - 1 ;
rank: 477
score: 98.55322265625
patch: return * * * return ;
rank: 477
score: 98.47596740722656
patch: return position - position + $NUMBER$ ;
rank: 478
score: 98.67001681857639
patch: return ~ ~ position + - 0 ;
rank: 478
score: 98.59317779541016
patch: return ALL _ IDS + bucket ;
rank: 478
score: 98.57852172851562
patch: return return ~ ~ position ; ;
rank: 478
score: 98.57556915283203
patch: return super . position + position ;
rank: 478
score: 98.57069905598958
patch: return ~ ~ null ;
rank: 478
score: 98.55313110351562
patch: } throw new Runtime CaMeL Exception ;
rank: 478
score: 98.53533935546875
patch: return ~ ~ position + ~ position ;
rank: 478
score: 98.47494070870536
patch: return position position + $NUMBER$ ;
rank: 479
score: 98.66971842447917
patch: return ( String ) ~ ~ position ;
rank: 479
score: 98.63809814453126
patch: return ~ 1 ; if position return position ;
rank: 479
score: 98.59284319196429
patch: return return ALL _ IDS ;
rank: 479
score: 98.57767740885417
patch: return return return 0 ;
rank: 479
score: 98.5750732421875
patch: return super . ~ ( position ;
rank: 479
score: 98.55077253069196
patch: / * * * * ;
rank: 479
score: 98.47398376464844
patch: return position ? position : start ;
rank: 480
score: 98.76922607421875
patch: return / * return position + 1 ;
rank: 480
score: 98.66763644748264
patch: return text . length ( ) 1 ;
rank: 480
score: 98.63786010742187
patch: return ~ position ; if ~ position ; String
rank: 480
score: 98.5776596069336
patch: else { return return - position ;
rank: 480
score: 98.57502746582031
patch: return this . position - 1 ;
rank: 480
score: 98.55044555664062
patch: / * * * / return ;
rank: 480
score: 98.53484429253473
patch: return ~ position + position ; } }
rank: 480
score: 98.47283935546875
patch: result = position + position ;
rank: 481
score: 98.76840549045139
patch: return position ? / 1 : 0 ;
rank: 481
score: 98.63755580357143
patch: return position ; throw position ;
rank: 481
score: 98.57765197753906
patch: else { return ~ return 0 ;
rank: 481
score: 98.57490539550781
patch: return ~ ~ position / $NUMBER$ ;
rank: 481
score: 98.54962921142578
patch: } else { if ( position ;
rank: 481
score: 98.53441026475694
patch: return ~ position : position + position ;
rank: 481
score: 98.4708480834961
patch: assert position > 0 : position ;
rank: 482
score: 98.66670057508681
patch: return list . substring ( position ) ;
rank: 482
score: 98.63709106445313
patch: return ~ position + 0 ; return position ;
rank: 482
score: 98.5774917602539
patch: return return - ~ ~ position ;
rank: 482
score: 98.54934692382812
patch: return ; , position return position ;
rank: 482
score: 98.53427559988839
patch: return long ~ ~ position ;
rank: 482
score: 98.4692611694336
patch: return position - chars . length ;
rank: 483
score: 98.6665267944336
patch: return Integer . length + 1 ;
rank: 483
score: 98.63656616210938
patch: ~ position ; return - position ;
rank: 483
score: 98.57624053955078
patch: return this . position position position ;
rank: 483
score: 98.54929606119792
patch: } if return 0 ;
rank: 483
score: 98.53329467773438
patch: return / + position ;
rank: 484
score: 98.63568115234375
patch: return position ; return - position ; break ;
rank: 484
score: 98.58670806884766
patch: return $NUMBER$ + ALL _ IDS ;
rank: 484
score: 98.57608032226562
patch: return ; int 0 ;
rank: 484
score: 98.5666732788086
patch: return ALL _ IDS + 1 ;
rank: 484
score: 98.54924665178571
patch: return ; , return position ;
rank: 484
score: 98.53288438585069
patch: return ~ position + position . position ;
rank: 484
score: 98.46761648995536
patch: if ( position < 0 )
rank: 485
score: 98.6654281616211
patch: return <= 0 : ~ position ;
rank: 485
score: 98.6352783203125
patch: return position ; break ; if ~ position ;
rank: 485
score: 98.57579040527344
patch: / * ] / return position ;
rank: 485
score: 98.57403564453125
patch: return - 1 return - position ;
rank: 485
score: 98.54879760742188
patch: } if ( 0 == position ;
rank: 485
score: 98.53256225585938
patch: return ~ position [ position ] ;
rank: 485
score: 98.4672622680664
patch: return position / $NUMBER$ ~ position ;
rank: 486
score: 98.76494004991319
patch: return * / return position + 1 ;
rank: 486
score: 98.66448974609375
patch: return Integer . length ;
rank: 486
score: 98.63514404296875
patch: return ~ position ; if ~ position ; }
rank: 486
score: 98.57563127790179
patch: / finally { return position ;
rank: 486
score: 98.56629943847656
patch: return ( position + $STRING$ ) ;
rank: 486
score: 98.546142578125
patch: throw get CaMeL Runtime ( position ;
rank: 486
score: 98.53208923339844
patch: return ~ position + 1 ; }
rank: 486
score: 98.4666748046875
patch: String position = position + $STRING$ ;
rank: 487
score: 98.63487548828125
patch: return position ; } try { return position ;
rank: 487
score: 98.58181762695312
patch: return ( position / 1 ) ;
rank: 487
score: 98.57535226004464
patch: return return ~ position ; ;
rank: 487
score: 98.57311248779297
patch: return position - start / $NUMBER$ ;
rank: 487
score: 98.56130981445312
patch: return ~ ~ 0 . 0 ;
rank: 487
score: 98.5457051595052
patch: return position / 0 ;
rank: 487
score: 98.53200276692708
patch: return else return ~ position + position ;
rank: 487
score: 98.46630859375
patch: return position ~ start ;
rank: 488
score: 98.76405164930556
patch: } return position ? position : 0 ;
rank: 488
score: 98.66321563720703
patch: return this . position ( ) ;
rank: 488
score: 98.63381958007812
patch: return ~ position ; if ~ position ; /
rank: 488
score: 98.5606918334961
patch: return ~ ALL _ IDS String ;
rank: 488
score: 98.54491170247395
patch: } ; return position ;
rank: 488
score: 98.46623229980469
patch: return position ? $STRING$ : $STRING$ ;
rank: 489
score: 98.76377360026042
patch: return * / return position + position ;
rank: 489
score: 98.66291046142578
patch: return - . length ( ) ;
rank: 489
score: 98.63289794921874
patch: return position ; if ~ position ; int position
rank: 489
score: 98.57358805338542
patch: return return ~ $NUMBER$ ;
rank: 489
score: 98.53016008649554
patch: return position ~ position ; }
rank: 489
score: 98.46533203125
patch: return position * position + length ;
rank: 490
score: 98.63275756835938
patch: return position + 0 ; while ~ position ;
rank: 490
score: 98.58040364583333
patch: return position + true ;
rank: 490
score: 98.57318115234375
patch: return ~ return ~ ~ position ;
rank: 490
score: 98.56964874267578
patch: return position - return - 1 ;
rank: 490
score: 98.55950055803571
patch: return += ALL _ IDS ;
rank: 490
score: 98.5428237915039
patch: if ( position != 0 position ;
rank: 490
score: 98.52880859375
patch: return >= 0 ? ~ position ;
rank: 491
score: 98.66182163783482
patch: return >= 0 + 1 ;
rank: 491
score: 98.63194580078125
patch: return ~ ~ 1 ; return ~ position ;
rank: 491
score: 98.57316371372768
patch: else { else return position ;
rank: 491
score: 98.56883239746094
patch: return position + text . substring ;
rank: 491
score: 98.55913434709821
patch: return ~ ~ ~ $NUMBER$ ;
rank: 491
score: 98.52734375
patch: return ~ position . length ;
rank: 492
score: 98.63135986328125
patch: return return ~ ~ position ; return position ;
rank: 492
score: 98.57247161865234
patch: while ~ position ; return position ;
rank: 492
score: 98.55831473214286
patch: result = ~ ~ position ;
rank: 492
score: 98.52721296037946
patch: return ~ position - false ;
rank: 492
score: 98.46340942382812
patch: String text = position + $STRING$ ;
rank: 493
score: 98.76130506727431
patch: return return position ? position : 0 ;
rank: 493
score: 98.66146087646484
patch: return this . parse CaMeL Into ;
rank: 493
score: 98.63113403320312
patch: return position + ~ - 1 ;
rank: 493
score: 98.57192993164062
patch: } else { return - $STRING$ ;
rank: 493
score: 98.56736755371094
patch: this . position = ~ position ;
rank: 493
score: 98.54230499267578
patch: return * * return position position ;
rank: 493
score: 98.46336364746094
patch: return position ~ position / $NUMBER$ ;
rank: 494
score: 98.76109313964844
patch: return position ? position : $STRING$ ;
rank: 494
score: 98.63103485107422
patch: return position ; if ~ $NUMBER$ ;
rank: 494
score: 98.571875
patch: return start position ;
rank: 494
score: 98.55784606933594
patch: return ~ 0 . - position ;
rank: 494
score: 98.5418701171875
patch: if ; int length = position ;
rank: 494
score: 98.52639334542411
patch: return ~ position = position ;
rank: 495
score: 98.65959930419922
patch: return 1 . length ( ) ;
rank: 495
score: 98.63049926757813
patch: return ~ position ; } if ~ 1 ;
rank: 495
score: 98.57149505615234
patch: return ; String ~ position position ;
rank: 495
score: 98.55636596679688
patch: return ( position ) + position ;
rank: 495
score: 98.54132080078125
patch: if ; else { return position ;
rank: 495
score: 98.46287536621094
patch: if ( position == $NUMBER$ ) {
rank: 496
score: 98.76099395751953
patch: return ~ position + + 1 ;
rank: 496
score: 98.62987518310547
patch: return position ; try return position ;
rank: 496
score: 98.57318115234375
patch: return ~ position ? ~ position ;
rank: 496
score: 98.57066345214844
patch: return return ~ position ? position ;
rank: 496
score: 98.56379699707031
patch: return position ~ ( position ) ;
rank: 496
score: 98.55615234375
patch: ~ position ; return - 0 ;
rank: 496
score: 98.54083251953125
patch: return * * * * / ;
rank: 496
score: 98.52607727050781
patch: return ~ position + position ) ;
rank: 496
score: 98.46268463134766
patch: return position - char CaMeL Count ;
rank: 497
score: 98.65809461805556
patch: return <= 0 ? position : position ;
rank: 497
score: 98.62918090820312
patch: return position ; if ~ 0 + position ;
rank: 497
score: 98.57259368896484
patch: return position . String ( ) ;
rank: 497
score: 98.56336975097656
patch: return position + $NUMBER$ + $NUMBER$ ;
rank: 497
score: 98.52516392299107
patch: return position ; } else {
rank: 497
score: 98.462158203125
patch: throw new Exception ( position ) ;
rank: 498
score: 98.75948757595486
patch: return position ? ~ 0 : $NUMBER$ ;
rank: 498
score: 98.57254028320312
patch: return ( text + position ) ;
rank: 498
score: 98.5698471069336
patch: return return position ~ ~ position ;
rank: 498
score: 98.5626220703125
patch: return position - 1 position ;
rank: 498
score: 98.52412414550781
patch: return else return ~ position ; }
rank: 498
score: 98.46189880371094
patch: String position = position + position ;
rank: 499
score: 98.75916883680556
patch: return $NUMBER$ ? position : - 1 ;
rank: 499
score: 98.62793731689453
patch: return position ; } = position ;
rank: 499
score: 98.56980678013393
patch: / * ; return position ;
rank: 499
score: 98.55516052246094
patch: = text . length ( ) ;
rank: 499
score: 98.54027557373047
patch: throw new Runtime CaMeL Exception return ;
rank: 499
score: 98.4616470336914
patch: assert position < 0 : $STRING$ ;
rank: 500
score: 98.65628390842014
patch: return > 0 ? position : position ;
rank: 500
score: 98.6273193359375
patch: return ~ position ; try /
rank: 500
score: 98.56965637207031
patch: return ; int ~ return ) ;
rank: 500
score: 98.55986676897321
patch: return ~ position - start ;
rank: 500
score: 98.5384765625
patch: if return position ;
rank: 500
score: 98.52403041294643
patch: return ~ ~ position ) ;
rank: 500
score: 98.46153259277344
patch: return position / * position * /
rank: 501
score: 98.75778198242188
patch: return position ? position > 0 : 1 ;
rank: 501
score: 98.65583147321429
patch: return long [ 0 ] ;
rank: 501
score: 98.62708282470703
patch: return ~ - - - 1 ;
rank: 501
score: 98.56952776227679
patch: int ~ position ~ position ;
rank: 501
score: 98.55423736572266
patch: return ~ - ( position ) ;
rank: 501
score: 98.52252197265625
patch: return ~ ~ position + false ;
rank: 501
score: 98.46134185791016
patch: buffer . append ( position ) ;
rank: 502
score: 98.7569580078125
patch: return position ? ~ 0 : 1 ;
rank: 502
score: 98.65519714355469
patch: return new int length ( ) ;
rank: 502
score: 98.56948416573661
patch: return position + + position ;
rank: 502
score: 98.5374984741211
patch: if ( ~ 0 != position ;
rank: 502
score: 98.52184041341145
patch: return ~ position ; else
rank: 502
score: 98.4613037109375
patch: return position position + $STRING$ ;
rank: 503
score: 98.654541015625
patch: return / 0 . 0 ;
rank: 503
score: 98.56689453125
patch: else { return true ; }
rank: 503
score: 98.55891418457031
patch: return ~ ~ $NUMBER$ | position ;
rank: 503
score: 98.55056762695312
patch: ~ ~ ALL _ IDS ) ;
rank: 503
score: 98.53609466552734
patch: if ( ; return ~ 1 ;
rank: 503
score: 98.52130126953125
patch: return position ; break ; }
rank: 503
score: 98.46044158935547
patch: / * return position + 1 ;
rank: 504
score: 98.65425872802734
patch: return Integer . position ( ) ;
rank: 504
score: 98.62239074707031
patch: ~ position ; ; return position ;
rank: 504
score: 98.55831909179688
patch: return - position ; ;
rank: 504
score: 98.5504150390625
patch: return * ~ - 1 ;
rank: 504
score: 98.5360336303711
patch: return ~ ;
rank: 504
score: 98.52129255022321
patch: return ~ position : true ;
rank: 505
score: 98.65389675564236
patch: return return ALL _ IDS . length ;
rank: 505
score: 98.62147521972656
patch: return position ; ; ~ position ;
rank: 505
score: 98.55032348632812
patch: return * ~ ( position ) ;
rank: 505
score: 98.53586251395089
patch: return * * * ~ ;
rank: 505
score: 98.45880889892578
patch: return position || position > position ;
rank: 506
score: 98.65348985460069
patch: return <= 1 ? 0 : position ;
rank: 506
score: 98.62124197823661
patch: return position ; ~ 1 ;
rank: 506
score: 98.56576538085938
patch: return ~ ~ ~ - 0 ;
rank: 506
score: 98.56189727783203
patch: return position + bucket . start ;
rank: 506
score: 98.53581891741071
patch: return 0 + ~ $NUMBER$ ;
rank: 506
score: 98.51751708984375
patch: return ~ - 1 ; }
rank: 507
score: 98.7530517578125
patch: return ~ position ? position : max ;
rank: 507
score: 98.56549835205078
patch: return 0 ; for ~ position ;
rank: 507
score: 98.56076049804688
patch: return ALL _ IDS + $STRING$ ;
rank: 507
score: 98.55740356445312
patch: return position + 1 + $NUMBER$ ;
rank: 507
score: 98.54741559709821
patch: } return / - 1 ;
rank: 507
score: 98.53510284423828
patch: if ( 1 == position position ;
rank: 507
score: 98.4580078125
patch: if ( text == null ) {
rank: 508
score: 98.564208984375
patch: return ; int position + 0 ;
rank: 508
score: 98.55632672991071
patch: return return - 1 ; ;
rank: 508
score: 98.54496547154018
patch: result ~ ALL _ IDS ;
rank: 508
score: 98.53425598144531
patch: } else if ( ~ position ;
rank: 508
score: 98.51575578962054
patch: return ~ position ( ) ;
rank: 509
score: 98.65166473388672
patch: return return ~ position + $STRING$ ;
rank: 509
score: 98.56370544433594
patch: return false ; while ~ position ;
rank: 509
score: 98.55967203776042
patch: return position + ) ;
rank: 509
score: 98.55622863769531
patch: return position - text . substring ;
rank: 509
score: 98.54484558105469
patch: ~ ALL _ IDS + 0 ;
rank: 509
score: 98.53314971923828
patch: if ( * * * / ;
rank: 509
score: 98.51549421037946
patch: return ~ ~ ~ false ;
rank: 509
score: 98.45690155029297
patch: pos += position ; return position ;
rank: 510
score: 98.75115966796875
patch: return * * ~ position + 1 ;
rank: 510
score: 98.61734008789062
patch: return ~ ~ 1 ; break ;
rank: 510
score: 98.56208801269531
patch: return return ~ position - 0 ;
rank: 510
score: 98.5551986694336
patch: return text . start ( ) ;
rank: 510
score: 98.5535659790039
patch: return ~ ( position + 1 ;
rank: 510
score: 98.54407755533855
patch: return & - 1 ;
rank: 510
score: 98.53179931640625
patch: if ( ~ 0 > position ;
rank: 511
score: 98.75098266601563
patch: return position ? position >> 1 : 0 ;
rank: 511
score: 98.65116664341518
patch: return . size ( ) ;
rank: 511
score: 98.61668904622395
patch: return ; = position ;
rank: 511
score: 98.56171417236328
patch: return ; int ~ ~ $NUMBER$ ;
rank: 511
score: 98.54371861049107
patch: return / * return position ;
rank: 511
score: 98.53168487548828
patch: if ( position == 1 position ;
rank: 511
score: 98.45589192708333
patch: final position = position ;
rank: 512
score: 98.75026245117188
patch: return position * ( position + 1 ) ;
rank: 512
score: 98.650634765625
patch: return * position + 1 ;
rank: 512
score: 98.61533028738839
patch: return new return ~ position ;
rank: 512
score: 98.55371856689453
patch: return position . parse ( ) ;
rank: 512
score: 98.55326080322266
patch: return ~ ( float ) position ;
rank: 512
score: 98.54280598958333
patch: return ~ ~ $STRING$ ;
rank: 512
score: 98.51274871826172
patch: return - ( ~ position ) ;
rank: 513
score: 98.64884185791016
patch: return get CaMeL Name ( ) ;
rank: 513
score: 98.61479187011719
patch: ~ position ; } return position ;
rank: 513
score: 98.56021118164062
patch: else { if ~ ~ position ;
rank: 513
score: 98.55307006835938
patch: return position - position * position ;
rank: 513
score: 98.541796875
patch: return ~ null ;
rank: 513
score: 98.5307846069336
patch: } else { else = position ;
rank: 513
score: 98.51179504394531
patch: return else { ~ position ; }
rank: 513
score: 98.45548248291016
patch: return position * position - position ;
rank: 514
score: 98.64809841579861
patch: return >= 0 . 0 + position ;
rank: 514
score: 98.61426544189453
patch: return ~ position ; ~ 1 ;
rank: 514
score: 98.55248260498047
patch: return position - start + $NUMBER$ ;
rank: 514
score: 98.54126739501953
patch: else { String str = text .
rank: 514
score: 98.53054809570312
patch: return * * ~ position position ;
rank: 514
score: 98.45501708984375
patch: out . append ( position ) ;
rank: 515
score: 98.64799669053819
patch: return get CaMeL Zone ( str ) ;
rank: 515
score: 98.61418151855469
patch: ~ position ;
rank: 515
score: 98.55868530273438
patch: / * ] return return position ;
rank: 515
score: 98.55263846261161
patch: return position ? ~ position ;
rank: 515
score: 98.53003692626953
patch: return ; , 0 , value ;
rank: 515
score: 98.51045445033482
patch: return ~ position - ) ;
rank: 516
score: 98.61277770996094
patch: return position ; return * position ;
rank: 516
score: 98.55741664341518
patch: try { return position ; ;
rank: 516
score: 98.55206298828125
patch: return position - start - position ;
rank: 516
score: 98.52955845424107
patch: return * * * position /
rank: 517
score: 98.74722900390626
patch: return position + $NUMBER$ ? position : 0 ;
rank: 517
score: 98.64674377441406
patch: return >= 0 : ~ position ;
rank: 517
score: 98.612548828125
patch: return ; { return position ;
rank: 517
score: 98.55711146763393
patch: return return ~ - $STRING$ ;
rank: 517
score: 98.53919328962054
patch: } return position + 1 ;
rank: 517
score: 98.5292256673177
patch: return ; return 0 ;
rank: 518
score: 98.74704318576389
patch: return / * ~ position + 1 ;
rank: 518
score: 98.6448974609375
patch: return ( String ) ALL _ IDS ;
rank: 518
score: 98.61193084716797
patch: return return position ; throw position ;
rank: 518
score: 98.55685860770089
patch: return return - - $NUMBER$ ;
rank: 518
score: 98.54741668701172
patch: return * / position + position ;
rank: 518
score: 98.53894805908203
patch: return * ~ ~ ~ position ;
rank: 518
score: 98.52872140066964
patch: } return ~ position position ;
rank: 518
score: 98.50606282552083
patch: return >= 0 ] ;
rank: 519
score: 98.64457194010417
patch: return <= 0 . 0 + position ;
rank: 519
score: 98.55667877197266
patch: / else { return position position ;
rank: 519
score: 98.5516128540039
patch: return super . position - position ;
rank: 519
score: 98.52665492466518
patch: return * * ~ $NUMBER$ ;
rank: 519
score: 98.45236206054688
patch: return position * position + $NUMBER$ ;
rank: 520
score: 98.61083221435547
patch: ~ position ; return ~ 1 ;
rank: 520
score: 98.55601283482143
patch: return - 0 + position ;
rank: 520
score: 98.54981994628906
patch: return position - 1 | position ;
rank: 520
score: 98.52656773158482
patch: if ( ; return position ;
rank: 520
score: 98.50533621651786
patch: return ~ position + str ;
rank: 520
score: 98.45164489746094
patch: else { return position ; ; }
rank: 521
score: 98.61050415039062
patch: return position ; int ~ position ;
rank: 521
score: 98.55575561523438
patch: finally { return - position ; }
rank: 521
score: 98.54948425292969
patch: return position + text + position ;
rank: 521
score: 98.53650774274554
patch: return ( - 0 ) ;
rank: 521
score: 98.5265121459961
patch: } else { return 0 position ;
rank: 521
score: 98.50490315755208
patch: return ~ ~ length ;
rank: 521
score: 98.45114135742188
patch: else { return position position ; }
rank: 522
score: 98.74312918526786
patch: return ~ position / 1 ;
rank: 522
score: 98.64163818359376
patch: return / 1 ;
rank: 522
score: 98.60927036830357
patch: return ~ position ; else ;
rank: 522
score: 98.52637481689453
patch: if ( position == position position ;
rank: 523
score: 98.74293823242188
patch: return * ~ position ? position : 0 ;
rank: 523
score: 98.64046902126736
patch: return text . equals ( position ) ;
rank: 523
score: 98.60772705078125
patch: return ~ position ; return / ;
rank: 523
score: 98.54217529296875
patch: return position && ALL _ IDS ;
rank: 523
score: 98.53108723958333
patch: else { return 1 ;
rank: 523
score: 98.50403849283855
patch: return ~ false ; }
rank: 523
score: 98.44895935058594
patch: return position + date CaMeL Time ;
rank: 524
score: 98.60728454589844
patch: return position ; ; if position ;
rank: 524
score: 98.55353655133929
patch: return start ; return position ;
rank: 524
score: 98.54847935267857
patch: this . position = position ;
rank: 524
score: 98.54148356119792
patch: return position + str ;
rank: 524
score: 98.53059895833333
patch: else { return $NUMBER$ ;
rank: 524
score: 98.52515520368304
patch: } return position * position ;
rank: 524
score: 98.50142124720982
patch: return ~ position - true ;
rank: 524
score: 98.44891357421875
patch: return position & 1 ;
rank: 525
score: 98.63998074001736
patch: return <= 0 ? 1 : position ;
rank: 525
score: 98.6060791015625
patch: return position ; return position ; /
rank: 525
score: 98.5534423828125
patch: return 0 ; ;
rank: 525
score: 98.54715728759766
patch: return - 1 position - position ;
rank: 525
score: 98.52851104736328
patch: return ~ ALL _ IDS int ;
rank: 525
score: 98.52495465959821
patch: } else { return value ;
rank: 525
score: 98.44743347167969
patch: throw position + $STRING$ + position ;
rank: 526
score: 98.742138671875
patch: return new String ( position , 0 ) ;
rank: 526
score: 98.63859049479167
patch: return this . text ;
rank: 526
score: 98.55216761997768
patch: else if ~ return position ;
rank: 526
score: 98.52194213867188
patch: return / * * return position ;
rank: 526
score: 98.44589233398438
patch: return position ^ position + 1 ;
rank: 527
score: 98.74185180664062
patch: return position ? position : ) ;
rank: 527
score: 98.6368408203125
patch: return > 0 + 1 ;
rank: 527
score: 98.50026157924107
patch: return ~ 0 . 1 ;
rank: 528
score: 98.63597106933594
patch: return Math . length ( ) ;
rank: 528
score: 98.60279083251953
patch: return ~ position ; try / ;
rank: 528
score: 98.55027770996094
patch: logger . parse ( position ) ;
rank: 528
score: 98.54588317871094
patch: return ~ ~ position * $NUMBER$ ;
rank: 528
score: 98.54012044270833
patch: return position . position ;
rank: 528
score: 98.52767181396484
patch: return case $NUMBER$ : return position ;
rank: 528
score: 98.52152252197266
patch: return * * * * / }
rank: 528
score: 98.50005340576172
patch: return ~ position : position ; }
rank: 528
score: 98.44481658935547
patch: String str = position + $STRING$ ;
rank: 529
score: 98.74132622612848
patch: return * / ~ position + 1 ;
rank: 529
score: 98.63475341796875
patch: return return true ;
rank: 529
score: 98.54995291573661
patch: finally { return return position ;
rank: 529
score: 98.54448590959821
patch: return ~ text . length ;
rank: 529
score: 98.52642822265625
patch: } return - $NUMBER$ ;
rank: 529
score: 98.52120208740234
patch: return ; , ~ ~ 1 ;
rank: 530
score: 98.63076443142361
patch: return < 0 ? 0 : position ;
rank: 530
score: 98.6020736694336
patch: return ~ position ; if return ;
rank: 530
score: 98.548583984375
patch: } finally { return position ; }
rank: 530
score: 98.53694152832031
patch: try { return position + 1 ;
rank: 530
score: 98.52110944475446
patch: return * * - 1 ;
rank: 530
score: 98.44464111328125
patch: else { return position - position ;
rank: 531
score: 98.63071695963542
patch: return get CaMeL Type ( text ) ;
rank: 531
score: 98.54779052734375
patch: else return return position ;
rank: 531
score: 98.54276820591518
patch: return - position - start ;
rank: 531
score: 98.49843052455357
patch: return * position - 1 ;
rank: 531
score: 98.4439468383789
patch: if ( position >= position ) {
rank: 532
score: 98.62804412841797
patch: return this . position + $NUMBER$ ;
rank: 532
score: 98.59848022460938
patch: return ~ position ; += position ;
rank: 532
score: 98.54727608816964
patch: / * / return position ;
rank: 532
score: 98.53321838378906
patch: return parse CaMeL Into ~ position ;
rank: 532
score: 98.522705078125
patch: return ~ ~ ~ bucket ;
rank: 532
score: 98.51974923270089
patch: return ? 1 : 0 ;
rank: 532
score: 98.49697875976562
patch: return ~ position = ~ position ;
rank: 533
score: 98.62765938895089
patch: return - 0 . 0 ;
rank: 533
score: 98.54688371930804
patch: return ~ return - 0 ;
rank: 533
score: 98.54048156738281
patch: return position ~ ( 1 ) ;
rank: 533
score: 98.53237915039062
patch: return position + position : position ;
rank: 533
score: 98.51956176757812
patch: return * * * / return ;
rank: 534
score: 98.73912217881944
patch: return ~ position ? ALL _ IDS }
rank: 534
score: 98.59677124023438
patch: return ~ 1 ; }
rank: 534
score: 98.54620361328125
patch: return ; int start ~ position ;
rank: 534
score: 98.53120640345982
patch: return position ( bucket ) ;
rank: 534
score: 98.5218276977539
patch: } else { return - 0 ;
rank: 534
score: 98.518310546875
patch: return * * * position * /
rank: 535
score: 98.59648895263672
patch: return position ; while ~ 0 ;
rank: 535
score: 98.5458984375
patch: return ( int position ;
rank: 535
score: 98.53762817382812
patch: return position - 1 + 1 ;
rank: 535
score: 98.51802825927734
patch: if ( ~ 1 == 0 ;
rank: 535
score: 98.49235534667969
patch: return ~ position || ~ position ;
rank: 535
score: 98.44023132324219
patch: return Math . round ( position ;
rank: 536
score: 98.62671576605902
patch: return <= 0 ? true : position ;
rank: 536
score: 98.594482421875
patch: return ~ position ; return ; {
rank: 536
score: 98.54572296142578
patch: else { int position = position ;
rank: 536
score: 98.51763916015625
patch: } return * * position ;
rank: 536
score: 98.43922642299107
patch: return position / - 1 ;
rank: 537
score: 98.62670135498047
patch: return ~ position + - $STRING$ ;
rank: 537
score: 98.59381866455078
patch: return position ; ; throw position ;
rank: 537
score: 98.54415893554688
patch: return ; int position + position ;
rank: 537
score: 98.53648376464844
patch: return - 1 return ~ position ;
rank: 537
score: 98.52093505859375
patch: result = position ;
rank: 537
score: 98.51299285888672
patch: return ; , * * * /
rank: 537
score: 98.49110412597656
patch: return / * position + position ;
rank: 538
score: 98.59061431884766
patch: return position ; return position ; throw
rank: 538
score: 98.51184953962054
patch: } return position - position ;
rank: 538
score: 98.4904541015625
patch: return / false ;
rank: 538
score: 98.43844604492188
patch: return position ^ position + position ;
rank: 539
score: 98.73692016601562
patch: return ~ text . length ( ) ? position
rank: 539
score: 98.6253662109375
patch: return ( String ) position + $STRING$ ;
rank: 539
score: 98.5903549194336
patch: return position ; return position ; int
rank: 539
score: 98.54350934709821
patch: } return - ~ position ;
rank: 539
score: 98.51168823242188
patch: if ( 0 == 0 position ;
rank: 539
score: 98.48944091796875
patch: return ~ position + 0 ; }
rank: 540
score: 98.735009765625
patch: return * * ( position + 1 ) ;
rank: 540
score: 98.59025573730469
patch: ~ position ; ~ - 1 ;
rank: 540
score: 98.54266357421875
patch: / * return ~ position position ;
rank: 540
score: 98.5269546508789
patch: return * / / ~ position ;
rank: 540
score: 98.5186767578125
patch: return ~ position + ( position ;
rank: 540
score: 98.51164245605469
patch: return ; , position , value ;
rank: 540
score: 98.48926653180804
patch: return append ( text ) ;
rank: 540
score: 98.4380126953125
patch: return position $NUMBER$ ;
rank: 541
score: 98.73396606445313
patch: return position ? position != 0 : 0 ;
rank: 541
score: 98.62486267089844
patch: return System . [ 0 ] ;
rank: 541
score: 98.58990478515625
patch: return - 1 ; break ;
rank: 541
score: 98.48704310825893
patch: return & ALL _ IDS ;
rank: 541
score: 98.4373779296875
patch: return position && position < position ;
rank: 542
score: 98.588134765625
patch: return position position ; throw position ;
rank: 542
score: 98.54127720424107
patch: else return ~ position position ;
rank: 542
score: 98.53519694010417
patch: return - position position ;
rank: 542
score: 98.51826477050781
patch: ~ position . length ( ) ;
rank: 542
score: 98.51021728515624
patch: return * * /
rank: 542
score: 98.4847640991211
patch: return ~ ~ position + true ;
rank: 543
score: 98.73316192626953
patch: return position ? $NUMBER$ : 0 ;
rank: 543
score: 98.62440321180556
patch: return ( int ) ALL _ IDS ;
rank: 543
score: 98.5877685546875
patch: return return ~ position ; break ;
rank: 543
score: 98.541015625
patch: return 0 ; return position ; ;
rank: 543
score: 98.53477478027344
patch: return - ~ position - position ;
rank: 543
score: 98.5245132446289
patch: return ( $STRING$ + position ) ;
rank: 543
score: 98.5167236328125
patch: / * return ~ ~ position ;
rank: 543
score: 98.509521484375
patch: } else return 0 ;
rank: 543
score: 98.43595581054687
patch: return position - ;
rank: 544
score: 98.62388102213542
patch: return & ALL _ IDS . length ;
rank: 544
score: 98.54071044921875
patch: else return ~ - 1 ;
rank: 544
score: 98.52260916573661
patch: return position + * position ;
rank: 544
score: 98.516357421875
patch: return ~ ~ text ;
rank: 544
score: 98.50936889648438
patch: if ; int value = position ;
rank: 545
score: 98.621337890625
patch: return * null ;
rank: 545
score: 98.5397720336914
patch: / finally { return position ; }
rank: 545
score: 98.50934709821429
patch: return 0 [ 0 ] ;
rank: 545
score: 98.48163713727679
patch: return ~ ~ 1 ; }
rank: 545
score: 98.43461608886719
patch: try { return position / $NUMBER$ ;
rank: 546
score: 98.58591134207589
patch: ~ position ; ~ position ;
rank: 546
score: 98.53947448730469
patch: else { return ~ 1 ; ;
rank: 546
score: 98.51912689208984
patch: return ~ position + - length ;
rank: 546
score: 98.48131561279297
patch: return ~ position - position ; }
rank: 546
score: 98.43446350097656
patch: return position != 0 ? position ;
rank: 547
score: 98.7303466796875
patch: return ~ ( position + - 0 ) ;
rank: 547
score: 98.5849380493164
patch: return position ; throw return position ;
rank: 547
score: 98.53813825334821
patch: return return - 0 ; ;
rank: 547
score: 98.53165435791016
patch: if ( position != - 1 )
rank: 547
score: 98.51811218261719
patch: return position ? $NUMBER$ : position ;
rank: 547
score: 98.47911580403645
patch: return ~ 0 ; }
rank: 547
score: 98.434326171875
patch: dim = position ; return position ;
rank: 548
score: 98.61961364746094
patch: return ? - 1 : 0 ;
rank: 548
score: 98.5847396850586
patch: return position ; public return position ;
rank: 548
score: 98.51186697823661
patch: } return ~ ~ 0 ;
rank: 548
score: 98.50830841064453
patch: return ; , 0 ( start ;
rank: 548
score: 98.47846984863281
patch: return else return position + position ;
rank: 548
score: 98.43271309988839
patch: return position + Locale . ;
rank: 549
score: 98.72991333007812
patch: return position ? position : position : 0 ;
rank: 549
score: 98.61784362792969
patch: return ~ position - - 1 ;
rank: 549
score: 98.58394622802734
patch: return ~ position ; return ; int
rank: 549
score: 98.53573172433036
patch: return ; int ~ false ;
rank: 549
score: 98.5313949584961
patch: return position - start * position ;
rank: 549
score: 98.507568359375
patch: } else ; return position ;
rank: 549
score: 98.43255615234375
patch: position += position ; return position ;
rank: 550
score: 98.72979736328125
patch: return position ? position >= 0 : 0 ;
rank: 550
score: 98.58389282226562
patch: return ~ 1 ; return start ;
rank: 550
score: 98.53572845458984
patch: / * ] = ~ position ;
rank: 550
score: 98.53110758463542
patch: this . return position ;
rank: 550
score: 98.51138741629464
patch: return position + ( ) ;
rank: 550
score: 98.50753784179688
patch: if ( $NUMBER$ == position position ;
rank: 550
score: 98.43222045898438
patch: throw new ~ $NUMBER$ + position ;
rank: 551
score: 98.72813110351562
patch: return ( position + 0 ) + 0 ;
rank: 551
score: 98.61356026785714
patch: return Integer . length 0 ;
rank: 551
score: 98.58234514508929
patch: return new int ~ position ;
rank: 551
score: 98.53525216238839
patch: finally { return position ; ;
rank: 551
score: 98.52953338623047
patch: if ( position > position ) {
rank: 551
score: 98.51080322265625
patch: return ( - 1 ) ;
rank: 551
score: 98.50538126627605
patch: return * - position ;
rank: 551
score: 98.47611999511719
patch: return ~ position position + position ;
rank: 551
score: 98.43080139160156
patch: return position && position != 0 ;
rank: 552
score: 98.58234405517578
patch: return 0 ; } return position ;
rank: 552
score: 98.53488595145089
patch: return $STRING$ ; return position ;
rank: 552
score: 98.51545715332031
patch: return ( position * position ) ;
rank: 552
score: 98.51051330566406
patch: throw new int length = position ;
rank: 553
score: 98.72598266601562
patch: else { return ~ position + 1 ; }
rank: 553
score: 98.61305236816406
patch: return return ~ position + length ;
rank: 553
score: 98.5811767578125
patch: return position ; while position ;
rank: 553
score: 98.52879333496094
patch: return ~ ~ 1 | position ;
rank: 553
score: 98.51521809895833
patch: return position + value ;
rank: 553
score: 98.50877162388393
patch: return ~ position + FALSE ;
rank: 553
score: 98.50270298549107
patch: if ( 0 == position ;
rank: 553
score: 98.47532653808594
patch: return Date CaMeL Time CaMeL Zone .
rank: 553
score: 98.42857360839844
patch: assert position == 0 : position ;
rank: 554
score: 98.5274658203125
patch: return return - position + 1 ;
rank: 554
score: 98.50871930803571
patch: return - 1 . 0 ;
rank: 554
score: 98.50203159877232
patch: } if ( ~ position ;
rank: 555
score: 98.53330775669643
patch: return return ~ return 0 ;
rank: 555
score: 98.51264953613281
patch: return position + length + 0 ;
rank: 555
score: 98.50795200892857
patch: return / / - 1 ;
rank: 555
score: 98.50190734863281
patch: if ( position == $NUMBER$ position ;
rank: 555
score: 98.47353108723958
patch: return / - false ;
rank: 555
score: 98.42818450927734
patch: if ( position > 0 ) {
rank: 556
score: 98.72361450195312
patch: return text . starts CaMeL With ( $STRING$ )
rank: 556
score: 98.6124267578125
patch: return * - 0 + position ;
rank: 556
score: 98.57861328125
patch: return ~ position ; return $STRING$ ;
rank: 556
score: 98.5322265625
patch: return start + position ;
rank: 556
score: 98.51250457763672
patch: / * else { return position ;
rank: 556
score: 98.50749206542969
patch: else { return / - 1 ;
rank: 556
score: 98.50059291294643
patch: return ~ 1 + $NUMBER$ ;
rank: 556
score: 98.47270856584821
patch: } return ~ position ; }
rank: 557
score: 98.61165073939732
patch: return > 0 + position ;
rank: 557
score: 98.53140258789062
patch: return return return 1 ;
rank: 557
score: 98.49822998046875
patch: return * * * * ~ /
rank: 557
score: 98.47267368861607
patch: return ~ ~ ~ true ;
rank: 557
score: 98.42626953125
patch: if ( position < 0 ) {
rank: 558
score: 98.61035919189453
patch: return get CaMeL Zone ( ) ;
rank: 558
score: 98.57698822021484
patch: return position ; ~ position ; }
rank: 558
score: 98.53114536830357
patch: return return return - 0 ;
rank: 558
score: 98.52463204520089
patch: return ~ ~ position ; ;
rank: 558
score: 98.50901794433594
patch: return new String ( $STRING$ ) ;
rank: 558
score: 98.50480143229167
patch: ~ position + 1 ;
rank: 558
score: 98.49805559430804
patch: return ~ [ 1 ] ;
rank: 558
score: 98.42446899414062
patch: final position = position - position ;
rank: 559
score: 98.61009870256696
patch: return Integer . length 1 ;
rank: 559
score: 98.57645416259766
patch: return position ; if ~ 0 ;
rank: 559
score: 98.53105163574219
patch: throw new $STRING$ position position position ;
rank: 559
score: 98.50438581194196
patch: return parse ( bucket ) ;
rank: 559
score: 98.46905517578125
patch: return ~ position & 1 ;
rank: 559
score: 98.42355346679688
patch: return compare CaMeL To ( str ;
rank: 560
score: 98.53079986572266
patch: / * ; return position position ;
rank: 560
score: 98.49693952287946
patch: if ; return ~ $NUMBER$ ;
rank: 560
score: 98.46855817522321
patch: return ~ ( true ) ;
rank: 560
score: 98.42153494698661
patch: return position ~ Locale . ;
rank: 561
score: 98.60717010498047
patch: return this . return ~ position ;
rank: 561
score: 98.57482147216797
patch: return ; = position - position ;
rank: 561
score: 98.52975463867188
patch: finally { return - $STRING$ ; }
rank: 561
score: 98.50380161830357
patch: return * ALL _ IDS ;
rank: 561
score: 98.49642944335938
patch: return * * * position position /
rank: 562
score: 98.604736328125
patch: return - 0 . - 1 ;
rank: 562
score: 98.57316589355469
patch: return position ; ~ ~ 1 ;
rank: 562
score: 98.52825055803571
patch: return position ; return true ;
rank: 562
score: 98.52113342285156
patch: return position - start * $NUMBER$ ;
rank: 562
score: 98.50313023158482
patch: return / * ~ 1 ;
rank: 562
score: 98.50170026506696
patch: else return position + position ;
rank: 562
score: 98.42129516601562
patch: return position ~ name . length ;
rank: 563
score: 98.60406494140625
patch: return 0 . - 1 ;
rank: 563
score: 98.52750941685268
patch: return return ~ ~ 1 ;
rank: 563
score: 98.49501255580357
patch: return * * return 0 ;
rank: 563
score: 98.46632603236607
patch: return ~ ~ position ; else
rank: 564
score: 98.57028198242188
patch: return ~ position ; = position ;
rank: 564
score: 98.52584402901786
patch: return return ~ ~ 0 ;
rank: 564
score: 98.50279017857143
patch: return position + ( position ;
rank: 564
score: 98.42072296142578
patch: return position * $NUMBER$ + $STRING$ ;
rank: 565
score: 98.60305786132812
patch: return > 0 ? ~ position ;
rank: 565
score: 98.57005310058594
patch: return position position ; ~ position ;
rank: 565
score: 98.52536446707589
patch: try { return ~ $NUMBER$ ;
rank: 565
score: 98.51731872558594
patch: return position * $NUMBER$ + $NUMBER$ ;
rank: 565
score: 98.50205485026042
patch: else return - 1 ;
rank: 565
score: 98.49421691894531
patch: / * * * * ; /
rank: 565
score: 98.41993204752605
patch: return Boolean . TRUE ;
rank: 566
score: 98.56970977783203
patch: return ~ position ; return true ;
rank: 566
score: 98.52431815011161
patch: try { return ~ 1 ;
rank: 566
score: 98.51642608642578
patch: return ~ ( position + position ;
rank: 566
score: 98.46371459960938
patch: return ~ position - 1 ; }
rank: 566
score: 98.41990661621094
patch: return Math . position ( position ;
rank: 567
score: 98.71315002441406
patch: return ~ position . length ( )
rank: 567
score: 98.59854888916016
patch: return * - 0 . 1 ;
rank: 567
score: 98.52328927176339
patch: / * ] = position ;
rank: 567
score: 98.51641845703125
patch: try { return position ; } ;
rank: 567
score: 98.49677276611328
patch: return position ? position + length ;
rank: 567
score: 98.49372209821429
patch: return * * return 1 ;
rank: 567
score: 98.46371459960938
patch: return ~ position + position ] ;
rank: 568
score: 98.7120590209961
patch: return $NUMBER$ + position + 1 ;
rank: 568
score: 98.59842681884766
patch: return int [ - 1 ] ;
rank: 568
score: 98.56802368164062
patch: return position + - ~ position ;
rank: 568
score: 98.52291434151786
patch: return ~ - - position ;
rank: 568
score: 98.50019073486328
patch: return ~ ~ position ? position ;
rank: 568
score: 98.49203055245536
patch: return ; = ~ 1 ;
rank: 568
score: 98.46365792410714
patch: return -- ~ position ; }
rank: 569
score: 98.71074567522321
patch: return position + - $NUMBER$ ;
rank: 569
score: 98.59697614397321
patch: return * 1 . 0 ;
rank: 569
score: 98.56776428222656
patch: return position ; else throw position ;
rank: 569
score: 98.52288818359375
patch: else { else return position ; }
rank: 569
score: 98.51414271763393
patch: return position position * position ;
rank: 569
score: 98.4989522298177
patch: return + - 1 ;
rank: 569
score: 98.49463907877605
patch: return position + bucket ;
rank: 569
score: 98.49187469482422
patch: else { if ( ~ position ;
rank: 569
score: 98.46146065848214
patch: return ~ this . length ;
rank: 569
score: 98.41535186767578
patch: String str = position + position ;
rank: 570
score: 98.56588745117188
patch: return position ; add ~ position ;
rank: 570
score: 98.52284458705357
patch: else { int ~ position ;
rank: 570
score: 98.51351928710938
patch: return return ~ position * $NUMBER$ ;
rank: 570
score: 98.49852752685547
patch: return ( text . length ( )
rank: 570
score: 98.49135044642857
patch: return position [ 1 ] ;
rank: 570
score: 98.46144612630208
patch: return / - true ;
rank: 571
score: 98.70680745442708
patch: return ~ position * 0 + position ;
rank: 571
score: 98.56465911865234
patch: return ~ 1 ; return 1 ;
rank: 571
score: 98.49087524414062
patch: } if ( 0 > position ;
rank: 571
score: 98.41456604003906
patch: int position = position + position ;
rank: 572
score: 98.56297084263393
patch: return ~ position ; / ;
rank: 572
score: 98.52098846435547
patch: return return position + position ; ;
rank: 572
score: 98.51150948660714
patch: return position . length ( ;
rank: 572
score: 98.493896484375
patch: return ~ parse CaMeL Into ;
rank: 572
score: 98.49044799804688
patch: * * * * * * ;
rank: 572
score: 98.46119181315105
patch: return . ~ position ;
rank: 572
score: 98.41414642333984
patch: return Long . value CaMeL Of ;
rank: 573
score: 98.5205078125
patch: / else return position ;
rank: 573
score: 98.49252755301339
patch: return -- ALL _ IDS ;
rank: 573
score: 98.49021693638393
patch: } return ~ ~ 1 ;
rank: 573
score: 98.48509979248047
patch: return position + long CaMeL Time ;
rank: 573
score: 98.41348266601562
patch: return position / * ~ position ;
rank: 574
score: 98.55876159667969
patch: return ~ position ; break ; ;
rank: 574
score: 98.51980590820312
patch: return ; int value ~ position ;
rank: 574
score: 98.5103530883789
patch: return position - start + $STRING$ ;
rank: 574
score: 98.48957824707031
patch: } else if ; else if ;
rank: 574
score: 98.483642578125
patch: return position + position ? position ;
rank: 574
score: 98.46076311383929
patch: return / 1 + position ;
rank: 575
score: 98.51949637276786
patch: try { return false ; }
rank: 575
score: 98.48825509207589
patch: return ~ 1 + length ;
rank: 575
score: 98.412353515625
patch: text = position + position ;
rank: 576
score: 98.58717564174107
patch: return <= 0 + 1 ;
rank: 576
score: 98.55768585205078
patch: return ; { return ~ position ;
rank: 576
score: 98.5186767578125
patch: try { return position position ;
rank: 576
score: 98.5093994140625
patch: return position + text . trim ;
rank: 576
score: 98.49080113002232
patch: return ~ position + value ;
rank: 576
score: 98.48757498604911
patch: return ~ 1 + 1 ;
rank: 576
score: 98.459228515625
patch: return ~ ~ false ; }
rank: 576
score: 98.41010284423828
patch: String text = position + position ;
rank: 577
score: 98.55595397949219
patch: return position ; ~ - $NUMBER$ ;
rank: 577
score: 98.51801300048828
patch: else { int ~ - position ;
rank: 577
score: 98.50765228271484
patch: return ~ position - 1 ; ;
rank: 577
score: 98.45833914620536
patch: return ~ ~ 0 ; }
rank: 578
score: 98.58363342285156
patch: return long [ - 0 ] ;
rank: 578
score: 98.51671491350446
patch: return start ~ position position ;
rank: 578
score: 98.48271179199219
patch: finally { return position + position ;
rank: 578
score: 98.40904998779297
patch: return position && position + position ;
rank: 579
score: 98.69624837239583
patch: return ~ ALL _ IDS + text ;
rank: 579
score: 98.58309173583984
patch: return == 0 : ~ position ;
rank: 579
score: 98.55265299479167
patch: return position ; return ;
rank: 579
score: 98.51639556884766
patch: return ; int - - 1 ;
rank: 579
score: 98.48859514508929
patch: return -= ALL _ IDS ;
rank: 579
score: 98.48634556361607
patch: return 0 * ~ position ;
rank: 579
score: 98.48223876953125
patch: return position : - 0 ;
rank: 579
score: 98.45542907714844
patch: return ~ ~ position + ) ;
rank: 579
score: 98.40901402064732
patch: final position = ~ position ;
rank: 580
score: 98.69528537326389
patch: return position ? ~ null : position ;
rank: 580
score: 98.58253479003906
patch: return ~ position + - $NUMBER$ ;
rank: 580
score: 98.55044555664062
patch: return ~ + position ;
rank: 580
score: 98.50312805175781
patch: return Integer . position ( position ;
rank: 580
score: 98.48611450195312
patch: / * * * ; * /
rank: 580
score: 98.48175048828125
patch: return / * / ~ position ;
rank: 580
score: 98.40823800223214
patch: return position + str . ;
rank: 581
score: 98.54505266462054
patch: return ~ position ; while ;
rank: 581
score: 98.51490783691406
patch: final else { return position ; }
rank: 581
score: 98.50299072265625
patch: return ~ ( position / $NUMBER$ ;
rank: 581
score: 98.48573521205357
patch: return 0 + position position ;
rank: 581
score: 98.40781947544643
patch: final int start = position ;
rank: 582
score: 98.51465861002605
patch: return ; int 1 ;
rank: 582
score: 98.48558553059895
patch: return 0 - 0 ;
rank: 582
score: 98.45362345377605
patch: return + ~ position ;
rank: 582
score: 98.40413411458333
patch: return hash CaMeL Code ;
rank: 583
score: 98.69346788194444
patch: return ~ position ? false : position ;
rank: 583
score: 98.5776138305664
patch: return return this . ~ position ;
rank: 583
score: 98.51228550502232
patch: } return - - position ;
rank: 583
score: 98.48491559709821
patch: } else return ~ 1 ;
rank: 583
score: 98.47785949707031
patch: return position + bucket . position ;
rank: 583
score: 98.45249938964844
patch: return try { return ~ position ;
rank: 584
score: 98.54130336216518
patch: return position ; return start ;
rank: 584
score: 98.5117899576823
patch: return return + position ;
rank: 584
score: 98.49876185825893
patch: / * return return position ;
rank: 584
score: 98.48463948567708
patch: if return ~ position ;
rank: 584
score: 98.47565569196429
patch: return ~ position : 1 ;
rank: 584
score: 98.47481863839286
patch: return ~ 0 . 0 ;
rank: 584
score: 98.40162150065105
patch: ~ position ~ position ;
rank: 585
score: 98.5762939453125
patch: return * 0 : 0 ;
rank: 585
score: 98.54049246651786
patch: return position ; return ; {
rank: 585
score: 98.49727630615234
patch: return Math . ~ ( position ;
rank: 586
score: 98.57582092285156
patch: return . ~ position + 1 ;
rank: 586
score: 98.53920200892857
patch: return position ; ~ false ;
rank: 586
score: 98.5103759765625
patch: else return return - 1 ;
rank: 586
score: 98.49606759207589
patch: return - ~ ~ $NUMBER$ ;
rank: 586
score: 98.48448835100446
patch: return * * * / ;
rank: 586
score: 98.4742431640625
patch: result += ALL _ IDS ;
rank: 586
score: 98.44975280761719
patch: return * position + position ; }
rank: 586
score: 98.3994140625
patch: result = position ~ position ;
rank: 587
score: 98.69171142578125
patch: return ~ ALL _ IDS ? position }
rank: 587
score: 98.57537841796875
patch: return Integer . length + 0 ;
rank: 587
score: 98.49550083705357
patch: return ~ position ~ 1 ;
rank: 587
score: 98.48399135044643
patch: return 0 ; return false ;
rank: 587
score: 98.4740982055664
patch: ALL _ IDS : return position ;
rank: 588
score: 98.69153594970703
patch: return position + 0 . 0 ;
rank: 588
score: 98.57410539899554
patch: return 0 . - 0 ;
rank: 588
score: 98.53011474609374
patch: return position ; position
rank: 588
score: 98.50962829589844
patch: return ; int value = position ;
rank: 588
score: 98.48208618164062
patch: / * * * * return ;
rank: 588
score: 98.47333526611328
patch: return position + 0 . position ;
rank: 588
score: 98.47332763671875
patch: } } return position ;
rank: 588
score: 98.44893973214286
patch: return ~ position position ; }
rank: 589
score: 98.57290649414062
patch: return * - 0 . 0 ;
rank: 589
score: 98.52894810267857
patch: return ~ 1 ; return ;
rank: 589
score: 98.50933837890625
patch: else { ~ position ; }
rank: 589
score: 98.48154994419643
patch: return ; return ~ 0 ;
rank: 589
score: 98.4725341796875
patch: return ~ * ~ position ;
rank: 589
score: 98.39215087890625
patch: assert position >= position ;
rank: 590
score: 98.57283782958984
patch: return * 0 . - 0 ;
rank: 590
score: 98.5286153157552
patch: return ~ position ; position
rank: 590
score: 98.50885881696429
patch: else return ~ return position ;
rank: 590
score: 98.49302455357143
patch: return return position - start ;
rank: 590
score: 98.48047637939453
patch: if ; int position = position ;
rank: 590
score: 98.44706726074219
patch: return int ~ position + position ;
rank: 590
score: 98.39159284319196
patch: return position ~ ~ 1 ;
rank: 591
score: 98.57002258300781
patch: return ( long ) ~ position ;
rank: 591
score: 98.48027038574219
patch: / * * * * / /
rank: 591
score: 98.47093709309895
patch: return position + null ;
rank: 591
score: 98.44686453683036
patch: return ~ position + text ;
rank: 591
score: 98.390625
patch: int position = position ;
rank: 592
score: 98.52253941127232
patch: return new String ~ position ;
rank: 592
score: 98.50868225097656
patch: else { return position ; try {
rank: 592
score: 98.47948201497395
patch: * * * * /
rank: 592
score: 98.47052764892578
patch: else { return position + $STRING$ ;
rank: 592
score: 98.44603474934895
patch: return ~ true ; }
rank: 592
score: 98.39005533854167
patch: return position - $STRING$ ;
rank: 593
score: 98.52150181361607
patch: return ~ position ; int position
rank: 593
score: 98.5081787109375
patch: return - position + 0 ;
rank: 593
score: 98.49211774553571
patch: return ~ $NUMBER$ * $NUMBER$ ;
rank: 593
score: 98.47642517089844
patch: } else { if ; * /
rank: 593
score: 98.46974400111607
patch: } return position + 0 ;
rank: 593
score: 98.44505004882812
patch: return ++ position ;
rank: 594
score: 98.50518798828125
patch: else { return - position ; ;
rank: 594
score: 98.49196951729911
patch: return position + 1 position ;
rank: 594
score: 98.4695536295573
patch: return this . bucket ;
rank: 594
score: 98.46936907087054
patch: return ~ bucket . position ;
rank: 594
score: 98.38657052176339
patch: throw new Error ( $STRING$ ;
rank: 595
score: 98.50924246651786
patch: return position ; ~ 0 ;
rank: 595
score: 98.46954345703125
patch: return parse ~ position ;
rank: 595
score: 98.46923828125
patch: return position + FALSE ;
rank: 595
score: 98.44397735595703
patch: return ~ position + ( ) ;
rank: 595
score: 98.38498360770089
patch: if ( position >= position )
rank: 596
score: 98.56724548339844
patch: return >= 0 + - 1 ;
rank: 596
score: 98.50789969308036
patch: return - position ; break ;
rank: 596
score: 98.50484793526786
patch: return return 1 + 0 ;
rank: 596
score: 98.4738540649414
patch: if ( ~ 0 & position ;
rank: 596
score: 98.38442993164062
patch: return position || position ;
rank: 597
score: 98.5653305053711
patch: return * - 0 : 0 ;
rank: 597
score: 98.50381033761161
patch: return ~ $STRING$ + position ;
rank: 597
score: 98.49050903320312
patch: return position - text . trim ;
rank: 597
score: 98.46608189174107
patch: result = ALL _ IDS ;
rank: 597
score: 98.46122523716518
patch: return ~ position / 0 ;
rank: 597
score: 98.44170270647321
patch: return ~ position + null ;
rank: 597
score: 98.38420758928571
patch: if ( ~ position ) {
rank: 598
score: 98.47259521484375
patch: return position - return 1 ;
rank: 598
score: 98.38335309709821
patch: return position position / $NUMBER$ ;
rank: 599
score: 98.681640625
patch: return position : $NUMBER$ ;
rank: 599
score: 98.56396484375
patch: return >= 0 + 0 ;
rank: 599
score: 98.50285121372768
patch: try { return - 1 ;
rank: 599
score: 98.46439906529018
patch: return <= 0 + position ;
rank: 599
score: 98.45813751220703
patch: return position + length . length ;
rank: 599
score: 98.43960135323661
patch: return else return - 1 ;
rank: 599
score: 98.38007463727679
patch: final return position ~ position ;
rank: 600
score: 98.50238800048828
patch: else { return return position ; }
rank: 600
score: 98.48660278320312
patch: return ~ ~ - 1 ; ;
rank: 600
score: 98.46951293945312
patch: } else { if ;
rank: 600
score: 98.46350969587054
patch: return - * - 1 ;
rank: 601
score: 98.56020100911458
patch: return 0 . 1 ;
rank: 601
score: 98.50043596540179
patch: return ~ return - 1 ;
rank: 601
score: 98.48771449497768
patch: return position ; break ; int
rank: 601
score: 98.46565464564732
patch: return $NUMBER$ + ~ position ;
rank: 601
score: 98.43677520751953
patch: return ~ position && ~ position ;
rank: 601
score: 98.37850516183036
patch: return position ; position ++ ;
rank: 602
score: 98.50040108816964
patch: return return ( return position ;
rank: 602
score: 98.48386928013393
patch: return position ; return ; int
rank: 602
score: 98.46077473958333
patch: return Math . 0 ;
rank: 602
score: 98.43675013950893
patch: return * position + 0 ;
rank: 602
score: 98.37791224888393
patch: if ( position == 0 ;
rank: 603
score: 98.49958147321429
patch: return return ~ return 1 ;
rank: 603
score: 98.48326619466145
patch: return text . length ;
rank: 603
score: 98.46321323939732
patch: return ~ $NUMBER$ + 0 ;
rank: 603
score: 98.46042306082589
patch: return synchronized ( position ) {
rank: 603
score: 98.43663678850446
patch: return : ~ ~ position ;
rank: 604
score: 98.67218017578125
patch: return ~ position : $NUMBER$ ;
rank: 604
score: 98.49937220982143
patch: final else { return position ;
rank: 604
score: 98.48285784040179
patch: return new Integer ( position ;
rank: 604
score: 98.46224539620536
patch: } ; return ~ $NUMBER$ ;
rank: 604
score: 98.45016043526786
patch: return position + return position ;
rank: 604
score: 98.43581717354911
patch: return ~ position ] ; }
rank: 604
score: 98.37416294642857
patch: return position . trim ( ;
rank: 605
score: 98.67178344726562
patch: return position : 1 ;
rank: 605
score: 98.55791473388672
patch: ~ 0 . length ( ) ;
rank: 605
score: 98.49919782366071
patch: result = return ~ position ;
rank: 605
score: 98.48246256510417
patch: return position ; else ;
rank: 605
score: 98.46212158203124
patch: if return 0 ;
rank: 605
score: 98.45960344587054
patch: return * ~ ~ 0 ;
rank: 605
score: 98.43537248883929
patch: return append ( str ) ;
rank: 605
score: 98.37403215680804
patch: return position - start ; ;
rank: 606
score: 98.55759974888393
patch: return ? 0 : 0 ;
rank: 606
score: 98.49879455566406
patch: return ; int String ~ position ;
rank: 606
score: 98.48273468017578
patch: if ( position == 1 ) {
rank: 606
score: 98.479296875
patch: return position ; else
rank: 606
score: 98.46196637834821
patch: / * * * ; /
rank: 606
score: 98.442138671875
patch: return * * / position ;
rank: 606
score: 98.43511962890625
patch: return < ALL _ IDS ;
rank: 606
score: 98.37064906529018
patch: if ( position != 0 )
rank: 607
score: 98.55733489990234
patch: return * 0 . 0 ) ;
rank: 607
score: 98.49707903180804
patch: else { if ~ position ;
rank: 607
score: 98.48182678222656
patch: return ~ new Integer ( position ;
rank: 607
score: 98.47841389973958
patch: return new ~ position ;
rank: 607
score: 98.45761544363839
patch: * * * * * ;
rank: 607
score: 98.43492635091145
patch: return ~ position 1 ;
rank: 608
score: 98.66627720424107
patch: return position + + 1 ;
rank: 608
score: 98.55532400948661
patch: return & position + 1 ;
rank: 608
score: 98.49673897879464
patch: return return - position ; ;
rank: 608
score: 98.48141479492188
patch: if ( position == - position )
rank: 608
score: 98.45724051339286
patch: return position && ~ 1 ;
rank: 608
score: 98.36807686941964
patch: long start = ~ position ;
rank: 609
score: 98.55501556396484
patch: return int == position + 1 ;
rank: 609
score: 98.4804458618164
patch: do { return ~ position ; }
rank: 609
score: 98.47393798828125
patch: return ~ position ; /
rank: 609
score: 98.45710972377232
patch: return position + $NUMBER$ position ;
rank: 609
score: 98.43405587332589
patch: return & position + position ;
rank: 610
score: 98.55397033691406
patch: return int != position + 1 ;
rank: 610
score: 98.47294108072917
patch: return ~ position ; set
rank: 610
score: 98.45680236816406
patch: return * ;
rank: 610
score: 98.45283726283482
patch: return / * ~ $NUMBER$ ;
rank: 610
score: 98.43402099609375
patch: return super . parse CaMeL Into (
rank: 611
score: 98.66448974609375
patch: return ~ text . length ( )
rank: 611
score: 98.55290004185268
patch: return ~ position + size ;
rank: 611
score: 98.49641418457031
patch: return ; int position : 0 ;
rank: 611
score: 98.47991071428571
patch: return - position + $NUMBER$ ;
rank: 611
score: 98.47157505580357
patch: return ~ position ; position ;
rank: 611
score: 98.45475551060268
patch: else { return value ; }
rank: 611
score: 98.45235770089286
patch: return ~ / - 1 ;
rank: 611
score: 98.43398030598958
patch: return return * position ;
rank: 611
score: 98.36534627278645
patch: return position % $NUMBER$ ;
rank: 612
score: 98.55268859863281
patch: return - 0 . - 0 ;
rank: 612
score: 98.49636840820312
patch: * else { return position ; }
rank: 612
score: 98.4765625
patch: return super . parse ;
rank: 612
score: 98.46663120814732
patch: return ~ 1 ; / /
rank: 612
score: 98.45458984375
patch: if ( position == position ;
rank: 612
score: 98.43804931640625
patch: else { return position ) ;
rank: 612
score: 98.43348039899554
patch: return : ~ position ; }
rank: 612
score: 98.36510358537946
patch: return super . position ( ;
rank: 613
score: 98.6634750366211
patch: return ALL _ IDS + text ;
rank: 613
score: 98.55056762695312
patch: return * - - - 0 ;
rank: 613
score: 98.49611118861607
patch: finally { return - $NUMBER$ ;
rank: 613
score: 98.47551618303571
patch: return - ~ ~ 1 ;
rank: 613
score: 98.45351736886161
patch: return * * - position ;
rank: 613
score: 98.43315887451172
patch: return ~ ( String ) position ;
rank: 614
score: 98.49544525146484
patch: return ; int position - 0 ;
rank: 614
score: 98.47547149658203
patch: return text . length ( position ;
rank: 614
score: 98.45277622767857
patch: return * [ 0 ] ;
rank: 614
score: 98.45131138392857
patch: return ( ~ 0 ) ;
rank: 614
score: 98.43267822265625
patch: return ~ ~ position ; else {
rank: 614
score: 98.36232503255208
patch: return position % 1 ;
rank: 615
score: 98.49414825439453
patch: finally { return ~ position ; ;
rank: 615
score: 98.47350311279297
patch: int position = position - position ;
rank: 615
score: 98.45262654622395
patch: } else { return ;
rank: 615
score: 98.44993373325893
patch: -- position ; return position ;
rank: 615
score: 98.43626185825893
patch: return ~ position + bucket ;
rank: 615
score: 98.43138885498047
patch: return long ~ position + position ;
rank: 615
score: 98.36189778645833
patch: return position ~ time ;
rank: 616
score: 98.49213518415179
patch: return return * return position ;
rank: 616
score: 98.45217895507812
patch: return ; . start ;
rank: 616
score: 98.44979422433036
patch: return * ( position ) ;
rank: 616
score: 98.43548583984375
patch: return ~ position + max ;
rank: 616
score: 98.36097935267857
patch: return position position ~ 1 ;
rank: 617
score: 98.4906005859375
patch: return finally { ~ position ;
rank: 617
score: 98.47228240966797
patch: return position - $STRING$ + text ;
rank: 617
score: 98.44965471540179
patch: return ~ ~ ~ null ;
rank: 617
score: 98.43034144810268
patch: return ++ ~ position ; }
rank: 617
score: 98.3602294921875
patch: return position & 0 ;
rank: 618
score: 98.54710170200893
patch: return - - - $NUMBER$ ;
rank: 618
score: 98.48976353236607
patch: try { return - $STRING$ ;
rank: 618
score: 98.4716796875
patch: return ~ ( text . length ;
rank: 618
score: 98.46272495814732
patch: return position . ~ position ;
rank: 618
score: 98.44952392578125
patch: } if return ~ 1 ;
rank: 618
score: 98.36017717633929
patch: int start = ~ position ;
rank: 619
score: 98.54692731584821
patch: return >= 0 + position ;
rank: 619
score: 98.48789760044643
patch: return return Integer . 0 ;
rank: 619
score: 98.46251569475446
patch: return position ; ~ $STRING$ ;
rank: 619
score: 98.4482421875
patch: return * * * ? ;
rank: 619
score: 98.42816162109375
patch: return * ( String ) position ;
rank: 619
score: 98.36002894810268
patch: else return position - 1 ;
rank: 620
score: 98.65986633300781
patch: return position ? 0 : 1 ;
rank: 620
score: 98.48774065290179
patch: return 0 ; ~ position ;
rank: 620
score: 98.47078450520833
patch: return - position ) ;
rank: 620
score: 98.46123395647321
patch: return position + position ; else
rank: 620
score: 98.4481201171875
patch: } ; if return position ;
rank: 620
score: 98.44517299107143
patch: return parse ~ ~ position ;
rank: 620
score: 98.35954066685268
patch: return position * - 1 ;
rank: 621
score: 98.65826416015625
patch: return position ? ALL _ IDS }
rank: 621
score: 98.48686000279018
patch: return return position - 0 ;
rank: 621
score: 98.47045135498047
patch: return position - name . length ;
rank: 621
score: 98.42727225167411
patch: return ( position ? position ;
rank: 621
score: 98.35771833147321
patch: long position = ~ position ;
rank: 622
score: 98.54045104980469
patch: return if . position ( ) ;
rank: 622
score: 98.48665945870536
patch: catch position ; return position ;
rank: 622
score: 98.47017124720982
patch: return position return - 1 ;
rank: 622
score: 98.447314453125
patch: if ( position ;
rank: 622
score: 98.42716979980469
patch: return ~ ~ position - 0 ;
rank: 623
score: 98.48617117745536
patch: else { return ~ ) ;
rank: 623
score: 98.46943664550781
patch: return ~ ( 1 * position ;
rank: 623
score: 98.45057024274554
patch: ~ 0 ; return position ;
rank: 623
score: 98.44539097377232
patch: if ; else return position ;
rank: 623
score: 98.439697265625
patch: return position + -- position ;
rank: 623
score: 98.42514038085938
patch: return position ; } }
rank: 624
score: 98.48570251464844
patch: return - 1 + position ; ;
rank: 624
score: 98.46831403459821
patch: return ~ 1 | position ;
rank: 624
score: 98.43954903738839
patch: result = position + 1 ;
rank: 624
score: 98.42510114397321
patch: return append ( bucket ) ;
rank: 624
score: 98.35614885602679
patch: if ( position == position )
rank: 625
score: 98.53643798828125
patch: return ~ parse CaMeL Into 0 ;
rank: 625
score: 98.46748860677083
patch: return position - text ;
rank: 625
score: 98.44960239955357
patch: return position ; try / /
rank: 625
score: 98.44467163085938
patch: return 1 + position ;
rank: 625
score: 98.4384765625
patch: return $NUMBER$ . - position ;
rank: 625
score: 98.42466517857143
patch: return |= position + position ;
rank: 625
score: 98.42274693080357
patch: return position + $STRING$ ) ;
rank: 626
score: 98.65353829520089
patch: return ~ bucket + 0 ;
rank: 626
score: 98.53628976004464
patch: return > 0 ? position ;
rank: 626
score: 98.48405456542969
patch: else { int ~ position position ;
rank: 626
score: 98.44886271158855
patch: return ~ position ; throw
rank: 626
score: 98.44394356863839
patch: return * $NUMBER$ * position ;
rank: 626
score: 98.43743896484375
patch: return return * ~ position ;
rank: 626
score: 98.42389787946429
patch: return >= 0 ? position ;
rank: 626
score: 98.3560078938802
patch: return int CaMeL Value ;
rank: 627
score: 98.65223693847656
patch: return $NUMBER$ ? position : 1 ;
rank: 627
score: 98.53466033935547
patch: return > 0 + - 1 ;
rank: 627
score: 98.44803873697917
patch: return position ; while ;
rank: 627
score: 98.44264729817708
patch: } else = position ;
rank: 627
score: 98.42345428466797
patch: return ~ position ( 0 ) ;
rank: 628
score: 98.53279331752232
patch: return / 0 + position ;
rank: 628
score: 98.48270961216518
patch: else return return - $STRING$ ;
rank: 628
score: 98.445068359375
patch: return ~ * position ;
rank: 628
score: 98.43376813616071
patch: return ( - position ) ;
rank: 628
score: 98.42298889160156
patch: return ~ position + false ; }
rank: 628
score: 98.41903250558036
patch: return position ( text ) ;
rank: 628
score: 98.35456194196429
patch: return position ) + position ;
rank: 629
score: 98.53240966796875
patch: return return this . position ;
rank: 629
score: 98.48185511997768
patch: / else return ~ position ;
rank: 629
score: 98.42285919189453
patch: return return ~ ~ position ; }
rank: 629
score: 98.3529052734375
patch: return position && position ;
rank: 630
score: 98.48167201450893
patch: return - $STRING$ + 0 ;
rank: 630
score: 98.46055385044643
patch: return ~ - ~ position ;
rank: 630
score: 98.44284493582589
patch: return 1 ; return position ;
rank: 630
score: 98.42240142822266
patch: return : ~ position + position ;
rank: 630
score: 98.35201590401786
patch: return position == ~ position ;
rank: 631
score: 98.64675903320312
patch: return ~ position * - 1 ;
rank: 631
score: 98.52858189174107
patch: return byte [ 0 ] ;
rank: 631
score: 98.48164585658482
patch: return - - - position ;
rank: 631
score: 98.45773315429688
patch: return ~ 1 position ;
rank: 631
score: 98.43949672154018
patch: } if ; return 0 ;
rank: 631
score: 98.42236328125
patch: return -= ~ position ;
rank: 631
score: 98.35127476283482
patch: if ( position < position )
rank: 632
score: 98.52806854248047
patch: return * ( int ) position ;
rank: 632
score: 98.48101806640625
patch: return return - $STRING$ ; ;
rank: 632
score: 98.45671735491071
patch: return - ~ position position ;
rank: 632
score: 98.43918282645089
patch: / * * * / /
rank: 632
score: 98.42225864955357
patch: return * position : position ;
rank: 633
score: 98.48077392578125
patch: else { if ~ position position ;
rank: 633
score: 98.4384765625
patch: return ~ * * position ;
rank: 633
score: 98.41437639508929
patch: return ~ position - length ;
rank: 633
score: 98.34485880533855
patch: return position << $NUMBER$ ;
rank: 634
score: 98.64500209263393
patch: return position . length ( )
rank: 634
score: 98.52579498291016
patch: return return ( int ) position ;
rank: 634
score: 98.4805679321289
patch: logger . append ( $STRING$ ) ;
rank: 634
score: 98.43801443917411
patch: } return * * * /
rank: 634
score: 98.43756103515625
patch: return ~ 1 ; if ;
rank: 634
score: 98.341796875
patch: return position position - start ;
rank: 635
score: 98.64422607421875
patch: return text + position + 1 ;
rank: 635
score: 98.52566964285714
patch: return - 0 . 1 ;
rank: 635
score: 98.48005022321429
patch: else return ~ - $STRING$ ;
rank: 635
score: 98.43793596540179
patch: else { return null ; }
rank: 635
score: 98.41849517822266
patch: return ] ;
rank: 636
score: 98.43661934988839
patch: return false ; return false ;
rank: 636
score: 98.43459065755208
patch: return ~ position ; int
rank: 636
score: 98.425537109375
patch: return * = ~ position ;
rank: 636
score: 98.41504669189453
patch: return else { return - 1 ;
rank: 636
score: 98.33914620535714
patch: return get position - 1 ;
rank: 637
score: 98.64246368408203
patch: return / * position + 1 ;
rank: 637
score: 98.52186075846355
patch: return Boolean . length ;
rank: 637
score: 98.47967529296875
patch: return return return - 1 ;
rank: 637
score: 98.45110212053571
patch: return position - return position ;
rank: 637
score: 98.43658447265625
patch: return position && ~ position ;
rank: 637
score: 98.4146728515625
patch: return else { ~ ~ position ;
rank: 637
score: 98.33558872767857
patch: sb = position + position ;
rank: 638
score: 98.51946149553571
patch: return * 1 + position ;
rank: 638
score: 98.47834123883929
patch: else { return ~ false ;
rank: 638
score: 98.44999186197917
patch: return ~ $NUMBER$ position ;
rank: 638
score: 98.43585205078125
patch: return * * 1 ;
rank: 638
score: 98.43141392299107
patch: return position ; } if ;
rank: 638
score: 98.40767415364583
patch: return * - $NUMBER$ ;
rank: 638
score: 98.334716796875
patch: return position == 0 ;
rank: 639
score: 98.51811981201172
patch: return * 0 + ~ position ;
rank: 639
score: 98.47794342041016
patch: try { return - position ; }
rank: 639
score: 98.43130929129464
patch: ~ false ; return position ;
rank: 639
score: 98.41270446777344
patch: return ~ ~ ( false ) ;
rank: 639
score: 98.33370971679688
patch: assert position >= 0 ;
rank: 640
score: 98.51567840576172
patch: return int [ ] - 0 ;
rank: 640
score: 98.44877115885417
patch: return ~ $NUMBER$ ; ;
rank: 640
score: 98.43274797712054
patch: return / * * * /
rank: 640
score: 98.42770821707589
patch: return position ; return null ;
rank: 640
score: 98.42122395833333
patch: return Boolean . 0 ;
rank: 641
score: 98.47744315011161
patch: else return return - position ;
rank: 641
score: 98.44862583705357
patch: if ( position > position ;
rank: 641
score: 98.43184988839286
patch: if ( 0 == position )
rank: 641
score: 98.41766357421875
patch: return long CaMeL Time ;
rank: 641
score: 98.4121805826823
patch: return ~ position + ;
rank: 641
score: 98.40468924386161
patch: return ~ position * 0 ;
rank: 641
score: 98.33222307477679
patch: return 0 position + position ;
rank: 642
score: 98.63652038574219
patch: return / * position * * /
rank: 642
score: 98.51506805419922
patch: return ? 0 : ~ position ;
rank: 642
score: 98.47713470458984
patch: return return ~ return position ; ;
rank: 642
score: 98.41181945800781
patch: return >= 1 ? ~ position ;
rank: 642
score: 98.40321568080357
patch: return ? position : position ;
rank: 642
score: 98.3299560546875
patch: throw new Exception ( $STRING$ ;
rank: 643
score: 98.51109822591145
patch: return length + 1 ;
rank: 643
score: 98.47679138183594
patch: try { return - 1 ; }
rank: 643
score: 98.42617361886161
patch: return position + position ; int
rank: 643
score: 98.41625104631696
patch: return position + - $STRING$ ;
rank: 644
score: 98.47576032366071
patch: return * ] ~ position ;
rank: 644
score: 98.44711739676339
patch: return values [ position ] ;
rank: 644
score: 98.42836216517857
patch: } return position * 0 ;
rank: 644
score: 98.41041782924107
patch: return - 1 ; } }
rank: 644
score: 98.32860456194196
patch: return position / $NUMBER$ ; ;
rank: 645
score: 98.50679234095982
patch: return > 0 + 0 ;
rank: 645
score: 98.47430419921875
patch: return return 0 ; ;
rank: 645
score: 98.44560023716518
patch: return ~ position / position ;
rank: 645
score: 98.42795817057292
patch: return ~ + 1 ;
rank: 645
score: 98.42164103190105
patch: return ~ 1 ; try
rank: 645
score: 98.410888671875
patch: String str = text ;
rank: 646
score: 98.44418770926339
patch: if ; return - 1 ;
rank: 646
score: 98.42715018136161
patch: return ~ [ 0 ] ;
rank: 646
score: 98.42124430338542
patch: return position = position ;
rank: 646
score: 98.40957205636161
patch: return ~ ~ true ; }
rank: 646
score: 98.39913177490234
patch: return max ;
rank: 646
score: 98.32605852399554
patch: return position / ~ position ;
rank: 647
score: 98.50345284598214
patch: return / - - 0 ;
rank: 647
score: 98.42025320870536
patch: return position ; try / ;
rank: 647
score: 98.4098612467448
patch: return ( 0 ) ;
rank: 647
score: 98.40946742466518
patch: return ~ position ) ; }
rank: 647
score: 98.325439453125
patch: } return position - 1 ;
rank: 648
score: 98.47308349609375
patch: return return $NUMBER$ ; ;
rank: 648
score: 98.42617797851562
patch: if return ~ 1 ;
rank: 648
score: 98.4201416015625
patch: return position ; try
rank: 648
score: 98.40927124023438
patch: else { return null ;
rank: 648
score: 98.39849853515625
patch: return / * / position ;
rank: 648
score: 98.32503836495536
patch: / * return position * /
rank: 649
score: 98.47291259765625
patch: catch ~ $STRING$ ;
rank: 649
score: 98.44199916294643
patch: return ~ position | 1 ;
rank: 649
score: 98.425048828125
patch: } else if ( position ;
rank: 649
score: 98.41827392578125
patch: return return position ; / /
rank: 649
score: 98.40809849330357
patch: return ~ position : length ;
rank: 649
score: 98.32362583705357
patch: string = position + position ;
rank: 650
score: 98.47203717912946
patch: return this . return position ;
rank: 650
score: 98.42388916015625
patch: if ( ~ 1 ;
rank: 650
score: 98.41489955357143
patch: return position ; if position .
rank: 650
score: 98.40859985351562
patch: return * ~ 1 ;
rank: 650
score: 98.40741838727679
patch: return * - 1 ; }
rank: 650
score: 98.32260567801339
patch: return position [ position ] ;
rank: 651
score: 98.49918910435268
patch: return > 0 : position ;
rank: 651
score: 98.47185407366071
patch: return - - - $STRING$ ;
rank: 651
score: 98.44048200334821
patch: / * * return position ;
rank: 651
score: 98.4228006998698
patch: if return ~ 0 ;
rank: 651
score: 98.41207449776786
patch: return ~ 1 ; try /
rank: 651
score: 98.40741838727679
patch: else { } return position ;
rank: 651
score: 98.32260567801339
patch: if ( position == $NUMBER$ )
rank: 652
score: 98.47158813476562
patch: / ; return position ;
rank: 652
score: 98.44017682756696
patch: return return position * $NUMBER$ ;
rank: 652
score: 98.41044398716518
patch: return position ; } return ;
rank: 652
score: 98.40685272216797
patch: return * position + ~ position ;
rank: 652
score: 98.40134974888393
patch: return / * ~ bucket ;
rank: 652
score: 98.32169015066964
patch: return position position + length ;
rank: 653
score: 98.49558803013393
patch: return <= 0 : position ;
rank: 653
score: 98.40941510881696
patch: return ~ $NUMBER$ ; break ;
rank: 653
score: 98.40630231584821
patch: return < position + position ;
rank: 653
score: 98.39581909179688
patch: return ( position ;
rank: 653
score: 98.32167271205357
patch: return position + name . ;
rank: 654
score: 98.49366978236607
patch: return * 0 + length ;
rank: 654
score: 98.47038922991071
patch: finally { return 1 ; }
rank: 654
score: 98.43921770368304
patch: return ~ position ~ $NUMBER$ ;
rank: 654
score: 98.42165701729911
patch: if return position + position ;
rank: 654
score: 98.4082743326823
patch: return ~ position ; System
rank: 654
score: 98.39158412388393
patch: return - 1 . position ;
rank: 654
score: 98.39112200055804
patch: return position + ~ 0 ;
rank: 655
score: 98.47034301757813
patch: catch return position ;
rank: 655
score: 98.42030552455357
patch: return ; , return $NUMBER$ ;
rank: 655
score: 98.40764508928571
patch: return return position ; if ;
rank: 656
score: 98.49302455357143
patch: return - 1 . 1 ;
rank: 656
score: 98.31637137276786
patch: sb . append ( position ;
rank: 657
score: 98.46990094866071
patch: finally { ~ position ; }
rank: 657
score: 98.43499755859375
patch: return - position ~ 1 ;
rank: 657
score: 98.41829427083333
patch: return ; , start ;
rank: 657
score: 98.40499114990234
patch: return ~ position : - position ;
rank: 657
score: 98.38816615513393
patch: return - ALL _ IDS ;
rank: 657
score: 98.31483677455357
patch: return position ; position -- ;
rank: 658
score: 98.4686050415039
patch: return 0 ; if ~ position ;
rank: 658
score: 98.41822160993304
patch: else if ; return position ;
rank: 658
score: 98.40479125976563
patch: return * ) ;
rank: 658
score: 98.38791910807292
patch: return ( false ) ;
rank: 659
score: 98.46748570033482
patch: String ~ position ~ position ;
rank: 659
score: 98.40155901227679
patch: return ~ 1 ; else ;
rank: 659
score: 98.38650076729911
patch: return ~ ~ ( position ;
rank: 659
score: 98.31313650948661
patch: } return position ~ position ;
rank: 660
score: 98.62080601283482
patch: return position : - $NUMBER$ ;
rank: 660
score: 98.48611450195312
patch: return - length ;
rank: 660
score: 98.466064453125
patch: * else { return position ;
rank: 660
score: 98.41738891601562
patch: } return * * ;
rank: 660
score: 98.40154157366071
patch: return this ; return position ;
rank: 660
score: 98.38261195591518
patch: return case $NUMBER$ + position ;
rank: 661
score: 98.48361642020089
patch: return * 0 - 1 ;
rank: 661
score: 98.42996651785714
patch: return position - position ) ;
rank: 661
score: 98.41623942057292
patch: return false + position ;
rank: 661
score: 98.40385219029018
patch: return int ~ position ; }
rank: 661
score: 98.40029471261161
patch: return position position ; break ;
rank: 661
score: 98.38180541992188
patch: return * ~ bucket ;
rank: 661
score: 98.30872453962054
patch: finally { position ++ ; }
rank: 662
score: 98.6196060180664
patch: return ALL _ IDS ? position }
rank: 662
score: 98.46533203125
patch: else { ~ ~ position ;
rank: 662
score: 98.42980085100446
patch: if ( position > position )
rank: 662
score: 98.41514369419643
patch: return ; , return 1 ;
rank: 662
score: 98.40006801060268
patch: return position ; return / ;
rank: 662
score: 98.38480050223214
patch: else { return ~ bucket ;
rank: 662
score: 98.37937709263393
patch: return * ~ ~ bucket ;
rank: 663
score: 98.48142787388393
patch: return [ - 0 ] ;
rank: 663
score: 98.4136962890625
patch: return ; , value ;
rank: 663
score: 98.40237426757812
patch: return << - 1 ;
rank: 663
score: 98.39994303385417
patch: return ~ position ; boolean
rank: 663
score: 98.3789571126302
patch: else { return ) ;
rank: 663
score: 98.30829729352679
patch: return position - str . ;
rank: 664
score: 98.61710030691964
patch: return ~ text + 0 ;
rank: 664
score: 98.46416364397321
patch: return - - ~ position ;
rank: 664
score: 98.4129130045573
patch: return 0 - position ;
rank: 664
score: 98.40038299560547
patch: return / - position + position ;
rank: 664
score: 98.39795793805804
patch: return position ; } else ;
rank: 664
score: 98.37616838727679
patch: return % ALL _ IDS ;
rank: 665
score: 98.47914632161458
patch: return - - length ;
rank: 665
score: 98.46416364397321
patch: else return ~ - position ;
rank: 665
score: 98.41281563895089
patch: return ~ ~ 1 position ;
rank: 665
score: 98.39985874720982
patch: return / * - 1 ;
rank: 665
score: 98.38357107979911
patch: return * * += position ;
rank: 665
score: 98.37556966145833
patch: synchronized ( bucket ) {
rank: 665
score: 98.30683244977679
patch: text = position + 1 ;
rank: 666
score: 98.47876848493304
patch: return int [ ] 1 ;
rank: 666
score: 98.46406773158482
patch: else return position ~ position ;
rank: 666
score: 98.42681884765625
patch: return - ~ - position ;
rank: 666
score: 98.41264997209821
patch: return position || ~ 1 ;
rank: 666
score: 98.39965057373047
patch: return int < position + position ;
rank: 667
score: 98.61531284877232
patch: return ~ position ? position }
rank: 667
score: 98.46392822265625
patch: else if ~ position ~ position ;
rank: 667
score: 98.426513671875
patch: return - position / $NUMBER$ ;
rank: 667
score: 98.4119873046875
patch: return * * $NUMBER$ ;
rank: 667
score: 98.39909362792969
patch: return / - $NUMBER$ + position ;
rank: 667
score: 98.39415486653645
patch: return ~ 1 ; else
rank: 667
score: 98.38308279854911
patch: return position ? ALL _ IDS
rank: 667
score: 98.30487060546875
patch: return position * $NUMBER$ ; ;
rank: 668
score: 98.47460065569196
patch: return ? true : 0 ;
rank: 668
score: 98.46355438232422
patch: return return - $STRING$ ? position ;
rank: 668
score: 98.42560686383929
patch: return - return - 1 ;
rank: 668
score: 98.39339773995536
patch: ~ true ; return position ;
rank: 668
score: 98.36922781808036
patch: } ~ ALL _ IDS ;
rank: 668
score: 98.3046366373698
patch: long position = position ;
rank: 669
score: 98.47263881138393
patch: return == 0 ? 0 ;
rank: 669
score: 98.46330915178571
patch: return return int ~ position ;
rank: 669
score: 98.42245919363839
patch: return position position * 1 ;
rank: 669
score: 98.41081891741071
patch: return ~ ; . value ;
rank: 669
score: 98.30393676757812
patch: final ~ position ;
rank: 670
score: 98.61311558314732
patch: return * * ~ bucket ;
rank: 670
score: 98.47255161830357
patch: return [ - 1 ] ;
rank: 670
score: 98.46265665690105
patch: } return ~ $STRING$ ;
rank: 670
score: 98.39713832310268
patch: return ~ position ; continue ;
rank: 670
score: 98.30255126953125
patch: return position + position + ;
rank: 671
score: 98.61255645751953
patch: return $NUMBER$ * ALL _ IDS ;
rank: 671
score: 98.47221156529018
patch: return >= 0 : position ;
rank: 671
score: 98.46248626708984
patch: return ( int position - 0 ;
rank: 671
score: 98.4185282389323
patch: return size - 1 ;
rank: 671
score: 98.40984235491071
patch: return ? 1 : position ;
rank: 671
score: 98.37890014648437
patch: return / $NUMBER$ ;
rank: 671
score: 98.36335100446429
patch: return ~ ~ ~ text ;
rank: 671
score: 98.30195835658482
patch: string = position + 1 ;
rank: 672
score: 98.47170584542411
patch: return <= 0 ? 0 ;
rank: 672
score: 98.46217346191406
patch: return ; int position < 0 ;
rank: 672
score: 98.39615304129464
patch: return ~ position ~ 0 ;
rank: 672
score: 98.39109293619792
patch: return return position ; }
rank: 673
score: 98.46932547433036
patch: return / 0 : 0 ;
rank: 673
score: 98.46168736049107
patch: return position ; return $NUMBER$ ;
rank: 673
score: 98.41696602957589
patch: return position / * position ;
rank: 673
score: 98.39576067243304
patch: return ~ position . start ;
rank: 673
score: 98.38811383928571
patch: return position ; ~ null ;
rank: 673
score: 98.37751988002232
patch: try { return ~ bucket ;
rank: 673
score: 98.3597412109375
patch: return ~ bucket . start ;
rank: 673
score: 98.30056762695312
patch: else { ~ position ;
rank: 674
score: 98.6057357788086
patch: return ~ ~ bucket . position ;
rank: 674
score: 98.46821812220982
patch: return > 0 + $STRING$ ;
rank: 674
score: 98.46163504464286
patch: return / ] ~ position ;
rank: 674
score: 98.40812465122768
patch: return ; , position ( ;
rank: 674
score: 98.39372035435268
patch: return * position - position ;
rank: 674
score: 98.3729248046875
patch: return text . ~ position ;
rank: 675
score: 98.46602957589286
patch: return - - + 1 ;
rank: 675
score: 98.40753173828125
patch: if ; / * * /
rank: 675
score: 98.3936767578125
patch: return >> - 1 ;
rank: 675
score: 98.38690185546875
patch: return position ; if ;
rank: 675
score: 98.3530985514323
patch: return ~ ( ) ;
rank: 676
score: 98.6034927368164
patch: return * / return ~ bucket ;
rank: 676
score: 98.38534981863839
patch: return position + position ; try
rank: 676
score: 98.37260219029018
patch: return position + ALL _ IDS
rank: 676
score: 98.35306803385417
patch: return * ~ $NUMBER$ ;
rank: 677
score: 98.460205078125
patch: return return 0 + position ;
rank: 677
score: 98.38500104631696
patch: return position ; ~ start ;
rank: 678
score: 98.46528843470982
patch: return Integer . - 1 ;
rank: 678
score: 98.41490827287946
patch: return position - start $NUMBER$ ;
rank: 678
score: 98.4059549967448
patch: return ~ 1 + ;
rank: 678
score: 98.38161795479911
patch: return ; = return position ;
rank: 678
score: 98.29581996372768
patch: int position = ~ position ;
rank: 679
score: 98.46185302734375
patch: return >= 0 ;
rank: 679
score: 98.45892333984375
patch: throw new $STRING$ position position ;
rank: 679
score: 98.40592738560268
patch: return position || ~ position ;
rank: 679
score: 98.38128662109375
patch: ~ 1 ; return position ;
rank: 679
score: 98.37051391601562
patch: return * += position ;
rank: 680
score: 98.46126011439732
patch: return Boolean . length 1 ;
rank: 680
score: 98.45849609375
patch: return - $STRING$ ; ;
rank: 680
score: 98.41232735770089
patch: return return ~ ( position ;
rank: 680
score: 98.40556989397321
patch: if ( ~ $NUMBER$ position ;
rank: 680
score: 98.39222935267857
patch: return else return * position ;
rank: 680
score: 98.37936837332589
patch: return position + position ; String
rank: 680
score: 98.36980329241071
patch: return position + ~ bucket ;
rank: 680
score: 98.345458984375
patch: return * = position ;
rank: 680
score: 98.29445393880208
patch: final position += position ;
rank: 681
score: 98.59823608398438
patch: return position ? false : position ;
rank: 681
score: 98.46010335286458
patch: return * - $STRING$ ;
rank: 681
score: 98.45725795200893
patch: return 0 ; return 0 ;
rank: 681
score: 98.41136823381696
patch: return - 1 * position ;
rank: 681
score: 98.40548706054688
patch: return 0 + length ;
rank: 681
score: 98.37843540736607
patch: return ~ position ; set ;
rank: 681
score: 98.29408482142857
patch: return - 1 + 1 ;
rank: 682
score: 98.59814453125
patch: return position + $NUMBER$ : position ;
rank: 682
score: 98.45880998883929
patch: return Integer . length ] ;
rank: 682
score: 98.45685686383929
patch: * * / return position ;
rank: 682
score: 98.41111537388393
patch: return - 1 | position ;
rank: 682
score: 98.40399169921875
patch: if ( ~ 0 ;
rank: 682
score: 98.39083099365234
patch: return ~ position + position position ;
rank: 682
score: 98.37806919642857
patch: return ~ position ; System ;
rank: 682
score: 98.36529541015625
patch: return / * += position ;
rank: 682
score: 98.34434814453125
patch: ~ ~ position ;
rank: 683
score: 98.59347534179688
patch: return * * * / * /
rank: 683
score: 98.45879255022321
patch: return ( String ) text ;
rank: 683
score: 98.45663888113839
patch: finally { return ~ 1 ;
rank: 683
score: 98.37745884486607
patch: return ~ position ; equals ;
rank: 683
score: 98.36496407645089
patch: return position + * 0 ;
rank: 684
score: 98.45847865513393
patch: return / 0 . 1 ;
rank: 684
score: 98.40688650948661
patch: return - position * 1 ;
rank: 684
score: 98.40299479166667
patch: return [ 1 ] ;
rank: 684
score: 98.38969421386719
patch: return / * ~ ~ position ;
rank: 684
score: 98.37705485026042
patch: return position + this ;
rank: 684
score: 98.34011404854911
patch: return position + ( text .
rank: 684
score: 98.29099527994792
patch: return 0 - 1 ;
rank: 685
score: 98.45635986328125
patch: else return return 1 ;
rank: 685
score: 98.40584891183036
patch: return return - ~ 1 ;
rank: 685
score: 98.38770294189453
patch: return ~ ~ position : false ;
rank: 685
score: 98.37702287946429
patch: ~ $STRING$ ; return position ;
rank: 685
score: 98.36330740792411
patch: return ALL _ IDS 1 ;
rank: 686
score: 98.4571533203125
patch: return ! position + 1 ;
rank: 686
score: 98.40168108258929
patch: if ; * * * /
rank: 686
score: 98.38723754882812
patch: return text . substring ( position +
rank: 686
score: 98.37601725260417
patch: return ~ position ; final
rank: 686
score: 98.33628540039062
patch: return + 0 ;
rank: 686
score: 98.28201729910714
patch: if ( text == null )
rank: 687
score: 98.45181710379464
patch: else { return $STRING$ ; }
rank: 687
score: 98.36251395089286
patch: return $NUMBER$ . ~ position ;
rank: 687
score: 98.3353983561198
patch: synchronized ( position ) {
rank: 687
score: 98.281494140625
patch: if ( position > 0 )
rank: 688
score: 98.39899553571429
patch: return ~ ~ $NUMBER$ position ;
rank: 688
score: 98.38543701171875
patch: return position + 1 ; }
rank: 688
score: 98.28109305245536
patch: return - position + $STRING$ ;
rank: 689
score: 98.404052734375
patch: result = position - position ;
rank: 689
score: 98.27955845424107
patch: final ~ position ~ position ;
rank: 690
score: 98.45407540457589
patch: return >= 0 - 1 ;
rank: 690
score: 98.40287562779018
patch: return * position * $NUMBER$ ;
rank: 690
score: 98.39720662434895
patch: return $NUMBER$ + 0 ;
rank: 690
score: 98.38153076171875
patch: return ~ position $NUMBER$ ;
rank: 690
score: 98.3558349609375
patch: else return ALL _ IDS ;
rank: 690
score: 98.32376708984376
patch: return - null ;
rank: 690
score: 98.27897426060268
patch: text = position - 1 ;
rank: 691
score: 98.45356096540179
patch: return == 0 + position ;
rank: 691
score: 98.40007672991071
patch: return return position * position ;
rank: 691
score: 98.39661254882813
patch: return ; return ;
rank: 691
score: 98.36854044596355
patch: return position return position ;
rank: 691
score: 98.32333374023438
patch: return * ~ null ;
rank: 691
score: 98.27770124162946
patch: final String position = position ;
rank: 692
score: 98.45352172851562
patch: return - true ;
rank: 692
score: 98.45010811941964
patch: else { return ~ ; }
rank: 692
score: 98.39780099051339
patch: return ~ - 1 position ;
rank: 692
score: 98.39618791852679
patch: } else { / * /
rank: 692
score: 98.36819893973214
patch: return position + position ; position
rank: 692
score: 98.2766825358073
patch: return position > position ;
rank: 693
score: 98.57677350725446
patch: return ~ position : null ;
rank: 693
score: 98.4522705078125
patch: return - + 1 ;
rank: 693
score: 98.44985961914062
patch: return - 0 ; ;
rank: 693
score: 98.39578683035714
patch: return * * * ? /
rank: 693
score: 98.37777709960938
patch: return || ~ position ;
rank: 693
score: 98.36661783854167
patch: return position ; try /
rank: 693
score: 98.35384695870536
patch: return * / ~ bucket ;
rank: 693
score: 98.3180908203125
patch: } } ) ;
rank: 694
score: 98.45125906808036
patch: return <= 0 + 0 ;
rank: 694
score: 98.44932338169643
patch: } return - - $STRING$ ;
rank: 694
score: 98.39572579520089
patch: return * * * / }
rank: 694
score: 98.37742106119792
patch: return += position ; }
rank: 694
score: 98.31394449869792
patch: return ~ ALL _ IDS
rank: 694
score: 98.27506801060268
patch: return Math . max ( ;
rank: 695
score: 98.44598388671875
patch: else if ~ ~ position ;
rank: 695
score: 98.39618791852679
patch: return ~ $NUMBER$ - position ;
rank: 695
score: 98.39446149553571
patch: else { if return position ;
rank: 695
score: 98.37679617745536
patch: return . ~ ~ position ;
rank: 696
score: 98.44988141741071
patch: return ~ position - $STRING$ ;
rank: 696
score: 98.44426618303571
patch: finally { ~ ~ position ;
rank: 696
score: 98.39444405691964
patch: return position ; return value ;
rank: 696
score: 98.38958740234375
patch: return super . position ;
rank: 696
score: 98.37406005859376
patch: return *= position ;
rank: 696
score: 98.36390904017857
patch: return $NUMBER$ ; return position ;
rank: 696
score: 98.35090855189732
patch: return * / / position ;
rank: 696
score: 98.31005859375
patch: return ( true ) ;
rank: 696
score: 98.2716776529948
patch: return position == position ;
rank: 697
score: 98.39436848958333
patch: } return * 1 ;
rank: 697
score: 98.36366489955357
patch: return position ; += position ;
rank: 697
score: 98.34789167131696
patch: return position int = position ;
rank: 697
score: 98.30963134765625
patch: -- ALL _ IDS ;
rank: 697
score: 98.27154541015625
patch: return position ~ now ;
rank: 698
score: 98.44793701171875
patch: return size ;
rank: 698
score: 98.38779994419643
patch: return / * position * /
rank: 698
score: 98.37263997395833
patch: return ~ position false ;
rank: 698
score: 98.3089599609375
patch: } return true ;
rank: 699
score: 98.44692557198661
patch: return * 1 . 1 ;
rank: 699
score: 98.441162109375
patch: else { catch ~ $STRING$ ;
rank: 699
score: 98.39422607421875
patch: return * * return ;
rank: 700
score: 98.5556640625
patch: return ~ bucket . value ;
rank: 700
score: 98.44258335658482
patch: return * position + length ;
rank: 700
score: 98.4405517578125
patch: return ~ 0 ; ;
rank: 700
score: 98.39382934570312
patch: return * + 0 ;
rank: 700
score: 98.35786743164063
patch: return new position ;
rank: 700
score: 98.34201485770089
patch: return * * + position ;
rank: 700
score: 98.30514526367188
patch: String str = $STRING$ ;
rank: 700
score: 98.26545933314732
patch: return position - 1 ; }
rank: 701
score: 98.55348423549107
patch: return ? position : 0 ;
rank: 701
score: 98.44243512834821
patch: return * this . position ;
rank: 701
score: 98.43741280691964
patch: / ; return ~ position ;
rank: 701
score: 98.39375523158482
patch: } / * * * /
rank: 701
score: 98.38543701171875
patch: return ~ 1 . 0 ;
rank: 701
score: 98.37074497767857
patch: return long ~ position ; }
rank: 702
score: 98.43538411458333
patch: catch ~ position position ;
rank: 702
score: 98.3912862141927
patch: } if ( position ;
rank: 702
score: 98.38481794084821
patch: this . return return position ;
rank: 702
score: 98.34916178385417
patch: return ; ~ position ;
rank: 703
score: 98.43910435267857
patch: return * 0 + 1 ;
rank: 703
score: 98.43262590680804
patch: int * / return position ;
rank: 703
score: 98.3905029296875
patch: return ; . ~ start ;
rank: 703
score: 98.37003871372768
patch: return else return position ; }
rank: 703
score: 98.34275309244792
patch: return position ; position ;
rank: 703
score: 98.33775838216145
patch: return text . value ;
rank: 703
score: 98.29708862304688
patch: ~ position + position ;
rank: 704
score: 98.5460713704427
patch: return position : null ;
rank: 704
score: 98.43887329101562
patch: return length ( ) ;
rank: 704
score: 98.38929094587054
patch: if ( ; else return ;
rank: 704
score: 98.38434709821429
patch: return ~ $NUMBER$ / position ;
rank: 704
score: 98.29688517252605
patch: return this . 0 ;
rank: 704
score: 98.26366315569196
patch: return position $NUMBER$ + position ;
rank: 705
score: 98.54354422433036
patch: return $NUMBER$ : ~ position ;
rank: 705
score: 98.38861083984375
patch: return 0 * position ;
rank: 705
score: 98.36812046595982
patch: return position + position ] ;
rank: 705
score: 98.34150695800781
patch: return this ;
rank: 705
score: 98.33341471354167
patch: else { return $STRING$ ;
rank: 705
score: 98.2636006673177
patch: int start = position ;
rank: 706
score: 98.42544991629464
patch: int * return ~ position ;
rank: 706
score: 98.38841901506696
patch: return / * * * ;
rank: 706
score: 98.32992553710938
patch: return ( $STRING$ ) ;
rank: 706
score: 98.29580688476562
patch: return * ~ false ;
rank: 706
score: 98.26119384765624
patch: final return position ;
rank: 707
score: 98.43429565429688
patch: return 1 . 0 ;
rank: 707
score: 98.38824462890625
patch: } else return ;
rank: 707
score: 98.32847086588542
patch: return parse CaMeL Into ;
rank: 707
score: 98.29576619466145
patch: return - ( position ;
rank: 707
score: 98.25901285807292
patch: return length - position ;
rank: 708
score: 98.43296595982143
patch: return * $NUMBER$ + position ;
rank: 708
score: 98.4235595703125
patch: return false ; ;
rank: 708
score: 98.38802083333333
patch: return ; . return ;
rank: 708
score: 98.36538260323661
patch: return / - $NUMBER$ ; }
rank: 708
score: 98.33057657877605
patch: return ~ position ; String
rank: 708
score: 98.32669503348214
patch: return ! position + position ;
rank: 708
score: 98.25862339564732
patch: int position = - 1 ;
rank: 709
score: 98.43209402901786
patch: return length + - 1 ;
rank: 709
score: 98.38722446986607
patch: } else { if ; }
rank: 709
score: 98.3267822265625
patch: return new + position ;
rank: 709
score: 98.29041544596355
patch: return * -- position ;
rank: 710
score: 98.41814313616071
patch: else { int ~ 1 ;
rank: 710
score: 98.36372593470982
patch: return finally { break ; }
rank: 711
score: 98.41766357421875
patch: } return position position ;
rank: 711
score: 98.38551839192708
patch: } if ~ position ;
rank: 711
score: 98.3609110514323
patch: return < position ] ;
rank: 711
score: 98.32371012369792
patch: return bucket . value ;
rank: 711
score: 98.28916422526042
patch: return * ~ text ;
rank: 712
score: 98.36036173502605
patch: return |= ~ position ;
rank: 712
score: 98.31844075520833
patch: return return position ; try
rank: 712
score: 98.28765869140625
patch: += ALL _ IDS ;
rank: 712
score: 98.2529805501302
patch: return position - size ;
rank: 713
score: 98.42965262276786
patch: return > 0 + length ;
rank: 713
score: 98.38316999162946
patch: return ( int position position ;
rank: 713
score: 98.31975446428571
patch: return != null ? position ;
rank: 713
score: 98.31434326171875
patch: throw ~ position ;
rank: 713
score: 98.25181361607143
patch: return position + $STRING$ ; ;
rank: 714
score: 98.37914167131696
patch: if ( [ 0 ] ;
rank: 714
score: 98.37538364955357
patch: return - ~ position ) ;
rank: 714
score: 98.3079325358073
patch: return this + position ;
rank: 714
score: 98.25123087565105
patch: return Boolean . FALSE ;
rank: 715
score: 98.4128662109375
patch: return ; 1 ;
rank: 715
score: 98.37499128069196
patch: return return position ~ 1 ;
rank: 715
score: 98.35848563058036
patch: return / - position ; }
rank: 715
score: 98.28468831380208
patch: return , position ) ;
rank: 715
score: 98.25050571986607
patch: ~ position ; return start ;
rank: 716
score: 98.42660958426339
patch: return & this . position ;
rank: 716
score: 98.41129150390626
patch: return return false ;
rank: 716
score: 98.37551443917411
patch: } else { return start ;
rank: 716
score: 98.35840715680804
patch: return / * position ; }
rank: 716
score: 98.30091349283855
patch: return ~ 1 ; position
rank: 716
score: 98.28160400390625
patch: return + 1 ;
rank: 717
score: 98.52952357700893
patch: return position ? position : position
rank: 717
score: 98.42619105747768
patch: return >= 0 . 0 ;
rank: 717
score: 98.41116768973214
patch: catch ~ ; return position ;
rank: 717
score: 98.37461344401042
patch: return return * 0 ;
rank: 717
score: 98.37450299944196
patch: return ~ ( ~ position ;
rank: 717
score: 98.24830118815105
patch: return max ~ position ;
rank: 718
score: 98.37068394252232
patch: return - ~ position ; ;
rank: 718
score: 98.35392543247768
patch: return ] . ~ position ;
rank: 718
score: 98.24630301339286
patch: return - 1 + start ;
rank: 719
score: 98.42497907366071
patch: return ( long ) position ;
rank: 719
score: 98.37374441964286
patch: return ; . ; , ;
rank: 719
score: 98.29351806640625
patch: return new int position ;
rank: 719
score: 98.2786865234375
patch: return position + TRUE ;
rank: 720
score: 98.42418561662946
patch: return - - - length ;
rank: 720
score: 98.4093526204427
patch: return ; int start ;
rank: 720
score: 98.37331136067708
patch: return ; . length ;
rank: 720
score: 98.36961146763393
patch: return ~ 1 * position ;
rank: 720
score: 98.3498779296875
patch: return / true ;
rank: 720
score: 98.27530924479167
patch: return - 1 ) ;
rank: 721
score: 98.3718505859375
patch: return * $NUMBER$ ;
rank: 721
score: 98.36932373046875
patch: return ~ position % $NUMBER$ ;
rank: 721
score: 98.34976632254464
patch: return * position ; } }
rank: 721
score: 98.29092407226562
patch: return position ; for position
rank: 721
score: 98.24242146809895
patch: final return ~ position ;
rank: 722
score: 98.42062813895089
patch: return * - - $NUMBER$ ;
rank: 722
score: 98.40317789713542
patch: / ] return position ;
rank: 722
score: 98.2906494140625
patch: return position ; String position
rank: 722
score: 98.27437337239583
patch: } return ~ false ;
rank: 723
score: 98.4194844563802
patch: return Integer . 1 ;
rank: 723
score: 98.40237862723214
patch: return ; int += position ;
rank: 723
score: 98.36800711495536
patch: return ; , position , ;
rank: 723
score: 98.33524576822917
patch: return else { else {
rank: 723
score: 98.29468383789063
patch: return ~ str ;
rank: 723
score: 98.28663126627605
patch: return ~ position ; public
rank: 723
score: 98.24213256835938
patch: return position ~ ;
rank: 724
score: 98.28872680664062
patch: return ) ~ position ;
rank: 724
score: 98.28622436523438
patch: return position + - ;
rank: 724
score: 98.27347819010417
patch: return ~ ~ str ;
rank: 724
score: 98.24143473307292
patch: final ~ ~ position ;
rank: 725
score: 98.39791870117188
patch: return ; int value ;
rank: 725
score: 98.36662946428571
patch: return return - 1 position ;
rank: 725
score: 98.36456298828125
patch: if ( ~ 1 position ;
rank: 725
score: 98.28299967447917
patch: return ~ position ; start
rank: 725
score: 98.24119059244792
patch: return position ~ name ;
rank: 726
score: 98.41803850446429
patch: return >= position + 1 ;
rank: 726
score: 98.390869140625
patch: return return - false ;
rank: 726
score: 98.36359514508929
patch: / * * * return ;
rank: 726
score: 98.33025512695312
patch: return false ; }
rank: 726
score: 98.2838643391927
patch: return text . ) ;
rank: 726
score: 98.28297932942708
patch: return ~ ? position ;
rank: 726
score: 98.26072184244792
patch: return position + time ;
rank: 727
score: 98.52057756696429
patch: return position ? ~ 0 ;
rank: 727
score: 98.41666085379464
patch: return >= 0 + $STRING$ ;
rank: 727
score: 98.3907470703125
patch: throw new position position ;
rank: 727
score: 98.36621965680804
patch: return return ~ ~ $NUMBER$ ;
rank: 727
score: 98.36336844308036
patch: / / * * * /
rank: 727
score: 98.23961530412946
patch: if ( position <= 0 )
rank: 728
score: 98.41466413225446
patch: return > 0 - 1 ;
rank: 728
score: 98.3892822265625
patch: else if ~ position position ;
rank: 728
score: 98.36615862165179
patch: return - position | position ;
rank: 728
score: 98.32857259114583
patch: return + position ; }
rank: 728
score: 98.27958170572917
patch: return position : false ;
rank: 729
score: 98.4128926595052
patch: return size + 1 ;
rank: 729
score: 98.38778686523438
patch: int ~ position position ;
rank: 729
score: 98.36026611328126
patch: } return 1 ;
rank: 729
score: 98.27323404947917
patch: return new * position ;
rank: 730
score: 98.41153390066964
patch: return == 0 + 1 ;
rank: 730
score: 98.36537388392857
patch: ~ $NUMBER$ ; return position ;
rank: 730
score: 98.35987345377605
patch: if ( ~ $NUMBER$ ;
rank: 730
score: 98.3226318359375
patch: return ] + position ;
rank: 730
score: 98.27613830566406
patch: return str ;
rank: 730
score: 98.2544657389323
patch: } return ~ true ;
rank: 730
score: 98.23488943917411
patch: return position ? position : ;
rank: 731
score: 98.41090611049107
patch: return == 0 : position ;
rank: 731
score: 98.3646240234375
patch: return position - start 1 ;
rank: 731
score: 98.32242838541667
patch: return -= position ; }
rank: 731
score: 98.27309163411458
patch: return ! ~ position ;
rank: 731
score: 98.25171915690105
patch: result ~ ~ position ;
rank: 731
score: 98.23484584263393
patch: return position * / position ;
rank: 732
score: 98.51164027622768
patch: return - $NUMBER$ : position ;
rank: 732
score: 98.37790352957589
patch: int * ; return position ;
rank: 732
score: 98.36427525111607
patch: return ~ position / * /
rank: 732
score: 98.35858154296875
patch: if return ~ $NUMBER$ ;
rank: 732
score: 98.25112915039062
patch: ~ position + 0 ;
rank: 732
score: 98.23269217354911
patch: if ( text != null )
rank: 733
score: 98.40910121372768
patch: return ~ position ? 0 ;
rank: 733
score: 98.37738037109375
patch: int ~ - position ;
rank: 733
score: 98.36288016183036
patch: return - 1 - 1 ;
rank: 733
score: 98.31048583984375
patch: return / ~ position ;
rank: 733
score: 98.26875813802083
patch: return position ~ bucket ;
rank: 733
score: 98.26183064778645
patch: return position ; int position
rank: 733
score: 98.2509256998698
patch: return - * position ;
rank: 733
score: 98.23081752232143
patch: int ~ position = position ;
rank: 734
score: 98.40850830078125
patch: return >> 0 ;
rank: 734
score: 98.26713053385417
patch: return return ~ bucket ;
rank: 734
score: 98.24924723307292
patch: return * ~ $STRING$ ;
rank: 734
score: 98.23020426432292
patch: final position ~ position ;
rank: 735
score: 98.50911167689732
patch: return ~ bucket . parse ;
rank: 735
score: 98.40822056361607
patch: return <= position + 1 ;
rank: 735
score: 98.37457275390625
patch: return - $NUMBER$ ; ;
rank: 735
score: 98.35191127232143
patch: return ; , 0 ( ;
rank: 735
score: 98.3080546061198
patch: return >= 1 ] ;
rank: 735
score: 98.25360107421875
patch: return position ; for ;
rank: 735
score: 98.22789510091145
patch: assert position < position ;
rank: 736
score: 98.40763346354167
patch: return * - length ;
rank: 736
score: 98.37091064453125
patch: int ~ ~ position ;
rank: 736
score: 98.25350952148438
patch: return position ; / /
rank: 736
score: 98.22701009114583
patch: try { ~ position ;
rank: 737
score: 98.50758579799107
patch: return += position + 1 ;
rank: 737
score: 98.4072998046875
patch: return & true ;
rank: 737
score: 98.34688313802083
patch: return ; . read ;
rank: 737
score: 98.22667439778645
patch: * / return position ;
rank: 738
score: 98.40703125
patch: return & 1 ;
rank: 738
score: 98.37033517020089
patch: / * ] += position ;
rank: 738
score: 98.35871233258929
patch: return position return ~ position ;
rank: 738
score: 98.34556361607143
patch: if ( ; , position ;
rank: 738
score: 98.302490234375
patch: return = ~ position ;
rank: 738
score: 98.26139322916667
patch: return text . start ;
rank: 739
score: 98.50428118024554
patch: return text . length ( )
rank: 739
score: 98.3699951171875
patch: else return ~ 0 ;
rank: 739
score: 98.35745675223214
patch: return ~ position % position ;
rank: 739
score: 98.30179850260417
patch: return ~ ~ ) ;
rank: 739
score: 98.26064046223958
patch: return position . start ;
rank: 739
score: 98.24273681640625
patch: synchronized ( 0 ) {
rank: 740
score: 98.40607561383929
patch: return * position + $STRING$ ;
rank: 740
score: 98.36838204520089
patch: else { catch ~ position ;
rank: 740
score: 98.34286063058036
patch: if ( value == null ;
rank: 740
score: 98.23875427246094
patch: } ) ;
rank: 741
score: 98.40597098214286
patch: return * $NUMBER$ . 0 ;
rank: 741
score: 98.36830647786458
patch: return return ~ false ;
rank: 741
score: 98.35645403180804
patch: return ~ position return position ;
rank: 741
score: 98.34285888671874
patch: / * * /
rank: 741
score: 98.23846435546875
patch: return ~ / 1 ;
rank: 741
score: 98.23633829752605
patch: return ~ 1 ; /
rank: 742
score: 98.25315348307292
patch: } return ~ bucket ;
rank: 742
score: 98.23692830403645
patch: result = - 1 ;
rank: 742
score: 98.22813924153645
patch: return ~ 1 ; set
rank: 742
score: 98.2237548828125
patch: super . ~ position ;
rank: 743
score: 98.40465436662946
patch: return / 0 ? 0 ;
rank: 743
score: 98.36473592122395
patch: return return 1 position ;
rank: 743
score: 98.340576171875
patch: else { / * * /
rank: 743
score: 98.29859008789063
patch: return << $NUMBER$ ;
rank: 743
score: 98.251953125
patch: return ] ~ position ;
rank: 743
score: 98.22566731770833
patch: return return position ; else
rank: 743
score: 98.2198994954427
patch: return byte CaMeL Value ;
rank: 744
score: 98.404052734375
patch: return - false ;
rank: 744
score: 98.36423746744792
patch: return ~ return $NUMBER$ ;
rank: 744
score: 98.29838053385417
patch: return ~ position true ;
rank: 744
score: 98.25063069661458
patch: return bucket . position ;
rank: 744
score: 98.23573811848958
patch: String str = null ;
rank: 745
score: 98.3611348470052
patch: else return position position ;
rank: 745
score: 98.35224260602679
patch: return ~ $NUMBER$ ~ $NUMBER$ ;
rank: 745
score: 98.339208984375
patch: if ~ position ;
rank: 745
score: 98.29313151041667
patch: return * position ) ;
rank: 745
score: 98.25023396809895
patch: return int = position ;
rank: 745
score: 98.23463134765625
patch: return - ) ;
rank: 745
score: 98.21602376302083
patch: return ~ position ; if
rank: 745
score: 98.21266682942708
patch: int max = position ;
rank: 746
score: 98.3607686360677
patch: return value ~ position ;
rank: 746
score: 98.33892822265625
patch: return 0 + 1 ;
rank: 746
score: 98.29239908854167
patch: return - 0 ; }
rank: 746
score: 98.24953206380208
patch: return / += position ;
rank: 746
score: 98.21535237630208
patch: return position position ; int
rank: 747
score: 98.49448067801339
patch: return - 1 : position ;
rank: 747
score: 98.40273611886161
patch: return / 1 . 0 ;
rank: 747
score: 98.36000569661458
patch: return - ~ 0 ;
rank: 747
score: 98.33514404296875
patch: / * * * ;
rank: 747
score: 98.23389689127605
patch: return * ~ true ;
rank: 747
score: 98.20829264322917
patch: return Math . max ;
rank: 748
score: 98.34825788225446
patch: if ( position > 0 ;
rank: 748
score: 98.29173787434895
patch: return long CaMeL Value ;
rank: 748
score: 98.214111328125
patch: return ~ position ; long
rank: 748
score: 98.20768229166667
patch: assert position <= position ;
rank: 749
score: 98.48722621372768
patch: return position + * 1 ;
rank: 749
score: 98.40107727050781
patch: return break ;
rank: 749
score: 98.35763549804688
patch: } return position ; ;
rank: 749
score: 98.29142456054687
patch: return ~ start ;
rank: 749
score: 98.21021525065105
patch: return ~ position ; last
rank: 749
score: 98.20679728190105
patch: assert position == position ;
rank: 750
score: 98.40006801060268
patch: return int == ~ position ;
rank: 750
score: 98.35606166294643
patch: else { append ~ position ;
rank: 750
score: 98.28929646809895
patch: return ^ ~ position ;
rank: 750
score: 98.20670572916667
patch: return position ; } else
rank: 750
score: 98.20273844401042
patch: return position >> 1 ;
rank: 751
score: 98.48269653320312
patch: return text + 0 ;
rank: 751
score: 98.35443115234375
patch: catch return ~ position ;
rank: 751
score: 98.28420003255208
patch: return == ~ position ;
rank: 751
score: 98.20196533203125
patch: return position ; if position
rank: 752
score: 98.39722551618304
patch: return * - - $STRING$ ;
rank: 752
score: 98.3299560546875
patch: return * + 1 ;
rank: 752
score: 98.28326416015625
patch: return & position ; }
rank: 752
score: 98.22688598632813
patch: return ~ ) ;
rank: 752
score: 98.20111083984375
patch: return position > 0 ;
rank: 753
score: 98.396728515625
patch: return > 1 + position ;
rank: 753
score: 98.35056559244792
patch: return return - ) ;
rank: 753
score: 98.32825724283855
patch: return ; . position ;
rank: 753
score: 98.2825215657552
patch: return ~ ~ start ;
rank: 753
score: 98.2296142578125
patch: return $NUMBER$ ~ position ;
rank: 753
score: 98.1954345703125
patch: return get ~ position ;
rank: 754
score: 98.48185511997768
patch: return ~ text + position ;
rank: 754
score: 98.34842936197917
patch: return ( return position ;
rank: 754
score: 98.28040161132813
patch: return |= position ;
rank: 754
score: 98.22908528645833
patch: finally { return bucket ;
rank: 754
score: 98.22451782226562
patch: return % - 1 ;
rank: 754
score: 98.19300333658855
patch: return position position ; }
rank: 755
score: 98.48104858398438
patch: return text + position ;
rank: 755
score: 98.39274379185268
patch: return >= 1 + 1 ;
rank: 755
score: 98.34075927734375
patch: return position * $NUMBER$ position ;
rank: 755
score: 98.32525634765625
patch: if return 1 ;
rank: 755
score: 98.279296875
patch: return << 1 ; }
rank: 755
score: 98.22397867838542
patch: return System . 0 ;
rank: 755
score: 98.19455973307292
patch: return position ~ text ;
rank: 755
score: 98.18517049153645
patch: return return position ; int
rank: 756
score: 98.34707205636161
patch: return return ~ 0 ; ;
rank: 756
score: 98.33872767857143
patch: return - position + start ;
rank: 756
score: 98.32340494791667
patch: return * return 0 ;
rank: 756
score: 98.2777811686198
patch: return -- position ; }
rank: 756
score: 98.22332763671875
patch: String str = position ;
rank: 756
score: 98.18430582682292
patch: return - + position ;
rank: 757
score: 98.39110456194196
patch: return >= 0 - 0 ;
rank: 757
score: 98.34555053710938
patch: return position position position ;
rank: 757
score: 98.33631243024554
patch: return position - new Integer ;
rank: 757
score: 98.27662353515625
patch: return : position ;
rank: 757
score: 98.22277221679687
patch: result ~ position ;
rank: 757
score: 98.18290201822917
patch: return ~ 1 ; throw
rank: 758
score: 98.27650960286458
patch: return < ~ position ;
rank: 758
score: 98.22269897460937
patch: } return $NUMBER$ ;
rank: 758
score: 98.22159830729167
patch: return Boolean . 1 ;
rank: 758
score: 98.1917724609375
patch: return position ~ matches ;
rank: 759
score: 98.33425467354911
patch: return ~ position ~ start ;
rank: 759
score: 98.32089233398438
patch: return 0 * 0 ;
rank: 759
score: 98.27585856119792
patch: return ~ length ; }
rank: 759
score: 98.22159830729167
patch: return ( null ) ;
rank: 759
score: 98.18911743164062
patch: return position ~ size ;
rank: 760
score: 98.33201381138393
patch: if ( position >= position ;
rank: 760
score: 98.31980387369792
patch: return * * position /
rank: 760
score: 98.22149658203125
patch: return / / 0 ;
rank: 760
score: 98.18723551432292
patch: return position position ; ;
rank: 760
score: 98.17299397786458
patch: return ~ ! position ;
rank: 761
score: 98.33982631138393
patch: int ~ position position position ;
rank: 761
score: 98.31874593098958
patch: } return return 0 ;
rank: 761
score: 98.22113037109375
patch: } ~ position ;
rank: 761
score: 98.2179667154948
patch: return catch ( $STRING$ ;
rank: 761
score: 98.18272908528645
patch: final ; return position ;
rank: 761
score: 98.1700948079427
patch: return ~ position ; to
rank: 762
score: 98.32999093191964
patch: return ~ ( position - ;
rank: 762
score: 98.31725463867187
patch: return ~ ~ ;
rank: 762
score: 98.21841430664062
patch: return ~ position + }
rank: 762
score: 98.1826883951823
patch: return position , position ;
rank: 762
score: 98.16800944010417
patch: position ; return position ;
rank: 763
score: 98.33759416852679
patch: sb . append ~ position ;
rank: 763
score: 98.32972063337054
patch: message = position + position ;
rank: 763
score: 98.31637573242188
patch: return / * * /
rank: 763
score: 98.18222045898438
patch: String position = position ;
rank: 764
score: 98.2662109375
patch: return ) ; }
rank: 764
score: 98.21529134114583
patch: return * ( position ;
rank: 764
score: 98.1802266438802
patch: assert position > position ;
rank: 764
score: 98.16664632161458
patch: return - position ; }
rank: 765
score: 98.32652936662946
patch: return ~ ~ 1 ; ;
rank: 765
score: 98.31392415364583
patch: else { return ; }
rank: 765
score: 98.26204427083333
patch: return && ~ position ;
rank: 765
score: 98.17922973632812
patch: return 1 ~ position ;
rank: 765
score: 98.16659545898438
patch: return position position ; /
rank: 766
score: 98.38175746372768
patch: return <= 0 + $STRING$ ;
rank: 766
score: 98.3349609375
patch: return ; - position ;
rank: 766
score: 98.26151529947917
patch: return + position ) ;
rank: 766
score: 98.21372477213542
patch: return values . length ;
rank: 766
score: 98.20379638671875
patch: return $STRING$ + position ;
rank: 766
score: 98.17739868164062
patch: return length + position ;
rank: 766
score: 98.16597493489583
patch: return position ; String ;
rank: 767
score: 98.46247209821429
patch: ++ position ; return position ;
rank: 767
score: 98.37929280598958
patch: return new int length ;
rank: 767
score: 98.20371500651042
patch: return position . ) ;
rank: 767
score: 98.16885375976562
patch: return position << position ;
rank: 768
score: 98.46241978236607
patch: return * * / * /
rank: 768
score: 98.37898763020833
patch: return & 0 position ;
rank: 768
score: 98.3343505859375
patch: return - $STRING$ position ;
rank: 768
score: 98.26043701171875
patch: return append ~ position ;
rank: 768
score: 98.2128397623698
patch: return += - 1 ;
rank: 768
score: 98.1685791015625
patch: return float CaMeL Value ;
rank: 768
score: 98.16497802734375
patch: return position ; } int
rank: 769
score: 98.46205647786458
patch: return position : true ;
rank: 769
score: 98.37813895089286
patch: return return position + $STRING$ ;
rank: 769
score: 98.33395385742188
patch: else return ~ $STRING$ ;
rank: 769
score: 98.26021321614583
patch: return size ( ) ;
rank: 769
score: 98.21277872721355
patch: String str = text .
rank: 769
score: 98.16853841145833
patch: return position + now ;
rank: 769
score: 98.16431681315105
patch: ~ position ; return ;
rank: 770
score: 98.37789481026786
patch: return >= 0 + length ;
rank: 770
score: 98.25413004557292
patch: return *= ~ position ;
rank: 770
score: 98.21016438802083
patch: else { throw 1 ;
rank: 770
score: 98.16309611002605
patch: ~ ; return position ;
rank: 771
score: 98.32883707682292
patch: finally { return 0 ;
rank: 771
score: 98.31598772321429
patch: throw new Error ( position ;
rank: 771
score: 98.25284830729167
patch: return trim ( ) ;
rank: 771
score: 98.20828247070312
patch: return / + 0 ;
rank: 771
score: 98.16429646809895
patch: return position >= position ;
rank: 772
score: 98.32736206054688
patch: return position ; ; ;
rank: 772
score: 98.30713907877605
patch: return ~ * $NUMBER$ ;
rank: 772
score: 98.250732421875
patch: if ( false ) {
rank: 772
score: 98.16317749023438
patch: double position = position ;
rank: 772
score: 98.1602783203125
patch: return new = position ;
rank: 773
score: 98.37119838169643
patch: return if [ 0 ] ;
rank: 773
score: 98.32255045572917
patch: } catch ~ $STRING$ ;
rank: 773
score: 98.24937947591145
patch: return >> : position ;
rank: 773
score: 98.206884765625
patch: result += position ;
rank: 773
score: 98.16066487630208
patch: return position ~ read ;
rank: 773
score: 98.15890502929688
patch: return position ; } /
rank: 774
score: 98.3218994140625
patch: return return ~ ) ;
rank: 774
score: 98.30623372395833
patch: } return return 1 ;
rank: 774
score: 98.157958984375
patch: return ~ ( 1 ;
rank: 775
score: 98.37070138113839
patch: return bucket . ~ position ;
rank: 775
score: 98.3203837076823
patch: else { return ~ ;
rank: 775
score: 98.30584716796875
patch: if return - 1 ;
rank: 775
score: 98.24013264973958
patch: return else return ) ;
rank: 775
score: 98.1573486328125
patch: return position & $NUMBER$ ;
rank: 775
score: 98.15638224283855
patch: return ~ 1 ; int
rank: 776
score: 98.4458516438802
patch: return / * / /
rank: 776
score: 98.20338948567708
patch: } } } ) ;
rank: 776
score: 98.19370727539062
patch: return position + }
rank: 777
score: 98.36689976283482
patch: bucket . return ~ position ;
rank: 777
score: 98.31144496372768
patch: return Math . ~ position ;
rank: 777
score: 98.30197143554688
patch: return 1 + 0 ;
rank: 777
score: 98.20308430989583
patch: return Math . 1 ;
rank: 777
score: 98.19144694010417
patch: return position + ] ;
rank: 777
score: 98.15287272135417
patch: return position position ; else
rank: 778
score: 98.365478515625
patch: return - + 0 ;
rank: 778
score: 98.3099365234375
patch: buffer . append ( position ;
rank: 778
score: 98.2974853515625
patch: } return * $NUMBER$ ;
rank: 778
score: 98.23189290364583
patch: { return ~ position ;
rank: 778
score: 98.20155843098958
patch: result = - 0 ;
rank: 778
score: 98.1524149576823
patch: int ~ - 1 ;
rank: 779
score: 98.44047328404018
patch: return ( position + 0 )
rank: 779
score: 98.3631591796875
patch: return length + 0 ;
rank: 779
score: 98.31498209635417
patch: return * int position ;
rank: 779
score: 98.22960408528645
patch: return - $NUMBER$ ; }
rank: 779
score: 98.14961547851563
patch: position return position ;
rank: 780
score: 98.36250523158482
patch: return ~ ~ ALL _ IDS
rank: 780
score: 98.31034342447917
patch: else return - position ;
rank: 780
score: 98.28940836588542
patch: return false + 0 ;
rank: 780
score: 98.189208984375
patch: return this . $STRING$ ;
rank: 780
score: 98.14671834309895
patch: return chars . length ;
rank: 781
score: 98.35951741536458
patch: return int - 1 ;
rank: 781
score: 98.28873697916667
patch: return 0 ; return ;
rank: 781
score: 98.19871012369792
patch: else { return text ;
rank: 781
score: 98.1887715657552
patch: return text . max ;
rank: 781
score: 98.14376831054688
patch: final int ~ position ;
rank: 782
score: 98.43199462890625
patch: return * / ;
rank: 782
score: 98.34823608398438
patch: return / null ;
rank: 782
score: 98.3076883951823
patch: / ++ return position ;
rank: 782
score: 98.30720738002232
patch: if ( position == 1 )
rank: 782
score: 98.28719482421874
patch: return ~ max ;
rank: 782
score: 98.1981913248698
patch: return ~ ( $STRING$ ;
rank: 783
score: 98.30672781808036
patch: do { return ~ position ;
rank: 783
score: 98.22300211588542
patch: return ~ position . ;
rank: 783
score: 98.19814046223958
patch: else return - 0 ;
rank: 783
score: 98.18693033854167
patch: return ~ position ? position
rank: 783
score: 98.14213053385417
patch: return position ; equals ;
rank: 784
score: 98.3435770670573
patch: return - - ) ;
rank: 784
score: 98.30245535714286
patch: position = position - 1 ;
rank: 784
score: 98.28387451171875
patch: return ~ * 1 ;
rank: 784
score: 98.19810791015625
patch: throw new $STRING$ ;
rank: 784
score: 98.14097086588542
patch: throw position - 1 ;
rank: 785
score: 98.3028564453125
patch: if ~ ~ position ;
rank: 785
score: 98.28806559244792
patch: return size - position ;
rank: 785
score: 98.28187052408855
patch: return 0 + start ;
rank: 785
score: 98.2219746907552
patch: return / false ; }
rank: 785
score: 98.19801839192708
patch: return $NUMBER$ . 0 ;
rank: 785
score: 98.18483479817708
patch: return % ~ position ;
rank: 785
score: 98.13930257161458
patch: int return ~ position ;
rank: 785
score: 98.13544921875
patch: return position + ;
rank: 786
score: 98.34299926757812
patch: return >> 1 ;
rank: 786
score: 98.1841328938802
patch: return position + min ;
rank: 786
score: 98.13344319661458
patch: if ( ~ position )
rank: 787
score: 98.34029541015624
patch: return * $STRING$ ;
rank: 787
score: 98.2984619140625
patch: return ; - $STRING$ ;
rank: 787
score: 98.21946207682292
patch: return int += position ;
rank: 787
score: 98.13393147786458
patch: return ~ 1 ; System
rank: 787
score: 98.13181559244792
patch: return position - time ;
rank: 788
score: 98.42306518554688
patch: return >> + 1 ;
rank: 788
score: 98.33889770507812
patch: return >= - 1 ;
rank: 788
score: 98.28352864583333
patch: return ~ ~ max ;
rank: 788
score: 98.21854654947917
patch: return ~ ~ time ;
rank: 788
score: 98.19753011067708
patch: result return ~ position ;
rank: 788
score: 98.13119506835938
patch: return position + break ;
rank: 789
score: 98.42034040178571
patch: return ~ position ? position :
rank: 789
score: 98.29539998372395
patch: throw new $STRING$ position ;
rank: 789
score: 98.26931762695312
patch: return 0 - length ;
rank: 789
score: 98.2168477376302
patch: return / * false ;
rank: 789
score: 98.13013712565105
patch: return position ~ ) ;
rank: 790
score: 98.26804606119792
patch: return $NUMBER$ * position ;
rank: 790
score: 98.21641031901042
patch: return ~ ~ size ;
rank: 790
score: 98.1939697265625
patch: return ~ ~ text .
rank: 790
score: 98.17861938476562
patch: return ~ this ;
rank: 790
score: 98.12778727213542
patch: long max = position ;
rank: 790
score: 98.12644449869792
patch: throw ~ - 1 ;
rank: 791
score: 98.29292805989583
patch: return text ~ position ;
rank: 791
score: 98.2675272623698
patch: return ; return false ;
rank: 791
score: 98.215380859375
patch: return ~ size ;
rank: 791
score: 98.19309488932292
patch: return Long . 0 ;
rank: 791
score: 98.12593587239583
patch: return ~ 1 ; boolean
rank: 792
score: 98.40511067708333
patch: return position ? position }
rank: 792
score: 98.32737223307292
patch: return >> - 0 ;
rank: 792
score: 98.29075113932292
patch: result = return position ;
rank: 792
score: 98.21518961588542
patch: return now + position ;
rank: 792
score: 98.19154866536458
patch: return & - $NUMBER$ ;
rank: 792
score: 98.12509155273438
patch: return position ; } position
rank: 793
score: 98.32627360026042
patch: return - - true ;
rank: 793
score: 98.29015096028645
patch: return ~ return $STRING$ ;
rank: 793
score: 98.21469116210938
patch: return time + position ;
rank: 793
score: 98.1746114095052
patch: return position + date ;
rank: 793
score: 98.12331136067708
patch: return position ; boolean position
rank: 793
score: 98.1173095703125
patch: return short CaMeL Value ;
rank: 794
score: 98.2885030110677
patch: finally { ~ position ;
rank: 794
score: 98.26096598307292
patch: / * * return ;
rank: 794
score: 98.21444091796874
patch: return / position ;
rank: 794
score: 98.12234497070312
patch: return return position ; /
rank: 795
score: 98.28623453776042
patch: return ~ ; ) ;
rank: 795
score: 98.26638793945312
patch: return ~ ( Integer ;
rank: 795
score: 98.12227376302083
patch: return ~ $NUMBER$ ; }
rank: 796
score: 98.31492309570312
patch: return -- 0 ;
rank: 796
score: 98.28600056966145
patch: return return + 1 ;
rank: 796
score: 98.25804138183594
patch: else return ;
rank: 796
score: 98.11461385091145
patch: return compare CaMeL To ;
rank: 797
score: 98.3939717610677
patch: return * ++ position ;
rank: 797
score: 98.28550211588542
patch: return position ; try {
rank: 797
score: 98.26479085286458
patch: return position . length ;
rank: 797
score: 98.25778198242188
patch: return ; ;
rank: 797
score: 98.207568359375
patch: return % position ;
rank: 797
score: 98.12166137695313
patch: position ~ position ;
rank: 797
score: 98.11114501953125
patch: final position |= position ;
rank: 798
score: 98.28475952148438
patch: return list ~ position ;
rank: 798
score: 98.26380157470703
patch: return - ;
rank: 798
score: 98.25765991210938
patch: } return * 0 ;
rank: 798
score: 98.20692952473958
patch: return else return false ;
rank: 798
score: 98.18460083007812
patch: return ( text ) ;
rank: 798
score: 98.11081949869792
patch: dim . return position ;
rank: 799
score: 98.28399658203125
patch: return return return $NUMBER$ ;
rank: 799
score: 98.2616475423177
patch: assert position > 0 ;
rank: 799
score: 98.25677490234375
patch: return * * ~ ;
rank: 799
score: 98.11060587565105
patch: return position - read ;
rank: 800
score: 98.30804443359375
patch: return for CaMeL Name ;
rank: 800
score: 98.17690022786458
patch: return Integer . 0 ;
rank: 800
score: 98.1181640625
patch: return new position position ;
rank: 800
score: 98.10799153645833
patch: return position * $STRING$ ;
rank: 801
score: 98.28299967447917
patch: return return + 0 ;
rank: 801
score: 98.25513712565105
patch: } return * position ;
rank: 801
score: 98.16759490966797
patch: throw 0 ;
rank: 801
score: 98.10604858398438
patch: do { return position ;
rank: 802
score: 98.38675944010417
patch: return / + 1 ;
rank: 802
score: 98.30560302734375
patch: return
rank: 802
score: 98.28054809570312
patch: else return 0 ;
rank: 802
score: 98.20579020182292
patch: return ) + position ;
rank: 802
score: 98.17357177734375
patch: return ~ text .
rank: 802
score: 98.11623128255208
patch: return ( ~ position ;
rank: 802
score: 98.10532633463542
patch: return super . append ;
rank: 803
score: 98.25489298502605
patch: return ( * 0 ;
rank: 803
score: 98.20538330078125
patch: return | ~ position ;
rank: 804
score: 98.27808634440105
patch: else return - $STRING$ ;
rank: 804
score: 98.11111450195312
patch: return position ; ; /
rank: 805
score: 98.30349731445312
patch: return length + $STRING$ ;
rank: 805
score: 98.25314331054688
patch: return * ? position ;
rank: 806
score: 98.27538045247395
patch: return return $STRING$ ; ;
rank: 806
score: 98.25277709960938
patch: return return * 1 ;
rank: 806
score: 98.16122436523438
patch: result = ~ 0 ;
rank: 806
score: 98.11102294921875
patch: return ~ 1 ; final
rank: 807
score: 98.29542032877605
patch: return String . 0 ;
rank: 807
score: 98.23714192708333
patch: assert text != null ;
rank: 807
score: 98.1502685546875
patch: return ~ ( text .
rank: 807
score: 98.11090087890625
patch: return position ; ~ ;
rank: 807
score: 98.09885660807292
patch: return position - str ;
rank: 808
score: 98.27347819010417
patch: return ~ $STRING$ ; ;
rank: 808
score: 98.2014892578125
patch: return ^ position ;
rank: 808
score: 98.16158040364583
patch: return this . 1 ;
rank: 808
score: 98.10508728027344
patch: return position position
rank: 808
score: 98.09768676757812
patch: return position >> $NUMBER$ ;
rank: 809
score: 98.27077229817708
patch: return return return $STRING$ ;
rank: 809
score: 98.25145467122395
patch: return ~ $NUMBER$ + ;
rank: 809
score: 98.23135375976562
patch: return - position ] ;
rank: 809
score: 98.1995849609375
patch: return position : ) ;
rank: 809
score: 98.14281209309895
patch: return ALL _ IDS }
rank: 809
score: 98.10402425130208
patch: return position ; System ;
rank: 810
score: 98.19854736328125
patch: return ++ position ; }
rank: 810
score: 98.10277303059895
patch: return - 1 ; try
rank: 811
score: 98.24839274088542
patch: return out . length ;
rank: 811
score: 98.2295430501302
patch: return ~ $NUMBER$ * /
rank: 811
score: 98.19753011067708
patch: return >> + position ;
rank: 811
score: 98.15685017903645
patch: return return position ) ;
rank: 811
score: 98.13859049479167
patch: synchronized ( this ) {
rank: 812
score: 98.29129028320312
patch: return int - 0 ;
rank: 812
score: 98.267822265625
patch: catch ( $STRING$ position ;
rank: 812
score: 98.10147094726562
patch: return position ; } throw
rank: 812
score: 98.09279378255208
patch: int position = 0 ;
rank: 813
score: 98.3509012858073
patch: return * / / /
rank: 813
score: 98.2667948404948
patch: return in ~ position ;
rank: 813
score: 98.09246826171875
patch: return position ~ false ;
rank: 814
score: 98.26664225260417
patch: return return ( position ;
rank: 814
score: 98.24013264973958
patch: return $NUMBER$ - position ;
rank: 814
score: 98.15024820963542
patch: return this . false ;
rank: 814
score: 98.09933471679688
patch: return position ; / ;
rank: 814
score: 98.08941650390625
patch: return null ~ position ;
rank: 815
score: 98.28731079101563
patch: return ++ 0 ;
rank: 815
score: 98.26603190104167
patch: finally { return false ;
rank: 815
score: 98.24008178710938
patch: return position - value ;
rank: 815
score: 98.20609537760417
patch: return position / * /
rank: 815
score: 98.1348164876302
patch: return text . substring (
rank: 815
score: 98.0894063313802
patch: return position += position ;
rank: 816
score: 98.28658040364583
patch: return + - 0 ;
rank: 816
score: 98.26570638020833
patch: return finally + position ;
rank: 816
score: 98.2400614420573
patch: return ; , * /
rank: 816
score: 98.14990234375
patch: return position . text ;
rank: 816
score: 98.12012939453125
patch: return ~ parse ;
rank: 816
score: 98.09712727864583
patch: return return position ; position
rank: 816
score: 98.08878580729167
patch: ~ position - 1 ;
rank: 817
score: 98.28629760742187
patch: return > 0 ;
rank: 817
score: 98.26517740885417
patch: return / return position ;
rank: 817
score: 98.22948201497395
patch: else if return position ;
rank: 817
score: 98.11698150634766
patch: throw null ;
rank: 817
score: 98.08638509114583
patch: return position + chars ;
rank: 818
score: 98.26442464192708
patch: return return / 1 ;
rank: 818
score: 98.20485432942708
patch: return capacity - 1 ;
rank: 818
score: 98.11407470703125
patch: return FALSE ;
rank: 818
score: 98.08457438151042
patch: return position + trim ;
rank: 819
score: 98.28358968098958
patch: return - - false ;
rank: 819
score: 98.26420084635417
patch: } int ~ position ;
rank: 819
score: 98.2291971842448
patch: return ; . ~ ;
rank: 819
score: 98.18857828776042
patch: return ~ position : ;
rank: 819
score: 98.081298828125
patch: dim . ~ position ;
rank: 820
score: 98.3448994954427
patch: return text + null ;
rank: 820
score: 98.28304036458333
patch: return max + 1 ;
rank: 820
score: 98.14654541015625
patch: return - ++ position ;
rank: 820
score: 98.10824584960938
patch: else { try {
rank: 820
score: 98.08010864257812
patch: return position ~ NONE ;
rank: 821
score: 98.2255147298177
patch: return * * ? ;
rank: 821
score: 98.18724568684895
patch: return - ~ max ;
rank: 821
score: 98.1458231608073
patch: return ? ~ position ;
rank: 821
score: 98.07985229492188
patch: return position ] ;
rank: 821
score: 98.07600402832031
patch: return position .
rank: 822
score: 98.28104654947917
patch: return list . length ;
rank: 822
score: 98.2633544921875
patch: return 0 ; }
rank: 822
score: 98.10106201171875
patch: return ( text ;
rank: 822
score: 98.07967122395833
patch: return position ~ substring ;
rank: 822
score: 98.0733154296875
patch: ~ - 1 ;
rank: 823
score: 98.25839233398438
patch: try { return false ;
rank: 823
score: 98.13985188802083
patch: return position + default ;
rank: 823
score: 98.0607666015625
patch: return position ; String
rank: 824
score: 98.27757771809895
patch: return int == position ;
rank: 824
score: 98.2563985188802
patch: int else = position ;
rank: 824
score: 98.18528238932292
patch: return - return position ;
rank: 824
score: 98.18206787109375
patch: return & false ;
rank: 824
score: 98.1392822265625
patch: return position + format ;
rank: 824
score: 98.07686360677083
patch: return super . text ;
rank: 825
score: 98.2560526529948
patch: if ~ position position ;
rank: 825
score: 98.22100830078125
patch: return ~ * 0 ;
rank: 825
score: 98.18438720703125
patch: return Integer . ;
rank: 825
score: 98.17869873046875
patch: return / - ;
rank: 825
score: 98.07960205078125
patch: return += 0 ;
rank: 825
score: 98.07354125976562
patch: return position ( ;
rank: 825
score: 98.04096069335938
patch: ~ ~ 1 ;
rank: 826
score: 98.33403930664062
patch: return * / }
rank: 826
score: 98.21964518229167
patch: } else return false ;
rank: 826
score: 98.18202718098958
patch: return ~ text . ;
rank: 826
score: 98.07338460286458
patch: return now ~ position ;
rank: 826
score: 98.03294372558594
patch: return ; int
rank: 827
score: 98.25205485026042
patch: * ; return position ;
rank: 827
score: 98.1755859375
patch: return << position ;
rank: 827
score: 98.13785807291667
patch: else { throw 0 ;
rank: 827
score: 98.07251993815105
patch: return position ~ chars ;
rank: 827
score: 98.01524658203125
patch: return position ; boolean
rank: 828
score: 98.18026733398438
patch: return ~ position * /
rank: 828
score: 98.1753438313802
patch: return : - 1 ;
rank: 828
score: 98.0720926920573
patch: return position ^ 1 ;
rank: 829
score: 98.3258768717448
patch: return position ? position :
rank: 829
score: 98.26913452148438
patch: return ! position ;
rank: 829
score: 98.24900309244792
patch: return finally { position ;
rank: 829
score: 98.21754964192708
patch: this . return $NUMBER$ ;
rank: 829
score: 98.17440795898438
patch: return * position ] ;
rank: 829
score: 98.07076009114583
patch: throw new ~ position ;
rank: 829
score: 97.9867919921875
patch: return position ; to
rank: 830
score: 98.32583618164062
patch: return position * null ;
rank: 830
score: 98.24583740234375
patch: return return ) ;
rank: 830
score: 98.21712239583333
patch: return ; , false ;
rank: 830
score: 98.17638142903645
patch: document . return position ;
rank: 830
score: 98.17345174153645
patch: return / : position ;
rank: 830
score: 98.13465372721355
patch: return bucket . start ;
rank: 830
score: 98.06866455078125
patch: return position ~ date ;
rank: 831
score: 98.26487223307292
patch: return new int 0 ;
rank: 831
score: 98.2451883951823
patch: return true + position ;
rank: 831
score: 98.21664428710938
patch: return ; , length ;
rank: 831
score: 98.0671895345052
patch: int start = start ;
rank: 831
score: 97.9278793334961
patch: return ; {
rank: 832
score: 98.21596272786458
patch: return 0 + $NUMBER$ ;
rank: 832
score: 98.06615193684895
patch: assert position <= 0 ;
rank: 832
score: 98.0595932006836
patch: return min ;
rank: 833
score: 98.26296997070312
patch: return << 0 ;
rank: 833
score: 98.239892578125
patch: return true ; ;
rank: 833
score: 98.2158203125
patch: return / * * ;
rank: 833
score: 98.1719462076823
patch: return position ~ max ;
rank: 833
score: 97.92122192382813
patch: return position ; throw
rank: 834
score: 98.16995239257812
patch: return * position position ;
rank: 834
score: 98.06387329101562
patch: throw position ~ position ;
rank: 834
score: 97.9196533203125
patch: { return position ;
rank: 835
score: 98.23704020182292
patch: return return ! position ;
rank: 835
score: 98.2131856282552
patch: } if return 1 ;
rank: 835
score: 98.16856892903645
patch: return * false ; }
rank: 835
score: 98.06327311197917
patch: return position + substring ;
rank: 835
score: 97.91766967773438
patch: return position ; int
rank: 836
score: 98.25980631510417
patch: return size + 0 ;
rank: 836
score: 98.23520914713542
patch: return catch ~ position ;
rank: 836
score: 98.21138916015624
patch: return ~ * ;
rank: 836
score: 98.16802978515625
patch: return [ position ] ;
rank: 836
score: 98.05796305338542
patch: return position ~ null ;
rank: 837
score: 98.23346557617188
patch: return start ; ;
rank: 837
score: 98.20957438151042
patch: else if return 0 ;
rank: 837
score: 98.16475423177083
patch: throw new return 0 ;
rank: 837
score: 98.12858072916667
patch: return position ; * /
rank: 837
score: 98.05679321289062
patch: return position ~ default ;
rank: 837
score: 98.03095703125
patch: return + $NUMBER$ ;
rank: 838
score: 98.25874837239583
patch: return return & position ;
rank: 838
score: 98.20810953776042
patch: return * + $NUMBER$ ;
rank: 838
score: 98.16505940755208
patch: return > 0 ] ;
rank: 838
score: 98.0549825032552
patch: text = ~ position ;
rank: 838
score: 98.02592163085937
patch: return ~ FALSE ;
rank: 838
score: 97.88884887695312
patch: return position ; final
rank: 839
score: 98.23284912109375
patch: return return 1 ; }
rank: 839
score: 98.16312662760417
patch: return / 1 ; }
rank: 839
score: 98.0543721516927
patch: throw new ~ 1 ;
rank: 839
score: 97.87411499023438
patch: return ~ ] ;
rank: 840
score: 98.31365966796875
patch: return position : max ;
rank: 840
score: 98.25450642903645
patch: return 1 . 1 ;
rank: 840
score: 98.20111083984375
patch: return ~ * * ;
rank: 840
score: 98.16234334309895
patch: return long CaMeL Date ;
rank: 840
score: 98.1602071126302
patch: return return ~ start ;
rank: 840
score: 98.12388102213542
patch: return to CaMeL String ;
rank: 840
score: 98.05350748697917
patch: return position - substring ;
rank: 841
score: 98.31177775065105
patch: return / * ~ 0
rank: 841
score: 98.23187255859375
patch: return ; - 0 ;
rank: 841
score: 98.15681966145833
patch: return ~ super . ;
rank: 841
score: 98.0497334798177
patch: return double CaMeL Value ;
rank: 841
score: 98.02171630859375
patch: result = text ;
rank: 841
score: 97.857080078125
patch: ; return position ;
rank: 842
score: 98.31104532877605
patch: return position : $STRING$ ;
rank: 842
score: 98.25181274414062
patch: return | position ;
rank: 842
score: 98.23007202148438
patch: else = return position ;
rank: 842
score: 98.1533711751302
patch: doc . return position ;
rank: 842
score: 97.851708984375
patch: return ~ position .
rank: 843
score: 98.25076293945312
patch: return * - true ;
rank: 843
score: 98.22963460286458
patch: int else return position ;
rank: 843
score: 98.16009521484375
patch: return *= position ; }
rank: 843
score: 98.11878458658855
patch: return position - bucket ;
rank: 843
score: 98.04128011067708
patch: if position >= position )
rank: 843
score: 98.018408203125
patch: } return text ;
rank: 844
score: 98.24838256835938
patch: return this . length ;
rank: 844
score: 98.22864786783855
patch: else { return start ;
rank: 844
score: 98.03790283203125
patch: return position ~ year ;
rank: 844
score: 97.84505004882813
patch: ~ position ; position
rank: 845
score: 98.225
patch: int ~ position ;
rank: 845
score: 98.19753011067708
patch: return initial CaMeL Value ;
rank: 845
score: 98.1590067545573
patch: return return ~ true ;
rank: 845
score: 98.0341796875
patch: return position ( position ;
rank: 845
score: 98.01383972167969
patch: throw 1 ;
rank: 845
score: 97.8409912109375
patch: return position ; System
rank: 846
score: 98.24558512369792
patch: return - * 0 ;
rank: 846
score: 98.2237040201823
patch: while ~ position position ;
rank: 846
score: 98.15895589192708
patch: return else throw null ;
rank: 846
score: 98.14992268880208
patch: return super . return ;
rank: 846
score: 98.11238606770833
patch: return this . parse ;
rank: 846
score: 97.8397216796875
patch: return ; int position
rank: 847
score: 98.22141520182292
patch: return start ~ 0 ;
rank: 847
score: 98.15861206054687
patch: return ~ time ;
rank: 847
score: 98.02956136067708
patch: long start = position ;
rank: 847
score: 97.83865966796876
patch: ~ return position ;
rank: 848
score: 98.2433369954427
patch: return > - 1 ;
rank: 848
score: 98.21937052408855
patch: return return ? position ;
rank: 848
score: 98.15714518229167
patch: return , bucket ) ;
rank: 848
score: 98.10177612304688
patch: try { return 0 ;
rank: 848
score: 98.0290283203125
patch: return 0 position ;
rank: 848
score: 98.00897979736328
patch: return parse ;
rank: 848
score: 97.81572875976562
patch: return true ; }
rank: 849
score: 98.24288940429688
patch: return return / 0 ;
rank: 849
score: 98.19150390625
patch: } else if ;
rank: 849
score: 98.15685017903645
patch: return int < position ;
rank: 849
score: 98.10174560546875
patch: return . position ;
rank: 849
score: 97.81168823242187
patch: return position ; set
rank: 850
score: 98.28985595703125
patch: return * . position ;
rank: 850
score: 98.24167887369792
patch: ~ 0 + 1 ;
rank: 850
score: 98.02186075846355
patch: return position - matches ;
rank: 850
score: 97.80902099609375
patch: ~ 0 ;
rank: 851
score: 98.28959147135417
patch: return TRUE + position ;
rank: 851
score: 98.18943277994792
patch: return ~ ; return ;
rank: 851
score: 98.1544189453125
patch: return <= ~ position ;
rank: 851
score: 98.1002197265625
patch: return TRUE ;
rank: 851
score: 98.02030029296876
patch: text = position ;
rank: 851
score: 97.80576782226562
patch: return position ; start
rank: 852
score: 98.2138671875
patch: return ; int ~ ;
rank: 852
score: 98.18939208984375
patch: } else = null ;
rank: 853
score: 98.2859395345052
patch: return $NUMBER$ + 1 ;
rank: 853
score: 98.23672485351562
patch: return >= - 0 ;
rank: 853
score: 98.21192423502605
patch: else = ~ position ;
rank: 853
score: 98.18251546223958
patch: else { if ; }
rank: 853
score: 98.15266927083333
patch: return * ) ; }
rank: 853
score: 98.01600138346355
patch: return position + read ;
rank: 853
score: 97.98953247070312
patch: result = 0 ;
rank: 853
score: 97.78278198242188
patch: throw return position ;
rank: 854
score: 98.2848409016927
patch: return bucket + 0 ;
rank: 854
score: 98.23445638020833
patch: return - - ] ;
rank: 854
score: 98.2112060546875
patch: else return false ;
rank: 854
score: 98.180908203125
patch: return ; , ~ ;
rank: 854
score: 98.14886474609375
patch: return position ; else {
rank: 854
score: 97.97662353515625
patch: return case 1 ;
rank: 855
score: 98.23226928710938
patch: return int . 1 ;
rank: 855
score: 98.17976684570313
patch: * * * /
rank: 855
score: 98.13627115885417
patch: return position * position /
rank: 855
score: 98.008056640625
patch: f position = position ;
rank: 855
score: 97.77706298828124
patch: return position ; public
rank: 856
score: 98.28389485677083
patch: return text + $STRING$ ;
rank: 856
score: 98.20540364583333
patch: / * return 0 ;
rank: 856
score: 97.9738525390625
patch: return += 1 ;
rank: 856
score: 97.76620483398438
patch: throw position ;
rank: 857
score: 98.23075358072917
patch: return int + position ;
rank: 857
score: 98.20347086588542
patch: return ( Integer position ;
rank: 857
score: 98.0047098795573
patch: int position = start ;
rank: 857
score: 97.76259155273438
patch: ~ - position ;
rank: 858
score: 98.16824340820312
patch: , position ) ;
rank: 858
score: 98.1424560546875
patch: return / / position ;
rank: 858
score: 98.00347900390625
patch: float position = position ;
rank: 858
score: 97.97325897216797
patch: return * /
rank: 858
score: 97.75442504882812
patch: return ; =
rank: 859
score: 98.22456868489583
patch: return int != position ;
rank: 859
score: 98.2005126953125
patch: } return $STRING$ ;
rank: 859
score: 98.14149983723958
patch: return ~ position ? ;
rank: 859
score: 97.992919921875
patch: return length position ;
rank: 859
score: 97.75399169921874
patch: return $STRING$ ; }
rank: 860
score: 98.22385660807292
patch: return int . 0 ;
rank: 860
score: 98.19739990234375
patch: return return value ;
rank: 860
score: 98.1666259765625
patch: return / * ;
rank: 860
score: 98.12931315104167
patch: return ~ ( int ;
rank: 861
score: 98.1662089029948
patch: * * * * ;
rank: 861
score: 97.96795654296875
patch: return % 0 ;
rank: 861
score: 97.74887084960938
patch: return position ; /
rank: 862
score: 98.2750244140625
patch: return $NUMBER$ : position ;
rank: 862
score: 98.22300211588542
patch: return ] . length ;
rank: 862
score: 98.19656372070312
patch: ++ return position ;
rank: 862
score: 98.12776489257813
patch: return position 0 ;
rank: 862
score: 97.96787109375
patch: string = position ;
rank: 863
score: 98.27445068359376
patch: return position ? position
rank: 863
score: 98.16032104492187
patch: if ; return ;
rank: 863
score: 98.13600667317708
patch: return < 0 ] ;
rank: 863
score: 98.1232401529948
patch: ) ; return position ;
rank: 863
score: 97.96702880859375
patch: return ( 0 ;
rank: 863
score: 97.73255157470703
patch: ~ false ;
rank: 864
score: 98.194140625
patch: return return str ;
rank: 864
score: 98.15762329101562
patch: else { return value ;
rank: 864
score: 98.1230977376302
patch: return position . trim ;
rank: 864
score: 97.95401000976562
patch: dim = position ;
rank: 865
score: 98.19368286132813
patch: return return start ;
rank: 865
score: 98.1315409342448
patch: return int -= position ;
rank: 865
score: 98.1217041015625
patch: return position * $NUMBER$ /
rank: 865
score: 97.952099609375
patch: pos += position ;
rank: 865
score: 97.7223388671875
patch: return 1 ; }
rank: 866
score: 98.27347819010417
patch: return & position ) ;
rank: 866
score: 98.21285400390624
patch: return int 1 ;
rank: 866
score: 98.1533935546875
patch: } return ~ ;
rank: 866
score: 98.1293436686198
patch: return * 1 ; }
rank: 866
score: 98.12169392903645
patch: return position | 1 ;
rank: 866
score: 97.99922485351563
patch: return ALL _ IDS
rank: 866
score: 97.93921508789063
patch: return position . ;
rank: 866
score: 97.71307983398438
patch: return ~ position throws
rank: 867
score: 98.26857503255208
patch: return * * ) ;
rank: 867
score: 98.19064331054688
patch: return ( String position ;
rank: 867
score: 98.11622111002605
patch: return ~ ( start ;
rank: 867
score: 97.95770263671875
patch: return & $NUMBER$ ;
rank: 867
score: 97.92744750976563
patch: return position ++ ;
rank: 867
score: 97.70853881835937
patch: return position * ;
rank: 868
score: 98.18763224283855
patch: else return position ; ;
rank: 868
score: 97.92374420166016
patch: throw new ;
rank: 869
score: 98.26436360677083
patch: return * * / ;
rank: 869
score: 98.13041381835937
patch: return * + ;
rank: 869
score: 98.118701171875
patch: return ] ; }
rank: 869
score: 97.9510498046875
patch: } return ) ;
rank: 870
score: 98.18478393554688
patch: String ~ ~ position ;
rank: 870
score: 98.11473592122395
patch: return super . ; ;
rank: 870
score: 97.9191162109375
patch: return position false ;
rank: 870
score: 97.69339599609376
patch: return this ; }
rank: 871
score: 98.25893147786458
patch: return * / * /
rank: 871
score: 98.12725830078125
patch: } return * ;
rank: 871
score: 98.11433919270833
patch: return ~ position - ;
rank: 871
score: 97.98931884765625
patch: return ( $STRING$ ;
rank: 871
score: 97.9432144165039
patch: return text .
rank: 871
score: 97.90223388671875
patch: state = position ;
rank: 871
score: 97.68629150390625
patch: ~ position ; ;
rank: 872
score: 98.24672444661458
patch: return * * / /
rank: 872
score: 98.20096435546876
patch: return - ] ;
rank: 872
score: 98.118115234375
patch: else { return ;
rank: 872
score: 98.11187744140625
patch: throw new return position ;
rank: 872
score: 97.935888671875
patch: return = position ;
rank: 872
score: 97.901513671875
patch: return Math . ;
rank: 873
score: 98.23949178059895
patch: return ~ position * 0
rank: 873
score: 98.18117268880208
patch: Integer ~ position position ;
rank: 873
score: 97.93270111083984
patch: return time ;
rank: 873
score: 97.89335327148437
patch: long ~ position ;
rank: 873
score: 97.66798400878906
patch: ~ $STRING$ ;
rank: 874
score: 98.1982421875
patch: return & 0 length ;
rank: 874
score: 98.18055419921875
patch: start ~ position ;
rank: 874
score: 98.1149169921875
patch: } if return ;
rank: 874
score: 98.08209228515625
patch: return append position ;
rank: 874
score: 97.88459014892578
patch: return now ;
rank: 874
score: 97.66793060302734
patch: return return ;
rank: 875
score: 98.1921895345052
patch: return size + $STRING$ ;
rank: 875
score: 98.179931640625
patch: return value position ;
rank: 875
score: 98.1133041381836
patch: if ( ;
rank: 875
score: 97.97244262695312
patch: return ( bucket ;
rank: 875
score: 97.93051147460938
patch: return . 0 ;
rank: 875
score: 97.88272705078126
patch: pos = position ;
rank: 875
score: 97.66409301757812
patch: return position ; i
rank: 876
score: 98.18806966145833
patch: return Double . length ;
rank: 876
score: 98.17854614257813
patch: return / ] ;
rank: 876
score: 98.10513305664062
patch: return position - max ;
rank: 876
score: 97.93014526367188
patch: parse ~ position ;
rank: 876
score: 97.8666015625
patch: return position / ;
rank: 876
score: 97.65969848632812
patch: return name ;
rank: 877
score: 98.17774047851563
patch: -- return position ;
rank: 877
score: 98.09970703125
patch: / * * ;
rank: 877
score: 97.92852172851562
patch: return $NUMBER$ ) ;
rank: 878
score: 98.17722574869792
patch: return <= - 1 ;
rank: 878
score: 98.17500813802083
patch: try { return ~ ;
rank: 878
score: 98.09923706054687
patch: } return start ;
rank: 878
score: 97.9262939453125
patch: return ( text .
rank: 878
score: 97.65523071289063
patch: return new int ;
rank: 879
score: 98.20875854492188
patch: return / * }
rank: 879
score: 98.1744384765625
patch: while ~ ~ position ;
rank: 879
score: 98.17181396484375
patch: return if ~ position ;
rank: 879
score: 98.09535522460938
patch: return 0 + ;
rank: 879
score: 98.053271484375
patch: return ~ position }
rank: 879
score: 97.92608642578125
patch: return ~ min ;
rank: 879
score: 97.85016479492188
patch: sb = position ;
rank: 879
score: 97.65377197265624
patch: return position position }
rank: 880
score: 98.1915283203125
patch: return ~ position
rank: 880
score: 98.17318725585938
patch: Iterator else = position ;
rank: 880
score: 98.10059611002605
patch: return - position 1 ;
rank: 880
score: 98.09384765625
patch: } return value ;
rank: 880
score: 97.92234497070312
patch: result = bucket ;
rank: 880
score: 97.84691162109375
patch: id = position ;
rank: 880
score: 97.64736328125
patch: ~ new position ;
rank: 881
score: 97.64675903320312
patch: ~ true ;
rank: 882
score: 98.0998026529948
patch: return ~ ( long ;
rank: 882
score: 98.09178466796875
patch: return * return ;
rank: 882
score: 98.04461669921875
patch: return / : ;
rank: 882
score: 97.91094970703125
patch: return ~ - ;
rank: 882
score: 97.83833618164063
patch: return length ; ;
rank: 883
score: 98.08873291015625
patch: return ; ) ;
rank: 883
score: 98.04336547851562
patch: return ~ position +
rank: 883
score: 97.8338623046875
patch: return max position ;
rank: 883
score: 97.6410400390625
patch: return position ; last
rank: 884
score: 98.14666748046875
patch: return - size ;
rank: 884
score: 98.09774780273438
patch: return Integer . parse ;
rank: 884
score: 98.0728271484375
patch: return * ? ;
rank: 884
score: 97.83172607421875
patch: position += position ;
rank: 884
score: 97.63717651367188
patch: return ; String
rank: 885
score: 98.1595967610677
patch: finally { return 1 ;
rank: 885
score: 98.02391357421875
patch: return / ) ;
rank: 885
score: 97.90763549804687
patch: return ~ value ;
rank: 885
score: 97.62162017822266
patch: ~ 1 ;
rank: 886
score: 98.11947021484374
patch: return >= 1 ;
rank: 886
score: 98.066259765625
patch: if ( start ;
rank: 886
score: 97.93099212646484
patch: return date ;
rank: 887
score: 98.14983520507812
patch: catch return $STRING$ ;
rank: 887
score: 98.11356201171876
patch: return >= position ;
rank: 887
score: 97.90304565429688
patch: ~ ~ 0 ;
rank: 887
score: 97.79720458984374
patch: f ~ position ;
rank: 887
score: 97.58450317382812
patch: return position +
rank: 888
score: 98.14500732421875
patch: else = position ;
rank: 888
score: 98.09006754557292
patch: return ~ 1 ) ;
rank: 888
score: 98.05662841796875
patch: else return 1 ;
rank: 888
score: 97.901806640625
patch: return - value ;
rank: 888
score: 97.574951171875
patch: return super ;
rank: 889
score: 98.09561157226562
patch: return -- length ;
rank: 889
score: 98.08937581380208
patch: return return ~ max ;
rank: 889
score: 98.00076293945312
patch: return append ;
rank: 889
score: 97.78992309570313
patch: final position -- ;
rank: 889
score: 97.53140258789062
patch: return Math ;
rank: 890
score: 98.12376708984375
patch: value = position ;
rank: 890
score: 98.08929443359375
patch: return super . read ;
rank: 890
score: 98.07938232421876
patch: return * length ;
rank: 890
score: 98.04924011230469
patch: } else ;
rank: 890
score: 97.89686279296875
patch: return parse position ;
rank: 891
score: 98.0488037109375
patch: if return $NUMBER$ ;
rank: 891
score: 97.7853271484375
patch: return >> $NUMBER$ ;
rank: 891
score: 97.50015258789062
patch: ~ this ;
rank: 892
score: 98.11734619140626
patch: / return position ;
rank: 892
score: 98.07301025390625
patch: return <= 0 ;
rank: 892
score: 98.04990844726562
patch: return ~ now ;
rank: 892
score: 98.04725341796875
patch: if ( value ;
rank: 892
score: 97.88957214355469
patch: else { }
rank: 892
score: 97.49884796142578
patch: ~ $NUMBER$ ;
rank: 893
score: 98.10552978515625
patch: return false position ;
rank: 893
score: 98.0709228515625
patch: return int $NUMBER$ ;
rank: 893
score: 97.4775619506836
patch: return super .
rank: 894
score: 98.07138671875
patch: return / * position
rank: 894
score: 98.02321166992188
patch: return ~ return ;
rank: 894
score: 97.7786376953125
patch: return position true ;
rank: 895
score: 98.01618041992188
patch: return / * /
rank: 895
score: 97.77581176757812
patch: node = position ;
rank: 896
score: 97.95813598632813
patch: return finally { }
rank: 896
score: 97.43334197998047
patch: return ; /
rank: 897
score: 98.09737548828124
patch: return ; $NUMBER$ ;
rank: 898
score: 98.09259033203125
patch: else ~ position ;
rank: 898
score: 98.00172119140625
patch: if ( return ;
rank: 898
score: 97.95228271484375
patch: return else break ;
rank: 898
score: 97.42292022705078
patch: return Double ;
rank: 899
score: 98.05245361328124
patch: return throw null ;
rank: 899
score: 98.01556396484375
patch: return return - ;
rank: 899
score: 97.99910888671874
patch: } else { ;
rank: 899
score: 97.8947265625
patch: return ? position ;
rank: 900
score: 98.05411987304687
patch: return position ? ;
rank: 900
score: 98.04757080078124
patch: return return max ;
rank: 900
score: 97.99293212890625
patch: / * return ;
rank: 900
score: 97.9484130859375
patch: return null ; }
rank: 900
score: 97.86655883789062
patch: return ~ ~ }
rank: 900
score: 97.40694427490234
patch: return get ;
rank: 901
score: 98.052685546875
patch: return position + 0
rank: 901
score: 98.04136352539062
patch: return ? 0 ;
rank: 901
score: 97.88672485351563
patch: } return bucket ;
rank: 901
score: 97.8654541015625
patch: return case $NUMBER$ ;
rank: 902
score: 98.0826416015625
patch: while ~ position ;
rank: 902
score: 97.99801025390624
patch: return new Integer ;
rank: 902
score: 97.98854064941406
patch: } else {
rank: 902
score: 97.93560791015625
patch: return << true ;
rank: 903
score: 98.075830078125
patch: return $STRING$ ; ;
rank: 903
score: 98.04892578125
patch: else { return position
rank: 903
score: 98.03905029296875
patch: return + $STRING$ ;
rank: 903
score: 97.99263305664063
patch: return this . ;
rank: 903
score: 97.97787475585938
patch: } ~ ;
rank: 903
score: 97.86400146484375
patch: return ( ) ;
rank: 903
score: 97.74982299804688
patch: n = position ;
rank: 903
score: 97.37188720703125
patch: return ; long
rank: 904
score: 98.07442016601563
patch: return return this ;
rank: 904
score: 98.03822021484375
patch: return ? true ;
rank: 904
score: 97.97705078125
patch: return 1 ; ;
rank: 904
score: 97.93160400390624
patch: return << false ;
rank: 904
score: 97.74639892578125
patch: return null ; ;
rank: 904
score: 97.36259460449219
patch: return ; void
rank: 905
score: 97.97334798177083
patch: break ;
rank: 905
score: 97.86114501953125
patch: return ~ }
rank: 905
score: 97.3607177734375
patch: return default ;
rank: 906
score: 97.7420654296875
patch: val = position ;
rank: 906
score: 97.34876251220703
patch: return ; position
rank: 907
score: 97.96759033203125
patch: return return * ;
rank: 907
score: 97.917578125
patch: return * ; }
rank: 907
score: 97.86072540283203
patch: return in ;
rank: 907
score: 97.85747680664062
patch: return % 1 ;
rank: 907
score: 97.33148193359375
patch: return list ;
rank: 908
score: 98.05902709960938
patch: return $STRING$ position ;
rank: 908
score: 98.02847900390626
patch: return long 1 ;
rank: 908
score: 97.95438842773437
patch: return text . ;
rank: 908
score: 97.905078125
patch: return >= length ;
rank: 908
score: 97.33029174804688
patch: return System ;
rank: 909
score: 98.0563232421875
patch: while return position ;
rank: 909
score: 98.01811218261719
patch: return if ;
rank: 909
score: 97.96530151367188
patch: if return false ;
rank: 909
score: 97.94772338867188
patch: return capacity ;
rank: 909
score: 97.90321044921875
patch: return else parse ;
rank: 909
score: 97.85496520996094
patch: -- position ;
rank: 909
score: 97.73441772460937
patch: return get position ;
rank: 909
score: 97.29936218261719
patch: return new position
rank: 910
score: 98.05501708984374
patch: else return true ;
rank: 910
score: 98.0124755859375
patch: return ++ length ;
rank: 910
score: 97.96465454101562
patch: } else * /
rank: 910
score: 97.93868408203124
patch: this . return ;
rank: 910
score: 97.88929443359375
patch: return << ) ;
rank: 910
score: 97.7328369140625
patch: throw new ; }
rank: 910
score: 97.29129028320312
patch: ~ start ;
rank: 911
score: 98.04583740234375
patch: end ~ position ;
rank: 911
score: 97.96246337890625
patch: return ~ ; ;
rank: 911
score: 97.93833618164062
patch: return - start ;
rank: 911
score: 97.88106689453124
patch: return long position ;
rank: 911
score: 97.84903564453126
patch: else { break ;
rank: 911
score: 97.73233032226562
patch: return compare position ;
rank: 911
score: 97.27147674560547
patch: int position ;
rank: 912
score: 98.00551350911458
patch: return position
rank: 912
score: 97.84834594726563
patch: } ~ 0 ;
rank: 912
score: 97.25584411621094
patch: return ; *
rank: 913
score: 98.03549194335938
patch: ~ return 1 ;
rank: 913
score: 98.00726318359375
patch: return System .
rank: 913
score: 98.0046157836914
patch: return ~ bucket
rank: 913
score: 97.80317687988281
patch: return * }
rank: 913
score: 97.25504302978516
patch: ~ null ;
rank: 914
score: 98.00565185546876
patch: position = 0 ;
rank: 914
score: 97.94282836914063
patch: } else = ;
rank: 914
score: 97.8927734375
patch: return ~ get ;
rank: 914
score: 97.72655029296875
patch: return position / /
rank: 914
score: 97.23822784423828
patch: return format ;
rank: 915
score: 98.00558471679688
patch: return -= 0 ;
rank: 915
score: 97.99359741210938
patch: return * / /
rank: 915
score: 97.94245910644531
patch: if return ;
rank: 915
score: 97.87649536132812
patch: return += false ;
rank: 915
score: 97.22874450683594
patch: return Integer ;
rank: 916
score: 98.004345703125
patch: return > 1 ;
rank: 916
score: 97.89141235351562
patch: return ~ capacity ;
rank: 916
score: 97.72108154296875
patch: field = position ;
rank: 916
score: 97.22269439697266
patch: return / ;
rank: 917
score: 98.00155029296874
patch: return -- 1 ;
rank: 917
score: 97.93724975585937
patch: if ( ~ ;
rank: 917
score: 97.87308349609376
patch: return substring position ;
rank: 917
score: 97.71795654296875
patch: return ] position ;
rank: 918
score: 98.01477661132813
patch: return return null ;
rank: 918
score: 97.99508056640624
patch: return <= position ;
rank: 919
score: 98.00592651367188
patch: case return 1 ;
rank: 919
score: 97.99195556640625
patch: return return length ;
rank: 919
score: 97.98995971679688
patch: return position + 1
rank: 919
score: 97.82877197265626
patch: return return text ;
rank: 919
score: 97.65966796875
patch: try {
rank: 920
score: 97.92658081054688
patch: return ( return ;
rank: 920
score: 97.87874755859374
patch: buffer = position ;
rank: 920
score: 97.70665283203125
patch: status = position ;
rank: 920
score: 97.64704895019531
patch: return / /
rank: 920
score: 97.17051696777344
patch: return ; boolean
rank: 921
score: 97.9956298828125
patch: assert return position ;
rank: 921
score: 97.984912109375
patch: return if 1 ;
rank: 921
score: 97.91532592773437
patch: return $NUMBER$ + ;
rank: 921
score: 97.70390014648437
patch: f = position ;
rank: 921
score: 97.63614908854167
patch: else {
rank: 921
score: 97.16117095947266
patch: return ; try
rank: 922
score: 97.993701171875
patch: int ~ 0 ;
rank: 922
score: 97.97598266601562
patch: return position + $NUMBER$
rank: 922
score: 97.91375732421875
patch: return ~ * /
rank: 922
score: 97.85181274414063
patch: return else continue ;
rank: 922
score: 97.15789794921875
patch: return out ;
rank: 923
score: 97.99368896484376
patch: return 0 ; else
rank: 923
score: 97.96874389648437
patch: return - max ;
rank: 923
score: 97.90606689453125
patch: if ; * /
rank: 923
score: 97.86622314453125
patch: position = position ;
rank: 923
score: 97.85177001953124
patch: return ~ ceil ;
rank: 923
score: 97.81303100585937
patch: return return bucket ;
rank: 923
score: 97.69908447265625
patch: s = position ;
rank: 923
score: 97.15074157714844
patch: return compare ;
rank: 924
score: 97.99287109375
patch: catch return 0 ;
rank: 924
score: 97.96859741210938
patch: return ++ 1 ;
rank: 924
score: 97.90430908203125
patch: } ; return ;
rank: 924
score: 97.8443115234375
patch: return else { else
rank: 924
score: 97.62763977050781
patch: / - 1
rank: 925
score: 97.99229736328125
patch: finally return position ;
rank: 925
score: 97.96060180664062
patch: return int ;
rank: 925
score: 97.9042236328125
patch: final return 0 ;
rank: 925
score: 97.86027221679687
patch: return - ~ ;
rank: 925
score: 97.13037109375
patch: if position ;
rank: 926
score: 97.98511352539063
patch: return text position ;
rank: 926
score: 97.95844116210938
patch: return long $NUMBER$ ;
rank: 926
score: 97.90120849609374
patch: return * - ;
rank: 926
score: 97.82283325195313
patch: return length ; }
rank: 926
score: 97.691796875
patch: message = position ;
rank: 927
score: 97.95114135742188
patch: return position ? }
rank: 927
score: 97.90047607421874
patch: } return ; ;
rank: 927
score: 97.8227294921875
patch: return text ; }
rank: 927
score: 97.615478515625
patch: finally {
rank: 927
score: 97.09454345703125
patch: return new ;
rank: 928
score: 97.94580078125
patch: return position == 0
rank: 928
score: 97.09442901611328
patch: ~ max ;
rank: 929
score: 97.98189697265624
patch: throw new position ;
rank: 929
score: 97.94940185546875
patch: return : 0 ;
rank: 929
score: 97.89323120117187
patch: return 0 * ;
rank: 929
score: 97.85341796875
patch: return ~ ( ;
rank: 929
score: 97.818798828125
patch: return return ] ;
rank: 929
score: 97.68836669921875
patch: d = position ;
rank: 929
score: 97.60287475585938
patch: } finally {
rank: 929
score: 97.09336853027344
patch: return position -
rank: 930
score: 97.88907470703126
patch: return ( Integer ;
rank: 930
score: 97.68638916015625
patch: ~ position position ;
rank: 930
score: 97.59044647216797
patch: throw $NUMBER$ ;
rank: 930
score: 97.09153747558594
patch: return char ;
rank: 931
score: 97.94722900390624
patch: return return size ;
rank: 931
score: 97.87905883789062
patch: } else break ;
rank: 931
score: 97.78065185546875
patch: return new $STRING$ ;
rank: 931
score: 97.68495483398438
patch: return ~ date ;
rank: 931
score: 97.58700561523438
patch: = position ;
rank: 931
score: 97.08745574951172
patch: return position {
rank: 932
score: 97.97500610351562
patch: for ~ position ;
rank: 932
score: 97.8126220703125
patch: return else { }
rank: 932
score: 97.07640838623047
patch: return filter ;
rank: 933
score: 97.9738037109375
patch: catch return 1 ;
rank: 933
score: 97.93220825195313
patch: return ! 0 ;
rank: 933
score: 97.81054077148437
patch: return ~ default ;
rank: 933
score: 97.07218170166016
patch: return ; else
rank: 934
score: 97.93212890625
patch: return -- true ;
rank: 934
score: 97.8624755859375
patch: else return $NUMBER$ ;
rank: 934
score: 97.67957763671875
patch: start return position ;
rank: 934
score: 97.06825256347656
patch: return String ;
rank: 935
score: 97.97250366210938
patch: case return position ;
rank: 935
score: 97.92967529296875
patch: return > position ;
rank: 935
score: 97.79969787597656
patch: return try {
rank: 935
score: 97.67796020507812
patch: ret = position ;
rank: 935
score: 97.52644348144531
patch: += position ;
rank: 935
score: 97.04902648925781
patch: return new {
rank: 936
score: 97.96903686523437
patch: finally { return ;
rank: 936
score: 97.77764892578125
patch: return read ;
rank: 936
score: 97.75494384765625
patch: return case $NUMBER$
rank: 936
score: 97.67752685546876
patch: return position -- ;
rank: 937
score: 97.96424560546875
patch: switch ~ position ;
rank: 937
score: 97.86019897460938
patch: return $NUMBER$ position ;
rank: 937
score: 97.75473022460938
patch: return * position
rank: 937
score: 97.55449676513672
patch: return ceil ;
rank: 937
score: 97.51534271240234
patch: ++ position ;
rank: 937
score: 97.02005004882812
patch: return $STRING$ .
rank: 938
score: 97.95855102539062
patch: } return null ;
rank: 938
score: 97.82396850585937
patch: this . position ;
rank: 938
score: 97.7555643717448
patch: return else
rank: 938
score: 97.51438903808594
patch: return iterator ;
rank: 938
score: 97.00282287597656
patch: ~ position .
rank: 939
score: 97.95547485351562
patch: return return / ;
rank: 939
score: 97.91953125
patch: return <= 1 ;
rank: 939
score: 97.85913696289063
patch: return ; ~ ;
rank: 939
score: 97.7248306274414
patch: return ~ text
rank: 939
score: 97.67337036132812
patch: if position -- ;
rank: 939
score: 97.00091552734375
patch: ~ value ;
rank: 940
score: 97.95528564453124
patch: return return name ;
rank: 940
score: 97.8558349609375
patch: return ( * ;
rank: 940
score: 97.49252319335938
patch: return chars ;
rank: 941
score: 97.94939575195312
patch: catch ( $STRING$ ;
rank: 941
score: 97.91129150390626
patch: return ! true ;
rank: 941
score: 97.47502136230469
patch: } break ;
rank: 941
score: 96.98285675048828
patch: return Long ;
rank: 942
score: 97.9109375
patch: return + true ;
rank: 942
score: 97.8227310180664
patch: return ; }
rank: 942
score: 97.6689453125
patch: retval = position ;
rank: 942
score: 97.4737548828125
patch: / - 0
rank: 942
score: 96.9714584350586
patch: return abs ;
rank: 943
score: 97.81434326171875
patch: return position * /
rank: 943
score: 97.66868896484375
patch: return compute position ;
rank: 943
score: 97.64851379394531
patch: return continue ;
rank: 943
score: 97.45655822753906
patch: result -- ;
rank: 943
score: 96.9614028930664
patch: return trim ;
rank: 944
score: 97.9103759765625
patch: return ++ true ;
rank: 944
score: 97.77738952636719
patch: / * /
rank: 944
score: 97.69960021972656
patch: return - $NUMBER$
rank: 944
score: 97.46300506591797
patch: return public ;
rank: 944
score: 97.4498062133789
patch: ~ bucket ;
rank: 944
score: 96.95482635498047
patch: return ; Integer
rank: 945
score: 97.9076171875
patch: return <= true ;
rank: 945
score: 97.44017791748047
patch: return ( position
rank: 945
score: 96.94823455810547
patch: return copy ;
rank: 946
score: 97.9205810546875
patch: return true position ;
rank: 946
score: 97.90579223632812
patch: return int [ ]
rank: 946
score: 97.61790466308594
patch: return NONE ;
rank: 946
score: 97.41315460205078
patch: } try {
rank: 947
score: 97.91895751953125
patch: start = position ;
rank: 947
score: 97.9056884765625
patch: return >= true ;
rank: 947
score: 97.7002944946289
patch: else { ;
rank: 947
score: 97.68644714355469
patch: return position _
rank: 947
score: 97.58806610107422
patch: return year ;
rank: 947
score: 96.9259033203125
patch: int position *
rank: 948
score: 97.91781616210938
patch: return * ] ;
rank: 948
score: 97.90062255859375
patch: return if $NUMBER$ ;
rank: 948
score: 97.77608642578124
patch: switch ( position ;
rank: 948
score: 97.69094848632812
patch: if ~ ;
rank: 948
score: 97.66764831542969
patch: return position ?
rank: 948
score: 97.53373718261719
patch: return exit ;
rank: 948
score: 97.41903686523438
patch: return round ;
rank: 948
score: 97.40135955810547
patch: return SIZE ;
rank: 948
score: 96.92535400390625
patch: return position *
rank: 949
score: 97.6893310546875
patch: / * ;
rank: 949
score: 97.64057922363281
patch: return - 1
rank: 949
score: 97.58900451660156
patch: return replace ;
rank: 949
score: 97.40034484863281
patch: } } ;
rank: 950
score: 97.89705810546874
patch: return += true ;
rank: 950
score: 97.66848754882812
patch: else if ;
rank: 950
score: 97.58819580078125
patch: return long ;
rank: 950
score: 97.38030242919922
patch: return / *
rank: 951
score: 97.89693603515624
patch: return : true ;
rank: 951
score: 97.76556396484375
patch: return ~ millis ;
rank: 951
score: 97.57286834716797
patch: return finally {
rank: 951
score: 96.91327667236328
patch: return Boolean ;
rank: 952
score: 97.89351806640624
patch: return -- false ;
rank: 952
score: 97.76233520507813
patch: iter = position ;
rank: 952
score: 97.53756713867188
patch: return arraycopy ;
rank: 952
score: 96.90909576416016
patch: return compute ;
rank: 953
score: 97.75845947265626
patch: return return ~ ;
rank: 953
score: 96.90770721435547
patch: return position =
rank: 954
score: 97.9078857421875
patch: value ~ position ;
rank: 954
score: 97.60492706298828
patch: return position )
rank: 954
score: 97.52717590332031
patch: return sum ;
rank: 954
score: 97.36797332763672
patch: return clone ;
rank: 954
score: 97.35930633544922
patch: } / /
rank: 954
score: 96.72237141927083
patch: int position
rank: 955
score: 97.89260864257812
patch: return & $STRING$ ;
rank: 955
score: 97.58197021484375
patch: } if ;
rank: 955
score: 97.45381164550781
patch: return matches ;
rank: 955
score: 97.36641693115234
patch: finally { }
rank: 955
score: 96.44590250651042
patch: long position
rank: 956
score: 97.90230712890624
patch: else return $STRING$ ;
rank: 956
score: 97.7439453125
patch: for position ++ ;
rank: 956
score: 97.41375732421875
patch: return T ;
rank: 956
score: 97.36395263671875
patch: return exp ;
rank: 956
score: 96.21277872721355
patch: String position
rank: 957
score: 97.90068359375
patch: j return position ;
rank: 957
score: 97.57209014892578
patch: * * /
rank: 957
score: 97.41216278076172
patch: assert false ;
rank: 957
score: 97.35369873046875
patch: return >> ;
rank: 958
score: 97.7321533203125
patch: return ~ new ;
rank: 958
score: 97.5690689086914
patch: } catch ;
rank: 958
score: 97.47181701660156
patch: return << ;
rank: 959
score: 97.8940673828125
patch: int ~ 1 ;
rank: 959
score: 97.33675384521484
patch: } / *
rank: 959
score: 95.77012125651042
patch: position position
rank: 960
score: 97.88895874023437
patch: * return position ;
rank: 960
score: 97.55247497558594
patch: return sleep ;
rank: 960
score: 97.54885864257812
patch: return insert ;
rank: 960
score: 97.36627197265625
patch: return equals ;
rank: 960
score: 95.76377360026042
patch: boolean position
rank: 961
score: 97.88795776367188
patch: if return $STRING$ ;
rank: 961
score: 97.76288604736328
patch: return while ;
rank: 961
score: 97.53598022460938
patch: return contains ;
rank: 961
score: 97.53150939941406
patch: return sort ;
rank: 961
score: 97.45640563964844
patch: return add ;
rank: 961
score: 97.34457397460938
patch: return millis ;
rank: 961
score: 95.64920043945312
patch: return new
rank: 962
score: 97.32588704427083
patch: return }
rank: 962
score: 95.51336669921875
patch: int count
rank: 963
score: 97.50288391113281
patch: , position ;
rank: 963
score: 97.17335001627605
patch: } ;
rank: 963
score: 95.496826171875
patch: position ;
rank: 964
score: 97.48191833496094
patch: return / $NUMBER$
rank: 964
score: 97.16672770182292
patch: result ;
rank: 964
score: 95.48255411783855
patch: int start
rank: 965
score: 97.04425048828125
patch: / /
rank: 965
score: 95.4464619954427
patch: / ;
rank: 966
score: 97.73113250732422
patch: return finally ;
rank: 966
score: 97.62478637695312
patch: return set ;
rank: 966
score: 97.48490905761719
patch: return err ;
rank: 966
score: 97.47309875488281
patch: return position }
rank: 966
score: 97.42182922363281
patch: return else }
rank: 966
score: 97.03999837239583
patch: / *
rank: 966
score: 95.44264729817708
patch: throw position
rank: 967
score: 97.7262954711914
patch: catch position ;
rank: 967
score: 97.61295318603516
patch: ~ 0 ?
rank: 967
score: 97.4189453125
patch: return long CaMeL
rank: 967
score: 96.99319458007812
patch: return ~
rank: 967
score: 95.40478515625
patch: final position
rank: 968
score: 97.4758071899414
patch: break ; }
rank: 968
score: 97.47132873535156
patch: else { return
rank: 968
score: 97.41377258300781
patch: return ~ ~
rank: 968
score: 96.98610432942708
patch: ) ;
rank: 968
score: 95.3958231608073
patch: / position
rank: 969
score: 97.4265365600586
patch: return reverse ;
rank: 969
score: 97.40949249267578
patch: return substring ;
rank: 969
score: 96.9506123860677
patch: continue ;
rank: 969
score: 95.353271484375
patch: int ;
rank: 970
score: 97.56570434570312
patch: }
rank: 970
score: 97.27851104736328
patch: return lock ;
rank: 970
score: 96.94912719726562
patch: LOG .
rank: 971
score: 97.41326904296875
patch: try { ;
rank: 971
score: 97.399658203125
patch: int return ;
rank: 971
score: 97.26800537109375
patch: -= position ;
rank: 971
score: 96.91756184895833
patch: return *
rank: 971
score: 95.20721435546875
patch: position
rank: 972
score: 96.88665771484375
patch: } }
rank: 972
score: 94.80857849121094
patch: try
rank: 973
score: 97.56272888183594
patch: throw false ;
rank: 973
score: 97.45986938476562
patch: return * *
rank: 973
score: 97.262939453125
patch: return decode ;
rank: 973
score: 97.21782684326172
patch: pos ++ ;
rank: 973
score: 96.8755594889323
patch: * /
rank: 973
score: 94.28722381591797
patch: throw
rank: 974
score: 97.37346649169922
patch: result = ;
rank: 974
score: 97.36878967285156
patch: callback . ;
rank: 974
score: 97.21316528320312
patch: assert true ;
rank: 974
score: 94.11906433105469
patch: int
rank: 975
score: 97.32247161865234
patch: return else return
rank: 975
score: 97.20513153076172
patch: return digit ;
rank: 975
score: 96.76866658528645
patch: return (
rank: 975
score: 93.93792724609375
patch: /
rank: 976
score: 96.7598368326823
patch: log .
rank: 976
score: 93.62309265136719
patch: boolean
rank: 977
score: 97.29643249511719
patch: return / }
rank: 977
score: 96.67034912109375
patch: Logger .
rank: 977
score: 93.49578857421875
patch: String
rank: 978
score: 97.15179443359375
patch: return hour ;
rank: 978
score: 93.47154998779297
patch: long
rank: 979
score: 97.50830078125
patch: return ; _
rank: 979
score: 97.36380004882812
patch: break ; ;
rank: 979
score: 97.26541137695312
patch: return YEAR ;
rank: 979
score: 96.59096272786458
patch: return /
rank: 979
score: 93.12722778320312
patch: else
rank: 980
score: 97.36123657226562
patch: return values ;
rank: 980
score: 97.2643814086914
patch: throw $STRING$ ;
rank: 980
score: 96.564697265625
patch: logger .
rank: 980
score: 93.10250854492188
patch: set
rank: 981
score: 97.44300079345703
patch: return > 0
rank: 981
score: 97.34504699707031
patch: return EMPTY ;
rank: 981
score: 96.55385335286458
patch: } return
rank: 981
score: 93.06786346435547
patch: result
rank: 982
score: 97.46354675292969
patch: int * ;
rank: 982
score: 97.43502044677734
patch: return <= 0
rank: 982
score: 97.06387329101562
patch: return text
rank: 982
score: 96.48500569661458
patch: if (
rank: 982
score: 96.42832438151042
patch: return ALL
rank: 982
score: 93.03781127929688
patch: final
rank: 983
score: 97.4327621459961
patch: return double ;
rank: 983
score: 97.3285903930664
patch: int ~ ;
rank: 983
score: 97.27285766601562
patch: position ++ ;
rank: 983
score: 96.47198486328125
patch: Log .
rank: 984
score: 97.450927734375
patch: catch null ;
rank: 984
score: 97.40918731689453
patch: return stop ;
rank: 984
score: 97.30305989583333
patch: else ;
rank: 984
score: 97.24942779541016
patch: catch ( ;
rank: 984
score: 97.06467692057292
patch: return return
rank: 984
score: 96.91976928710938
patch: return $NUMBER$
rank: 984
score: 96.42432657877605
patch: / :
rank: 985
score: 97.11427307128906
patch: return TYPE ;
rank: 985
score: 96.42298380533855
patch: return -
rank: 985
score: 92.86798095703125
patch: ;
rank: 986
score: 97.412109375
patch: catch false ;
rank: 986
score: 97.39817810058594
patch: return == 0
rank: 986
score: 96.82191975911458
patch: return this
rank: 986
score: 96.41805013020833
patch: * ;
rank: 986
score: 92.84375
patch: finally
rank: 987
score: 97.4075698852539
patch: if false ;
rank: 987
score: 92.77938842773438
patch: check
rank: 988
score: 97.4036636352539
patch: return command ;
rank: 988
score: 96.86474609375
patch: } else
rank: 988
score: 96.69662475585938
patch: return long
rank: 988
score: 94.92697143554688
patch: _
rank: 988
score: 92.7723617553711
patch: public
rank: 989
score: 97.16255187988281
patch: } * /
rank: 989
score: 96.64175415039062
patch: return <
rank: 989
score: 96.6188456217448
patch: if ;
rank: 989
score: 96.19197591145833
patch: / -
rank: 989
score: 94.66868591308594
patch: :
rank: 989
score: 92.75141143798828
patch: System
rank: 990
score: 97.14591979980469
patch: loop * /
rank: 990
score: 96.59283447265625
patch: return &
rank: 990
score: 96.53759765625
patch: throw $NUMBER$
rank: 990
score: 94.5970458984375
patch: --
rank: 990
score: 92.66458129882812
patch: {
rank: 991
score: 96.93804931640625
patch: throw ;
rank: 991
score: 92.64820098876953
patch: Assert
rank: 992
score: 96.70591227213542
patch: while ;
rank: 992
score: 92.5588607788086
patch: logger
rank: 993
score: 96.484619140625
patch: return >=
rank: 993
score: 92.52217864990234
patch: last
rank: 994
score: 96.59279378255208
patch: return ?
rank: 994
score: 96.55771891276042
patch: ? ;
rank: 994
score: 96.47777303059895
patch: return int
rank: 994
score: 92.46162414550781
patch: buf
rank: 995
score: 96.43770345052083
patch: return 0
rank: 995
score: 96.1774393717448
patch: loop :
rank: 995
score: 94.27131652832031
patch: we
rank: 995
score: 92.38553619384766
patch: sb
rank: 996
score: 96.44881184895833
patch: ~ 0
rank: 996
score: 96.43070475260417
patch: return bucket
rank: 996
score: 96.40358479817708
patch: , ;
rank: 996
score: 96.19846598307292
patch: http :
rank: 996
score: 96.14048258463542
patch: catch ;
rank: 996
score: 92.26809692382812
patch: ret
rank: 997
score: 96.33365885416667
patch: switch ;
rank: 997
score: 94.33660888671875
patch: ~
rank: 997
score: 93.70439147949219
patch: bucket
rank: 997
score: 92.24310302734375
patch: start
rank: 998
score: 96.08041381835938
patch: start ;
rank: 998
score: 92.23475646972656
patch: abstract
rank: 999
score: 94.28860473632812
patch: *
rank: 999
score: 91.9844741821289
patch: LOG
rank: 1000
score: 93.4844970703125
patch: m
