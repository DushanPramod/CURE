rank: 1
score: 99.95034790039062
patch: case $NUMBER$ :
rank: 1
score: 99.68558959960937
patch: case $NUMBER$ : {
rank: 1
score: 99.50306701660156
patch: case $NUMBER$ : { case $NUMBER$ :
rank: 1
score: 99.27879503038194
patch: { * * * * { * /
rank: 2
score: 99.58396911621094
patch: case $STRING$ :
rank: 2
score: 99.49147251674107
patch: case $NUMBER$ : case $NUMBER$ :
rank: 2
score: 99.35073617788461
patch: return str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 2
score: 99.27053493923611
patch: { * * * * * { /
rank: 3
score: 99.4390869140625
patch: case 1 : { case $NUMBER$ :
rank: 3
score: 99.43546295166016
patch: case 1 :
rank: 3
score: 99.37730189732143
patch: case $NUMBER$ : return true ;
rank: 3
score: 99.30715707632211
patch: switch ( str . char CaMeL At ( 1 ) ) {
rank: 3
score: 99.30292217548077
patch: return str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 3
score: 99.27275933159723
patch: case $NUMBER$ : return true ; default :
rank: 3
score: 99.26753743489583
patch: { * * * * { { /
rank: 4
score: 99.40403747558594
patch: case 0 : { case $NUMBER$ :
rank: 4
score: 99.33959089006696
patch: case $NUMBER$ : return false ;
rank: 4
score: 99.29645182291667
patch: case $NUMBER$ || str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 4
score: 99.24989624023438
patch: case $NUMBER$ : return true ; case $NUMBER$ :
rank: 4
score: 99.2279281616211
patch: { * * * * { /
rank: 4
score: 99.11347961425781
patch: case str . length ( ) :
rank: 5
score: 99.406494140625
patch: case $NUMBER$ : return false ; case $NUMBER$ :
rank: 5
score: 99.39809744698661
patch: case 1 : case $NUMBER$ :
rank: 5
score: 99.37635803222656
patch: case $NUMBER$ : { case 1 :
rank: 5
score: 99.28602701822916
patch: case $NUMBER$ || str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 5
score: 99.23377821180556
patch: case $NUMBER$ : return false ; default :
rank: 5
score: 99.2183837890625
patch: { * * * * * * /
rank: 6
score: 99.37994384765625
patch: case 0 : case $NUMBER$ :
rank: 6
score: 99.28586050180289
patch: switch ( str . char CaMeL At ( 0 ) ) {
rank: 6
score: 99.22141927083334
patch: to CaMeL Boolean ( str . char CaMeL At ( 0 ) ) ;
rank: 6
score: 99.19889831542969
patch: * * * * * { /
rank: 6
score: 99.19365985576923
patch: case str = str . char CaMeL At ( 0 ) ;
rank: 6
score: 99.00656127929688
patch: case 0 :
rank: 7
score: 99.31396484375
patch: case 1 : { case 1 :
rank: 7
score: 99.27041015625
patch: if ( str . char CaMeL At ( 1 ) == $STRING$ ) {
rank: 7
score: 99.20123291015625
patch: case $NUMBER$ : return $STRING$ . equals ( str ) ;
rank: 7
score: 99.19284292367789
patch: String str = str . char CaMeL At ( 0 ) ;
rank: 7
score: 99.18276638454861
patch: { * * * { * * /
rank: 7
score: 99.1752685546875
patch: to CaMeL Boolean ( str . char CaMeL At ( 1 ) ) ;
rank: 7
score: 98.93307059151786
patch: case ) { case $NUMBER$ :
rank: 8
score: 99.33492279052734
patch: case $NUMBER$ : case $NUMBER$ : {
rank: 8
score: 99.28446451822917
patch: case $NUMBER$ : { case $NUMBER$ : {
rank: 8
score: 99.25035184972427
patch: equals CaMeL Ignore CaMeL Case ( str . char CaMeL At ( 1 ) ) ;
rank: 8
score: 99.2212158203125
patch: case 1 : {
rank: 8
score: 99.19659423828125
patch: case Integer . MIN _ VALUE :
rank: 8
score: 99.16714816623264
patch: * * * * * * { /
rank: 8
score: 99.15064290364583
patch: return ( str . char CaMeL At ( 0 ) == $STRING$ ) ;
rank: 8
score: 98.91337280273437
patch: case $STRING$ : {
rank: 9
score: 99.28892299107143
patch: case $NUMBER$ : case 0 :
rank: 9
score: 99.24721392463235
patch: equals CaMeL Ignore CaMeL Case ( str . char CaMeL At ( 0 ) ) ;
rank: 9
score: 99.19176025390625
patch: case $NUMBER$ : case $NUMBER$ : case $NUMBER$ :
rank: 9
score: 99.18489074707031
patch: case $NUMBER$ : return str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 9
score: 99.1666259765625
patch: * * * * * { * /
rank: 9
score: 99.14811488560268
patch: if ( str . char CaMeL At ( 0 ) == $STRING$ )
rank: 9
score: 99.14305013020834
patch: return ( str . char CaMeL At ( 1 ) == $STRING$ ) ;
rank: 9
score: 98.89588758680556
patch: case str . length ( ) : {
rank: 10
score: 99.28787667410714
patch: case $STRING$ : case $NUMBER$ :
rank: 10
score: 99.26320975167411
patch: case $NUMBER$ : case 1 :
rank: 10
score: 99.24650573730469
patch: case $NUMBER$ : { return false ;
rank: 10
score: 99.18263753255208
patch: case $NUMBER$ ? Boolean . TRUE : Boolean . FALSE ;
rank: 10
score: 99.16351318359375
patch: { * * * * * /
rank: 10
score: 99.14080810546875
patch: return new str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 10
score: 99.13888549804688
patch: case $NUMBER$ : return str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 10
score: 98.82394070095486
patch: case char CaMeL At ( 0 ) :
rank: 11
score: 99.21247694227431
patch: case 1 : { case $NUMBER$ : {
rank: 11
score: 99.14362127130681
patch: case $NUMBER$ || str . char CaMeL At ( :
rank: 11
score: 99.1427001953125
patch: * * * * * { { /
rank: 11
score: 99.13719831194196
patch: if ( str . char CaMeL At ( 1 ) == $STRING$ )
rank: 11
score: 99.13543294270833
patch: return this . str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 11
score: 99.11883544921875
patch: case $NUMBER$ : return str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 11
score: 98.7982421875
patch: case - 1 :
rank: 12
score: 99.2835693359375
patch: case $NUMBER$ : return { case $NUMBER$ :
rank: 12
score: 99.236572265625
patch: case $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 12
score: 99.14250183105469
patch: { * * * { * /
rank: 12
score: 99.13803100585938
patch: case $NUMBER$ || str . char CaMeL At ( $NUMBER$ :
rank: 12
score: 99.13542036576705
patch: case str . char CaMeL At ( 0 ) :
rank: 12
score: 99.13450113932292
patch: switch ( str . char CaMeL At ( 0 ) )
rank: 12
score: 99.10433523995536
patch: case 1 : return true ;
rank: 13
score: 99.20619032118056
patch: case $NUMBER$ : { case 1 : {
rank: 13
score: 99.13579644097223
patch: { * * * { * { /
rank: 13
score: 99.13547770182292
patch: case $NUMBER$ : return Boolean . TRUE ; case $NUMBER$ :
rank: 13
score: 99.13285006009616
patch: case $NUMBER$ | str . char CaMeL At ( 0 ) ;
rank: 13
score: 99.11880154079861
patch: case $NUMBER$ : { return false ; }
rank: 13
score: 99.09996337890625
patch: switch ( str . length ( ) ) {
rank: 13
score: 98.76933458116319
patch: case str [ 0 ] = $STRING$ ;
rank: 14
score: 99.27433776855469
patch: case $STRING$ : { case $NUMBER$ :
rank: 14
score: 99.23544921875
patch: if ( str . char CaMeL At ( 0 ) == $STRING$ ) {
rank: 14
score: 99.23282877604167
patch: case $NUMBER$ : break ; case $NUMBER$ :
rank: 14
score: 99.19087049696181
patch: case $NUMBER$ : case $NUMBER$ : break {
rank: 14
score: 99.13135782877605
patch: { * * * /
rank: 14
score: 99.13075764973958
patch: case | str . char CaMeL At ( 0 ) ;
rank: 14
score: 99.12665349786931
patch: case $NUMBER$ || $STRING$ . equals ( str ) ;
rank: 14
score: 99.11585411658653
patch: case $NUMBER$ : str . char CaMeL At ( 0 ) ;
rank: 15
score: 99.23460975060097
patch: case $NUMBER$ + str . char CaMeL At ( 0 ) ;
rank: 15
score: 99.18566131591797
patch: case $NUMBER$ : { case $NUMBER$ {
rank: 15
score: 99.12941080729166
patch: to CaMeL String ( str . char CaMeL At ( 0 ) ) ;
rank: 15
score: 99.12024603949652
patch: { * * * { { * /
rank: 15
score: 99.08072662353516
patch: case 1 : return str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 15
score: 98.74798583984375
patch: case - $NUMBER$ :
rank: 16
score: 99.2598648071289
patch: case 1 : case $NUMBER$ : {
rank: 16
score: 99.22958374023438
patch: if ( str . length ( ) == 1 ) {
rank: 16
score: 99.18173556857639
patch: case $NUMBER$ : { { case $NUMBER$ :
rank: 16
score: 99.12569486177884
patch: return str . char CaMeL At ( 0 ) != $STRING$ ;
rank: 16
score: 99.11652967664931
patch: { * * * * : * /
rank: 16
score: 99.10236065204327
patch: switch ( str . length ( ) ) { case $NUMBER$ :
rank: 16
score: 99.08784623579545
patch: case $NUMBER$ : return Boolean . TRUE ; default :
rank: 16
score: 99.0765380859375
patch: return str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 16
score: 98.73868560791016
patch: case ) { case $NUMBER$ : {
rank: 17
score: 99.25868225097656
patch: case 0 : { case 1 :
rank: 17
score: 99.20570678710938
patch: case $NUMBER$ : return $NUMBER$ ; case $NUMBER$ :
rank: 17
score: 99.17680528428819
patch: case $NUMBER$ : case 1 : break {
rank: 17
score: 99.11583709716797
patch: * * * * { * /
rank: 17
score: 99.09951547475961
patch: case $NUMBER$ : char . char CaMeL At ( 0 ) ;
rank: 17
score: 99.069580078125
patch: case 1 : return false ;
rank: 17
score: 99.06818389892578
patch: case Integer . MAX _ VALUE :
rank: 18
score: 99.25564575195312
patch: case $NUMBER$ : { case 0 :
rank: 18
score: 99.22267659505208
patch: if ( str . length ( ) == 0 ) {
rank: 18
score: 99.20027465820313
patch: case 1 : return false ; case $NUMBER$ :
rank: 18
score: 99.17486572265625
patch: case $NUMBER$ : if case 1 :
rank: 18
score: 99.11054144965277
patch: { * * { * * { /
rank: 18
score: 99.10232107979911
patch: case ( str . char CaMeL At ( 0 ) == $STRING$ )
rank: 18
score: 99.09869384765625
patch: switch ( str . char CaMeL At ( 1 ) )
rank: 18
score: 99.06442260742188
patch: case $NUMBER$ : break ;
rank: 18
score: 98.73014322916667
patch: case ( $STRING$ ) :
rank: 19
score: 99.25014822823661
patch: case $NUMBER$ { case $NUMBER$ :
rank: 19
score: 99.22123500279018
patch: this . str = str . char CaMeL At ( 0 ) ;
rank: 19
score: 99.17400251116071
patch: case 1 : case 1 :
rank: 19
score: 99.10923258463542
patch: { * * { * * * /
rank: 19
score: 99.10044642857143
patch: case || str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 19
score: 99.09496131310097
patch: case str = str . char CaMeL At ( 1 ) ;
rank: 19
score: 98.72969818115234
patch: case $NUMBER$ : return false ; }
rank: 20
score: 99.2469482421875
patch: case 0 : case $NUMBER$ : {
rank: 20
score: 99.217041015625
patch: $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 20
score: 99.16245524088542
patch: case $NUMBER$ : { if case $NUMBER$ :
rank: 20
score: 99.10400390625
patch: / * * * * { /
rank: 20
score: 99.10039876302083
patch: return this . str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 20
score: 99.09244478665866
patch: static str = str . char CaMeL At ( 0 ) ;
rank: 20
score: 98.72213745117188
patch: case $STRING$ : return false ; }
rank: 21
score: 99.21490071614583
patch: case $NUMBER$ : str = str . char CaMeL At ( 0 ) ;
rank: 21
score: 99.17034912109375
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( str ) ;
rank: 21
score: 99.10214233398438
patch: * * * * * * /
rank: 21
score: 99.0409647623698
patch: name = str . char CaMeL At ( 0 ) ;
rank: 21
score: 99.02117365056819
patch: case Integer . parse CaMeL Int ( $NUMBER$ ) :
rank: 21
score: 98.70704481336806
patch: case char CaMeL At ( 1 ) :
rank: 22
score: 99.2131680575284
patch: } switch ( str . length ( ) ) {
rank: 22
score: 99.15057373046875
patch: case $NUMBER$ : if case $NUMBER$ :
rank: 22
score: 99.09847005208333
patch: { * { * * * { /
rank: 22
score: 99.08770282451923
patch: String str = str . char CaMeL At ( 1 ) ;
rank: 22
score: 99.03775787353516
patch: case 1 : return str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 22
score: 98.69081115722656
patch: case $NUMBER$ : return true ; }
rank: 23
score: 99.21036529541016
patch: case $NUMBER$ : { return true ;
rank: 23
score: 99.2054443359375
patch: case $NUMBER$ : case $NUMBER$ + $NUMBER$ :
rank: 23
score: 99.15569661458333
patch: case $NUMBER$ : throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 23
score: 99.14919704861111
patch: case $NUMBER$ : { if case 1 :
rank: 23
score: 99.09333801269531
patch: * * * { * * /
rank: 23
score: 99.09327043805804
patch: return new str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 23
score: 99.08540482954545
patch: case str . char CaMeL At ( 1 ) :
rank: 23
score: 99.03145054408482
patch: return ! str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 23
score: 98.68950653076172
patch: case str . trim ( ) :
rank: 24
score: 99.20466831752232
patch: case 0 : case 0 :
rank: 24
score: 99.15050048828125
patch: case 1 : return true ; case $NUMBER$ :
rank: 24
score: 99.1488037109375
patch: case 1 : { case 1 : {
rank: 24
score: 99.09214952256944
patch: { * * * : * * /
rank: 24
score: 99.08330426897321
patch: String str 0 = str . char CaMeL At ( 0 ) ;
rank: 24
score: 99.07375863882211
patch: case $NUMBER$ | str . char CaMeL At ( 1 ) ;
rank: 24
score: 98.68719482421875
patch: case $STRING$ : return true ; }
rank: 25
score: 99.20132882254464
patch: case 1 : case 0 :
rank: 25
score: 99.14484197443181
patch: case $NUMBER$ : { case $NUMBER$ : case $NUMBER$ :
rank: 25
score: 99.14101155598958
patch: case $NUMBER$ : { {
rank: 25
score: 99.08928680419922
patch: { * * * : * /
rank: 25
score: 99.07747708834134
patch: case $NUMBER$ : str . char CaMeL At ( 1 ) ;
rank: 25
score: 99.0701153094952
patch: return value . char CaMeL At ( 0 ) == $STRING$ ;
rank: 25
score: 99.0252216045673
patch: case ( str . char CaMeL At ( 0 ) ) :
rank: 25
score: 99.01105499267578
patch: case - 1 : case $NUMBER$ :
rank: 25
score: 98.68672943115234
patch: case null :
rank: 26
score: 99.20612041766827
patch: case $NUMBER$ + str . char CaMeL At ( 1 ) ;
rank: 26
score: 99.13951009114584
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( { $STRING$
rank: 26
score: 99.08653428819444
patch: / * * * * * { /
rank: 26
score: 99.06917317708333
patch: return Boolean . $STRING$ . char CaMeL At ( 1 ) == $STRING$ ;
rank: 26
score: 99.02344512939453
patch: case 0 : return str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 26
score: 99.00215657552083
patch: case $NUMBER$ ? Boolean . TRUE : Boolean . TRUE ;
rank: 26
score: 98.675537109375
patch: case str ; case $STRING$ :
rank: 27
score: 99.20323079427084
patch: case $NUMBER$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 27
score: 99.19144112723214
patch: case $NUMBER$ : case $NUMBER$ {
rank: 27
score: 99.13759765625
patch: case Integer . MAX _ VALUE : case Integer . MAX _ VALUE :
rank: 27
score: 99.08641899956598
patch: * * * * * * * /
rank: 27
score: 99.06807163783482
patch: $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 27
score: 99.06553548177084
patch: to CaMeL String ( str . char CaMeL At ( 1 ) ) ;
rank: 27
score: 99.02324567522321
patch: case 0 : return true ;
rank: 27
score: 99.00191243489583
patch: case $NUMBER$ : return Boolean . FALSE ; case $NUMBER$ :
rank: 27
score: 98.67091587611607
patch: case ) { case 1 :
rank: 28
score: 99.20011393229167
patch: c = str . char CaMeL At ( 0 ) ;
rank: 28
score: 99.18545968191964
patch: case $NUMBER$ : case 0 {
rank: 28
score: 99.13602294921876
patch: case 1 : case $NUMBER$ : case $NUMBER$ :
rank: 28
score: 99.08311631944444
patch: * * * * { * * /
rank: 28
score: 99.06693892045455
patch: case str . char CaMeL At ( 0 ) ;
rank: 28
score: 99.02219935825893
patch: return ! str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 28
score: 98.66594587053571
patch: case str ; case $NUMBER$ :
rank: 29
score: 99.18415178571429
patch: case 0 : case 1 :
rank: 29
score: 99.12158203125
patch: case Integer . MAX _ VALUE : case Integer . MIN _ VALUE :
rank: 29
score: 99.11824544270833
patch: case 1 : case 1 : break {
rank: 29
score: 99.07928466796875
patch: { * * { * { * /
rank: 29
score: 99.06239536830357
patch: case || str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 29
score: 98.99050071022727
patch: case Integer . MIN _ VALUE : case $NUMBER$ :
rank: 29
score: 98.66436767578125
patch: case : return false ; case $NUMBER$ :
rank: 30
score: 99.1993408203125
patch: case $NUMBER$ : switch ( str . char CaMeL At ( 1 ) ) {
rank: 30
score: 99.18180084228516
patch: case 1 : { case 0 :
rank: 30
score: 99.1187255859375
patch: case Integer . MIN _ VALUE : case Integer . MAX _ VALUE :
rank: 30
score: 99.11790466308594
patch: case 1 : { case $NUMBER$ {
rank: 30
score: 99.07869466145833
patch: { * { * * { * /
rank: 30
score: 99.06192452566964
patch: } switch ( str . char CaMeL At ( 0 ) ) {
rank: 30
score: 99.01514434814453
patch: case 0 : return str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 30
score: 98.98368696732955
patch: case $NUMBER$ : return $STRING$ . equals ( str :
rank: 30
score: 98.66341824001736
patch: case str [ 0 ] = str ;
rank: 31
score: 99.18125915527344
patch: case $NUMBER$ { case $NUMBER$ : {
rank: 31
score: 99.1179443359375
patch: case $NUMBER$ : throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;
rank: 31
score: 99.11680094401042
patch: case 1 : case $NUMBER$ : break {
rank: 31
score: 99.07815890842014
patch: * * * { * * * /
rank: 31
score: 99.06024169921875
patch: return ! str . char CaMeL At ( 0 ) ;
rank: 31
score: 99.05825570913461
patch: case $NUMBER$ : char . char CaMeL At ( 1 ) ;
rank: 31
score: 99.0109112079327
patch: case ( str . char CaMeL At ( 0 ) ) {
rank: 31
score: 98.66072591145833
patch: case str . equals ( $STRING$ ) :
rank: 32
score: 99.19602614182692
patch: case $NUMBER$ : switch ( str . length ( ) ) {
rank: 32
score: 99.17678493923611
patch: case 0 : { case $NUMBER$ : {
rank: 32
score: 99.11538696289062
patch: case $NUMBER$ : case 1 : {
rank: 32
score: 99.11221516927084
patch: case Integer . MIN _ VALUE : case Integer . MIN _ VALUE :
rank: 32
score: 99.07489013671875
patch: { * * * * / * /
rank: 32
score: 99.05834147135417
patch: return Boolean . $STRING$ . char CaMeL At ( 0 ) == $STRING$ ;
rank: 32
score: 99.05635579427083
patch: case $NUMBER$ : { return true ; }
rank: 32
score: 98.97681274414063
patch: case $NUMBER$ : return $STRING$ . equals ( :
rank: 33
score: 99.19482421875
patch: case $NUMBER$ && str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 33
score: 99.17420305524554
patch: case 0 : case $NUMBER$ {
rank: 33
score: 99.11530303955078
patch: case $NUMBER$ : { if $NUMBER$ :
rank: 33
score: 99.07223849826389
patch: { * { * * * * /
rank: 33
score: 99.0440673828125
patch: str = str . char CaMeL At ( 0 ) ;
rank: 33
score: 98.96363414417614
patch: case Integer . parse CaMeL Int ( str ) :
rank: 33
score: 98.6365737915039
patch: case null : { case $STRING$ :
rank: 34
score: 99.19095865885417
patch: case $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 34
score: 99.11457170758929
patch: case $NUMBER$ : case 1 {
rank: 34
score: 99.11015625
patch: case $NUMBER$ : return false ; case 1 :
rank: 34
score: 99.0705337524414
patch: * * { * * * /
rank: 34
score: 99.055908203125
patch: return str . char CaMeL At ( 0 ) == null ;
rank: 34
score: 99.0389404296875
patch: if ( str . to CaMeL String ( ) == null ) {
rank: 34
score: 98.95463423295455
patch: case Character . $NUMBER$ : case Character . $NUMBER$ :
rank: 34
score: 98.62854682074652
patch: case : return true ; case $NUMBER$ :
rank: 35
score: 99.1874771118164
patch: case $NUMBER$ : { str = str . char CaMeL At ( 0 ) ;
rank: 35
score: 99.16565619574652
patch: case 1 : { { case $NUMBER$ :
rank: 35
score: 99.10804748535156
patch: case 1 : if case 1 :
rank: 35
score: 99.063232421875
patch: { * * * * * / /
rank: 35
score: 99.05485316685268
patch: return str . char CaMeL At ( 0 ) == $STRING$ ; }
rank: 35
score: 98.9546231356534
patch: case Integer . value CaMeL Of ( $NUMBER$ ) :
rank: 36
score: 99.16451687282986
patch: case 1 : case $NUMBER$ + $NUMBER$ :
rank: 36
score: 99.06239827473958
patch: / * * * * { * /
rank: 36
score: 99.0314471905048
patch: static str = str . char CaMeL At ( 1 ) ;
rank: 36
score: 98.99930826822917
patch: x = str . char CaMeL At ( 0 ) ;
rank: 36
score: 98.95119803292411
patch: case $STRING$ : case $STRING$ :
rank: 36
score: 98.6243667602539
patch: case ) { case 1 : {
rank: 37
score: 99.18450520833333
patch: case $NUMBER$ && str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 37
score: 99.15911865234375
patch: case $STRING$ : case $NUMBER$ {
rank: 37
score: 99.10246446397569
patch: case $NUMBER$ : break { case $NUMBER$ :
rank: 37
score: 99.08983018663194
patch: case 1 : return { case $NUMBER$ :
rank: 37
score: 99.0616683959961
patch: * * { * * { /
rank: 37
score: 99.05201009114583
patch: to CaMeL Long ( str . char CaMeL At ( 0 ) ) ;
rank: 37
score: 99.02900041852679
patch: case $NUMBER$ : = str . char CaMeL At ( 0 ) ;
rank: 37
score: 98.99855550130208
patch: case ( str . char CaMeL At ( 1 ) )
rank: 37
score: 98.95110529119319
patch: case $NUMBER$ : return Boolean . FALSE ; default :
rank: 37
score: 98.61416286892361
patch: case char CaMeL At ( $NUMBER$ ) :
rank: 38
score: 99.1572265625
patch: case $NUMBER$ : case - $NUMBER$ :
rank: 38
score: 99.09773763020833
patch: case $NUMBER$ : if case 1 : {
rank: 38
score: 99.05700005425348
patch: * * * { * * { /
rank: 38
score: 99.04915945870536
patch: case && str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 38
score: 98.99683295355902
patch: switch ( str . length ( ) )
rank: 38
score: 98.95084635416667
patch: case $NUMBER$ : return Boolean . value CaMeL Of ( {
rank: 39
score: 99.15318298339844
patch: case 0 : { case 0 :
rank: 39
score: 99.09710693359375
patch: case $NUMBER$ : { case 1 {
rank: 39
score: 99.08871459960938
patch: case 0 : return false ; case 1 :
rank: 39
score: 99.04753960503473
patch: * * { * * * { /
rank: 39
score: 99.02701509915866
patch: case ( str . char CaMeL At ( 0 ) ) ;
rank: 39
score: 98.99590301513672
patch: case 1 : return str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 39
score: 98.95018920898437
patch: case 0 : return true ; case 1 :
rank: 39
score: 98.61043294270833
patch: case str . length ( ) ; }
rank: 40
score: 99.17818450927734
patch: case $NUMBER$ : switch ( str . char CaMeL At ( 0 ) ) {
rank: 40
score: 99.15313720703125
patch: case $NUMBER$ : case 0 : {
rank: 40
score: 99.09686957465277
patch: case $NUMBER$ : { / / * /
rank: 40
score: 99.08614773220486
patch: case 1 : break ; case $NUMBER$ :
rank: 40
score: 99.04234095982143
patch: case ( str . char CaMeL At ( 1 ) == $STRING$ )
rank: 40
score: 99.04214138454861
patch: * * { * * { * /
rank: 40
score: 99.01401192801339
patch: case ? $STRING$ : str . char CaMeL At ( 0 ) ;
rank: 40
score: 98.9447021484375
patch: case $STRING$ : return $STRING$ . equals ( str ) ;
rank: 40
score: 98.60841369628906
patch: case $STRING$ : { case $STRING$ :
rank: 41
score: 99.17688927283653
patch: length ] = str . char CaMeL At ( 0 ) ;
rank: 41
score: 99.1485824584961
patch: case $STRING$ : case $NUMBER$ : {
rank: 41
score: 99.09611511230469
patch: case $NUMBER$ : { if $NUMBER$ {
rank: 41
score: 99.04168701171875
patch: * * * { * { * /
rank: 41
score: 99.01218825120192
patch: ch 0 = str . char CaMeL At ( 0 ) ;
rank: 41
score: 98.99059186662946
patch: case 0 : return false ;
rank: 41
score: 98.60641479492188
patch: case - ) { case $NUMBER$ :
rank: 42
score: 99.13922119140625
patch: case 1 : case $NUMBER$ {
rank: 42
score: 99.08732096354167
patch: case $NUMBER$ : if case $NUMBER$ : {
rank: 42
score: 99.0744384765625
patch: case Long . MIN _ VALUE : case Long . MIN _ VALUE :
rank: 42
score: 99.04076538085937
patch: { * * * * * { { /
rank: 42
score: 99.03821818033855
patch: case | str . char CaMeL At ( 1 ) ;
rank: 42
score: 99.00827261117789
patch: case ( str . char CaMeL At ( 1 ) ) ;
rank: 42
score: 98.98834228515625
patch: name = str . char CaMeL At ( 1 ) ;
rank: 42
score: 98.94309488932292
patch: case $NUMBER$ : return $STRING$ . equals ( $NUMBER$ ) ;
rank: 42
score: 98.60399034288194
patch: case str [ 1 ] = $STRING$ ;
rank: 43
score: 99.17342703683036
patch: this . str = str . char CaMeL At ( 1 ) ;
rank: 43
score: 99.13860405815973
patch: case 0 : case $NUMBER$ + $NUMBER$ :
rank: 43
score: 99.08285183376736
patch: case 1 : { if case 1 :
rank: 43
score: 99.07357584635416
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( { str
rank: 43
score: 99.03709998497597
patch: equals ( str . char CaMeL At ( 0 ) ) ;
rank: 43
score: 99.03664143880208
patch: * * * * { { * /
rank: 43
score: 98.98438313802083
patch: sb . append ( str . char CaMeL At ( 0 ) ) ;
rank: 43
score: 98.94239298502605
patch: case 1 : return $STRING$ . equals ( str ) ;
rank: 43
score: 98.60153634207589
patch: case str [ 0 ] :
rank: 44
score: 99.17298177083333
patch: case $NUMBER$ : str = str . char CaMeL At ( 1 ) ;
rank: 44
score: 99.13794623480902
patch: case 0 : { { case $NUMBER$ :
rank: 44
score: 99.08197699652777
patch: case 1 : { if case $NUMBER$ :
rank: 44
score: 99.07110595703125
patch: case $NUMBER$ : continue ; case $NUMBER$ :
rank: 44
score: 99.03550720214844
patch: case 0 : return false ; }
rank: 44
score: 99.03211263020833
patch: to CaMeL Double ( str . char CaMeL At ( 0 ) ) ;
rank: 44
score: 98.984228515625
patch: case 0 : {
rank: 44
score: 98.94215901692708
patch: case $NUMBER$ || str . length ( ) == $NUMBER$ ;
rank: 45
score: 99.07664659288194
patch: case $NUMBER$ : { { case 1 :
rank: 45
score: 99.07103881835937
patch: case 0 : return false ; case $NUMBER$ :
rank: 45
score: 99.03339979383681
patch: * * * * { * { /
rank: 45
score: 99.03200857979911
patch: case str . char CaMeL At ( 0 ) : return false ;
rank: 45
score: 99.00377546037946
patch: static || str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 45
score: 98.93543090820313
patch: case super . to CaMeL Boolean ( ) :
rank: 45
score: 98.60080295138889
patch: public boolean to CaMeL Boolean ( ) {
rank: 46
score: 99.17228190104167
patch: c = str . char CaMeL At ( 1 ) ;
rank: 46
score: 99.07578531901042
patch: case $NUMBER$ : case $NUMBER$ : break :
rank: 46
score: 99.07080078125
patch: case 1 : case 1 : case $NUMBER$ :
rank: 46
score: 99.03141276041667
patch: * * { * * * * /
rank: 46
score: 99.03018892728366
patch: return str . char CaMeL At ( 1 ) != $STRING$ ;
rank: 46
score: 99.00173715444711
patch: case ] = str . char CaMeL At ( 0 ) ;
rank: 46
score: 98.93092854817708
patch: case $NUMBER$ || str . char CaMeL At ( 0 :
rank: 46
score: 98.60004425048828
patch: case str [ 0 ] 0 :
rank: 47
score: 99.17055100661058
patch: case $NUMBER$ += str . char CaMeL At ( 0 ) ;
rank: 47
score: 99.13165961371527
patch: case $NUMBER$ : { case - $NUMBER$ :
rank: 47
score: 99.06710052490234
patch: case 1 : if case $NUMBER$ :
rank: 47
score: 99.02921549479167
patch: if ( str . char CaMeL At ( 0 ) != $STRING$ ) {
rank: 47
score: 99.02594672309027
patch: / * * * * { { /
rank: 47
score: 99.00120192307692
patch: case $NUMBER$ : equals CaMeL Ignore CaMeL Case ( str ) ;
rank: 47
score: 98.97779259314903
patch: case ( str . char CaMeL At ( 1 ) ) {
rank: 47
score: 98.9307861328125
patch: case $NUMBER$ : return Boolean . TRUE ;
rank: 47
score: 98.59772406684027
patch: case ( str [ 0 ] ) :
rank: 48
score: 99.12701416015625
patch: case $NUMBER$ : { case $STRING$ :
rank: 48
score: 99.06809692382812
patch: case $NUMBER$ : return true ; case 1 :
rank: 48
score: 99.0660400390625
patch: case $NUMBER$ : case $NUMBER$ { break {
rank: 48
score: 99.02386474609375
patch: { * * * * * / }
rank: 48
score: 98.99917367788461
patch: switch ( str . length ( ) ) { case 1 :
rank: 48
score: 98.92734781901042
patch: case 0 : return $STRING$ . equals ( str ) ;
rank: 48
score: 98.59505208333333
patch: case $NUMBER$ : break ; case 1 :
rank: 49
score: 99.16887958233173
patch: case $STRING$ + str . char CaMeL At ( 1 ) ;
rank: 49
score: 99.12557547433036
patch: case $NUMBER$ : case $STRING$ :
rank: 49
score: 99.06680501302084
patch: case Long . MIN _ VALUE : case Float . MIN _ VALUE :
rank: 49
score: 99.06553819444444
patch: case $NUMBER$ : case 1 : break :
rank: 49
score: 99.02336120605469
patch: { * { * * * /
rank: 49
score: 98.99846733940973
patch: switch ( $STRING$ ) { case $NUMBER$ :
rank: 49
score: 98.5911865234375
patch: case + str . length ( ) :
rank: 50
score: 99.16751302083334
patch: this . str 0 = str . char CaMeL At ( 0 ) ;
rank: 50
score: 99.1192626953125
patch: case $NUMBER$ : case - 1 :
rank: 50
score: 99.05000305175781
patch: case 1 : return $STRING$ . equals CaMeL Ignore CaMeL Case ( str ) ;
rank: 50
score: 99.02657063802083
patch: return ! str . char CaMeL At ( 1 ) ;
rank: 50
score: 99.0216064453125
patch: { * * { * * /
rank: 50
score: 98.99479457310268
patch: String str 0 = str . char CaMeL At ( 1 ) ;
rank: 50
score: 98.97090366908482
patch: result = str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 50
score: 98.92171223958333
patch: case $NUMBER$ : return Boolean . TRUE . equals ( {
rank: 50
score: 98.58721245659723
patch: case $STRING$ : break ; case $STRING$ :
rank: 51
score: 99.11637115478516
patch: case $NUMBER$ ] { case $NUMBER$ :
rank: 51
score: 99.04885525173611
patch: case $NUMBER$ : { case $NUMBER$ { {
rank: 51
score: 99.02068413628473
patch: / * * : * * * /
rank: 51
score: 98.96849149816177
patch: case $NUMBER$ : { return str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 51
score: 98.91856800426136
patch: case $NUMBER$ : return super . { case $NUMBER$ :
rank: 52
score: 99.16288248697917
patch: case $STRING$ && str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 52
score: 99.11310577392578
patch: case $STRING$ : { case 1 :
rank: 52
score: 99.04653930664062
patch: case 1 : return false ; case 1 :
rank: 52
score: 99.02039337158203
patch: / * { * * { /
rank: 52
score: 99.01513671875
patch: return new char . char CaMeL At ( 0 ) == $STRING$ ;
rank: 52
score: 98.99153355189732
patch: switch ( str . char CaMeL At ( 0 ) ) { }
rank: 52
score: 98.96617126464844
patch: case $STRING$ : return str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 52
score: 98.9168368252841
patch: case Integer . MAX _ VALUE : case $NUMBER$ :
rank: 52
score: 98.58620198567708
patch: case str . substring ( 1 ) :
rank: 53
score: 99.10710144042969
patch: case $NUMBER$ : { case $NUMBER$ ;
rank: 53
score: 99.04302978515625
patch: case $NUMBER$ : { case $NUMBER$ : :
rank: 53
score: 99.04283447265625
patch: case $NUMBER$ : case $NUMBER$ : case 1 :
rank: 53
score: 99.01959838867188
patch: { * * * * { { * /
rank: 53
score: 99.01382010323661
patch: case && str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 53
score: 98.99045034555289
patch: } switch ( str . char CaMeL At ( 0 ) )
rank: 53
score: 98.91682739257813
patch: case $STRING$ : case $STRING$ : case $STRING$ :
rank: 53
score: 98.58496771918402
patch: case ) return false ; case $NUMBER$ :
rank: 54
score: 99.15989332932692
patch: c 0 = str . char CaMeL At ( 0 ) ;
rank: 54
score: 99.10395159040179
patch: case $NUMBER$ { case 1 :
rank: 54
score: 99.04047185724431
patch: case $NUMBER$ : return false ; case $NUMBER$ : {
rank: 54
score: 99.03943634033203
patch: case 1 : case 1 : {
rank: 54
score: 99.01666937934027
patch: / * * { * * { /
rank: 54
score: 98.96198381696429
patch: result = str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 54
score: 98.58477783203125
patch: case ) { case $STRING$ :
rank: 55
score: 99.15988595145089
patch: case $NUMBER$ : { str . char CaMeL At ( 0 ) ;
rank: 55
score: 99.10315813337054
patch: case 0 : case 0 {
rank: 55
score: 99.03870239257813
patch: case $NUMBER$ : case 1 : case $NUMBER$ :
rank: 55
score: 99.03828260633681
patch: case $NUMBER$ : { if $NUMBER$ { {
rank: 55
score: 99.01527235243056
patch: / * * { * * * /
rank: 55
score: 99.01226399739583
patch: case ( str . char CaMeL At ( 0 ) == $STRING$ ) ;
rank: 55
score: 98.96149444580078
patch: case $NUMBER$ : return str . char CaMeL At ( 1 ) != $STRING$ ;
rank: 55
score: 98.91531372070312
patch: case - 1 : case 1 :
rank: 55
score: 98.58473714192708
patch: case str . substring ( 0 ) :
rank: 56
score: 99.09452311197917
patch: case $NUMBER$ : { case $NUMBER$ : }
rank: 56
score: 99.03802897135417
patch: case 1 : throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 56
score: 99.03785705566406
patch: case 1 : { if $NUMBER$ :
rank: 56
score: 99.01492309570312
patch: { * { * * { /
rank: 56
score: 99.01195475260417
patch: return Boolean . str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 56
score: 98.98697335379464
patch: case $NUMBER$ : switch ( str . to CaMeL String ( ) )
rank: 56
score: 98.96096801757812
patch: case $STRING$ : return str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 56
score: 98.9149169921875
patch: case $NUMBER$ || str . char CaMeL At ( : :
rank: 57
score: 99.15843854631696
patch: case $NUMBER$ || str . char CaMeL At ( 1 ) == $STRING$
rank: 57
score: 99.09164428710938
patch: case $NUMBER$ : case $NUMBER$ { {
rank: 57
score: 99.03746202256944
patch: case 1 : if case 1 : {
rank: 57
score: 99.03704071044922
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( str ) :
rank: 57
score: 99.01123046875
patch: return str . char CaMeL At ( 1 ) == null ;
rank: 57
score: 99.01050482855902
patch: { * * * * case { /
rank: 57
score: 98.98252516526442
patch: switch ( str . char CaMeL At ( $NUMBER$ ) ) {
rank: 57
score: 98.91274685329861
patch: default : case $NUMBER$ : case $NUMBER$ :
rank: 58
score: 99.15647536057692
patch: case $STRING$ + str . char CaMeL At ( 0 ) ;
rank: 58
score: 99.08693150111607
patch: case 1 : case 0 {
rank: 58
score: 99.03739420572917
patch: case $NUMBER$ : case 1 { break {
rank: 58
score: 99.03424627130681
patch: case 1 : { case $NUMBER$ : case $NUMBER$ :
rank: 58
score: 99.0101318359375
patch: { * * * { * / /
rank: 58
score: 99.00686410757211
patch: append ( str . char CaMeL At ( 0 ) ) ;
rank: 58
score: 98.95707194010417
patch: f = str . char CaMeL At ( 0 ) ;
rank: 58
score: 98.91029866536458
patch: case 1 : return true ; default :
rank: 58
score: 98.5810546875
patch: case str ) { case $NUMBER$ :
rank: 59
score: 99.1533203125
patch: case $NUMBER$ += str . char CaMeL At ( 1 ) ;
rank: 59
score: 99.08369445800781
patch: case 0 : case 0 : {
rank: 59
score: 99.03732299804688
patch: case $NUMBER$ : if $NUMBER$ { case $NUMBER$ :
rank: 59
score: 99.00859069824219
patch: * * * * { { /
rank: 59
score: 99.00409807477679
patch: return str . char CaMeL At ( 1 ) == $STRING$ ; }
rank: 59
score: 98.98201206752232
patch: static || str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 59
score: 98.95693969726562
patch: x = str . char CaMeL At ( 1 ) ;
rank: 59
score: 98.90769264914773
patch: case Integer . value CaMeL Of ( $STRING$ ) :
rank: 59
score: 98.58077663845486
patch: } if ( value == null ) {
rank: 60
score: 99.03709581163194
patch: case 1 : { / / * /
rank: 60
score: 99.031982421875
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( str ) {
rank: 60
score: 99.00814819335938
patch: / * * { * * /
rank: 60
score: 99.00328717912946
patch: } switch ( str . char CaMeL At ( 1 ) ) {
rank: 60
score: 98.97787710336539
patch: if ( str . to CaMeL String ( ) == null )
rank: 60
score: 98.90767415364583
patch: case $NUMBER$ : return $STRING$ . equals ( str ) {
rank: 60
score: 98.5785140991211
patch: if ( value == null ) {
rank: 61
score: 99.08209228515625
patch: case $NUMBER$ ] { case 1 :
rank: 61
score: 99.03420003255208
patch: case 1 : break { case $NUMBER$ :
rank: 61
score: 99.03120930989583
patch: case Character . MIN _ VALUE : case Character . MIN _ VALUE :
rank: 61
score: 99.00606960720486
patch: / * * { * { * /
rank: 61
score: 99.0026385967548
patch: return value . char CaMeL At ( 1 ) == $STRING$ ;
rank: 61
score: 98.97585042317708
patch: case $NUMBER$ : switch ( str . length ( ) )
rank: 61
score: 98.94921875
patch: sb . append ( str . char CaMeL At ( 1 ) ) ;
rank: 62
score: 99.14511108398438
patch: case $NUMBER$ : { str = str . char CaMeL At ( 1 ) ;
rank: 62
score: 99.081787109375
patch: case 0 { case $NUMBER$ :
rank: 62
score: 99.03306579589844
patch: case 1 : { case 1 {
rank: 62
score: 99.00523376464844
patch: { * * * * / /
rank: 62
score: 99.0019775390625
patch: if ( str . char CaMeL At ( 1 ) != $STRING$ ) {
rank: 62
score: 98.94875919117646
patch: case $NUMBER$ : return ! str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 62
score: 98.90512520926339
patch: default : return true ; }
rank: 62
score: 98.57308197021484
patch: case 1 : return false ; }
rank: 63
score: 99.14302280970982
patch: case $NUMBER$ || str . char CaMeL At ( 0 ) == $STRING$
rank: 63
score: 99.0798110961914
patch: case 1 : case 0 : {
rank: 63
score: 99.0298602764423
patch: case $NUMBER$ : throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 63
score: 99.00078938802083
patch: case : switch ( str . char CaMeL At ( 0 ) ) {
rank: 63
score: 98.97393329326923
patch: interned ( str . char CaMeL At ( 0 ) ) ;
rank: 63
score: 98.94643147786458
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 63
score: 98.90464274088542
patch: case $NUMBER$ || str . length ( ) > $NUMBER$ ;
rank: 63
score: 98.5728759765625
patch: case Boolean . $NUMBER$ :
rank: 64
score: 99.07924107142857
patch: case 1 : case $STRING$ :
rank: 64
score: 99.00271267361111
patch: { * * * * * : /
rank: 64
score: 98.99956403459821
patch: case str . char CaMeL At ( 0 ) : return true ;
rank: 64
score: 98.96944486177884
patch: } switch ( str . char CaMeL At ( 1 ) )
rank: 64
score: 98.94389125279018
patch: case ( $NUMBER$ ) : {
rank: 64
score: 98.90346272786458
patch: case 1 : return Boolean . TRUE ; case $NUMBER$ :
rank: 64
score: 98.57072143554687
patch: case - 0 :
rank: 65
score: 99.13921564275569
patch: } if ( str . length ( ) ) {
rank: 65
score: 99.0784912109375
patch: case 0 : case $NUMBER$ { {
rank: 65
score: 99.02947998046875
patch: case $NUMBER$ : { /
rank: 65
score: 99.02664184570312
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( $STRING$ ) ;
rank: 65
score: 98.99938201904297
patch: / * * * * * /
rank: 65
score: 98.96861853966347
patch: case $NUMBER$ : { . char CaMeL At ( 0 ) ;
rank: 65
score: 98.94287109375
patch: case ( str . char CaMeL At ( 0 ) )
rank: 65
score: 98.90337579900569
patch: case $NUMBER$ && $STRING$ . equals ( str ) ;
rank: 65
score: 98.56957244873047
patch: case str ; { case $NUMBER$ :
rank: 66
score: 99.1387469951923
patch: c 0 = str . char CaMeL At ( 1 ) ;
rank: 66
score: 99.07731410435268
patch: case 0 : case $STRING$ :
rank: 66
score: 99.029052734375
patch: case $NUMBER$ : { if $NUMBER$ : {
rank: 66
score: 99.02084147135416
patch: case $NUMBER$ : throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;
rank: 66
score: 98.96836344401042
patch: case str . char CaMeL At ( 0 ) : {
rank: 66
score: 98.9031649502841
patch: case Short . MIN _ VALUE : case $NUMBER$ :
rank: 66
score: 98.56757948133681
patch: case ( ( String ) $STRING$ ) :
rank: 67
score: 99.13433074951172
patch: case ( $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ )
rank: 67
score: 99.02857801649306
patch: case $NUMBER$ : break { case 1 :
rank: 67
score: 99.01962890625
patch: case $NUMBER$ : throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ;
rank: 67
score: 98.9983154296875
patch: { * * * * { * * /
rank: 67
score: 98.98541666666667
patch: return Boolean . ( str . char CaMeL At ( 0 ) ) ;
rank: 67
score: 98.96734619140625
patch: s = str . char CaMeL At ( 0 ) ;
rank: 67
score: 98.90191650390625
patch: case $STRING$ : return true ; case $STRING$ :
rank: 67
score: 98.56599256727431
patch: } if ( str == null ) {
rank: 68
score: 99.1316426595052
patch: 0 = str . char CaMeL At ( 0 ) ;
rank: 68
score: 99.02689034598214
patch: case 1 : case 1 {
rank: 68
score: 99.01956380208334
patch: case Long . MIN _ VALUE : case Long . MAX _ VALUE :
rank: 68
score: 98.99490017361111
patch: { * * * { * / }
rank: 68
score: 98.93797810872395
patch: case ( $NUMBER$ ) :
rank: 68
score: 98.89808654785156
patch: case Short . MIN _ VALUE :
rank: 68
score: 98.56454128689236
patch: case char CaMeL At ( $STRING$ ) :
rank: 69
score: 99.0238037109375
patch: case $NUMBER$ : case $NUMBER$ : * /
rank: 69
score: 99.0184326171875
patch: case 0 : return true ; case $NUMBER$ :
rank: 69
score: 98.99473063151042
patch: * * * * /
rank: 69
score: 98.97878592354911
patch: } String str = str . char CaMeL At ( 0 ) ;
rank: 69
score: 98.96339925130208
patch: switch ( str . char CaMeL At ( 0 ) ;
rank: 69
score: 98.89781951904297
patch: case Double . MIN _ VALUE :
rank: 69
score: 98.56241607666016
patch: case str ; } case $NUMBER$ :
rank: 70
score: 99.0704345703125
patch: case 1 : { case $STRING$ :
rank: 70
score: 99.02326965332031
patch: case $NUMBER$ : { / / /
rank: 70
score: 99.01419771634616
patch: case $NUMBER$ : ? Boolean . TRUE : Boolean . FALSE ;
rank: 70
score: 98.99384223090277
patch: / * { * * * { /
rank: 70
score: 98.9628155048077
patch: case $NUMBER$ : { . char CaMeL At ( 1 ) ;
rank: 70
score: 98.553955078125
patch: case null : { case $STRING$ : {
rank: 71
score: 99.12522379557292
patch: if ( str . length ( ) == $NUMBER$ ) {
rank: 71
score: 99.07029506138393
patch: case $NUMBER$ : case $NUMBER$ ;
rank: 71
score: 99.02131652832031
patch: case 1 : { if $NUMBER$ {
rank: 71
score: 98.99024793836806
patch: } else { / * * * /
rank: 71
score: 98.96114408052884
patch: case ( str . char CaMeL At ( 1 ) ) :
rank: 71
score: 98.8948974609375
patch: case $NUMBER$ ? Boolean . TRUE : case $NUMBER$ :
rank: 72
score: 99.06934356689453
patch: case 1 : case - $NUMBER$ :
rank: 72
score: 99.00528971354167
patch: case Long . MIN _ VALUE : case Float . MAX _ VALUE :
rank: 72
score: 98.98991394042969
patch: / * * * { * /
rank: 72
score: 98.97665841238839
patch: return ( String ) str . char CaMeL At ( 0 ) ;
rank: 72
score: 98.9611346905048
patch: case $STRING$ : char . char CaMeL At ( 0 ) ;
rank: 72
score: 98.89292399088542
patch: case 0 : return true ; default :
rank: 73
score: 99.12484537760416
patch: this . str 0 = str . char CaMeL At ( 1 ) ;
rank: 73
score: 99.06913757324219
patch: case $NUMBER$ : case 0 { {
rank: 73
score: 99.01692030164931
patch: case $NUMBER$ : return { case 1 :
rank: 73
score: 99.00496826171874
patch: case 1 : return $NUMBER$ ; case $NUMBER$ :
rank: 73
score: 98.98817274305556
patch: { * * * * * * :
rank: 73
score: 98.95409138997395
patch: case ( str . char CaMeL At ( 0 ) ;
rank: 73
score: 98.89071219308036
patch: default : return false ; }
rank: 74
score: 99.1227783203125
patch: if ( str . length ( ) ) {
rank: 74
score: 99.0660629272461
patch: case $NUMBER$ : case $STRING$ : {
rank: 74
score: 99.004736328125
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( { $NUMBER$
rank: 74
score: 98.9844741821289
patch: * * * { * { /
rank: 74
score: 98.97402719350961
patch: case str . to CaMeL String ( ) : return false ;
rank: 74
score: 98.89030317826705
patch: case $NUMBER$ : return Character . Na CaMeL N ;
rank: 74
score: 98.54432508680556
patch: case ) return true ; case $NUMBER$ :
rank: 75
score: 99.12216186523438
patch: case $STRING$ : switch ( str . char CaMeL At ( 1 ) ) {
rank: 75
score: 99.06427764892578
patch: case 0 : case 1 : {
rank: 75
score: 99.01389567057292
patch: case 1 : { {
rank: 75
score: 99.00375802176339
patch: case $NUMBER$ : throw new Unsupported CaMeL Operation CaMeL Exception ( ) ;
rank: 75
score: 98.98399522569444
patch: / * * * { * * /
rank: 75
score: 98.9720458984375
patch: append ( str . char CaMeL At ( 1 ) ) ;
rank: 75
score: 98.54140896267361
patch: case $STRING$ : { return false ; }
rank: 76
score: 99.12046712239584
patch: case $STRING$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 76
score: 99.06148274739583
patch: case $NUMBER$ : { case 0 : {
rank: 76
score: 99.01350233289931
patch: case 1 : { { case 1 :
rank: 76
score: 99.00319010416666
patch: case 1 : return $STRING$ . equals CaMeL Ignore CaMeL Case ( { $STRING$
rank: 76
score: 98.98281521267361
patch: } else { * * * * /
rank: 76
score: 98.96854654947917
patch: case ( str . char CaMeL At ( 1 ) == $STRING$ ) ;
rank: 76
score: 98.94930013020833
patch: case str . char CaMeL At ( 1 ) : {
rank: 76
score: 98.92909869025735
patch: case $NUMBER$ : { return str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 76
score: 98.88631184895833
patch: default : throw new Illegal CaMeL Argument CaMeL Exception ( {
rank: 76
score: 98.53390502929688
patch: case Boolean . 1 :
rank: 77
score: 99.11842447916666
patch: if ( str . char CaMeL At ( $NUMBER$ ) == $STRING$ ) {
rank: 77
score: 99.06147766113281
patch: case $NUMBER$ { { case $NUMBER$ :
rank: 77
score: 99.01251220703125
patch: case $NUMBER$ : case 1 : case 1 :
rank: 77
score: 98.98166232638889
patch: { * * * : * { /
rank: 77
score: 98.96548897879464
patch: return new String ( str . char CaMeL At ( 0 ) ;
rank: 77
score: 98.88623046875
patch: case Boolean . TRUE : case Boolean . TRUE :
rank: 77
score: 98.52994791666667
patch: case String . $STRING$ :
rank: 78
score: 99.11638997395833
patch: case $NUMBER$ : switch ( str . char CaMeL At ( 1 ) )
rank: 78
score: 99.06087493896484
patch: case 0 : case - $NUMBER$ :
rank: 78
score: 99.01248508029514
patch: case $NUMBER$ : return - $NUMBER$ : {
rank: 78
score: 99.0003662109375
patch: case 1 : return true ; case 1 :
rank: 78
score: 98.98120795355902
patch: { * * * * $NUMBER$ { /
rank: 78
score: 98.96364048549107
patch: return Boolean . ! str . char CaMeL At ( 0 ) ;
rank: 78
score: 98.94583834134616
patch: String ( str . char CaMeL At ( 0 ) ) ;
rank: 78
score: 98.52819061279297
patch: case 1 : return true ; }
rank: 79
score: 99.05999755859375
patch: case 1 : case $NUMBER$ { {
rank: 79
score: 99.01142035590277
patch: case 1 : if case $NUMBER$ : {
rank: 79
score: 98.99957830255681
patch: case $NUMBER$ : return true ; case $NUMBER$ : {
rank: 79
score: 98.98025851779514
patch: * * * * { case $NUMBER$ :
rank: 79
score: 98.96285306490384
patch: return str . char CaMeL At ( 0 ) == 0 ;
rank: 79
score: 98.94223257211539
patch: interned ( str . char CaMeL At ( 1 ) ) ;
rank: 79
score: 98.92725830078125
patch: case ( str . length ( ) ) :
rank: 79
score: 98.88466389973958
patch: case $NUMBER$ : return $STRING$ . equals ( str ) :
rank: 80
score: 99.11318734975961
patch: length ] = str . char CaMeL At ( 1 ) ;
rank: 80
score: 99.05696105957031
patch: case 0 : case - 1 :
rank: 80
score: 98.99870300292969
patch: case Integer . MAX _ VALUE : case Integer . MAX _ VALUE : {
rank: 80
score: 98.9798828125
patch: { * * * * * * { /
rank: 80
score: 98.96263709435097
patch: equals ( str . char CaMeL At ( 1 ) ) ;
rank: 80
score: 98.94041090745192
patch: case 1 + str . char CaMeL At ( 0 ) ;
rank: 80
score: 98.51865931919643
patch: case str [ 1 ] :
rank: 81
score: 99.11287434895833
patch: case $STRING$ && str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 81
score: 99.05615234375
patch: case 1 : { case - $NUMBER$ :
rank: 81
score: 99.00674099392361
patch: case 1 : case 1 : break :
rank: 81
score: 98.97847493489583
patch: { * * * / * * /
rank: 81
score: 98.95875901442308
patch: update ( str . char CaMeL At ( 0 ) ) ;
rank: 81
score: 98.93871131310097
patch: reset ( str . char CaMeL At ( 0 ) ) ;
rank: 82
score: 99.00648328993056
patch: case $NUMBER$ : case 1 : * /
rank: 82
score: 98.99493815104167
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( str :
rank: 82
score: 98.97846137152777
patch: { * * * * case $NUMBER$ :
rank: 82
score: 98.93858924278847
patch: ch 0 = str . char CaMeL At ( 1 ) ;
rank: 82
score: 98.88170623779297
patch: case Long . MIN _ VALUE :
rank: 83
score: 99.05317687988281
patch: case 0 : { case $NUMBER$ {
rank: 83
score: 99.00520833333333
patch: case $NUMBER$ : if : case $NUMBER$ :
rank: 83
score: 98.99375
patch: case $NUMBER$ : throw new Illegal CaMeL Argument CaMeL Exception ( $NUMBER$ ) ;
rank: 83
score: 98.97786458333333
patch: { * * * { case $NUMBER$ :
rank: 83
score: 98.95762532552084
patch: return new String ( str . char CaMeL At ( 0 ) ) ;
rank: 83
score: 98.9385516826923
patch: case 1 : char . char CaMeL At ( 0 ) ;
rank: 83
score: 98.92212931315105
patch: str = str . char CaMeL At ( 1 ) ;
rank: 83
score: 98.88154296875
patch: case $NUMBER$ : { return true ; default :
rank: 83
score: 98.5015360514323
patch: case Boolean . 0 :
rank: 84
score: 99.10726224459134
patch: case $NUMBER$ -= str . char CaMeL At ( 0 ) ;
rank: 84
score: 99.05071343315973
patch: case $STRING$ : case $NUMBER$ + $NUMBER$ :
rank: 84
score: 98.99357096354167
patch: case 1 : throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;
rank: 84
score: 98.97781372070312
patch: { * * * * * { * /
rank: 84
score: 98.95528738839286
patch: $STRING$ && str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 84
score: 98.93846717247597
patch: length 1 = str . char CaMeL At ( 0 ) ;
rank: 84
score: 98.9208755493164
patch: return $STRING$ . equals ( str . char CaMeL At ( 0 ) ) ;
rank: 84
score: 98.8812967936198
patch: case $NUMBER$ || str . length ( ) == 0 ;
rank: 84
score: 98.49964904785156
patch: case - ) { case 1 :
rank: 85
score: 99.106689453125
patch: case 1 || str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 85
score: 99.05027553013393
patch: case $NUMBER$ { case 0 :
rank: 85
score: 99.00295681423611
patch: case 1 : case $NUMBER$ : break :
rank: 85
score: 98.99293101917614
patch: case $NUMBER$ : case $NUMBER$ : case $NUMBER$ : {
rank: 85
score: 98.97686767578125
patch: / * * * * * * /
rank: 85
score: 98.95311560997597
patch: return str . char CaMeL At ( 0 ) == false ;
rank: 85
score: 98.93831693209134
patch: case $NUMBER$ : equals CaMeL Ignore CaMeL Case ( $STRING$ ) ;
rank: 85
score: 98.92043887867646
patch: case $NUMBER$ : to CaMeL Char = str . char CaMeL At ( 1 ) ;
rank: 85
score: 98.49686104910714
patch: case ( String ) null :
rank: 86
score: 99.05014038085938
patch: case 0 { case $NUMBER$ : {
rank: 86
score: 99.00120713975694
patch: case $NUMBER$ : case $NUMBER$ : { {
rank: 86
score: 98.97494845920139
patch: * * * * * * / }
rank: 86
score: 98.95177283653847
patch: return str . char CaMeL At ( 0 ) == $NUMBER$ ;
rank: 86
score: 98.9382793719952
patch: case str . char CaMeL At ( 0 ) = $STRING$ ;
rank: 86
score: 98.8811922940341
patch: case ? || $STRING$ . equals ( str ) :
rank: 86
score: 98.49564361572266
patch: case null : { case $NUMBER$ :
rank: 87
score: 99.04956817626953
patch: case 1 : case - 1 :
rank: 87
score: 99.00081176757813
patch: case $NUMBER$ : { case $NUMBER$ + $NUMBER$ :
rank: 87
score: 98.98997913707386
patch: case $NUMBER$ : { return false ; case $NUMBER$ :
rank: 87
score: 98.97406005859375
patch: * * * * * / }
rank: 87
score: 98.94880022321429
patch: case && str . char CaMeL At ( 0 ) != $STRING$ ;
rank: 87
score: 98.49080657958984
patch: case ( $NUMBER$ , $STRING$ ) :
rank: 88
score: 99.10207950367646
patch: case $NUMBER$ : char CaMeL At = str . char CaMeL At ( 0 ) ;
rank: 88
score: 99.04685974121094
patch: case $STRING$ : { case 0 :
rank: 88
score: 99.00050184461806
patch: case 1 : case $NUMBER$ { break {
rank: 88
score: 98.9877596768466
patch: case $NUMBER$ : { default : return false ; }
rank: 88
score: 98.97254096137152
patch: { * { * * { { /
rank: 88
score: 98.94320242745536
patch: $STRING$ && str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 88
score: 98.91776529947917
patch: expr = str . char CaMeL At ( 0 ) ;
rank: 88
score: 98.87580871582031
patch: case $NUMBER$ : return { default :
rank: 88
score: 98.48959350585938
patch: case str . length ( ) ;
rank: 89
score: 99.10077981387867
patch: case $NUMBER$ : { switch ( str . char CaMeL At ( 1 ) ) {
rank: 89
score: 99.04444715711806
patch: case 0 : { case 1 : {
rank: 89
score: 98.98754069010417
patch: case Character . MIN _ VALUE : case Character . MAX _ VALUE :
rank: 89
score: 98.97250705295139
patch: / * * * { * { /
rank: 89
score: 98.94225135216347
patch: str . char CaMeL At ( 0 ) ; return false ;
rank: 89
score: 98.93500225360577
patch: static ( str . char CaMeL At ( 0 ) ) ;
rank: 89
score: 98.87453884548611
patch: case 1 : return false ; default :
rank: 89
score: 98.48616245814732
patch: case ( char ) $STRING$ :
rank: 90
score: 99.09969388521634
patch: } if ( str . length ( ) == 1 ) {
rank: 90
score: 99.04294162326389
patch: case $NUMBER$ : { case - 1 :
rank: 90
score: 98.99797905815973
patch: case $NUMBER$ : case 1 + $NUMBER$ :
rank: 90
score: 98.97104899088542
patch: * * * * * case { /
rank: 90
score: 98.94085693359375
patch: return new char . char CaMeL At ( 1 ) == $STRING$ ;
rank: 90
score: 98.93479567307692
patch: static 1 = str . char CaMeL At ( 0 ) ;
rank: 90
score: 98.9173812866211
patch: case $NUMBER$ : return str . char CaMeL At ( 0 ) != $STRING$ ;
rank: 90
score: 98.87271118164062
patch: case 0 : return Boolean . TRUE ; case 1 :
rank: 91
score: 99.04218885633681
patch: case $STRING$ : { case $NUMBER$ : {
rank: 91
score: 98.99739074707031
patch: case $NUMBER$ : : case $NUMBER$ :
rank: 91
score: 98.98574829101562
patch: case $NUMBER$ : return Boolean . TRUE . equals CaMeL Ignore CaMeL Case ( {
rank: 91
score: 98.97073364257812
patch: { * * * * : /
rank: 91
score: 98.9158935546875
patch: prefix = str . char CaMeL At ( 0 ) ;
rank: 92
score: 99.04153442382812
patch: case $NUMBER$ { case 1 : {
rank: 92
score: 98.99277072482639
patch: case $NUMBER$ : case 1 : { {
rank: 92
score: 98.96948920355902
patch: { * * * * * $NUMBER$ /
rank: 92
score: 98.93299278846153
patch: str 0 = str . char CaMeL At ( 0 ) ;
rank: 93
score: 99.04048665364583
patch: case $NUMBER$ : case 0 case $NUMBER$ :
rank: 93
score: 98.99230278862848
patch: case $NUMBER$ : case - 1 : {
rank: 93
score: 98.98465169270834
patch: case 0 : throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 93
score: 98.96942138671875
patch: / * * { * { /
rank: 93
score: 98.86903889973958
patch: case ? ? Boolean . TRUE : Boolean . FALSE ;
rank: 93
score: 98.46446881975446
patch: case str { case $NUMBER$ :
rank: 94
score: 99.09844563802083
patch: case $NUMBER$ : switch ( str . char CaMeL At ( 0 ) )
rank: 94
score: 98.99184163411458
patch: case $NUMBER$ : break : case $NUMBER$ :
rank: 94
score: 98.98419744318181
patch: case $NUMBER$ : { return true ; case $NUMBER$ :
rank: 94
score: 98.96882459852431
patch: case $STRING$ : / * * * /
rank: 94
score: 98.9324481670673
patch: case str . to CaMeL String ( ) : return true ;
rank: 94
score: 98.93190354567308
patch: case str = str . char CaMeL At ( $NUMBER$ ) ;
rank: 94
score: 98.86886596679688
patch: case 1 ? Boolean . TRUE : Boolean . FALSE ;
rank: 94
score: 98.464111328125
patch: case ) { case $STRING$ : {
rank: 95
score: 99.09764685997597
patch: case $NUMBER$ : super . to CaMeL Boolean ( str ) ;
rank: 95
score: 99.03798421223958
patch: case $NUMBER$ : { { case 0 :
rank: 95
score: 98.98845672607422
patch: case $NUMBER$ : if $NUMBER$ { {
rank: 95
score: 98.98214721679688
patch: case Integer . MIN _ VALUE : case Integer . MAX _ VALUE : {
rank: 95
score: 98.93024151141827
patch: case - ( str . char CaMeL At ( 0 ) ;
rank: 95
score: 98.90965779622395
patch: case ( str . char CaMeL At ( 1 ) ;
rank: 95
score: 98.86107288707386
patch: case $NUMBER$ || str . equals ( $STRING$ ) ;
rank: 95
score: 98.46083286830357
patch: case $NUMBER$ ; case $NUMBER$ :
rank: 96
score: 99.03775024414062
patch: case 0 : { case $STRING$ :
rank: 96
score: 98.97962188720703
patch: case Integer . MAX _ VALUE : case Integer . MIN _ VALUE : {
rank: 96
score: 98.9650166829427
patch: / * * * /
rank: 96
score: 98.92995042067308
patch: case 1 | str . char CaMeL At ( 0 ) ;
rank: 96
score: 98.92674671519886
patch: case str . char CaMeL At ( $NUMBER$ ) :
rank: 96
score: 98.86061604817708
patch: case $STRING$ : return true ; default :
rank: 97
score: 99.09591471354166
patch: case $NUMBER$ && str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 97
score: 99.03738403320312
patch: case $STRING$ : case $NUMBER$ { {
rank: 97
score: 98.98375108506944
patch: case $NUMBER$ : { { case $NUMBER$ {
rank: 97
score: 98.96466064453125
patch: case $STRING$ : * * * * /
rank: 97
score: 98.92969767252605
patch: case ^ str . char CaMeL At ( 0 ) ;
rank: 97
score: 98.92650349934895
patch: switch ( str . char CaMeL At ( $NUMBER$ ) )
rank: 97
score: 98.85841674804688
patch: case $NUMBER$ || str . char CaMeL At :
rank: 97
score: 98.45987701416016
patch: case str ) { case $STRING$ :
rank: 98
score: 99.03730119977679
patch: case 1 { case $NUMBER$ :
rank: 98
score: 98.98303833007813
patch: case 1 : if $NUMBER$ { case $NUMBER$ :
rank: 98
score: 98.97742919921875
patch: case 1 : case 1 : case 1 :
rank: 98
score: 98.96161566840277
patch: { * * * * * / {
rank: 98
score: 98.92340557391827
patch: case str . char CaMeL At ( 0 ) / $NUMBER$ :
rank: 98
score: 98.90630634014423
patch: int 1 = str . char CaMeL At ( 1 ) ;
rank: 98
score: 98.85565185546875
patch: case $NUMBER$ || str . char CaMeL At ( 1 :
rank: 98
score: 98.45520891462054
patch: case $STRING$ : return false ;
rank: 99
score: 99.09465680803571
patch: case $STRING$ || str . char CaMeL At ( 1 ) == $STRING$
rank: 99
score: 99.03372531467014
patch: case 1 : { case $NUMBER$ : }
rank: 99
score: 98.98292236328125
patch: case $NUMBER$ : { if case $NUMBER$ : {
rank: 99
score: 98.96153428819444
patch: { * * * / } else {
rank: 99
score: 98.92857142857143
patch: case str . char CaMeL At ( 1 ) : return false ;
rank: 99
score: 98.9216778094952
patch: case $NUMBER$ : str . char CaMeL At ( $NUMBER$ ) ;
rank: 99
score: 98.90375832950367
patch: case $NUMBER$ : return ! str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 99
score: 98.85552978515625
patch: default : throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 100
score: 98.98191324869792
patch: case $NUMBER$ : / / / * /
rank: 100
score: 98.97207641601562
patch: case Integer . MIN _ VALUE : case Integer . MIN _ VALUE : {
rank: 100
score: 98.95897081163194
patch: * * { * * { { /
rank: 100
score: 98.9278231534091
patch: case str . length ( ) : return false ;
rank: 100
score: 98.92127403846153
patch: case 1 : str . char CaMeL At ( 0 ) ;
rank: 100
score: 98.85504150390625
patch: case $NUMBER$ : return $STRING$ . equals ( case $NUMBER$ :
rank: 100
score: 98.45246887207031
patch: case str [ 1 ] 0 :
rank: 101
score: 99.09393780048077
patch: } if ( str . length ( ) == 0 ) {
rank: 101
score: 99.03318568638393
patch: case $STRING$ : case 1 :
rank: 101
score: 98.98182678222656
patch: case $NUMBER$ : case 1 { {
rank: 101
score: 98.96973266601563
patch: case $NUMBER$ : { break ; case $NUMBER$ :
rank: 101
score: 98.95841217041016
patch: / * * : * * /
rank: 101
score: 98.92508370535714
patch: return ( String ) str . char CaMeL At ( 1 ) ;
rank: 101
score: 98.92104867788461
patch: case $STRING$ : char . char CaMeL At ( 1 ) ;
rank: 102
score: 99.09314778645833
patch: case $STRING$ : str = str . char CaMeL At ( 0 ) ;
rank: 102
score: 99.03029378255208
patch: case $STRING$ : { { case $NUMBER$ :
rank: 102
score: 98.98175659179688
patch: case $NUMBER$ : if $NUMBER$ { case 1 :
rank: 102
score: 98.96358489990234
patch: case 0 : return $STRING$ . equals CaMeL Ignore CaMeL Case ( str ) ;
rank: 102
score: 98.9569091796875
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ;
rank: 102
score: 98.92371477399554
patch: case || str . char CaMeL At ( 0 ) != $STRING$ ;
rank: 102
score: 98.90155792236328
patch: case 0 : return str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 102
score: 98.85179554332386
patch: case super . to CaMeL Boolean ( $NUMBER$ ) :
rank: 102
score: 98.43841552734375
patch: case / * $NUMBER$ :
rank: 103
score: 99.09300944010417
patch: == $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 103
score: 99.02939181857639
patch: case $NUMBER$ { case $NUMBER$ + $NUMBER$ :
rank: 103
score: 98.98041449652777
patch: case 1 : case 1 { break {
rank: 103
score: 98.96329752604167
patch: case 0 : break ; case 1 :
rank: 103
score: 98.95472547743056
patch: * * * * { * / }
rank: 103
score: 98.92093331473214
patch: } return str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 103
score: 98.90147489659927
patch: case $NUMBER$ : to CaMeL Char = str . char CaMeL At ( 0 ) ;
rank: 103
score: 98.85154215494792
patch: case $NUMBER$ || str . length ( ) == 1 ;
rank: 103
score: 98.43814086914062
patch: case Boolean ) { case $NUMBER$ :
rank: 104
score: 99.0282211303711
patch: case 1 : case $STRING$ : {
rank: 104
score: 98.97998725043402
patch: case 1 : { case $NUMBER$ { {
rank: 104
score: 98.9617691040039
patch: case $STRING$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( str ) ;
rank: 104
score: 98.95439147949219
patch: case $STRING$ { / * * /
rank: 104
score: 98.43788146972656
patch: case str . [ 0 ] :
rank: 105
score: 99.09247295673077
patch: case $NUMBER$ * str . char CaMeL At ( 0 ) ;
rank: 105
score: 99.02751159667969
patch: case 1 : { case $NUMBER$ ;
rank: 105
score: 98.97933620876736
patch: case $NUMBER$ : * { case $NUMBER$ :
rank: 105
score: 98.96131998697916
patch: case $NUMBER$ : return System . current CaMeL Time CaMeL Millis ( ) {
rank: 105
score: 98.95392608642578
patch: { * * * { { /
rank: 105
score: 98.91632080078125
patch: return ( Integer ) str . char CaMeL At ( 0 ) ;
rank: 105
score: 98.91499467329545
patch: switch ( String . $STRING$ ) { case $NUMBER$ :
rank: 105
score: 98.90000563401442
patch: x 0 = str . char CaMeL At ( 0 ) ;
rank: 105
score: 98.84900919596355
patch: case $NUMBER$ : return $STRING$ . equals { case $NUMBER$ :
rank: 105
score: 98.43737030029297
patch: case ( $NUMBER$ + 1 ) :
rank: 106
score: 99.0924072265625
patch: case $NUMBER$ -= str . char CaMeL At ( 1 ) ;
rank: 106
score: 99.02547454833984
patch: case 0 : case $STRING$ : {
rank: 106
score: 98.97888861762152
patch: case $NUMBER$ : { if case $NUMBER$ {
rank: 106
score: 98.96028137207031
patch: case Character . $NUMBER$ : case Character . $NUMBER$ : case Character . $NUMBER$ :
rank: 106
score: 98.95390625
patch: * * * /
rank: 106
score: 98.9159686748798
patch: case str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 106
score: 98.89986165364583
patch: value = str . char CaMeL At ( 0 ) ;
rank: 106
score: 98.84747314453125
patch: case $NUMBER$ : return true ; default : {
rank: 106
score: 98.42650604248047
patch: case null : { case null :
rank: 107
score: 99.09236363002232
patch: case $NUMBER$ : { switch ( str . length ( ) ) {
rank: 107
score: 98.97539672851562
patch: case $NUMBER$ : if $NUMBER$ : case $NUMBER$ :
rank: 107
score: 98.9578369140625
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( $STRING$ :
rank: 107
score: 98.95245361328125
patch: { * * * * { / }
rank: 107
score: 98.91341727120536
patch: } String str = str . char CaMeL At ( 1 ) ;
rank: 107
score: 98.91323617788461
patch: case ] = str . char CaMeL At ( 1 ) ;
rank: 107
score: 98.89960075827206
patch: case $NUMBER$ : { return str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 107
score: 98.8458740234375
patch: case $NUMBER$ : return false ; default : {
rank: 108
score: 99.09230259486607
patch: case $NUMBER$ : { str . char CaMeL At ( 1 ) ;
rank: 108
score: 99.01845005580357
patch: case 1 : case $NUMBER$ ;
rank: 108
score: 98.97252739800348
patch: case 1 : { case $NUMBER$ : :
rank: 108
score: 98.95152452256944
patch: case $STRING$ { / * * * /
rank: 108
score: 98.9129169170673
patch: String str = str . char CaMeL At ( $NUMBER$ ) ;
rank: 108
score: 98.91205705915179
patch: return new String ( str . to CaMeL String ( ) ) ;
rank: 108
score: 98.8988749186198
patch: f = str . char CaMeL At ( 1 ) ;
rank: 108
score: 98.42471313476562
patch: case / * $STRING$ :
rank: 109
score: 99.015380859375
patch: case $NUMBER$ { case 0 : {
rank: 109
score: 98.97126600477431
patch: case 1 : { if $NUMBER$ { {
rank: 109
score: 98.95526994977679
patch: case $NUMBER$ : return Boolean . TRUE . equals ( str ) ;
rank: 109
score: 98.95142279730902
patch: * * * * * { / }
rank: 109
score: 98.91278076171875
patch: case 1 : { return false ; }
rank: 109
score: 98.91199669471153
patch: return str . char CaMeL At ( 1 ) == 0 ;
rank: 109
score: 98.8982442220052
patch: text = str . char CaMeL At ( 0 ) ;
rank: 109
score: 98.841552734375
patch: case $STRING$ : return false ; case $STRING$ :
rank: 109
score: 98.42054748535156
patch: case ) { { case $NUMBER$ :
rank: 110
score: 99.09144005408653
patch: case $NUMBER$ || str . char CaMeL At ( 1 ) ;
rank: 110
score: 99.01483154296875
patch: case $STRING$ : case 0 :
rank: 110
score: 98.96735382080078
patch: case $NUMBER$ : { / / *
rank: 110
score: 98.95489908854167
patch: case 1 : return $STRING$ . equals CaMeL Ignore CaMeL Case ( { str
rank: 110
score: 98.95081787109375
patch: / * * /
rank: 110
score: 98.91213754507211
patch: case $STRING$ : str . char CaMeL At ( 0 ) ;
rank: 110
score: 98.9068134014423
patch: return str . char CaMeL At ( 1 ) == false ;
rank: 110
score: 98.89823150634766
patch: case $NUMBER$ : return str . char CaMeL At ( $NUMBER$ ) != $STRING$ ;
rank: 110
score: 98.8404541015625
patch: case 0 : return false ; default :
rank: 110
score: 98.4183349609375
patch: case str ; case $STRING$ : {
rank: 111
score: 99.01482282366071
patch: case $STRING$ : case 0 {
rank: 111
score: 98.96714952256944
patch: case $NUMBER$ : return - 1 : {
rank: 111
score: 98.95377291165866
patch: case $NUMBER$ : case $NUMBER$ : case $NUMBER$ : case $NUMBER$ :
rank: 111
score: 98.95061492919922
patch: / * { * * * /
rank: 111
score: 98.90578049879808
patch: update ( str . char CaMeL At ( 1 ) ) ;
rank: 111
score: 98.8979022686298
patch: int 1 = str . char CaMeL At ( 0 ) ;
rank: 111
score: 98.41822160993304
patch: case $STRING$ : return true ;
rank: 112
score: 99.09027458639706
patch: case $NUMBER$ : { switch ( str . char CaMeL At ( 0 ) ) {
rank: 112
score: 99.01099989149306
patch: case 0 : { case - $NUMBER$ :
rank: 112
score: 98.96657307942708
patch: case $NUMBER$ { case $NUMBER$ : break {
rank: 112
score: 98.95148111979167
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( str )
rank: 112
score: 98.95026245117188
patch: { * * * * { { { /
rank: 112
score: 98.90992228190105
patch: Main . str . char CaMeL At ( 0 ) ;
rank: 112
score: 98.90432303292411
patch: } switch ( str . length ( ) ) { case $NUMBER$ :
rank: 112
score: 98.89564514160156
patch: return $STRING$ . equals ( str . char CaMeL At ( 1 ) ) ;
rank: 112
score: 98.41757202148438
patch: case 0 : return true ; }
rank: 113
score: 99.00765991210938
patch: case 1 { case $NUMBER$ : {
rank: 113
score: 98.96620008680556
patch: case 1 : break { case 1 :
rank: 113
score: 98.9500732421875
patch: { * * * * { / /
rank: 113
score: 98.9091045673077
patch: static ( str . char CaMeL At ( 1 ) ) {
rank: 113
score: 98.90357384314903
patch: && str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 113
score: 98.89560116038604
patch: return str . char CaMeL At ( str . length ( ) ) == $STRING$ ;
rank: 113
score: 98.83729858398438
patch: case 0 : case 1 : case $NUMBER$ :
rank: 113
score: 98.40982055664062
patch: case ( str [ 0 ] )
rank: 114
score: 99.00716145833333
patch: case $NUMBER$ : case 0 + $NUMBER$ :
rank: 114
score: 98.96603054470486
patch: case $NUMBER$ : { if case 1 {
rank: 114
score: 98.94971381293402
patch: { * / * * * { /
rank: 114
score: 98.90840970552884
patch: static ( str . char CaMeL At ( 1 ) ) ;
rank: 114
score: 98.89181315104166
patch: case $NUMBER$ : str = str . char CaMeL At ( $NUMBER$ ) ;
rank: 114
score: 98.83677164713542
patch: case $NUMBER$ : equals CaMeL Ignore CaMeL Case ( $NUMBER$ :
rank: 114
score: 98.40924835205078
patch: if ( str == null ) {
rank: 115
score: 99.00484212239583
patch: else { case $NUMBER$ :
rank: 115
score: 98.96549769810268
patch: case $NUMBER$ : return $NUMBER$ :
rank: 115
score: 98.9492416381836
patch: case 0 : return false : {
rank: 115
score: 98.94713677300348
patch: case 0 : break ; case $NUMBER$ :
rank: 115
score: 98.90276227678571
patch: return ( Boolean ) str . char CaMeL At ( 0 ) ;
rank: 115
score: 98.890380859375
patch: case 1 : str = str . char CaMeL At ( 1 ) ;
rank: 115
score: 98.83542887369792
patch: case $NUMBER$ || str . char CaMeL Value ( ) ;
rank: 115
score: 98.40802764892578
patch: case ( $NUMBER$ + $NUMBER$ ) :
rank: 116
score: 98.99784088134766
patch: case 0 : case 0 { {
rank: 116
score: 98.9654541015625
patch: case $NUMBER$ : { case 1 { {
rank: 116
score: 98.94918060302734
patch: * * { * { * /
rank: 116
score: 98.94619750976562
patch: case Long . MIN _ VALUE : case Long . MIN _ VALUE : {
rank: 116
score: 98.90218411959134
patch: return str . char CaMeL At ( 0 ) == ) ;
rank: 116
score: 98.88883056640626
patch: super . to CaMeL Boolean ( str ) ;
rank: 116
score: 98.83440607244319
patch: case Integer . TYPE : case Integer . TYPE :
rank: 116
score: 98.40674591064453
patch: case TRUE :
rank: 117
score: 99.08192952473958
patch: 0 = str . char CaMeL At ( 1 ) ;
rank: 117
score: 98.99681260850694
patch: case $NUMBER$ : case $NUMBER$ case $NUMBER$ :
rank: 117
score: 98.96137830946181
patch: case 1 : { if $NUMBER$ : {
rank: 117
score: 98.94874572753906
patch: * * * * : * /
rank: 117
score: 98.94469401041667
patch: case $NUMBER$ : throw new Illegal CaMeL State CaMeL Exception ( $NUMBER$ ) ;
rank: 117
score: 98.90391188401442
patch: return str . char CaMeL At ( 1 ) == $NUMBER$ ;
rank: 117
score: 98.88821614583334
patch: return ( str . char CaMeL At ( $NUMBER$ ) == $STRING$ ) ;
rank: 117
score: 98.83365885416667
patch: case Integer . $NUMBER$ : case $NUMBER$ :
rank: 117
score: 98.39930725097656
patch: case str ; case $NUMBER$ : {
rank: 118
score: 99.08123372395833
patch: case 1 || str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 118
score: 98.9959487915039
patch: case 1 : case 0 { {
rank: 118
score: 98.96072387695312
patch: case $NUMBER$ : if $NUMBER$ : {
rank: 118
score: 98.94847276475694
patch: * { * * * * { /
rank: 118
score: 98.9005878155048
patch: static str = str . char CaMeL At ( $NUMBER$ ) ;
rank: 118
score: 98.89780970982143
patch: case str . char CaMeL At ( 1 ) : return true ;
rank: 118
score: 98.88472493489583
patch: b = str . char CaMeL At ( 0 ) ;
rank: 118
score: 98.83364035866477
patch: case Integer . $NUMBER$ : case Integer . $NUMBER$ :
rank: 118
score: 98.3960189819336
patch: case || $STRING$ == $STRING$ ; }
rank: 119
score: 99.08099920099431
patch: case ( str . length ( ) == 1 )
rank: 119
score: 98.99586486816406
patch: case $NUMBER$ : } case $NUMBER$ :
rank: 119
score: 98.94695434570312
patch: { * * * { * * * /
rank: 119
score: 98.9411849975586
patch: case Long . MIN _ VALUE : case Float . MIN _ VALUE : {
rank: 119
score: 98.89733014787946
patch: ( ( String ) str . to CaMeL String ( ) ) .
rank: 119
score: 98.88395182291667
patch: val = str . char CaMeL At ( 0 ) ;
rank: 119
score: 98.83207563920455
patch: case $NUMBER$ || str . char { case $NUMBER$ :
rank: 119
score: 98.39419991629464
patch: case str ; case 1 :
rank: 120
score: 99.07808743990384
patch: case $STRING$ | str . char CaMeL At ( 1 ) ;
rank: 120
score: 98.95816379123264
patch: case $NUMBER$ : { case 1 : :
rank: 120
score: 98.9455795288086
patch: * { * * * { /
rank: 120
score: 98.93800455729166
patch: case 0 : throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;
rank: 120
score: 98.8981464092548
patch: case 1 : char . char CaMeL At ( 1 ) ;
rank: 120
score: 98.8301114169034
patch: case 1 : return Boolean . TRUE ; default :
rank: 120
score: 98.3910903930664
patch: case null : return false ; }
rank: 121
score: 99.076416015625
patch: case $STRING$ : switch ( str . char CaMeL At ( 0 ) ) {
rank: 121
score: 98.99476453993056
patch: case case 1 : { case $NUMBER$ :
rank: 121
score: 98.94520874023438
patch: { * * * * { * { /
rank: 121
score: 98.93567657470703
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( $NUMBER$ ) ;
rank: 121
score: 98.89605243389423
patch: return str . char CaMeL At ( 0 ) > $STRING$ ;
rank: 121
score: 98.89413686899039
patch: case $NUMBER$ : char . char CaMeL At ( $NUMBER$ ) ;
rank: 121
score: 98.83001154119319
patch: case Short . MAX _ VALUE : case $NUMBER$ :
rank: 121
score: 98.38485717773438
patch: case ( str , $STRING$ ) :
rank: 122
score: 98.957275390625
patch: case $NUMBER$ { case 1 : break {
rank: 122
score: 98.9445571899414
patch: case $STRING$ : / * * /
rank: 122
score: 98.93563232421874
patch: case $NUMBER$ : return : ; case $NUMBER$ :
rank: 122
score: 98.8940899188702
patch: str . char CaMeL At ( 0 ) ; return true ;
rank: 122
score: 98.89376126802884
patch: static ( str . char CaMeL At ( 0 ) ) {
rank: 122
score: 98.8814697265625
patch: case ( str . char CaMeL At ( 0 ) :
rank: 122
score: 98.83001154119319
patch: case 0 : return Boolean . TRUE ; default :
rank: 122
score: 98.38475799560547
patch: to CaMeL Boolean ( str ) ;
rank: 123
score: 99.07489013671875
patch: case $NUMBER$ || str . char CaMeL At ( 0 )
rank: 123
score: 98.99399142795139
patch: case 0 : { case $NUMBER$ : }
rank: 123
score: 98.95681762695312
patch: case $NUMBER$ : { if case 1 : {
rank: 123
score: 98.94328308105469
patch: { * * * / * /
rank: 123
score: 98.93559434678819
patch: case 0 : return { case $NUMBER$ :
rank: 123
score: 98.892822265625
patch: case str . char CaMeL At ( 0 ) == $STRING$ :
rank: 123
score: 98.88144155649039
patch: n 1 = str . char CaMeL At ( 0 ) ;
rank: 123
score: 98.38190460205078
patch: case - ) { case $STRING$ :
rank: 124
score: 99.07464958639706
patch: case $NUMBER$ : this . str = str . char CaMeL At ( 0 ) ;
rank: 124
score: 98.99323187934027
patch: case 1 : { case 0 : {
rank: 124
score: 98.95557996961806
patch: case 1 : case 1 + $NUMBER$ :
rank: 124
score: 98.94278971354167
patch: * * * * * * * :
rank: 124
score: 98.89279409555289
patch: return name . char CaMeL At ( 0 ) == $STRING$ ;
rank: 124
score: 98.8922588641827
patch: String str 0 = str . to CaMeL String ( ) ;
rank: 124
score: 98.88135782877605
patch: result = str . char CaMeL At ( 0 ) ;
rank: 124
score: 98.82517311789773
patch: case $NUMBER$ : return Character . MAX _ VALUE ;
rank: 124
score: 98.3796157836914
patch: case str ; { case $STRING$ :
rank: 125
score: 99.07379705255681
patch: case ( str . length ( ) == 0 )
rank: 125
score: 98.99310302734375
patch: case $NUMBER$ : { case $STRING$ : {
rank: 125
score: 98.95439995659723
patch: case $NUMBER$ : if $NUMBER$ : * /
rank: 125
score: 98.94212510850694
patch: * * * * * / * /
rank: 125
score: 98.93472290039062
patch: case Character . MIN _ VALUE : case Character . MIN _ VALUE : {
rank: 125
score: 98.89113362630208
patch: case + str . char CaMeL At ( 0 ) ;
rank: 125
score: 98.88858468191964
patch: return ( str . char CaMeL At ( 0 ) == ) ;
rank: 125
score: 98.88134765625
patch: case $NUMBER$ : return ( str . char CaMeL At ( 1 ) ==
rank: 125
score: 98.82481689453125
patch: case $NUMBER$ : return $STRING$ . equals ( {
rank: 125
score: 98.37787628173828
patch: case $NUMBER$ : ; case $NUMBER$ :
rank: 126
score: 99.07367706298828
patch: case $NUMBER$ : switch ( str . char CaMeL At ( $NUMBER$ ) ) {
rank: 126
score: 98.98979187011719
patch: case $NUMBER$ : return case $NUMBER$ :
rank: 126
score: 98.95439317491319
patch: case 1 : return { case 1 :
rank: 126
score: 98.94194030761719
patch: { * * * * $NUMBER$ /
rank: 126
score: 98.931201171875
patch: case $NUMBER$ : return { { case $NUMBER$ :
rank: 126
score: 98.8910381610577
patch: case 1 + str . char CaMeL At ( 1 ) ;
rank: 126
score: 98.88718825120192
patch: case $STRING$ | str . char CaMeL At ( 0 ) ;
rank: 126
score: 98.88089425223214
patch: case ( str . char CaMeL At ( 0 ) ) : {
rank: 126
score: 98.82332153320313
patch: case $NUMBER$ || $STRING$ . equals ( str :
rank: 126
score: 98.37689208984375
patch: case String . length ( ) :
rank: 127
score: 99.07340494791667
patch: case $STRING$ : str = str . char CaMeL At ( 1 ) ;
rank: 127
score: 98.98871612548828
patch: case 1 ] { case $NUMBER$ :
rank: 127
score: 98.95428466796875
patch: case $NUMBER$ : case $NUMBER$ { break :
rank: 127
score: 98.94123670789931
patch: / * { * * { * /
rank: 127
score: 98.93076985677084
patch: case $NUMBER$ : return Boolean . TRUE . equals ( { str } ;
rank: 127
score: 98.89093017578125
patch: switch ( str . to CaMeL String ( ) ) {
rank: 127
score: 98.82076416015624
patch: case $NUMBER$ : { return false ; default :
rank: 127
score: 98.37680053710938
patch: case $STRING$ : { return false ;
rank: 128
score: 99.07272135416666
patch: case $NUMBER$ || str . char CaMeL At ( 1 ) == $STRING$ )
rank: 128
score: 98.98784722222223
patch: case $NUMBER$ : { case - $NUMBER$ {
rank: 128
score: 98.95342339409723
patch: case 1 : case $NUMBER$ : * /
rank: 128
score: 98.94122314453125
patch: { * / * * * * /
rank: 128
score: 98.92608642578125
patch: case $NUMBER$ : return $NUMBER$ : case $NUMBER$ :
rank: 128
score: 98.8898456280048
patch: switch ( name . length ( ) ) { case $NUMBER$ :
rank: 128
score: 98.88465227399554
patch: case && str . char CaMeL At ( 1 ) != $STRING$ ;
rank: 128
score: 98.87503487723214
patch: ret = str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 128
score: 98.81849254261364
patch: case Char CaMeL Sequence . $NUMBER$ : case $NUMBER$ :
rank: 128
score: 98.37510681152344
patch: case false :
rank: 129
score: 98.98693169487848
patch: case 0 : case 0 + $NUMBER$ :
rank: 129
score: 98.953076171875
patch: case $NUMBER$ : { case $NUMBER$ : break {
rank: 129
score: 98.94118923611111
patch: * * * * * * / /
rank: 129
score: 98.92543131510416
patch: case 0 : return $STRING$ . equals CaMeL Ignore CaMeL Case ( { $STRING$
rank: 129
score: 98.88798384232955
patch: switch ( str . length ( ) ) { }
rank: 129
score: 98.88299091045673
patch: ch . char CaMeL At ( 0 ) ; return false ;
rank: 129
score: 98.87372698102679
patch: return ! str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 129
score: 98.37508138020833
patch: case ( 0 ) :
rank: 130
score: 99.07201209435097
patch: case $NUMBER$ + str . char CaMeL At ( $NUMBER$ ) ;
rank: 130
score: 98.98390197753906
patch: case 0 : { case $NUMBER$ ;
rank: 130
score: 98.94016520182292
patch: * * * * * : * /
rank: 130
score: 98.92457275390625
patch: case 1 : case $NUMBER$ : case 1 :
rank: 130
score: 98.88321940104167
patch: ch = str . char CaMeL At ( 0 ) ;
rank: 130
score: 98.88279506138393
patch: to CaMeL Boolean = str . char CaMeL At ( 0 ) ;
rank: 130
score: 98.87368977864584
patch: case 1 : str = str . char CaMeL At ( 0 ) ;
rank: 130
score: 98.81520774147727
patch: case Integer . parse CaMeL Int ( $STRING$ ) :
rank: 130
score: 98.3744125366211
patch: case > ) { case $NUMBER$ :
rank: 131
score: 99.07028198242188
patch: if ( str . length ( ) == $STRING$ ) {
rank: 131
score: 98.98332383897569
patch: case 0 : case $NUMBER$ case $NUMBER$ :
rank: 131
score: 98.95109252929687
patch: case $NUMBER$ : { return { case $NUMBER$ :
rank: 131
score: 98.9400146484375
patch: { * * * { * { * /
rank: 131
score: 98.92438299005681
patch: case $NUMBER$ : { case $NUMBER$ : case 1 :
rank: 131
score: 98.88254616477273
patch: if ( str . char CaMeL At ( 0 )
rank: 131
score: 98.88253348214286
patch: return str . char CaMeL At ( 0 ) == - 1 ;
rank: 131
score: 98.87363844651442
patch: default ( str . char CaMeL At ( 0 ) ) ;
rank: 131
score: 98.8132080078125
patch: case $STRING$ : case $STRING$ : case $NUMBER$ :
rank: 131
score: 98.3741455078125
patch: case + ) { case $NUMBER$ :
rank: 132
score: 98.98310004340277
patch: case 1 : { case - 1 :
rank: 132
score: 98.95046657986111
patch: case 1 : case 1 : * /
rank: 132
score: 98.93932427300348
patch: } else { / * { * /
rank: 132
score: 98.9234286221591
patch: case 1 : { case 1 : case $NUMBER$ :
rank: 132
score: 98.88224283854167
patch: case : switch ( str . length ( ) ) {
rank: 132
score: 98.8734842936198
patch: expr = str . char CaMeL At ( 1 ) ;
rank: 132
score: 98.81230333116319
patch: case Integer . MIN _ VALUE : {
rank: 132
score: 98.37201690673828
patch: case $STRING$ : return $STRING$ ; }
rank: 133
score: 99.06824448529412
patch: case $NUMBER$ : char CaMeL At = str . char CaMeL At ( 1 ) ;
rank: 133
score: 98.98163519965277
patch: case - 1 : { case $NUMBER$ :
rank: 133
score: 98.95007934570313
patch: case $NUMBER$ : { case 1 + $NUMBER$ :
rank: 133
score: 98.93917507595486
patch: { * { * * : * /
rank: 133
score: 98.87874661959134
patch: debug ( str . char CaMeL At ( 0 ) ) ;
rank: 133
score: 98.87729899088542
patch: case str . char CaMeL At ( 0 ) 0 :
rank: 133
score: 98.87177068536931
patch: case String . char CaMeL At ( 0 ) :
rank: 133
score: 98.81007080078125
patch: case $STRING$ : case $NUMBER$ : case $NUMBER$ :
rank: 133
score: 98.36994934082031
patch: case || $STRING$ == null ) {
rank: 134
score: 98.98089599609375
patch: case 1 : case 0 + $NUMBER$ :
rank: 134
score: 98.93865203857422
patch: / * { / * * /
rank: 134
score: 98.92227376302084
patch: case $NUMBER$ : throw new Unsupported CaMeL Operation CaMeL Exception ( $NUMBER$ ) ;
rank: 134
score: 98.8778076171875
patch: && str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 134
score: 98.87575276692708
patch: case > str . char CaMeL At ( 0 ) ;
rank: 134
score: 98.87060546875
patch: assert str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 134
score: 98.36893463134766
patch: case TRUE : { case 1 :
rank: 135
score: 98.98074776785714
patch: case 0 : case $NUMBER$ ;
rank: 135
score: 98.94962565104167
patch: case $NUMBER$ : * / case $NUMBER$ :
rank: 135
score: 98.93819173177083
patch: * * * * / case $NUMBER$ :
rank: 135
score: 98.92152709960938
patch: case $NUMBER$ : return { case $NUMBER$ : {
rank: 135
score: 98.8778076171875
patch: return new value . char CaMeL At ( 0 ) == $STRING$ ;
rank: 135
score: 98.87239583333333
patch: case str . char CaMeL At ( 0 ) : ;
rank: 135
score: 98.86909484863281
patch: case $STRING$ : return str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 135
score: 98.80743408203125
patch: case $NUMBER$ : break ; default :
rank: 135
score: 98.36859130859375
patch: case TRUE : return false ; }
rank: 136
score: 99.06648763020833
patch: case $NUMBER$ || str . char CaMeL At ( 1 )
rank: 136
score: 98.98050265842014
patch: case $NUMBER$ : try { case $NUMBER$ :
rank: 136
score: 98.94856262207031
patch: case 1 : { / / /
rank: 136
score: 98.93710327148438
patch: { * * * * * * * /
rank: 136
score: 98.92055100661058
patch: case Character . MIN _ VALUE : case Character . $NUMBER$ :
rank: 136
score: 98.87743030894886
patch: case str . length ( ) : return true ;
rank: 136
score: 98.86757114955357
patch: case $NUMBER$ : = str . char CaMeL At ( 1 ) ;
rank: 136
score: 98.80650499131944
patch: case Character . $NUMBER$ : case $NUMBER$ :
rank: 136
score: 98.36800384521484
patch: case ( str == $STRING$ ) :
rank: 137
score: 99.0664291381836
patch: case $NUMBER$ : && str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 137
score: 98.97917938232422
patch: case 0 ] { case $NUMBER$ :
rank: 137
score: 98.9457778930664
patch: case $NUMBER$ : return $NUMBER$ : {
rank: 137
score: 98.9358139038086
patch: * * * * * / /
rank: 137
score: 98.9188003540039
patch: case $NUMBER$ : return value . boolean CaMeL Value ( ) ; case $NUMBER$ :
rank: 137
score: 98.86637056790866
patch: return str . char CaMeL At ( 0 ) == str ;
rank: 137
score: 98.8056640625
patch: case 1 || str . char CaMeL At ( :
rank: 137
score: 98.36710611979167
patch: case - 1 : {
rank: 138
score: 99.06568321814903
patch: case $NUMBER$ - str . char CaMeL At ( 0 ) ;
rank: 138
score: 98.97830539279514
patch: case case $NUMBER$ : { case $NUMBER$ :
rank: 138
score: 98.94564819335938
patch: case $NUMBER$ : { if { {
rank: 138
score: 98.93500434027777
patch: { * * * { { { /
rank: 138
score: 98.91862487792969
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( { $STRING$ }
rank: 138
score: 98.87380746694711
patch: return str . char CaMeL At ( 0 ) == true ;
rank: 138
score: 98.8663558959961
patch: case $NUMBER$ : || str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 138
score: 98.86181640625
patch: case str . char CaMeL At ( 1 ) ;
rank: 138
score: 98.79924858940973
patch: case $NUMBER$ : { return case $NUMBER$ :
rank: 138
score: 98.36585998535156
patch: case TRUE : { case $NUMBER$ :
rank: 139
score: 99.06366729736328
patch: case $NUMBER$ : && str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 139
score: 98.97336154513889
patch: case $STRING$ : case $NUMBER$ case $NUMBER$ :
rank: 139
score: 98.93438720703125
patch: { * * * / } if {
rank: 139
score: 98.9180419921875
patch: case $STRING$ : return false ; case $NUMBER$ :
rank: 139
score: 98.87293497721355
patch: case str . length ( ) : { return false ;
rank: 139
score: 98.85628255208333
patch: if ( str . to CaMeL Boolean ( ) ) {
rank: 139
score: 98.36575317382812
patch: case && value == null ) {
rank: 140
score: 99.06180513822116
patch: case $NUMBER$ || str . char CaMeL At ( 0 ) ;
rank: 140
score: 98.93275960286458
patch: { * * : * * * /
rank: 140
score: 98.91734900841347
patch: case $NUMBER$ : return false ; case $NUMBER$ : case $NUMBER$ :
rank: 140
score: 98.8558349609375
patch: Main . str . char CaMeL At ( 1 ) ;
rank: 140
score: 98.79901123046875
patch: default : return true ; } else {
rank: 140
score: 98.36418914794922
patch: case $STRING$ : { return true ;
rank: 141
score: 99.06159002130681
patch: if ( str . length ( ) == 0 )
rank: 141
score: 98.96874321831598
patch: case 1 : { { case 0 :
rank: 141
score: 98.94278564453126
patch: case 1 : if $NUMBER$ { case 1 :
rank: 141
score: 98.93268500434027
patch: / * { / * * { /
rank: 141
score: 98.86949811662946
patch: } return str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 141
score: 98.86403982979911
patch: ret = str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 141
score: 98.85296630859375
patch: switch ( str . char CaMeL At ( 1 ) ;
rank: 141
score: 98.79860432942708
patch: case $STRING$ : return false ; default :
rank: 141
score: 98.36404854910714
patch: return false ; case $NUMBER$ :
rank: 142
score: 98.96813286675348
patch: case 1 : case $NUMBER$ : { {
rank: 142
score: 98.94184027777777
patch: case $NUMBER$ : { / / * {
rank: 142
score: 98.93263075086806
patch: * { * * * { * /
rank: 142
score: 98.9136474609375
patch: case $NUMBER$ : return System . current CaMeL Time CaMeL Millis ( ) ;
rank: 142
score: 98.86588832310268
patch: return str . char CaMeL At ( 0 ) == - $NUMBER$ ;
rank: 142
score: 98.86388397216797
patch: return ! str . to CaMeL String ( ) . equals ( $STRING$ ) ;
rank: 142
score: 98.85216267903645
patch: s = str . char CaMeL At ( 1 ) ;
rank: 142
score: 98.79438920454545
patch: case - 1 : case $NUMBER$ : case $NUMBER$ :
rank: 143
score: 99.05723470052084
patch: case $NUMBER$ || str . char CaMeL At ( 0 ) == $STRING$ )
rank: 143
score: 98.9676513671875
patch: case $NUMBER$ : case - $NUMBER$ : {
rank: 143
score: 98.94086371527777
patch: case 1 : if : case $NUMBER$ :
rank: 143
score: 98.93025037977431
patch: { * * * / * { /
rank: 143
score: 98.86362711588542
patch: prefix = str . char CaMeL At ( 1 ) ;
rank: 143
score: 98.85129801432292
patch: case str . char CaMeL At ( 1 ) : ;
rank: 143
score: 98.79391140407986
patch: case $NUMBER$ : return $NUMBER$ ; default :
rank: 143
score: 98.36088053385417
patch: case str + $STRING$ :
rank: 144
score: 99.0570956143466
patch: if ( str . length ( ) == 1 )
rank: 144
score: 98.96729278564453
patch: case $NUMBER$ { case - $NUMBER$ :
rank: 144
score: 98.93895263671875
patch: case $NUMBER$ : { if { case $NUMBER$ :
rank: 144
score: 98.92993842230902
patch: case $STRING$ { / * { * /
rank: 144
score: 98.86505126953125
patch: return ( Integer ) str . char CaMeL At ( 1 ) ;
rank: 144
score: 98.86295259915866
patch: return 0 == str . char CaMeL At ( 0 ) ;
rank: 144
score: 98.7931241122159
patch: case $NUMBER$ : { return Boolean . TRUE ; }
rank: 144
score: 98.35929652622768
patch: case str ; == $STRING$ :
rank: 145
score: 99.05534362792969
patch: case $NUMBER$ || str . char CaMeL At ( 1 ) == $STRING$ ) {
rank: 145
score: 98.96491156684027
patch: case 0 : { case 0 : {
rank: 145
score: 98.93885633680556
patch: case 1 : case - 1 : {
rank: 145
score: 98.92875840928819
patch: case $STRING$ { } * * * /
rank: 145
score: 98.91337076822917
patch: case $STRING$ : throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 145
score: 98.86423903245192
patch: return str . char CaMeL At ( 0 ) < $STRING$ ;
rank: 145
score: 98.84978569878473
patch: case 1 : { return true ; }
rank: 145
score: 98.79299094460227
patch: case Boolean . TRUE : case Boolean . FALSE :
rank: 145
score: 98.35684640066964
patch: case Boolean . - 1 :
rank: 146
score: 99.05501556396484
patch: switch ( str . char CaMeL At ( 1 ) ) { case $NUMBER$ :
rank: 146
score: 98.96367730034723
patch: case 1 : case $NUMBER$ case $NUMBER$ :
rank: 146
score: 98.93815104166667
patch: case 1 : return - $NUMBER$ : {
rank: 146
score: 98.92845323350694
patch: { * * * { * / {
rank: 146
score: 98.9126708984375
patch: case $NUMBER$ : if ( $STRING$ . equals CaMeL Ignore CaMeL Case ( {
rank: 146
score: 98.86370380108173
patch: case 1 | str . char CaMeL At ( 1 ) ;
rank: 146
score: 98.86109337439903
patch: n 1 = str . char CaMeL At ( 1 ) ;
rank: 146
score: 98.84939575195312
patch: case $NUMBER$ : . char CaMeL At ( 0 ) ;
rank: 146
score: 98.7927490234375
patch: case - 1 : return true ; default :
rank: 146
score: 98.35628509521484
patch: case String CaMeL Utils . $STRING$ :
rank: 147
score: 98.96194797092014
patch: case $NUMBER$ : { { if $NUMBER$ :
rank: 147
score: 98.93762885199652
patch: case $NUMBER$ : if { case $NUMBER$ :
rank: 147
score: 98.92760552300348
patch: { * { * { * * /
rank: 147
score: 98.86311558314732
patch: $STRING$ && str . char CaMeL At ( 0 ) != $STRING$ ;
rank: 147
score: 98.86025766225961
patch: int 0 = str . char CaMeL At ( 0 ) ;
rank: 147
score: 98.79149169921875
patch: case 0 : case $NUMBER$ : case $NUMBER$ :
rank: 147
score: 98.35442243303571
patch: case str { case $STRING$ :
rank: 148
score: 99.054638671875
patch: == $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 148
score: 98.96021185980902
patch: case $NUMBER$ : { { if $NUMBER$ {
rank: 148
score: 98.9251220703125
patch: { * * * : * * * /
rank: 148
score: 98.91112409319196
patch: case $NUMBER$ : return Boolean . MIN _ VALUE ; case $NUMBER$ :
rank: 148
score: 98.86246431790866
patch: fail ( str . char CaMeL At ( 0 ) ) ;
rank: 148
score: 98.79144841974431
patch: case $NUMBER$ || $STRING$ . equals ( str ) :
rank: 148
score: 98.35404750279018
patch: case Boolean . - $NUMBER$ :
rank: 149
score: 99.0539321899414
patch: case ( $STRING$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ )
rank: 149
score: 98.95956759982639
patch: case 1 : case 0 case $NUMBER$ :
rank: 149
score: 98.93601684570312
patch: case $NUMBER$ : { case $NUMBER$ : break :
rank: 149
score: 98.92375946044922
patch: { * * * * / }
rank: 149
score: 98.9102313701923
patch: case $NUMBER$ : return Boolean . value CaMeL Of ( { $NUMBER$
rank: 149
score: 98.85768479567308
patch: x 0 = str . char CaMeL At ( 1 ) ;
rank: 149
score: 98.84219970703126
patch: } switch ( str . length ( ) )
rank: 149
score: 98.79076038707386
patch: case $NUMBER$ || str . equals ( $NUMBER$ ) ;
rank: 149
score: 98.35184478759766
patch: case str ; } case 1 :
rank: 150
score: 99.05375671386719
patch: case ( $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ )
rank: 150
score: 98.95720079210069
patch: case 0 : case $NUMBER$ : { {
rank: 150
score: 98.93537733289931
patch: case $NUMBER$ : if $NUMBER$ : break {
rank: 150
score: 98.92352294921875
patch: { * * * * * $NUMBER$ ;
rank: 150
score: 98.91016438802083
patch: default : throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }
rank: 150
score: 98.86168494591347
patch: str . char CaMeL At ( 1 ) ; return false ;
rank: 150
score: 98.85698590959821
patch: case ( $STRING$ : str . char CaMeL At ( 0 ) )
rank: 150
score: 98.83994547526042
patch: case str . char CaMeL At ( 0 ) $NUMBER$ :
rank: 150
score: 98.78990173339844
patch: case Double . Na CaMeL N :
rank: 151
score: 99.0531997680664
patch: case $STRING$ : { str = str . char CaMeL At ( 0 ) ;
rank: 151
score: 98.95473904079861
patch: case 0 : case 0 case $NUMBER$ :
rank: 151
score: 98.93444061279297
patch: case $NUMBER$ : return - $NUMBER$ :
rank: 151
score: 98.92150200737848
patch: * * * * * $NUMBER$ { /
rank: 151
score: 98.86142202524039
patch: move ( str . char CaMeL At ( 0 ) ) ;
rank: 151
score: 98.85675048828125
patch: case 1 : return str . char CaMeL At ( 1 ) != $STRING$ ;
rank: 151
score: 98.83719889322917
patch: if ( $STRING$ . length ( ) == $NUMBER$ ) {
rank: 151
score: 98.35093180338542
patch: case - $NUMBER$ : {
rank: 152
score: 99.05276053292411
patch: $STRING$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 152
score: 98.95158386230469
patch: case $STRING$ : { case $NUMBER$ {
rank: 152
score: 98.93381958007812
patch: case 1 : { case $NUMBER$ + $NUMBER$ :
rank: 152
score: 98.92108917236328
patch: } else { / * * /
rank: 152
score: 98.9100341796875
patch: case $NUMBER$ : return Boolean . value CaMeL Of ( { str
rank: 152
score: 98.86130196707589
patch: case && $STRING$ == str . char CaMeL At ( 0 ) ;
rank: 152
score: 98.85593483664773
patch: return str . char CaMeL At ( 0 ) ;
rank: 152
score: 98.34725952148438
patch: case str . [ 1 ] :
rank: 153
score: 99.04994553786058
patch: case $NUMBER$ * str . char CaMeL At ( 1 ) ;
rank: 153
score: 98.94945610894098
patch: case 0 : case 1 + $NUMBER$ :
rank: 153
score: 98.93368191189236
patch: case $NUMBER$ : { : case $NUMBER$ :
rank: 153
score: 98.92098659939236
patch: / * * * * $NUMBER$ { /
rank: 153
score: 98.90992954799107
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( {
rank: 153
score: 98.86114032451923
patch: return str . char CaMeL At ( 0 ) != null ;
rank: 153
score: 98.85565655048077
patch: assert str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 153
score: 98.7856778231534
patch: case $NUMBER$ || $STRING$ . equals ( $NUMBER$ ) ;
rank: 153
score: 98.34695870535714
patch: case ] { case $NUMBER$ :
rank: 154
score: 99.049072265625
patch: case $STRING$ : switch ( str . length ( ) ) {
rank: 154
score: 98.93306477864583
patch: case $NUMBER$ : return { case $NUMBER$ {
rank: 154
score: 98.92060089111328
patch: { * * { * { /
rank: 154
score: 98.9093487079327
patch: case $NUMBER$ : return false ; default : return false ; }
rank: 154
score: 98.86029924665179
patch: case $NUMBER$ : throw str . char CaMeL At ( 0 ) ;
rank: 154
score: 98.8543701171875
patch: throw ! str . char CaMeL At ( 0 ) ;
rank: 154
score: 98.83364868164062
patch: case $NUMBER$ : switch ( String . length ( ) )
rank: 154
score: 98.78374689275569
patch: case - 1 : return true ; case $NUMBER$ :
rank: 154
score: 98.34602355957031
patch: case / ? { case $NUMBER$ :
rank: 155
score: 99.04843139648438
patch: if ( ! str . char CaMeL At ( 1 ) == $STRING$ ) {
rank: 155
score: 98.94847954644098
patch: case 0 : { case - 1 :
rank: 155
score: 98.93258327907986
patch: case $NUMBER$ : if : case 1 :
rank: 155
score: 98.92047882080078
patch: case 1 : return false : {
rank: 155
score: 98.90843787560097
patch: > 0 ? Boolean . TRUE : Boolean . FALSE ; }
rank: 155
score: 98.85985389122597
patch: return ! str . char CaMeL At ( 0 ) ; }
rank: 155
score: 98.85427856445312
patch: case $NUMBER$ : return $STRING$ . char CaMeL At ( 0 ) == $STRING$ ;
rank: 155
score: 98.83136541193181
patch: case $NUMBER$ : { System . return false ; }
rank: 155
score: 98.7836026278409
patch: case $NUMBER$ : return $STRING$ . equals { default :
rank: 156
score: 99.04840087890625
patch: case $NUMBER$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$
rank: 156
score: 98.9477310180664
patch: case 0 ] { case 1 :
rank: 156
score: 98.93201446533203
patch: case $NUMBER$ : return - 1 :
rank: 156
score: 98.91913519965277
patch: / * * : * { * /
rank: 156
score: 98.90723419189453
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case { $STRING$ } ;
rank: 156
score: 98.85927170973558
patch: fail ( str . char CaMeL At ( 1 ) ) ;
rank: 156
score: 98.85427856445312
patch: case $NUMBER$ : return ( str . char CaMeL At ( 1 ) == $STRING$
rank: 156
score: 98.78156072443181
patch: case 1 || $STRING$ . equals ( str ) ;
rank: 156
score: 98.34309387207031
patch: case $STRING$ : return null ; }
rank: 157
score: 99.04774827223558
patch: case $NUMBER$ = str . char CaMeL At ( 0 ) ;
rank: 157
score: 98.94696044921875
patch: case $NUMBER$ : { case 1 : }
rank: 157
score: 98.91842990451389
patch: { * * * * * $NUMBER$ :
rank: 157
score: 98.90640258789062
patch: > 0 ? Boolean . TRUE : Boolean . FALSE ;
rank: 157
score: 98.85887799944196
patch: return ( Boolean ) str . char CaMeL At ( 1 ) ;
rank: 157
score: 98.85313415527344
patch: case $NUMBER$ : return str . char CaMeL At ( 1 ) == str ;
rank: 157
score: 98.83064778645833
patch: case > str . char CaMeL At ( 1 ) ;
rank: 157
score: 98.78125
patch: case $NUMBER$ : return $STRING$ . equals ( { str
rank: 157
score: 98.34286499023438
patch: case true : { case $NUMBER$ :
rank: 158
score: 99.04637858072917
patch: String char CaMeL At = str . char CaMeL At ( 0 ) ;
rank: 158
score: 98.93130154079861
patch: case $NUMBER$ : case 1 { break :
rank: 158
score: 98.9122314453125
patch: * * * * { case 1 :
rank: 158
score: 98.90592956542969
patch: case 1 : return $STRING$ . equals CaMeL Ignore CaMeL Case ( str ) :
rank: 158
score: 98.85244750976562
patch: value = str . char CaMeL At ( 1 ) ;
rank: 158
score: 98.82667125355114
patch: if ( str . length ( ) == $NUMBER$ )
rank: 158
score: 98.78053977272727
patch: case $NUMBER$ : return $STRING$ . equals ( $NUMBER$ :
rank: 158
score: 98.34074401855469
patch: case Boolean [ ] == $STRING$ ;
rank: 159
score: 98.9456787109375
patch: case $STRING$ : case - $NUMBER$ :
rank: 159
score: 98.92872837611607
patch: case $NUMBER$ : / / /
rank: 159
score: 98.91151123046875
patch: { * * * * { case $NUMBER$ :
rank: 159
score: 98.90533916766827
patch: case $NUMBER$ : return value . boolean CaMeL Value ( ) ;
rank: 159
score: 98.85801478794643
patch: return new str . char CaMeL At ( 0 ) == null ;
rank: 159
score: 98.3398208618164
patch: case $STRING$ : case $STRING$ : {
rank: 160
score: 98.927978515625
patch: case 1 : if $NUMBER$ { {
rank: 160
score: 98.91084594726563
patch: * * * * * { * * /
rank: 160
score: 98.90472412109375
patch: case $NUMBER$ : return Boolean . value CaMeL Of ( { str }
rank: 160
score: 98.85133579799107
patch: case $NUMBER$ : return str . char CaMeL At ( 1 ) ;
rank: 160
score: 98.82032267252605
patch: case + str . char CaMeL At ( 1 ) ;
rank: 160
score: 98.77755737304688
patch: { case $NUMBER$ : case $NUMBER$ :
rank: 161
score: 99.04322916666666
patch: case $STRING$ && str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 161
score: 98.943359375
patch: case $NUMBER$ : { else {
rank: 161
score: 98.90997992621527
patch: case $STRING$ { * * * * /
rank: 161
score: 98.90467834472656
patch: case super . to CaMeL Boolean ( ) : return false ; case $NUMBER$ :
rank: 161
score: 98.85451834542411
patch: case || $STRING$ == str . char CaMeL At ( 0 ) ;
rank: 161
score: 98.84982299804688
patch: start = str . char CaMeL At ( 0 ) ;
rank: 161
score: 98.8202412923177
patch: if ( $STRING$ . length ( ) == 1 ) {
rank: 161
score: 98.77702192826705
patch: case $NUMBER$ || str . { return false ; }
rank: 161
score: 98.33910369873047
patch: case $STRING$ . length ( ) :
rank: 162
score: 98.94164276123047
patch: case 1 ] { case 1 :
rank: 162
score: 98.92720540364583
patch: case $NUMBER$ : { / * * /
rank: 162
score: 98.90976969401042
patch: / * { / * * * /
rank: 162
score: 98.90408528645834
patch: case 1 : throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ;
rank: 162
score: 98.8498026529948
patch: val = str . char CaMeL At ( 1 ) ;
rank: 162
score: 98.8153584798177
patch: case $NUMBER$ : switch ( $STRING$ ) { case $NUMBER$ :
rank: 162
score: 98.7768887606534
patch: case $NUMBER$ || $STRING$ . equals ( str ) {
rank: 162
score: 98.33815220424107
patch: case str . length ( )
rank: 163
score: 99.04215734145221
patch: case $NUMBER$ : { str 0 = str . char CaMeL At ( 0 ) ;
rank: 163
score: 98.94156901041667
patch: case 0 : { { case 0 :
rank: 163
score: 98.92609998914931
patch: case $NUMBER$ : { case $NUMBER$ : /
rank: 163
score: 98.90950012207031
patch: * * * * * $NUMBER$ /
rank: 163
score: 98.90242004394531
patch: case 1 : return $STRING$ . equals CaMeL Ignore CaMeL Case ( $STRING$ ) ;
rank: 163
score: 98.85355050223214
patch: return ( str . char CaMeL At ( 1 ) == ) ;
rank: 163
score: 98.81380208333333
patch: case $NUMBER$ : . char CaMeL At ( 1 ) ;
rank: 163
score: 98.77568901909723
patch: case $NUMBER$ : case $NUMBER$ : default :
rank: 163
score: 98.33793640136719
patch: case String . trim ( ) :
rank: 164
score: 99.04179164341518
patch: case $STRING$ || str . char CaMeL At ( 0 ) == $STRING$
rank: 164
score: 98.92521667480469
patch: case $NUMBER$ : { if : {
rank: 164
score: 98.90915934244792
patch: { * * * * $NUMBER$ : /
rank: 164
score: 98.85225132533482
patch: case ( char ) str . char CaMeL At ( 0 ) ;
rank: 164
score: 98.84583536783855
patch: key = str . char CaMeL At ( 0 ) ;
rank: 164
score: 98.8134765625
patch: if ( str . char CaMeL At ( 1 )
rank: 164
score: 98.33771514892578
patch: case null : return true ; }
rank: 165
score: 99.0416030883789
patch: case $NUMBER$ || str . char CaMeL At ( 0 ) == $STRING$ ) {
rank: 165
score: 98.93929714626736
patch: case 1 : { case $STRING$ : {
rank: 165
score: 98.92517700195313
patch: case $NUMBER$ : { case $NUMBER$ : { {
rank: 165
score: 98.90858289930556
patch: case $STRING$ : this . case $NUMBER$ :
rank: 165
score: 98.90184020996094
patch: case Character . MIN _ VALUE : case Character . MAX _ VALUE : {
rank: 165
score: 98.85205078125
patch: return new str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 165
score: 98.84555053710938
patch: text = str . char CaMeL At ( 1 ) ;
rank: 165
score: 98.772900390625
patch: case $NUMBER$ : return Boolean . TRUE ; }
rank: 166
score: 99.04034423828125
patch: case $NUMBER$ : return ( str . char CaMeL At ( 0 )
rank: 166
score: 98.923095703125
patch: case $NUMBER$ : { { case $NUMBER$ : {
rank: 166
score: 98.90747942243304
patch: { * * * * /
rank: 166
score: 98.85163225446429
patch: if ( str . char CaMeL At ( 0 ) == ) {
rank: 166
score: 98.84485802283653
patch: return str . char CaMeL At ( 1 ) == str ;
rank: 166
score: 98.81270345052083
patch: if ( str . to CaMeL String ( ) ) {
rank: 166
score: 98.77239435369319
patch: case super . to CaMeL String ( str ) :
rank: 166
score: 98.33560616629464
patch: case Boolean ; case $STRING$ :
rank: 167
score: 98.93882751464844
patch: case case 1 : case $NUMBER$ :
rank: 167
score: 98.92302788628473
patch: case 1 : / / / * /
rank: 167
score: 98.90638427734375
patch: * * * * * { { * /
rank: 167
score: 98.90127328725961
patch: case $NUMBER$ : case $NUMBER$ : return false ; case $NUMBER$ :
rank: 167
score: 98.85104806082589
patch: return new str . char CaMeL At ( 0 ) != $STRING$ ;
rank: 167
score: 98.84480424360795
patch: ++ str . char CaMeL At ( 0 ) ;
rank: 167
score: 98.810302734375
patch: case 1 : switch ( str . length ( ) )
rank: 167
score: 98.7709628018466
patch: case Long . value CaMeL Of ( $NUMBER$ ) :
rank: 167
score: 98.33428083147321
patch: case || $STRING$ == $STRING$ ;
rank: 168
score: 99.04015174278847
patch: case $STRING$ += str . char CaMeL At ( 1 ) ;
rank: 168
score: 98.93751356336806
patch: case - $NUMBER$ : { case $NUMBER$ :
rank: 168
score: 98.92267523871527
patch: case $NUMBER$ : break { case $NUMBER$ {
rank: 168
score: 98.90621609157986
patch: { * * * / case $NUMBER$ :
rank: 168
score: 98.80975341796875
patch: case $STRING$ : switch ( str . length ( ) )
rank: 168
score: 98.77080426897321
patch: case $NUMBER$ : return true :
rank: 168
score: 98.33297119140624
patch: case + 1 :
rank: 169
score: 99.03983306884766
patch: switch ( str . char CaMeL At ( 0 ) ) { case $NUMBER$ :
rank: 169
score: 98.9359130859375
patch: case $NUMBER$ : { $NUMBER$ * /
rank: 169
score: 98.92257351345486
patch: case 1 : case 1 : { {
rank: 169
score: 98.90586853027344
patch: / * * * * / /
rank: 169
score: 98.90096282958984
patch: case Integer . TYPE : case Integer . TYPE : case Integer . TYPE :
rank: 169
score: 98.8470458984375
patch: return str . char CaMeL At ( 0 ) != $STRING$ ; }
rank: 169
score: 98.76772054036458
patch: case $NUMBER$ ? $NUMBER$ : case $NUMBER$ :
rank: 169
score: 98.33189392089844
patch: case false : { case $NUMBER$ :
rank: 170
score: 98.92227783203126
patch: case $NUMBER$ : if $NUMBER$ : case 1 :
rank: 170
score: 98.90578206380208
patch: { * / * * { * /
rank: 170
score: 98.84694998604911
patch: case str . char CaMeL At ( 0 ) ; return false ;
rank: 170
score: 98.80446370442708
patch: switch ( String . str . length ( ) ) {
rank: 170
score: 98.76572265625
patch: case $STRING$ : return true ; case $NUMBER$ :
rank: 170
score: 98.33101654052734
patch: case str ) { case 1 :
rank: 171
score: 99.03894981971153
patch: case $NUMBER$ += str . char CaMeL At ( $NUMBER$ ) ;
rank: 171
score: 98.93400743272569
patch: case $NUMBER$ : { { return $NUMBER$ {
rank: 171
score: 98.92164442274306
patch: case $NUMBER$ : { / / / /
rank: 171
score: 98.90526733398437
patch: { * * * * * * : /
rank: 171
score: 98.84281921386719
patch: case $NUMBER$ : return $STRING$ . char CaMeL At ( 1 ) == $STRING$ ;
rank: 171
score: 98.80355834960938
patch: } if ( str . char CaMeL At ( 0 )
rank: 171
score: 98.7646817294034
patch: case $NUMBER$ : return str . { case $NUMBER$ :
rank: 171
score: 98.33020782470703
patch: case 1 : { return false ;
rank: 172
score: 99.03894856770833
patch: int char CaMeL At = str . char CaMeL At ( 0 ) ;
rank: 172
score: 98.92964935302734
patch: case $NUMBER$ : { case 1 ;
rank: 172
score: 98.90458170572917
patch: { else { * * * * /
rank: 172
score: 98.90025329589844
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( str : {
rank: 172
score: 98.843994140625
patch: case += str . char CaMeL At ( 0 ) ;
rank: 172
score: 98.80352228338069
patch: if ( str . equals ( $STRING$ ) ) {
rank: 172
score: 98.76465953480114
patch: case Long . MIN _ VALUE : case $NUMBER$ :
rank: 172
score: 98.32887268066406
patch: case ( String ) null : {
rank: 173
score: 99.0388542624081
patch: to CaMeL Boolean ( str . char CaMeL At ( 0 ) == $STRING$ ) ;
rank: 173
score: 98.92955017089844
patch: case case $NUMBER$ : case $NUMBER$ :
rank: 173
score: 98.92112901475694
patch: case 1 : break : case $NUMBER$ :
rank: 173
score: 98.90429009331598
patch: case 0 { / * { * /
rank: 173
score: 98.8997802734375
patch: case $NUMBER$ : return Boolean . value CaMeL Of ( { $STRING$ } :
rank: 173
score: 98.84232584635417
patch: xsp = str . char CaMeL At ( 0 ) ;
rank: 173
score: 98.80258517795139
patch: switch ( $STRING$ ) { case 1 :
rank: 173
score: 98.76173231336806
patch: default : return false ; } else {
rank: 173
score: 98.3277816772461
patch: case TRUE : return true ; }
rank: 174
score: 98.9291763305664
patch: case - $NUMBER$ : case $NUMBER$ :
rank: 174
score: 98.90395779079861
patch: { * * * : * / }
rank: 174
score: 98.80248006184895
patch: if ( value == null ) { return false ; }
rank: 174
score: 98.759521484375
patch: case $NUMBER$ : { return { default :
rank: 174
score: 98.32640075683594
patch: case $NUMBER$ : return $STRING$ ; }
rank: 175
score: 99.03834635416666
patch: case $NUMBER$ : return str . char CaMeL At ( 0 ) == $STRING$
rank: 175
score: 98.92771402994792
patch: case $NUMBER$ : { * case $NUMBER$ :
rank: 175
score: 98.91887071397569
patch: case 1 : return - 1 : {
rank: 175
score: 98.90152994791667
patch: / * { / * { * /
rank: 175
score: 98.89930943080357
patch: case $NUMBER$ : return Boolean . TRUE . equals ( $STRING$ ) ;
rank: 175
score: 98.84111785888672
patch: case ( str . to CaMeL String ( ) . length ( ) ) :
rank: 175
score: 98.80199584960937
patch: to CaMeL Boolean ( str == null ) ;
rank: 175
score: 98.75923919677734
patch: case Short . MAX _ VALUE :
rank: 175
score: 98.32508087158203
patch: case ( String . $STRING$ ) :
rank: 176
score: 99.0373065655048
patch: case $NUMBER$ || str . char CaMeL At ( 1 ) ==
rank: 176
score: 98.92645263671875
patch: case $STRING$ : case - 1 :
rank: 176
score: 98.90053982204861
patch: * * * * : * * /
rank: 176
score: 98.89888000488281
patch: case 1 : return $STRING$ . equals CaMeL Ignore CaMeL Case ( str ) {
rank: 176
score: 98.8389383951823
patch: / * str . char CaMeL At ( 0 ) ;
rank: 176
score: 98.32484944661458
patch: case Boolean . $STRING$ :
rank: 177
score: 99.03675079345703
patch: case $NUMBER$ : { switch ( str . char CaMeL At ( 1 ) )
rank: 177
score: 98.92552354600694
patch: case $STRING$ : case 0 case $NUMBER$ :
rank: 177
score: 98.91834174262152
patch: case 1 : { { case $NUMBER$ {
rank: 177
score: 98.89981079101562
patch: * { * * * * /
rank: 177
score: 98.898779296875
patch: case $NUMBER$ : return $NUMBER$ ; case 1 :
rank: 177
score: 98.84019470214844
patch: case 1 : switch ( str . char CaMeL At ( 1 ) ) {
rank: 177
score: 98.80021528764205
patch: case $NUMBER$ : { System . return true ; }
rank: 177
score: 98.7589999112216
patch: case $NUMBER$ : return Boolean . Na CaMeL N ;
rank: 177
score: 98.32178497314453
patch: case str ; { case 1 :
rank: 178
score: 99.03620910644531
patch: case $NUMBER$ : str 0 = str . char CaMeL At ( 0 ) ;
rank: 178
score: 98.92337375217014
patch: case $NUMBER$ : { case $NUMBER$ ; {
rank: 178
score: 98.89971160888672
patch: case $STRING$ : * * * /
rank: 178
score: 98.83997453962054
patch: switch ( str . length ( ) ) { case $NUMBER$ : {
rank: 178
score: 98.83345540364583
patch: case str . length ( ) : { return true ;
rank: 178
score: 98.79679361979167
patch: case $STRING$ : { return true ; }
rank: 178
score: 98.75752766927083
patch: default { case $NUMBER$ : case $NUMBER$ :
rank: 178
score: 98.32168143136161
patch: case Boolean ; case $NUMBER$ :
rank: 179
score: 99.03570197610294
patch: case $NUMBER$ : this . str = str . char CaMeL At ( 1 ) ;
rank: 179
score: 98.92335510253906
patch: case $NUMBER$ : return case 1 :
rank: 179
score: 98.916748046875
patch: case $NUMBER$ : { { { case $NUMBER$ :
rank: 179
score: 98.89890358664773
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) :
rank: 179
score: 98.89671223958334
patch: case $NUMBER$ : return Boolean . value CaMeL Of ( { str } :
rank: 179
score: 98.83872477213542
patch: n = str . char CaMeL At ( 0 ) ;
rank: 179
score: 98.82965087890625
patch: case ^ str . char CaMeL At ( 1 ) ;
rank: 179
score: 98.79290093315973
patch: switch ( 1 ) { case $NUMBER$ :
rank: 179
score: 98.75653631036931
patch: case $NUMBER$ || str . char CaMeL Value ( :
rank: 179
score: 98.32128034319196
patch: return true ; case $NUMBER$ :
rank: 180
score: 98.92330932617188
patch: case $NUMBER$ { case - 1 :
rank: 180
score: 98.91665988498264
patch: case $NUMBER$ : { / { * /
rank: 180
score: 98.89870198567708
patch: * * * * * * / {
rank: 180
score: 98.89630998883929
patch: case $NUMBER$ : return Boolean . TRUE . equals ( str ) {
rank: 180
score: 98.83865356445312
patch: throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ;
rank: 180
score: 98.82215372721355
patch: return Boolean . $STRING$ . length ( ) == 0 ;
rank: 180
score: 98.79217529296875
patch: case str . char CaMeL At ( $NUMBER$ ) : {
rank: 180
score: 98.75609741210937
patch: case $NUMBER$ : if ( str . length :
rank: 180
score: 98.32114955357143
patch: case ) { case 0 :
rank: 181
score: 98.91569519042969
patch: case $NUMBER$ : String case 1 :
rank: 181
score: 98.89804077148438
patch: { * { * { * /
rank: 181
score: 98.89606182391827
patch: case $NUMBER$ : return Boolean . value CaMeL Of ( { $STRING$
rank: 181
score: 98.83865356445312
patch: result = str . char CaMeL At ( 1 ) ;
rank: 181
score: 98.82169596354167
patch: case | str . char CaMeL At ( $NUMBER$ ) ;
rank: 181
score: 98.75566948784723
patch: case - 1 : break ; default :
rank: 181
score: 98.3205795288086
patch: case > 0 ; case $NUMBER$ :
rank: 182
score: 99.03550502232143
patch: case $NUMBER$ : return ( str . char CaMeL At ( 1 )
rank: 182
score: 98.92183430989583
patch: case 1 : { case - $NUMBER$ {
rank: 182
score: 98.91567654079861
patch: case 1 : * { case $NUMBER$ :
rank: 182
score: 98.89732530381944
patch: { * * * { / * /
rank: 182
score: 98.89598846435547
patch: case super . to CaMeL Boolean ( ) : return true ; case $NUMBER$ :
rank: 182
score: 98.75554741753473
patch: case $NUMBER$ : return null ; default :
rank: 182
score: 98.31795501708984
patch: case ) { case - $NUMBER$ :
rank: 183
score: 99.03422037760417
patch: case $STRING$ : switch ( str . char CaMeL At ( 1 ) )
rank: 183
score: 98.92078508649554
patch: case 0 { case 1 :
rank: 183
score: 98.914794921875
patch: case $NUMBER$ : if case 1 {
rank: 183
score: 98.89667426215277
patch: * * * : * * * /
rank: 183
score: 98.89438302176339
patch: case $NUMBER$ : throw new Illegal CaMeL Argument CaMeL Exception ( ) ;
rank: 183
score: 98.837890625
patch: case String . value CaMeL Of ( str ) :
rank: 183
score: 98.81620279947917
patch: case ( str . to CaMeL String ( ) ) :
rank: 183
score: 98.78910319010417
patch: to CaMeL Boolean ( str . length ( ) ) ;
rank: 183
score: 98.75459428267045
patch: case Long . parse CaMeL Int ( $NUMBER$ ) :
rank: 183
score: 98.31685638427734
patch: case str ; } case $STRING$ :
rank: 184
score: 98.89586046006944
patch: * * * * * case { {
rank: 184
score: 98.89402669270834
patch: case 1 : throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;
rank: 184
score: 98.83646334134616
patch: f 0 = str . char CaMeL At ( 0 ) ;
rank: 184
score: 98.78729802911931
patch: static str . char CaMeL At ( 0 ) ;
rank: 184
score: 98.75168678977273
patch: case ) || $STRING$ . equals ( str ) ;
rank: 184
score: 98.31575775146484
patch: to CaMeL Boolean = false ; }
rank: 185
score: 99.03311360677084
patch: case $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ )
rank: 185
score: 98.91924370659723
patch: case $STRING$ : { case - $NUMBER$ :
rank: 185
score: 98.89578586154514
patch: { * * { * { { /
rank: 185
score: 98.89378255208334
patch: case $STRING$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( { $STRING$
rank: 185
score: 98.83599384014423
patch: default ( str . char CaMeL At ( 1 ) ) ;
rank: 185
score: 98.81159002130681
patch: equals str . char CaMeL At ( 0 ) ;
rank: 185
score: 98.78469016335227
patch: static str . char CaMeL At ( 1 ) ;
rank: 185
score: 98.31396484375
patch: case : { case $NUMBER$ :
rank: 186
score: 99.03152465820312
patch: case $NUMBER$ : { switch ( str . char CaMeL At ( 0 ) )
rank: 186
score: 98.91855875651042
patch: case $NUMBER$ : case $STRING$ + $NUMBER$ :
rank: 186
score: 98.91436767578125
patch: case 1 : : case $NUMBER$ :
rank: 186
score: 98.89518907335069
patch: { else { / * { * /
rank: 186
score: 98.89296311598558
patch: case $NUMBER$ : return Boolean . TRUE : Boolean . FALSE ;
rank: 186
score: 98.8355712890625
patch: += str . char CaMeL At ( 0 ) ;
rank: 186
score: 98.79766845703125
patch: case ~ str . char CaMeL At ( 0 ) ;
rank: 186
score: 98.78429066051136
patch: case $NUMBER$ : char CaMeL At ( $STRING$ ) ;
rank: 186
score: 98.75042169744319
patch: case Integer . $NUMBER$ : case Integer . TYPE :
rank: 186
score: 98.3111572265625
patch: case str [ $NUMBER$ ] :
rank: 187
score: 99.03099772135417
patch: case 0 || str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 187
score: 98.91811116536458
patch: case $NUMBER$ ] { case $NUMBER$ : {
rank: 187
score: 98.91434326171876
patch: case 1 : if $NUMBER$ : case $NUMBER$ :
rank: 187
score: 98.89472113715277
patch: / * * * { { * /
rank: 187
score: 98.7974609375
patch: case str . char CaMeL At ( 0 )
rank: 187
score: 98.78145345052083
patch: case $NUMBER$ : { }
rank: 187
score: 98.748974609375
patch: case - 1 : break ; case $NUMBER$ :
rank: 187
score: 98.31073760986328
patch: case ( 0 + 1 ) :
rank: 188
score: 99.03078049879808
patch: case $STRING$ = str . char CaMeL At ( 0 ) ;
rank: 188
score: 98.91714138454861
patch: case $NUMBER$ + $NUMBER$ : case $NUMBER$ :
rank: 188
score: 98.91341400146484
patch: case $NUMBER$ : { / { /
rank: 188
score: 98.89444580078126
patch: * * * * * * { * /
rank: 188
score: 98.8924091045673
patch: case $NUMBER$ : return Boolean . TRUE . equals ( { str
rank: 188
score: 98.79137073863636
patch: append str . char CaMeL At ( 0 ) ;
rank: 188
score: 98.78087768554687
patch: to CaMeL Boolean ( str == $STRING$ ) ;
rank: 188
score: 98.74762517755681
patch: case Integer . value CaMeL Of ( str ) :
rank: 188
score: 98.31034088134766
patch: case str . char CaMeL At (
rank: 189
score: 99.02982875279018
patch: case $NUMBER$ && str . char CaMeL At ( 1 ) == $STRING$
rank: 189
score: 98.89408365885417
patch: * * * * * * : /
rank: 189
score: 98.89198996803977
patch: case $NUMBER$ : throws Number CaMeL Format CaMeL Exception {
rank: 189
score: 98.783447265625
patch: case ( str . to CaMeL String ( ) ) ;
rank: 189
score: 98.7668701171875
patch: case $NUMBER$ : { { return false ; }
rank: 189
score: 98.74761284722223
patch: case $NUMBER$ : return Boolean . FALSE ;
rank: 189
score: 98.3095932006836
patch: case str . size ( ) :
rank: 190
score: 99.02953162560097
patch: case $NUMBER$ : return str . char CaMeL At ( 0 )
rank: 190
score: 98.91616482204861
patch: else { case $NUMBER$ : return $NUMBER$ {
rank: 190
score: 98.9112040201823
patch: case 1 : { /
rank: 190
score: 98.89250183105469
patch: case $STRING$ : return false : {
rank: 190
score: 98.89158630371094
patch: case $NUMBER$ : return Boolean . TRUE . equals ( { $STRING$ } ) ;
rank: 190
score: 98.76674582741477
patch: switch ( str . to CaMeL String ( ) )
rank: 190
score: 98.74728732638889
patch: case Short . $NUMBER$ : case $NUMBER$ :
rank: 190
score: 98.3094482421875
patch: case Boolean ) { case $STRING$ :
rank: 191
score: 98.91600206163194
patch: case case 1 : case $NUMBER$ : {
rank: 191
score: 98.91099717881944
patch: case $NUMBER$ : break : case 1 :
rank: 191
score: 98.8919677734375
patch: case $STRING$ { / * * { /
rank: 191
score: 98.8909423828125
patch: case $NUMBER$ : return Character . is CaMeL Upper CaMeL Case ( { $STRING$
rank: 191
score: 98.30322265625
patch: case ( String ) $STRING$ :
rank: 192
score: 99.028564453125
patch: case $STRING$ : { str = str . char CaMeL At ( 1 ) ;
rank: 192
score: 98.91566467285156
patch: case $NUMBER$ { case $NUMBER$ { {
rank: 192
score: 98.90877278645833
patch: case $NUMBER$ : { case $NUMBER$ + :
rank: 192
score: 98.89162868923611
patch: case 0 { * * { * /
rank: 192
score: 98.8906021118164
patch: case $NUMBER$ : { if ( $STRING$ . equals CaMeL Ignore CaMeL Case ( {
rank: 192
score: 98.83241780598958
patch: b = str . char CaMeL At ( 1 ) ;
rank: 192
score: 98.77632649739583
patch: } switch ( str . length ( ) ) { }
rank: 192
score: 98.74633026123047
patch: case Long . MAX _ VALUE :
rank: 192
score: 98.30238342285156
patch: case Boolean . ( $STRING$ ) :
rank: 193
score: 99.0285175030048
patch: case $NUMBER$ - str . char CaMeL At ( 1 ) ;
rank: 193
score: 98.91371154785156
patch: case $STRING$ : case 1 : {
rank: 193
score: 98.90794067382812
patch: case $NUMBER$ : case $NUMBER$ { case 1 :
rank: 193
score: 98.89157443576389
patch: { * * { * / * /
rank: 193
score: 98.88953575721153
patch: case 1 : throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 193
score: 98.83233642578125
patch: throw ! str . char CaMeL At ( 1 ) ;
rank: 193
score: 98.75324041193181
patch: case $NUMBER$ : to CaMeL Boolean ( str ) ;
rank: 193
score: 98.7450927734375
patch: case $NUMBER$ : return null ; case $NUMBER$ :
rank: 193
score: 98.30174255371094
patch: / * else { case $NUMBER$ :
rank: 194
score: 99.02737247242646
patch: to CaMeL Boolean ( str . char CaMeL At ( 1 ) == $STRING$ ) ;
rank: 194
score: 98.90753173828125
patch: case 1 : { if case $NUMBER$ : {
rank: 194
score: 98.89048258463542
patch: { * * * { case 1 :
rank: 194
score: 98.8892352764423
patch: case $NUMBER$ : return true ; case $NUMBER$ : case $NUMBER$ :
rank: 194
score: 98.77433268229167
patch: return ! value . char CaMeL At ( 0 ) ;
rank: 194
score: 98.74455122514205
patch: case Boolean . value CaMeL Of ( $STRING$ ) :
rank: 194
score: 98.30146789550781
patch: case ( $NUMBER$ + 0 ) :
rank: 195
score: 99.0266582782452
patch: if ( str . char CaMeL At ( 1 ) ) {
rank: 195
score: 98.91202799479167
patch: case 0 : { { case 1 :
rank: 195
score: 98.90676443917411
patch: case $NUMBER$ : if $NUMBER$ {
rank: 195
score: 98.8900146484375
patch: { * * * : { * /
rank: 195
score: 98.88773970170455
patch: case $NUMBER$ : { case 1 : case $NUMBER$ :
rank: 195
score: 98.83096078725961
patch: return 0 == str . char CaMeL At ( 1 ) ;
rank: 195
score: 98.77395629882812
patch: return Boolean . $STRING$ . length ( ) == 1 ;
rank: 195
score: 98.74351917613636
patch: switch ( String . str ) { case $NUMBER$ :
rank: 195
score: 98.74308776855469
patch: case $NUMBER$ : return true ; {
rank: 195
score: 98.30130440848214
patch: case Boolean { case $NUMBER$ :
rank: 196
score: 99.02651742788461
patch: $STRING$ || str . char CaMeL At ( 1 ) == $STRING$
rank: 196
score: 98.91121419270833
patch: case 0 : { { case $NUMBER$ {
rank: 196
score: 98.90571594238281
patch: case $NUMBER$ : : case 1 :
rank: 196
score: 98.88970947265625
patch: * * * * { * / /
rank: 196
score: 98.88525390625
patch: case $NUMBER$ : case $NUMBER$ : return true ; case $NUMBER$ :
rank: 196
score: 98.8308334350586
patch: case 1 : switch ( str . char CaMeL At ( 0 ) ) {
rank: 196
score: 98.77305094401042
patch: case -= str . char CaMeL At ( 0 ) ;
rank: 196
score: 98.74165482954545
patch: case $NUMBER$ : return $STRING$ . equals ( str )
rank: 196
score: 98.30107879638672
patch: case Boolean . - 1 : {
rank: 197
score: 98.91060965401786
patch: else { case $NUMBER$ : }
rank: 197
score: 98.90568237304687
patch: case 1 : { case 1 + $NUMBER$ :
rank: 197
score: 98.88965521918402
patch: / * * * * case { /
rank: 197
score: 98.83078835227273
patch: return str . char CaMeL At ( 1 ) ;
rank: 197
score: 98.74268798828125
patch: case $NUMBER$ : }
rank: 197
score: 98.73997913707386
patch: case $NUMBER$ : return str . char CaMeL At :
rank: 197
score: 98.30033111572266
patch: case str ; case - 1 :
rank: 198
score: 98.91012573242188
patch: case $NUMBER$ : { case 0 {
rank: 198
score: 98.90568033854167
patch: case 1 : { if case $NUMBER$ {
rank: 198
score: 98.88876681857639
patch: { * * { { * * /
rank: 198
score: 98.88399251302083
patch: case $NUMBER$ : return Boolean . value CaMeL Of ( { str } ;
rank: 198
score: 98.82952880859375
patch: case $NUMBER$ : return str . char CaMeL At ( 1 ) ==
rank: 198
score: 98.7394131747159
patch: case $STRING$ : return Boolean . TRUE ; default :
rank: 198
score: 98.73638916015625
patch: str . char CaMeL At ( 0 ) ;
rank: 199
score: 99.02474539620536
patch: case $NUMBER$ : return str . char CaMeL At ( 0 ) ;
rank: 199
score: 98.90761311848958
patch: case 0 : case $STRING$ + $NUMBER$ :
rank: 199
score: 98.90515814887152
patch: case $NUMBER$ : { / case $NUMBER$ :
rank: 199
score: 98.88783772786458
patch: * * * * * { / /
rank: 199
score: 98.88377162388393
patch: default : throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 199
score: 98.76828002929688
patch: return new str . char CaMeL At ( 0 ) ;
rank: 199
score: 98.7389248934659
patch: case - 1 : case 1 : case $NUMBER$ :
rank: 199
score: 98.7322110262784
patch: if ( $STRING$ . length ( ) == $NUMBER$ )
rank: 199
score: 98.29801940917969
patch: case 1 : { return true ;
rank: 200
score: 98.90732828776042
patch: case 0 : { case - $NUMBER$ {
rank: 200
score: 98.90432739257812
patch: case $NUMBER$ + $NUMBER$ :
rank: 200
score: 98.88762664794922
patch: case 0 : return $NUMBER$ ; }
rank: 200
score: 98.88133021763393
patch: case $NUMBER$ : throw new Illegal CaMeL State CaMeL Exception ( ) ;
rank: 200
score: 98.82805989583333
patch: case ( $STRING$ : str . char CaMeL At ( 0 ) ) {
rank: 200
score: 98.76795450846355
patch: case str = str . to CaMeL String ( ) ;
rank: 200
score: 98.7317626953125
patch: case $NUMBER$ : { { return true ; }
rank: 200
score: 98.2979736328125
patch: case $NUMBER$ ; case 1 :
rank: 201
score: 98.90721299913194
patch: case 0 : { case $STRING$ : {
rank: 201
score: 98.90404595269098
patch: case $NUMBER$ : if $NUMBER$ { { {
rank: 201
score: 98.88732231987848
patch: { * * * * * { {
rank: 201
score: 98.8810546875
patch: case 0 : return $NUMBER$ ; case 1 :
rank: 201
score: 98.8271993001302
patch: path = str . char CaMeL At ( 0 ) ;
rank: 201
score: 98.76783243815105
patch: / * switch ( str . length ( ) ) {
rank: 201
score: 98.73783569335937
patch: case $NUMBER$ || str . { case $NUMBER$ :
rank: 201
score: 98.2969970703125
patch: case $NUMBER$ : return null ; }
rank: 202
score: 99.02305094401042
patch: if ( str . length ( ) > 1 ) {
rank: 202
score: 98.90538194444444
patch: else { case $NUMBER$ : case $NUMBER$ :
rank: 202
score: 98.90380859375
patch: case 1 : { case 1 : :
rank: 202
score: 98.88685438368056
patch: { * { * * * / /
rank: 202
score: 98.76554361979167
patch: if ( $STRING$ . length ( ) == 0 ) {
rank: 202
score: 98.72951438210227
patch: switch ( this . str ) { case $NUMBER$ :
rank: 202
score: 98.29593331473214
patch: case str [ 0 ) :
rank: 203
score: 98.90375434027777
patch: case $NUMBER$ : return : case $NUMBER$ :
rank: 203
score: 98.88682861328125
patch: { * * * { * * { /
rank: 203
score: 98.8793716430664
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( str : :
rank: 203
score: 98.82505798339844
patch: case SIZE : return str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 204
score: 99.02259239783653
patch: case $NUMBER$ | str . char CaMeL At ( $NUMBER$ ) ;
rank: 204
score: 98.903564453125
patch: case 0 : return case $NUMBER$ :
rank: 204
score: 98.90331268310547
patch: case $NUMBER$ + { case $NUMBER$ :
rank: 204
score: 98.88506401909723
patch: case 0 { * * * * /
rank: 204
score: 98.87913208007812
patch: case 0 : return $NUMBER$ ; case $NUMBER$ :
rank: 204
score: 98.82473520132211
patch: o 0 = str . char CaMeL At ( 0 ) ;
rank: 204
score: 98.73558213975694
patch: case $NUMBER$ : { return $NUMBER$ ; }
rank: 204
score: 98.72235717773438
patch: case $NUMBER$ : switch ( str . char CaMeL
rank: 204
score: 98.29476165771484
patch: case to CaMeL String ( ) :
rank: 205
score: 98.90238444010417
patch: case $NUMBER$ : { :
rank: 205
score: 98.90192413330078
patch: case $NUMBER$ : case $NUMBER$ : }
rank: 205
score: 98.88499620225694
patch: { * * * * case { {
rank: 205
score: 98.87872992621527
patch: case 1 : continue ; case $NUMBER$ :
rank: 205
score: 98.76204427083333
patch: if ( $STRING$ == str . length ( ) ) {
rank: 205
score: 98.7344741821289
patch: default : { return false ; }
rank: 205
score: 98.72203480113636
patch: switch ( String . str . length ( ) )
rank: 205
score: 98.29401397705078
patch: case random . length ( ) :
rank: 206
score: 99.02138671875
patch: case 1 || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 206
score: 98.90184783935547
patch: case 1 : case 1 { {
rank: 206
score: 98.90109592013889
patch: case 0 : try { case $NUMBER$ :
rank: 206
score: 98.88414417613636
patch: { * * * * * { case $NUMBER$ :
rank: 206
score: 98.87773132324219
patch: case $NUMBER$ : return false : {
rank: 206
score: 98.82450866699219
patch: case $NUMBER$ : || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 206
score: 98.75408380681819
patch: case str . length ( ) : case $NUMBER$ :
rank: 206
score: 98.7332763671875
patch: case $NUMBER$ : return $STRING$ . equals ( : :
rank: 206
score: 98.72026977539062
patch: equals CaMeL Ignore CaMeL Case ( str ) ;
rank: 206
score: 98.29343959263393
patch: case $STRING$ ; case $STRING$ :
rank: 207
score: 99.0213394165039
patch: case ( $NUMBER$ || str . char CaMeL At ( 1 ) == $STRING$ )
rank: 207
score: 98.90162963867188
patch: case $NUMBER$ : { if : case $NUMBER$ :
rank: 207
score: 98.90104166666667
patch: case - 1 : case $NUMBER$ : {
rank: 207
score: 98.88351101345486
patch: * * * { * { { /
rank: 207
score: 98.87771371694711
patch: case Integer . MAX _ VALUE : case Integer . $NUMBER$ :
rank: 207
score: 98.7322110262784
patch: default : return $STRING$ . equals ( str ) ;
rank: 207
score: 98.2934341430664
patch: case ) { case - 1 :
rank: 208
score: 99.02061110276442
patch: case $STRING$ += str . char CaMeL At ( 0 ) ;
rank: 208
score: 98.90154418945312
patch: case $NUMBER$ : case $NUMBER$ { case $NUMBER$ :
rank: 208
score: 98.90097384982639
patch: case 1 : case $STRING$ + $NUMBER$ :
rank: 208
score: 98.88282606336806
patch: { * * * / } else /
rank: 208
score: 98.87721082899306
patch: case 1 : break ; case 1 :
rank: 208
score: 98.82400277944711
patch: int str = str . char CaMeL At ( 0 ) ;
rank: 208
score: 98.7503995028409
patch: case | str . length ( ) + $NUMBER$ :
rank: 208
score: 98.29085540771484
patch: case Boolean . Na CaMeL N :
rank: 209
score: 99.0198745727539
patch: switch ( str . char CaMeL At ( 1 ) ) { case $STRING$ :
rank: 209
score: 98.90093994140625
patch: case $NUMBER$ : { { return $NUMBER$ :
rank: 209
score: 98.90064832899306
patch: case 1 : { case 1 { {
rank: 209
score: 98.88227674696181
patch: * * { * * * : /
rank: 209
score: 98.8766845703125
patch: case 0 : return $STRING$ . equals CaMeL Ignore CaMeL Case ( { str
rank: 209
score: 98.82393646240234
patch: if ( ! str . char CaMeL At ( 0 ) == $STRING$ ) {
rank: 209
score: 98.72930353338069
patch: case Double . $NUMBER$ : case Double . $NUMBER$ :
rank: 209
score: 98.71527099609375
patch: case $NUMBER$ : { . return false ; }
rank: 209
score: 98.2900390625
patch: case - ( 0 ) :
rank: 210
score: 99.0193340594952
patch: case $STRING$ = str . char CaMeL At ( 1 ) ;
rank: 210
score: 98.90044403076172
patch: case $STRING$ : case 0 : {
rank: 210
score: 98.90038384331598
patch: case $NUMBER$ : if $NUMBER$ { * /
rank: 210
score: 98.88219342912946
patch: { * * * { /
rank: 210
score: 98.87657674153645
patch: case $NUMBER$ : { case $NUMBER$ : case $NUMBER$ : {
rank: 210
score: 98.8232421875
patch: case $NUMBER$ : to CaMeL String ( str ) ;
rank: 210
score: 98.74503950639205
patch: -- str . char CaMeL At ( 0 ) ;
rank: 210
score: 98.729248046875
patch: case - 1 : return true ; case 1 :
rank: 210
score: 98.28778076171875
patch: case str [ 0 ] : {
rank: 211
score: 98.9002685546875
patch: case $NUMBER$ : case $NUMBER$ : return {
rank: 211
score: 98.9002685546875
patch: case 0 { case 1 : {
rank: 211
score: 98.88214111328125
patch: { * * * * / } else {
rank: 211
score: 98.87608337402344
patch: case $NUMBER$ : { return $STRING$ . equals CaMeL Ignore CaMeL Case ( { $STRING$
rank: 211
score: 98.82314046223958
patch: case ( str . char CaMeL At ( 1 ) :
rank: 211
score: 98.73853895399306
patch: case $NUMBER$ : { { return false ;
rank: 211
score: 98.72838134765625
patch: case $NUMBER$ : if ( str == $STRING$ :
rank: 211
score: 98.71431107954545
patch: case $NUMBER$ : { to CaMeL Boolean return false ;
rank: 211
score: 98.28646850585938
patch: case ++ ) { case $NUMBER$ :
rank: 212
score: 99.01926832932692
patch: case $NUMBER$ || str . char CaMeL At ( 0 ) ==
rank: 212
score: 98.89937591552734
patch: case $NUMBER$ : { / $NUMBER$ {
rank: 212
score: 98.88147583007813
patch: { * * /
rank: 212
score: 98.87540108816964
patch: case $NUMBER$ : return : {
rank: 212
score: 98.82265218098958
patch: id = str . char CaMeL At ( 0 ) ;
rank: 212
score: 98.73655395507812
patch: case str . to CaMeL String ( ) :
rank: 212
score: 98.72828258167614
patch: case 0 || str . char CaMeL At ( :
rank: 212
score: 98.712646484375
patch: switch ( String . $STRING$ ) { case 1 :
rank: 212
score: 98.28636932373047
patch: case / * $NUMBER$ . $NUMBER$ :
rank: 213
score: 98.89949035644531
patch: case $NUMBER$ : { { else {
rank: 213
score: 98.89824083116319
patch: case 1 : if $NUMBER$ : * /
rank: 213
score: 98.88134765625
patch: * * { * { * * /
rank: 213
score: 98.87498372395834
patch: case $STRING$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( { str
rank: 213
score: 98.82247220552884
patch: int 0 = str . char CaMeL At ( 1 ) ;
rank: 213
score: 98.7279385653409
patch: case Boolean . FALSE : case Boolean . TRUE :
rank: 213
score: 98.2863525390625
patch: case str ; }
rank: 214
score: 99.01770958533653
patch: case $NUMBER$ && str . char CaMeL At ( 1 ) ;
rank: 214
score: 98.89900716145833
patch: case $NUMBER$ : { case $NUMBER$ ; }
rank: 214
score: 98.89744262695312
patch: case 1 : { case $NUMBER$ : break {
rank: 214
score: 98.8811767578125
patch: case $STRING$ : / * * * / }
rank: 214
score: 98.8223648071289
patch: case $NUMBER$ : return str . char CaMeL At ( 1 ) == 0 ;
rank: 214
score: 98.72770552201705
patch: case $NUMBER$ : return Character . MIN _ VALUE ;
rank: 214
score: 98.7047119140625
patch: case $NUMBER$ : break ; case $NUMBER$ : {
rank: 214
score: 98.28577532087054
patch: case ( $STRING$ ) : {
rank: 215
score: 99.01704915364583
patch: if ( str . length ( ) > 0 ) {
rank: 215
score: 98.89898681640625
patch: case $STRING$ : case 0 { {
rank: 215
score: 98.89652099609376
patch: case $NUMBER$ : case 1 { case 1 :
rank: 215
score: 98.88082546657986
patch: * { * * * * * /
rank: 215
score: 98.8739013671875
patch: case $NUMBER$ : return Boolean . value CaMeL Of ( str ) . {
rank: 215
score: 98.82215118408203
patch: case $NUMBER$ : return str . char CaMeL At ( 0 ) == str ;
rank: 215
score: 98.73138982599431
patch: case switch ( str . length ( ) ) {
rank: 215
score: 98.72746446397569
patch: case $NUMBER$ : { break ; default :
rank: 215
score: 98.70338023792614
patch: case Boolean . $STRING$ : { return false ; }
rank: 216
score: 99.01670735677084
patch: case $NUMBER$ : return str . char CaMeL At ( 1 ) == $STRING$
rank: 216
score: 98.89859347873264
patch: case 1 : try { case $NUMBER$ :
rank: 216
score: 98.89517550998264
patch: case $NUMBER$ : if case $NUMBER$ : :
rank: 216
score: 98.87984212239583
patch: { * { * * * : /
rank: 216
score: 98.87372233072917
patch: default : throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }
rank: 216
score: 98.82201276506696
patch: case ( 1 ) : {
rank: 216
score: 98.73082386363636
patch: equals str . char CaMeL At ( 1 ) ;
rank: 216
score: 98.70313609730114
patch: case $NUMBER$ : { to CaMeL Boolean = false ;
rank: 216
score: 98.2833251953125
patch: case 1 ; case $NUMBER$ :
rank: 217
score: 99.0165546123798
patch: case $NUMBER$ : if ( str . length ( ) ) {
rank: 217
score: 98.89826117621527
patch: case $NUMBER$ { else { case $NUMBER$ :
rank: 217
score: 98.89480590820312
patch: case $NUMBER$ : case $NUMBER$ : / / /
rank: 217
score: 98.879541015625
patch: case $STRING$ : * * * * / }
rank: 217
score: 98.8729476928711
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( name ) ;
rank: 217
score: 98.72625177556819
patch: case $NUMBER$ || str . { return true ; }
rank: 217
score: 98.72588556463069
patch: append str . char CaMeL At ( 1 ) ;
rank: 217
score: 98.281005859375
patch: case ( Boolean . $NUMBER$ ) :
rank: 218
score: 99.01650103400735
patch: case $NUMBER$ : { str = str . char CaMeL At ( 0 ) ; }
rank: 218
score: 98.894775390625
patch: case 1 : { if case 1 : {
rank: 218
score: 98.8792236328125
patch: * * * * * * { { /
rank: 218
score: 98.8727276141827
patch: case $NUMBER$ : return true ; default : return false ; }
rank: 218
score: 98.82151285807292
patch: case $NUMBER$ : return ( str . char CaMeL At (
rank: 218
score: 98.72538452148437
patch: case $NUMBER$ || str . : case $NUMBER$ :
rank: 218
score: 98.27872467041016
patch: case ] { case $NUMBER$ : {
rank: 219
score: 98.89698028564453
patch: case $NUMBER$ ] ; case $NUMBER$ :
rank: 219
score: 98.89475795200893
patch: case $NUMBER$ : if $NUMBER$ :
rank: 219
score: 98.87896728515625
patch: else { * * * * /
rank: 219
score: 98.82111065204327
patch: return 1 == str . char CaMeL At ( 0 ) ;
rank: 219
score: 98.69915216619319
patch: case $NUMBER$ : { System . else return false ;
rank: 219
score: 98.27711486816406
patch: case static ) { case $NUMBER$ :
rank: 220
score: 99.01361490885417
patch: case $STRING$ switch ( str . char CaMeL At ( 1 ) ) {
rank: 220
score: 98.89602661132812
patch: case $STRING$ ] { case $NUMBER$ :
rank: 220
score: 98.89470672607422
patch: case 1 : if $NUMBER$ : {
rank: 220
score: 98.87886810302734
patch: / * * * : * /
rank: 220
score: 98.87177385602679
patch: case $NUMBER$ : { case $NUMBER$ : return false ; case $NUMBER$ :
rank: 220
score: 98.81973266601562
patch: throw new Illegal CaMeL Argument CaMeL Exception ( str . length ( ) ) ;
rank: 220
score: 98.7047607421875
patch: case str . char CaMeL At ( 1 )
rank: 220
score: 98.69638893821023
patch: if ( value == null ) { return false ;
rank: 220
score: 98.27595520019531
patch: case > 0 ; case 1 :
rank: 221
score: 98.89565700954861
patch: case $NUMBER$ { try { case $NUMBER$ :
rank: 221
score: 98.89452446831598
patch: case 1 : { if case 1 {
rank: 221
score: 98.87860107421875
patch: / * * * { { /
rank: 221
score: 98.87152862548828
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( $STRING$ ) {
rank: 221
score: 98.81927020733173
patch: name = str . char CaMeL At ( 0 ) ; }
rank: 221
score: 98.71971546519886
patch: case $NUMBER$ || str . length ( ) > :
rank: 221
score: 98.70201958550348
patch: case $NUMBER$ : { { return true ;
rank: 221
score: 98.69512384588069
patch: case : switch ( str . length ( ) )
rank: 221
score: 98.27395629882812
patch: case null : { case 0 :
rank: 222
score: 99.01287841796875
patch: case $NUMBER$ : { str = str . char CaMeL At ( $NUMBER$ ) ;
rank: 222
score: 98.8955078125
patch: case case $NUMBER$ : case $NUMBER$ : {
rank: 222
score: 98.89425998263889
patch: case $NUMBER$ : return $NUMBER$ : { {
rank: 222
score: 98.87773132324219
patch: case $STRING$ + case 1 : }
rank: 222
score: 98.87115885416667
patch: case 1 : throw new Illegal CaMeL Argument CaMeL Exception ( $NUMBER$ ) ;
rank: 222
score: 98.71953790838069
patch: case $NUMBER$ || $STRING$ . equals ( str : {
rank: 222
score: 98.68871459960937
patch: } switch ( $STRING$ ) { case $NUMBER$ :
rank: 223
score: 99.01260811941964
patch: case $NUMBER$ && str . char CaMeL At ( 0 ) == $STRING$
rank: 223
score: 98.89406127929688
patch: case $NUMBER$ : { / / * / /
rank: 223
score: 98.87772623697917
patch: * * * * / } else {
rank: 223
score: 98.81910807291666
patch: case 0 : str = str . char CaMeL At ( 0 ) ;
rank: 223
score: 98.71934925426136
patch: case - 1 : return false ; case $NUMBER$ :
rank: 223
score: 98.69917436079545
patch: case str . index CaMeL Of ( $STRING$ ) :
rank: 223
score: 98.68775523792614
patch: if ( $STRING$ . length ( ) == 1 )
rank: 223
score: 98.27317810058594
patch: case to CaMeL String = $STRING$ ;
rank: 224
score: 99.01239776611328
patch: case $STRING$ : && str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 224
score: 98.87744140625
patch: * { * * * { { /
rank: 224
score: 98.87063802083334
patch: case $STRING$ : throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;
rank: 224
score: 98.81778717041016
patch: case ( str . char CaMeL At ( str . length ( ) ) )
rank: 224
score: 98.71390991210937
patch: case - 1 : return false ; default :
rank: 224
score: 98.69915216619319
patch: ++ str . char CaMeL At ( 1 ) ;
rank: 224
score: 98.27293395996094
patch: case static : { case $NUMBER$ :
rank: 225
score: 99.01233673095703
patch: } if ( str . char CaMeL At ( 1 ) == $STRING$ ) {
rank: 225
score: 98.87684215198864
patch: { * * * * { * * * /
rank: 225
score: 98.8700663248698
patch: case 1 : return Boolean . FALSE ; case $NUMBER$ :
rank: 225
score: 98.81758626302083
patch: n = str . char CaMeL At ( 1 ) ;
rank: 225
score: 98.68700561523437
patch: case $NUMBER$ : { return false ; } }
rank: 225
score: 98.2720438639323
patch: case / - $NUMBER$ :
rank: 226
score: 99.01217447916666
patch: case $NUMBER$ : { return ( str . char CaMeL At ( 0 )
rank: 226
score: 98.8935546875
patch: case $STRING$ : { case 1 : {
rank: 226
score: 98.89262172154018
patch: case $NUMBER$ : { { {
rank: 226
score: 98.87682342529297
patch: case 0 : return null ; }
rank: 226
score: 98.81588745117188
patch: return ! str . to CaMeL String ( ) . equals ( str ) ;
rank: 226
score: 98.71282958984375
patch: case $NUMBER$ : return false ; {
rank: 226
score: 98.69886363636364
patch: case str . index CaMeL Of ( $STRING$ ) ;
rank: 226
score: 98.27127838134766
patch: case ) { case 0 : {
rank: 227
score: 99.011474609375
patch: case 1 && str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 227
score: 98.89252319335938
patch: case $NUMBER$ : case $NUMBER$ : * / /
rank: 227
score: 98.87642415364583
patch: { { * * * * { /
rank: 227
score: 98.86983548677884
patch: case $NUMBER$ : if ( Character . is CaMeL Whitespace ) {
rank: 227
score: 98.81577370383523
patch: throw new Illegal CaMeL Argument CaMeL Exception ( ) ;
rank: 227
score: 98.6933260830966
patch: case | str . to CaMeL String ( ) ;
rank: 227
score: 98.68314985795455
patch: case $NUMBER$ : { to CaMeL Boolean return true ;
rank: 227
score: 98.27116394042969
patch: case str { case $NUMBER$ : {
rank: 228
score: 99.0111971768466
patch: if ( str . length ( ) == ) {
rank: 228
score: 98.89341905381944
patch: case $NUMBER$ { case $NUMBER$ : { {
rank: 228
score: 98.89251708984375
patch: case $NUMBER$ : return * $NUMBER$ : {
rank: 228
score: 98.87641737196181
patch: * * * * { { } /
rank: 228
score: 98.8154296875
patch: case str : return str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 228
score: 98.71091530539773
patch: case $NUMBER$ : equals CaMeL Ignore CaMeL Case ( {
rank: 228
score: 98.693115234375
patch: return super . to CaMeL Boolean ( ) ;
rank: 228
score: 98.68263753255208
patch: switch ( name ) { case $NUMBER$ :
rank: 228
score: 98.27080426897321
patch: / ? { case $NUMBER$ :
rank: 229
score: 99.01084798177084
patch: int char CaMeL At = str . char CaMeL At ( 1 ) ;
rank: 229
score: 98.89304606119792
patch: case $NUMBER$ : case 0 : { {
rank: 229
score: 98.89190673828125
patch: case $NUMBER$ : if case 1 : :
rank: 229
score: 98.87504069010417
patch: / * { * * { { /
rank: 229
score: 98.81514739990234
patch: case 1 : return str . char CaMeL At ( 0 ) != $STRING$ ;
rank: 229
score: 98.70918579101563
patch: case $NUMBER$ || $STRING$ . equals ( str )
rank: 229
score: 98.68202514648438
patch: switch ( name . length ( ) ) {
rank: 229
score: 98.27059173583984
patch: case FALSE : return false ; }
rank: 230
score: 98.89166259765625
patch: case $NUMBER$ { { case $NUMBER$ : {
rank: 230
score: 98.89065890842014
patch: case 1 : case $NUMBER$ { break :
rank: 230
score: 98.87454562717014
patch: { * * * * { / {
rank: 230
score: 98.86819458007812
patch: case $NUMBER$ : { if ( {
rank: 230
score: 98.81434983473558
patch: return 1 == str . char CaMeL At ( 1 ) ;
rank: 230
score: 98.70867309570312
patch: case $NUMBER$ : return 0 ; case $NUMBER$ :
rank: 230
score: 98.68030395507813
patch: str . char CaMeL At ( 1 ) ;
rank: 230
score: 98.26896667480469
patch: case str 0 = $STRING$ ; }
rank: 231
score: 98.89088439941406
patch: case $NUMBER$ : { case ) :
rank: 231
score: 98.89042663574219
patch: case $NUMBER$ : if case $NUMBER$ {
rank: 231
score: 98.8738037109375
patch: { * * * * { * / }
rank: 231
score: 98.70823160807292
patch: case Integer . MAX _ VALUE : {
rank: 231
score: 98.67912153764205
patch: case $NUMBER$ : { to CaMeL Boolean = true ;
rank: 231
score: 98.2689208984375
patch: if ( value == $STRING$ ) {
rank: 232
score: 99.0088882446289
patch: case 1 : { str = str . char CaMeL At ( 0 ) ;
rank: 232
score: 98.89069281684027
patch: case $NUMBER$ : { { return $NUMBER$ ;
rank: 232
score: 98.8898696899414
patch: case 1 : String case 1 :
rank: 232
score: 98.87372504340277
patch: else { * * * * / }
rank: 232
score: 98.86697387695312
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( str : ;
rank: 232
score: 98.81358119419643
patch: result = str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 232
score: 98.6789883700284
patch: case $NUMBER$ : char CaMeL At ( 0 ) ;
rank: 232
score: 98.26837921142578
patch: case ~ $NUMBER$ ; case $NUMBER$ :
rank: 233
score: 99.00873272235577
patch: case $STRING$ || str . char CaMeL At ( 1 ) ;
rank: 233
score: 98.89056396484375
patch: case 0 : { case $NUMBER$ { {
rank: 233
score: 98.88945661272321
patch: case $NUMBER$ : { / {
rank: 233
score: 98.8734130859375
patch: * * * * / } if {
rank: 233
score: 98.86640930175781
patch: case 1 : return Boolean . TRUE . equals CaMeL Ignore CaMeL Case ( {
rank: 233
score: 98.8135757446289
patch: case $NUMBER$ : || str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 233
score: 98.70768907335069
patch: case default : return true ; default :
rank: 233
score: 98.68402654474431
patch: * switch ( str . length ( ) ) {
rank: 234
score: 99.00813293457031
patch: switch ( str . char CaMeL At ( 0 ) ) { case $STRING$ :
rank: 234
score: 98.8900375366211
patch: case 1 : return case $NUMBER$ :
rank: 234
score: 98.88937038845486
patch: case $NUMBER$ : if $NUMBER$ { break {
rank: 234
score: 98.87334526909723
patch: / * * * * * / /
rank: 234
score: 98.81315394810268
patch: case $NUMBER$ : return $STRING$ . starts CaMeL With ( str ) ;
rank: 234
score: 98.26676940917969
patch: case ( str [ 1 ] )
rank: 235
score: 99.00766225961539
patch: case $STRING$ + str . char CaMeL At ( $NUMBER$ ) ;
rank: 235
score: 98.88920084635417
patch: case 1 { case $NUMBER$ : break {
rank: 235
score: 98.88838413783482
patch: case 1 : { else {
rank: 235
score: 98.87298583984375
patch: { * * * * / if {
rank: 235
score: 98.86576080322266
patch: case $NUMBER$ : return Boolean . TRUE . equals ( Boolean . TRUE ) ;
rank: 235
score: 98.81295340401786
patch: case $NUMBER$ : += str . char CaMeL At ( 1 ) ;
rank: 235
score: 98.6778231534091
patch: -- str . char CaMeL At ( 1 ) ;
rank: 235
score: 98.67600708007812
patch: f . char CaMeL At ( 0 ) ;
rank: 235
score: 98.2654800415039
patch: case str ; / * $NUMBER$ :
rank: 236
score: 99.00762939453125
patch: if ( str . length ( ) == str . length ( ) ) {
rank: 236
score: 98.88766818576389
patch: case 1 : case - $NUMBER$ : {
rank: 236
score: 98.87153455946181
patch: * * * * { { { /
rank: 236
score: 98.81268310546875
patch: case ( $STRING$ : str . char CaMeL At ( 1 ) )
rank: 236
score: 98.26503499348958
patch: case Boolean . TRUE :
rank: 237
score: 99.00708879743304
patch: case $STRING$ : { str . char CaMeL At ( 0 ) ;
rank: 237
score: 98.88739691840277
patch: case $NUMBER$ { { { case $NUMBER$ :
rank: 237
score: 98.87135145399306
patch: { { * * * { * /
rank: 237
score: 98.86517740885417
patch: case $NUMBER$ : return System . current CaMeL Time CaMeL Millis ( ) :
rank: 237
score: 98.70309448242188
patch: case Double . MAX _ VALUE :
rank: 237
score: 98.67409057617188
patch: instance . to CaMeL Boolean ( false ) ;
rank: 237
score: 98.66941139914773
patch: } switch ( name . length ( ) ) {
rank: 237
score: 98.26498849051339
patch: case ] ; case $NUMBER$ :
rank: 238
score: 99.00487467447917
patch: case 0 || str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 238
score: 98.88871934678819
patch: case $NUMBER$ : / { case $NUMBER$ :
rank: 238
score: 98.87129516601563
patch: { * * * * * * / /
rank: 238
score: 98.86464621803977
patch: { case $NUMBER$ : return false ; case $NUMBER$ :
rank: 238
score: 98.8123270670573
patch: xsp = str . char CaMeL At ( 1 ) ;
rank: 238
score: 98.70228576660156
patch: case Char CaMeL Sequence . $NUMBER$ :
rank: 238
score: 98.67271118164062
patch: instance . to CaMeL Boolean ( true ) ;
rank: 238
score: 98.26383972167969
patch: case > 1 ; case $NUMBER$ :
rank: 239
score: 99.00326772836539
patch: case $NUMBER$ || str . char CaMeL At ( $NUMBER$ ) ;
rank: 239
score: 98.88794708251953
patch: case $NUMBER$ { { case 1 :
rank: 239
score: 98.88694932725694
patch: case $NUMBER$ { case 1 + $NUMBER$ :
rank: 239
score: 98.87081298828124
patch: case $STRING$ : / * * * * /
rank: 239
score: 98.86412760416667
patch: case 1 : return $STRING$ . equals CaMeL Ignore CaMeL Case ( { $NUMBER$
rank: 239
score: 98.672509765625
patch: case $NUMBER$ : { System . return false ;
rank: 239
score: 98.66229802911931
patch: case | str . length ( ) + 1 ;
rank: 239
score: 98.2608413696289
patch: case ] ; case $NUMBER$ : {
rank: 240
score: 98.88785552978516
patch: case 1 : { / / *
rank: 240
score: 98.88620334201389
patch: case $NUMBER$ : { $NUMBER$ * * /
rank: 240
score: 98.87051730685764
patch: { * * * * $NUMBER$ ; }
rank: 240
score: 98.86299641927083
patch: case 1 : return $STRING$ . equals CaMeL Ignore CaMeL Case ( str :
rank: 240
score: 98.8120586688702
patch: return $NUMBER$ == str . char CaMeL At ( 0 ) ;
rank: 240
score: 98.70169677734376
patch: case $NUMBER$ : return Boolean . TRUE ; {
rank: 240
score: 98.67221069335938
patch: case $NUMBER$ : { . return true ; }
rank: 240
score: 98.26069641113281
patch: case TRUE : { case $STRING$ :
rank: 241
score: 98.88593207465277
patch: case $STRING$ : case $NUMBER$ : { {
rank: 241
score: 98.87028672960069
patch: { / * * * { * /
rank: 241
score: 98.86213902064732
patch: case 1 : throw new Unsupported CaMeL Operation CaMeL Exception ( ) ;
rank: 241
score: 98.70146484375
patch: case $NUMBER$ : if ( str == $STRING$ )
rank: 241
score: 98.67167833116319
patch: case Boolean . $STRING$ : return false ;
rank: 241
score: 98.65224609375
patch: length 1 = str . length ( ) ;
rank: 241
score: 98.26065063476562
patch: case str [ 0 ] ; }
rank: 242
score: 99.00270298549107
patch: case $STRING$ switch ( str . char CaMeL At ( 1 ) )
rank: 242
score: 98.88611857096355
patch: case $NUMBER$ : / /
rank: 242
score: 98.88551161024306
patch: case 0 { case $NUMBER$ + $NUMBER$ :
rank: 242
score: 98.86950073242187
patch: { * * * { { * * /
rank: 242
score: 98.86090087890625
patch: case super . to CaMeL Boolean ( ) : { case $NUMBER$ :
rank: 242
score: 98.81138610839844
patch: case str : return str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 242
score: 98.70061492919922
patch: case - 1 : case $STRING$ :
rank: 242
score: 98.6689453125
patch: switch ( 0 ) { case $NUMBER$ :
rank: 242
score: 98.64901733398438
patch: case str . to CaMeL String ( ) ;
rank: 242
score: 98.26044464111328
patch: to CaMeL Boolean = true ; }
rank: 243
score: 99.002685546875
patch: } if ( str . length ( ) == $NUMBER$ ) {
rank: 243
score: 98.88593885633681
patch: case $NUMBER$ : : { case $NUMBER$ :
rank: 243
score: 98.88545057508681
patch: case 1 : { case 1 : }
rank: 243
score: 98.869384765625
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; }
rank: 243
score: 98.8588397686298
patch: case $NUMBER$ : return Float . value CaMeL Of ( { $NUMBER$
rank: 243
score: 98.81109619140625
patch: key = str . char CaMeL At ( 1 ) ;
rank: 243
score: 98.66852416992188
patch: Util . to CaMeL Boolean ( str ) ;
rank: 243
score: 98.6421142578125
patch: equals CaMeL Ignore CaMeL Case ( $STRING$ ) ;
rank: 243
score: 98.26009368896484
patch: case Boolean . - $NUMBER$ : {
rank: 244
score: 98.88559977213542
patch: case 1 : if : case 1 :
rank: 244
score: 98.8837661743164
patch: case 1 : } case $NUMBER$ :
rank: 244
score: 98.86914825439453
patch: case $STRING$ { * * * /
rank: 244
score: 98.857763671875
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case ( { :
rank: 244
score: 98.6989974975586
patch: default : { return true ; }
rank: 244
score: 98.64010620117188
patch: case super . to CaMeL Boolean ( ) ;
rank: 244
score: 98.25959995814732
patch: case str = $STRING$ ; }
rank: 245
score: 99.0022331686581
patch: case $NUMBER$ : { str 0 = str . char CaMeL At ( 1 ) ;
rank: 245
score: 98.88521728515624
patch: case 1 : { return { case $NUMBER$ :
rank: 245
score: 98.88373480902777
patch: case $NUMBER$ ] { case - $NUMBER$ :
rank: 245
score: 98.86854553222656
patch: / * { / * { /
rank: 245
score: 98.8573885830966
patch: case 1 : { case $NUMBER$ : case 1 :
rank: 245
score: 98.8108154296875
patch: case $NUMBER$ : return ( str . char CaMeL At ( 0 ) ==
rank: 245
score: 98.69874877929688
patch: case $NUMBER$ : return ! str . equals :
rank: 245
score: 98.25908551897321
patch: case Boolean . 0 : {
rank: 246
score: 99.002099609375
patch: case $NUMBER$ : if ( str . length ( ) == 0 ) {
rank: 246
score: 98.8836669921875
patch: case $NUMBER$ : case 0 case 0 :
rank: 246
score: 98.86793212890625
patch: { * * * { * { { /
rank: 246
score: 98.85673304966518
patch: case $NUMBER$ : throw new Null CaMeL Pointer CaMeL Exception ( ) ;
rank: 246
score: 98.69863059303977
patch: case 1 : return $STRING$ . equals ( str :
rank: 246
score: 98.65946044921876
patch: f . char CaMeL At ( 1 ) ;
rank: 246
score: 98.2584228515625
patch: / * / { case $NUMBER$ :
rank: 247
score: 99.0018310546875
patch: case $NUMBER$ : if ( str . length ( ) == 1 ) {
rank: 247
score: 98.88489379882813
patch: case $NUMBER$ : { / / * { /
rank: 247
score: 98.88304138183594
patch: case $NUMBER$ : { { * /
rank: 247
score: 98.86771392822266
patch: case 0 { * * * /
rank: 247
score: 98.85596575055804
patch: case $NUMBER$ : return $STRING$ . starts CaMeL With ( $STRING$ ) ;
rank: 247
score: 98.80987079326923
patch: return $STRING$ . char CaMeL At ( 0 ) == $STRING$ ;
rank: 247
score: 98.69623480902777
patch: case $NUMBER$ : return $STRING$ . equals :
rank: 247
score: 98.6197509765625
patch: case : if ( value == null ) {
rank: 247
score: 98.25443267822266
patch: case : { case $NUMBER$ : {
rank: 248
score: 99.00061798095703
patch: case $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) {
rank: 248
score: 98.88394504123264
patch: case $NUMBER$ : case 1 : return {
rank: 248
score: 98.88255310058594
patch: case 1 : { $NUMBER$ * /
rank: 248
score: 98.85569545200893
patch: case $NUMBER$ : { case $NUMBER$ : return true ; case $NUMBER$ :
rank: 248
score: 98.69537908380681
patch: case ) || str . char CaMeL At ( :
rank: 248
score: 98.65601942274306
patch: switch ( $STRING$ ) { case $STRING$ :
rank: 248
score: 98.25273132324219
patch: case - 1 ; case $NUMBER$ :
rank: 249
score: 99.00037560096153
patch: case 1 : switch ( str . length ( ) ) {
rank: 249
score: 98.88350423177083
patch: case $NUMBER$ : if case 1 { {
rank: 249
score: 98.88232421875
patch: case $NUMBER$ : { $NUMBER$ case $NUMBER$ :
rank: 249
score: 98.86683146158855
patch: case 0 + 0 :
rank: 249
score: 98.85455877130681
patch: case 1 : return false ; case $NUMBER$ : {
rank: 249
score: 98.6951904296875
patch: case Boolean . TYPE : case Boolean . TYPE :
rank: 249
score: 98.61248101128473
patch: case $NUMBER$ : { System . else {
rank: 249
score: 98.25114440917969
patch: case Na CaMeL N == $NUMBER$ :
rank: 250
score: 98.88326416015624
patch: case $NUMBER$ : case 1 { case $NUMBER$ :
rank: 250
score: 98.88214789496527
patch: case $NUMBER$ ] { case 1 : {
rank: 250
score: 98.85439231178977
patch: case 1 : case $NUMBER$ : case $NUMBER$ : {
rank: 250
score: 98.80719463641827
patch: return ( str . char CaMeL At ( 1 ) == $STRING$
rank: 250
score: 98.69422743055556
patch: case $NUMBER$ : default : case $NUMBER$ :
rank: 250
score: 98.65036010742188
patch: instance . char CaMeL At ( 0 ) ;
rank: 250
score: 98.60364447699652
patch: case $NUMBER$ : { return null ; }
rank: 250
score: 98.25113677978516
patch: case $STRING$ ; { case $NUMBER$ :
rank: 251
score: 98.88301595052083
patch: case 1 { case 1 : break {
rank: 251
score: 98.87995741102431
patch: case $STRING$ : case $NUMBER$ { $NUMBER$ :
rank: 251
score: 98.86574978298611
patch: { * { / * * * /
rank: 251
score: 98.853076171875
patch: case $NUMBER$ : { case $NUMBER$ : return {
rank: 251
score: 98.69331868489583
patch: / * case $NUMBER$ : case $NUMBER$ :
rank: 251
score: 98.25090789794922
patch: case Na CaMeL N + 1 :
rank: 252
score: 98.99685668945312
patch: case $NUMBER$ : str 0 = str . char CaMeL At ( 1 ) ;
rank: 252
score: 98.88153754340277
patch: case $NUMBER$ : case $NUMBER$ : * {
rank: 252
score: 98.87841796875
patch: else { case 1 :
rank: 252
score: 98.86508517795139
patch: { / * * * * { /
rank: 252
score: 98.80677795410156
patch: } if ( str . char CaMeL At ( 0 ) == $STRING$ ) {
rank: 252
score: 98.64743041992188
patch: connection . to CaMeL Boolean ( true ) ;
rank: 253
score: 98.99679361979166
patch: String char CaMeL At = str . char CaMeL At ( 1 ) ;
rank: 253
score: 98.88133544921875
patch: case $NUMBER$ : case 1 : / / /
rank: 253
score: 98.87725067138672
patch: case $NUMBER$ : { * / {
rank: 253
score: 98.86473931206598
patch: case 1 : * * * * /
rank: 253
score: 98.85165066189236
patch: case $NUMBER$ : case $NUMBER$ : return :
rank: 253
score: 98.80644880022321
patch: b = str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 253
score: 98.69228293678977
patch: case $NUMBER$ : return value . equals ( $STRING$ :
rank: 253
score: 98.58516235351563
patch: equals . char CaMeL At ( 0 ) ;
rank: 253
score: 98.250244140625
patch: case ( $STRING$ ) 0 : {
rank: 254
score: 98.99609375
patch: case $NUMBER$ : { return str . char CaMeL At ( 0 ) == $STRING$
rank: 254
score: 98.88087463378906
patch: case 1 : return $NUMBER$ : {
rank: 254
score: 98.87723214285714
patch: case 0 : case 1 {
rank: 254
score: 98.86366271972656
patch: / * { * { * /
rank: 254
score: 98.85154030539773
patch: case $NUMBER$ : { return $NUMBER$ ; case $NUMBER$ :
rank: 254
score: 98.80636596679688
patch: } else switch ( str . length ( ) ) {
rank: 254
score: 98.69085138494319
patch: case $NUMBER$ || $STRING$ . equals ( case $NUMBER$ :
rank: 254
score: 98.58319769965277
patch: case ( $STRING$ ) : return false ;
rank: 254
score: 98.24964904785156
patch: case *= $NUMBER$ ; case $NUMBER$ :
rank: 255
score: 98.99590657552083
patch: case $NUMBER$ : { return ( str . char CaMeL At ( 1 )
rank: 255
score: 98.88075086805556
patch: case $NUMBER$ : case $NUMBER$ { { {
rank: 255
score: 98.87718200683594
patch: case $NUMBER$ : case $NUMBER$ ; {
rank: 255
score: 98.86348100142045
patch: { * * * * * { { * /
rank: 255
score: 98.84998575846355
patch: case $NUMBER$ : return : case $NUMBER$ ; case $NUMBER$ :
rank: 255
score: 98.80611979166666
patch: case ( ( char ) str . char CaMeL At ( 1 ) )
rank: 255
score: 98.5829833984375
patch: return str . length ( ) == 0 ;
rank: 255
score: 98.2490234375
patch: case return true ; case $NUMBER$ :
rank: 256
score: 98.99484049479166
patch: case null || str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 256
score: 98.88064139229911
patch: case 1 : return $NUMBER$ :
rank: 256
score: 98.87711588541667
patch: case $STRING$ : { case $NUMBER$ : }
rank: 256
score: 98.86266326904297
patch: * * * * / * /
rank: 256
score: 98.84984412560097
patch: case $NUMBER$ : return Boolean . TRUE : Boolean . TRUE ;
rank: 256
score: 98.68764038085938
patch: case super . to CaMeL String ( ) :
rank: 256
score: 98.24589320591518
patch: case - ( $NUMBER$ ) :
rank: 257
score: 98.88046264648438
patch: case 1 : { case $NUMBER$ : break :
rank: 257
score: 98.87605794270833
patch: case 1 { case $NUMBER$ + $NUMBER$ :
rank: 257
score: 98.86161804199219
patch: * * * * * : /
rank: 257
score: 98.84928588867187
patch: case 0 : case 1 : case 1 :
rank: 257
score: 98.80535125732422
patch: case SIZE : return str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 257
score: 98.68706665039062
patch: case $NUMBER$ : { return Boolean . TRUE ;
rank: 257
score: 98.6416015625
patch: case $NUMBER$ : { return true ; } }
rank: 257
score: 98.57860107421875
patch: case switch ( $STRING$ ) { case $NUMBER$ :
rank: 257
score: 98.24504743303571
patch: case str ; case 0 :
rank: 258
score: 98.88016510009766
patch: case $NUMBER$ : { / { *
rank: 258
score: 98.86121368408203
patch: * * * { { * /
rank: 258
score: 98.80499267578125
patch: case ( str . char CaMeL At ( $NUMBER$ ) )
rank: 258
score: 98.640625
patch: builder . to CaMeL Boolean ( true ) ;
rank: 258
score: 98.24352264404297
patch: case Na CaMeL N + $NUMBER$ :
rank: 259
score: 98.87987060546875
patch: case 1 : if $NUMBER$ : case 1 :
rank: 259
score: 98.87505425347223
patch: case 0 : case - $NUMBER$ : {
rank: 259
score: 98.86116536458333
patch: case 0 : * * * * /
rank: 259
score: 98.84646606445312
patch: case $NUMBER$ : break ; case $NUMBER$ : case $NUMBER$ :
rank: 259
score: 98.80498395647321
patch: case || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 259
score: 98.68555908203125
patch: case $NUMBER$ : default : return false ; }
rank: 259
score: 98.64061279296875
patch: builder . to CaMeL Boolean ( false ) ;
rank: 259
score: 98.57668728298611
patch: } if ( str == $STRING$ ) {
rank: 260
score: 98.99392700195312
patch: $STRING$ || ( str . char CaMeL At ( 1 ) == $STRING$ ) ;
rank: 260
score: 98.87865532769098
patch: case 1 : * / case $NUMBER$ :
rank: 260
score: 98.87478298611111
patch: case $NUMBER$ : case $NUMBER$ ? $NUMBER$ :
rank: 260
score: 98.86041259765625
patch: / * * : * * { /
rank: 260
score: 98.843994140625
patch: case $NUMBER$ : case $NUMBER$ : break ; case $NUMBER$ :
rank: 260
score: 98.64048461914062
patch: case $NUMBER$ : { System . return true ;
rank: 260
score: 98.57368299696181
patch: case $NUMBER$ : switch ( $STRING$ ) {
rank: 260
score: 98.24234008789062
patch: case str ; case - $NUMBER$ :
rank: 261
score: 98.993896484375
patch: case $NUMBER$ : { equals CaMeL Ignore CaMeL Case ( $STRING$ ) ;
rank: 261
score: 98.87848578559027
patch: case $NUMBER$ : if $NUMBER$ : * {
rank: 261
score: 98.87469482421875
patch: case $NUMBER$ : if $NUMBER$ case $NUMBER$ :
rank: 261
score: 98.86021592881944
patch: { * { * { * { /
rank: 261
score: 98.84369365985577
patch: case $NUMBER$ : return Boolean . TRUE . equals ( { $STRING$
rank: 261
score: 98.80467122395834
patch: this . str = str . char CaMeL At ( 0 ) ; }
rank: 261
score: 98.64022216796874
patch: connection . to CaMeL Boolean ( false ) ;
rank: 261
score: 98.24034118652344
patch: case FALSE :
rank: 262
score: 98.87816619873047
patch: case 1 : return - 1 :
rank: 262
score: 98.87456512451172
patch: case 0 : } case $NUMBER$ :
rank: 262
score: 98.86014811197917
patch: / * * * * / * /
rank: 262
score: 98.84294782366071
patch: default : throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;
rank: 262
score: 98.8039794921875
patch: case $NUMBER$ : return ( str . char CaMeL At ( $NUMBER$ ) ==
rank: 262
score: 98.68417358398438
patch: case $NUMBER$ || str . length ( ) :
rank: 262
score: 98.63972778320313
patch: case $NUMBER$ : { ) return false ; }
rank: 262
score: 98.56993272569444
patch: case $NUMBER$ : { } return false ;
rank: 262
score: 98.24012756347656
patch: if ( str == $STRING$ ) {
rank: 263
score: 98.99268391927083
patch: == $STRING$ && str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 263
score: 98.87812805175781
patch: case $NUMBER$ : { / { {
rank: 263
score: 98.85973358154297
patch: case $STRING$ : return $NUMBER$ ; }
rank: 263
score: 98.8423563639323
patch: case $NUMBER$ : { public String to CaMeL String ( )
rank: 263
score: 98.80391438802083
patch: throw ( str . char CaMeL At ( 0 ) == $STRING$ ) ;
rank: 263
score: 98.68060913085938
patch: case Integer . parse CaMeL Int ( $NUMBER$ :
rank: 263
score: 98.63854302300348
patch: switch ( $NUMBER$ ) { case $NUMBER$ :
rank: 264
score: 98.99252755301339
patch: case $NUMBER$ : if ( str . char CaMeL At ( 1 )
rank: 264
score: 98.87767944335937
patch: case $NUMBER$ : { / / * * /
rank: 264
score: 98.87364366319444
patch: case 1 : { { if $NUMBER$ {
rank: 264
score: 98.8592529296875
patch: case $STRING$ + 0 :
rank: 264
score: 98.84005398220486
patch: case 0 : return { case 1 :
rank: 264
score: 98.80384172712054
patch: return str . char CaMeL At ( 0 ) == $STRING$ ) ;
rank: 264
score: 98.67849731445312
patch: case $NUMBER$ : default : return true ; }
rank: 264
score: 98.2390365600586
patch: case > 0 { case $NUMBER$ :
rank: 265
score: 98.99109604779412
patch: case $NUMBER$ : return ( str . char CaMeL At ( 1 ) == $STRING$ )
rank: 265
score: 98.87735324435764
patch: case 1 : if $NUMBER$ : break {
rank: 265
score: 98.87285614013672
patch: case $STRING$ : { case $NUMBER$ ;
rank: 265
score: 98.85898166232639
patch: / * { * * * * /
rank: 265
score: 98.8397216796875
patch: case $NUMBER$ : throws Illegal CaMeL Argument CaMeL Exception {
rank: 265
score: 98.80344935825893
patch: return str . char CaMeL At ( 1 ) == $STRING$ ) ;
rank: 265
score: 98.67774047851563
patch: case $NUMBER$ : return true ; default : :
rank: 265
score: 98.54414198133681
patch: case ( $STRING$ ) : return true ;
rank: 265
score: 98.23882293701172
patch: case Boolean ) { case 1 :
rank: 266
score: 98.9906005859375
patch: case $STRING$ : switch ( str . char CaMeL At ( 0 ) )
rank: 266
score: 98.87723117404514
patch: case $NUMBER$ : if $NUMBER$ : / {
rank: 266
score: 98.87258475167411
patch: case 1 { case 1 :
rank: 266
score: 98.85857476128473
patch: { * * * / * * {
rank: 266
score: 98.83945534446023
patch: case 1 : { default : return false ; }
rank: 266
score: 98.80238560267857
patch: b = str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 266
score: 98.67729356553819
patch: case $NUMBER$ ? $STRING$ : case $NUMBER$ :
rank: 266
score: 98.23797607421875
patch: case / * 1 . $NUMBER$ :
rank: 267
score: 98.87667236328124
patch: case $NUMBER$ : { case 1 : break {
rank: 267
score: 98.87171088324652
patch: case 0 + $NUMBER$ : case $NUMBER$ :
rank: 267
score: 98.85818820529514
patch: { * * * / if { {
rank: 267
score: 98.80236053466797
patch: case null : return str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 267
score: 98.6322021484375
patch: case $NUMBER$ : continue ; case 1 :
rank: 267
score: 98.2375717163086
patch: case T ) { case $NUMBER$ :
rank: 268
score: 98.98749856387867
patch: case $STRING$ : { return str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 268
score: 98.87638346354167
patch: case $NUMBER$ : * /
rank: 268
score: 98.86372205946181
patch: case $NUMBER$ { case 0 + $NUMBER$ :
rank: 268
score: 98.85733371310764
patch: { * * * $NUMBER$ : * /
rank: 268
score: 98.83716759314903
patch: case 1 : case $NUMBER$ : case $NUMBER$ : case $NUMBER$ :
rank: 268
score: 98.80231119791667
patch: case ( ( char ) str . char CaMeL At ( 0 ) )
rank: 268
score: 98.67628309461806
patch: default : case $STRING$ : case $STRING$ :
rank: 268
score: 98.63185628255208
patch: case Boolean . $STRING$ : return true ;
rank: 268
score: 98.5373306274414
patch: case $NUMBER$ : { return null ;
rank: 268
score: 98.2373046875
patch: / * case $NUMBER$ :
rank: 269
score: 98.87578667534723
patch: case 1 : if { case $NUMBER$ :
rank: 269
score: 98.86287434895833
patch: case $NUMBER$ { case $NUMBER$ + 0 :
rank: 269
score: 98.85722351074219
patch: case 1 : return $NUMBER$ ; }
rank: 269
score: 98.83673095703125
patch: case $NUMBER$ : return Boolean . value CaMeL Of ( { $STRING$ }
rank: 269
score: 98.80230305989583
patch: return ( ( str . char CaMeL At ( 1 ) == $STRING$ )
rank: 269
score: 98.67265014648437
patch: case $NUMBER$ { case $NUMBER$ : case $NUMBER$ :
rank: 269
score: 98.53685913085937
patch: ch . char CaMeL At ( 0 ) ;
rank: 269
score: 98.23679024832589
patch: case str [ $STRING$ ] :
rank: 270
score: 98.9869384765625
patch: case $NUMBER$ : { return str . char CaMeL At ( 0 ) ;
rank: 270
score: 98.87574598524306
patch: case $NUMBER$ : if case $NUMBER$ { {
rank: 270
score: 98.86279296875
patch: case $NUMBER$ : { case 0 : }
rank: 270
score: 98.85637071397569
patch: { * * / * * * /
rank: 270
score: 98.83528275923295
patch: case 1 : { case 1 : case 1 :
rank: 270
score: 98.80143229166667
patch: case ( str . length ( ) - 1 ) :
rank: 270
score: 98.53328247070313
patch: return str . length ( ) == 1 ;
rank: 270
score: 98.23616790771484
patch: case - 1 ; case 1 :
rank: 271
score: 98.98662567138672
patch: case ( $NUMBER$ || str . char CaMeL At ( 0 ) == $STRING$ )
rank: 271
score: 98.87528483072917
patch: case 1 : case 1 { break :
rank: 271
score: 98.86111450195312
patch: case 0 { { case $NUMBER$ :
rank: 271
score: 98.85633850097656
patch: else { { * * * /
rank: 271
score: 98.80062866210938
patch: case $NUMBER$ : return str . char CaMeL At ( 1 ) == null ;
rank: 271
score: 98.67154366629464
patch: case $NUMBER$ : return false :
rank: 271
score: 98.62760009765626
patch: case $NUMBER$ : break false ; case $NUMBER$ :
rank: 271
score: 98.23611886160714
patch: case null ; case $STRING$ :
rank: 272
score: 98.985595703125
patch: case 1 && str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 272
score: 98.87521362304688
patch: case $NUMBER$ : { / * /
rank: 272
score: 98.86066351996527
patch: case $NUMBER$ : { { case $NUMBER$ ;
rank: 272
score: 98.85585530598958
patch: { * { * / * * /
rank: 272
score: 98.833740234375
patch: case $NUMBER$ : return - 1 ; case $NUMBER$ :
rank: 272
score: 98.80042442908653
patch: i 1 = str . char CaMeL At ( 0 ) ;
rank: 272
score: 98.66969604492188
patch: case 1 : return $STRING$ . equals ( :
rank: 272
score: 98.23308563232422
patch: case FALSE : return true ; }
rank: 273
score: 98.98541259765625
patch: if ( str . length ( ) != 0 ) {
rank: 273
score: 98.87517700195312
patch: case 1 : { if { case $NUMBER$ :
rank: 273
score: 98.85965728759766
patch: case $NUMBER$ ] ; case 1 :
rank: 273
score: 98.85567474365234
patch: / * * * * / }
rank: 273
score: 98.83165893554687
patch: case 1 : return $NUMBER$ ; case 1 :
rank: 273
score: 98.80039876302084
patch: case $NUMBER$ : return $STRING$ . to CaMeL String ( ) == $STRING$ ;
rank: 273
score: 98.23094831194196
patch: case - ( $STRING$ ) :
rank: 274
score: 98.98517608642578
patch: to CaMeL String ( str . char CaMeL At ( 0 ) ) ; }
rank: 274
score: 98.87503390842014
patch: case $NUMBER$ : { { case 1 {
rank: 274
score: 98.859619140625
patch: case $NUMBER$ : { $NUMBER$ * {
rank: 274
score: 98.85530598958333
patch: / * * * : * * /
rank: 274
score: 98.83050537109375
patch: case $NUMBER$ : return false ; case $NUMBER$ : return :
rank: 274
score: 98.79977416992188
patch: case 0 : return str . char CaMeL At ( 1 ) != $STRING$ ;
rank: 274
score: 98.668701171875
patch: case - 1 : break ; case 1 :
rank: 274
score: 98.52601928710938
patch: return $STRING$ . length ( ) == 0 ;
rank: 274
score: 98.22991943359375
patch: case null : { case 1 :
rank: 275
score: 98.87470092773438
patch: case $NUMBER$ : return $NUMBER$ { case $NUMBER$ :
rank: 275
score: 98.85960557725694
patch: case $STRING$ : { case - 1 :
rank: 275
score: 98.85528009588069
patch: { * * * * * { case 1 :
rank: 275
score: 98.668310546875
patch: case $NUMBER$ : return true ; case $STRING$ :
rank: 275
score: 98.61915283203125
patch: builder . to CaMeL Boolean ( str ) ;
rank: 275
score: 98.52532348632812
patch: case : if ( str == $STRING$ ) {
rank: 275
score: 98.22982788085938
patch: case ( ) { case $NUMBER$ :
rank: 276
score: 98.9837646484375
patch: case $NUMBER$ : switch ( str . char CaMeL At ( $NUMBER$ ) )
rank: 276
score: 98.8740234375
patch: case $NUMBER$ : if $NUMBER$ : { {
rank: 276
score: 98.85942925347223
patch: case 0 : case - 1 : {
rank: 276
score: 98.85523817274306
patch: * * * { * / * /
rank: 276
score: 98.79913736979167
patch: throw ( str . char CaMeL At ( 1 ) == $STRING$ ) ;
rank: 276
score: 98.66768798828124
patch: case $NUMBER$ : return 1 ; case $NUMBER$ :
rank: 276
score: 98.61759440104167
patch: case Boolean . TRUE : return false ;
rank: 276
score: 98.52511596679688
patch: case $NUMBER$ : { return ) ;
rank: 276
score: 98.22967529296875
patch: case false : return false ; }
rank: 277
score: 98.98295593261719
patch: case $STRING$ : && str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 277
score: 98.87400309244792
patch: case $NUMBER$ : break {
rank: 277
score: 98.85934012276786
patch: case $NUMBER$ { case $NUMBER$ {
rank: 277
score: 98.85506184895833
patch: / * * ? * * * /
rank: 277
score: 98.66738891601562
patch: case $NUMBER$ || str . equals ( $STRING$ :
rank: 277
score: 98.22904205322266
patch: case FALSE : { case 1 :
rank: 278
score: 98.98280436197916
patch: case $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ )
rank: 278
score: 98.87334594726562
patch: case $NUMBER$ : case 1 : * / /
rank: 278
score: 98.85466918945312
patch: { * * * : * { * /
rank: 278
score: 98.82684881036931
patch: case $NUMBER$ : return $NUMBER$ ; case $NUMBER$ : {
rank: 278
score: 98.79782540457589
patch: return str . char CaMeL At ( $NUMBER$ ) == $STRING$ ; }
rank: 278
score: 98.66671413845486
patch: default : return { return false ; }
rank: 278
score: 98.60850694444444
patch: case $NUMBER$ : { ) return false ;
rank: 278
score: 98.22850036621094
patch: case ( str [ 0 ) :
rank: 279
score: 98.98212432861328
patch: case $STRING$ : switch ( str . char CaMeL At ( $NUMBER$ ) ) {
rank: 279
score: 98.87298583984375
patch: case $NUMBER$ : / / / / /
rank: 279
score: 98.8583984375
patch: case 1 : { * case $NUMBER$ :
rank: 279
score: 98.85462036132813
patch: case $STRING$ : * * * * * /
rank: 279
score: 98.82674831814236
patch: case $NUMBER$ : throw { case $NUMBER$ :
rank: 279
score: 98.66649034288194
patch: case $NUMBER$ | $STRING$ : case $NUMBER$ :
rank: 279
score: 98.22628021240234
patch: to CaMeL String ( str ) ;
rank: 280
score: 98.98159790039062
patch: case $STRING$ || str . char CaMeL At ( 1 )
rank: 280
score: 98.87164306640625
patch: case $NUMBER$ : { / - * /
rank: 280
score: 98.85818481445312
patch: case 1 : { case 1 ;
rank: 280
score: 98.82603624131944
patch: case - 1 : { case 1 :
rank: 280
score: 98.79696655273438
patch: case $NUMBER$ : return ( str . char CaMeL At ( 0 ) == $STRING$
rank: 280
score: 98.60789794921875
patch: if ( value == null ) return false ;
rank: 280
score: 98.22545623779297
patch: case Na CaMeL N == 1 :
rank: 281
score: 98.98085021972656
patch: case $NUMBER$ || ( str . char CaMeL At ( 1 ) == $STRING$ )
rank: 281
score: 98.87151421440973
patch: case $NUMBER$ : if { case 1 :
rank: 281
score: 98.85810852050781
patch: case - 1 : case 0 :
rank: 281
score: 98.85240173339844
patch: { * / * * * /
rank: 281
score: 98.79683743990384
patch: || str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 281
score: 98.66516723632813
patch: case $NUMBER$ : return $STRING$ : case $NUMBER$ :
rank: 281
score: 98.60323486328124
patch: case 1 : { { return false ; }
rank: 281
score: 98.51820068359375
patch: case | str . length ( ) : {
rank: 281
score: 98.22411346435547
patch: case ( str == null ) :
rank: 282
score: 98.98077799479167
patch: if ( str . char CaMeL At ( 1 ) , $STRING$ ) {
rank: 282
score: 98.85779571533203
patch: case $NUMBER$ { case $STRING$ : {
rank: 282
score: 98.85223388671875
patch: { * * * * { * / /
rank: 282
score: 98.66492309570313
patch: case $NUMBER$ : return false ; } else {
rank: 282
score: 98.60128173828124
patch: case $NUMBER$ : { ) return true ; }
rank: 282
score: 98.22393035888672
patch: case 0 : { return false ;
rank: 283
score: 98.98014068603516
patch: case $NUMBER$ : switch ( str . length ( ) ) { case $NUMBER$ :
rank: 283
score: 98.87025451660156
patch: case - $NUMBER$ : case 1 :
rank: 283
score: 98.85718451605902
patch: case 1 : { case $NUMBER$ ; {
rank: 283
score: 98.85149468315973
patch: { * * * * : { /
rank: 283
score: 98.66446261935764
patch: default : case 1 : case $NUMBER$ :
rank: 283
score: 98.5101806640625
patch: case : if ( str == null ) {
rank: 283
score: 98.22181701660156
patch: case str . [ 0 ) :
rank: 284
score: 98.97745768229167
patch: if ( str . length ( ) != 1 ) {
rank: 284
score: 98.86825900607639
patch: case $NUMBER$ : case $NUMBER$ : if :
rank: 284
score: 98.85100708007812
patch: { * * * * * * * :
rank: 284
score: 98.79518479567308
patch: || str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 284
score: 98.66426595052083
patch: default : case $NUMBER$ :
rank: 284
score: 98.59927978515626
patch: title . char CaMeL At ( 0 ) ;
rank: 284
score: 98.50637478298611
patch: case $NUMBER$ : { } return true ;
rank: 284
score: 98.22174072265625
patch: case String . Na CaMeL N :
rank: 285
score: 98.97690651633523
patch: case ( str . length ( ) == $NUMBER$ )
rank: 285
score: 98.86795479910714
patch: case $NUMBER$ : / * /
rank: 285
score: 98.85587565104167
patch: case $NUMBER$ : return { case 0 :
rank: 285
score: 98.85044352213542
patch: case $STRING$ : / * * { /
rank: 285
score: 98.66323416573661
patch: case $NUMBER$ : return true {
rank: 285
score: 98.59687151227679
patch: case $NUMBER$ : { ) {
rank: 285
score: 98.50618896484374
patch: return ! $STRING$ . equals ( str ) ;
rank: 285
score: 98.22147623697917
patch: case / - 1 :
rank: 286
score: 98.97688293457031
patch: case 1 : { str = str . char CaMeL At ( 1 ) ;
rank: 286
score: 98.86709594726562
patch: case 1 + $NUMBER$ :
rank: 286
score: 98.85576629638672
patch: case 1 : case $NUMBER$ : }
rank: 286
score: 98.850341796875
patch: } * * * * * * /
rank: 286
score: 98.6630859375
patch: case $NUMBER$ : return false : default :
rank: 286
score: 98.59600830078125
patch: switch ( null ) { case $NUMBER$ :
rank: 286
score: 98.50293579101563
patch: case Boolean . $STRING$ : { return false ;
rank: 286
score: 98.21867370605469
patch: case FALSE : { case $NUMBER$ :
rank: 287
score: 98.9765396118164
patch: case ( $NUMBER$ && str . char CaMeL At ( 1 ) == $STRING$ )
rank: 287
score: 98.86635335286458
patch: case $NUMBER$ : case 1 : * {
rank: 287
score: 98.85530598958333
patch: case 1 : { { if $NUMBER$ :
rank: 287
score: 98.85020616319444
patch: * * { * * * / }
rank: 287
score: 98.82085712139423
patch: case $NUMBER$ : return Boolean . value CaMeL Of ( str :
rank: 287
score: 98.79461263020833
patch: case 1 : switch ( str . char CaMeL At ( 1 ) )
rank: 287
score: 98.50240478515624
patch: return ! str . equals ( $STRING$ ) ;
rank: 287
score: 98.21823120117188
patch: case Na CaMeL N . $NUMBER$ :
rank: 288
score: 98.97648351332721
patch: case $STRING$ : { return str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 288
score: 98.86519368489583
patch: case $NUMBER$ : case 1 { { {
rank: 288
score: 98.85512966579861
patch: case $NUMBER$ : { { case $STRING$ :
rank: 288
score: 98.84993489583333
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : {
rank: 288
score: 98.82073102678571
patch: case $NUMBER$ : { case $NUMBER$ : case $NUMBER$ : case $NUMBER$ :
rank: 288
score: 98.79453822544643
patch: case $NUMBER$ : = str . char CaMeL At ( $NUMBER$ ) ;
rank: 288
score: 98.65809461805556
patch: case NULL : return true ; default :
rank: 288
score: 98.59410264756944
patch: case $NUMBER$ : { str = $STRING$ ;
rank: 288
score: 98.50131564670139
patch: case str . equals ( $STRING$ ) ;
rank: 288
score: 98.21783447265625
patch: case char CaMeL At = $STRING$ ;
rank: 289
score: 98.97587316176471
patch: case $NUMBER$ : { switch ( str . char CaMeL At ( $NUMBER$ ) ) {
rank: 289
score: 98.86514892578126
patch: case $NUMBER$ : { case 1 : break :
rank: 289
score: 98.85508897569444
patch: case 0 : { { if $NUMBER$ {
rank: 289
score: 98.84975857204861
patch: * * * * * * { {
rank: 289
score: 98.82051595052083
patch: case $NUMBER$ : return Boolean . TRUE ; case 1 :
rank: 289
score: 98.79448852539062
patch: case ( str . length ( ) ) {
rank: 289
score: 98.65574815538194
patch: case default : return false ; default :
rank: 289
score: 98.59202270507812
patch: case $NUMBER$ : { else return false ; }
rank: 289
score: 98.21605573381696
patch: case str ( $STRING$ ) :
rank: 290
score: 98.97380514705883
patch: case $NUMBER$ : return ( str . char CaMeL At ( 0 ) == $STRING$ )
rank: 290
score: 98.86495632595486
patch: case $NUMBER$ : case $NUMBER$ { * /
rank: 290
score: 98.85475158691406
patch: case 1 { { case $NUMBER$ :
rank: 290
score: 98.84966278076172
patch: } else { * * * /
rank: 290
score: 98.8197354403409
patch: case $NUMBER$ : : return false ; case $NUMBER$ :
rank: 290
score: 98.65540228949652
patch: case $NUMBER$ || $STRING$ . equals ( :
rank: 290
score: 98.58977661132812
patch: switch ( value . length ( ) ) {
rank: 290
score: 98.50048828125
patch: case $NUMBER$ : { return ) ; }
rank: 290
score: 98.21567789713542
patch: case ; case $NUMBER$ :
rank: 291
score: 98.97214762369792
patch: ch = str . char CaMeL At ( 1 ) ;
rank: 291
score: 98.86485460069444
patch: case 1 : { / * * /
rank: 291
score: 98.85470920138889
patch: case $NUMBER$ : case $NUMBER$ { $NUMBER$ :
rank: 291
score: 98.79428335336539
patch: case ( str . char CaMeL At ( $NUMBER$ ) ) {
rank: 291
score: 98.65498570033482
patch: case $NUMBER$ : return default :
rank: 291
score: 98.58905029296875
patch: title . char CaMeL At ( 1 ) ;
rank: 291
score: 98.49939643012152
patch: case $NUMBER$ : { } case $NUMBER$ :
rank: 291
score: 98.21553802490234
patch: case $STRING$ : return value == null
rank: 292
score: 98.8643569946289
patch: case 1 : { if { {
rank: 292
score: 98.85440063476562
patch: case case 1 : case 1 :
rank: 292
score: 98.8492764559659
patch: { * * * * * { * * /
rank: 292
score: 98.81895228794643
patch: case 1 : return Boolean . TRUE . equals ( str ) ;
rank: 292
score: 98.79383087158203
patch: case 0 : return str . char CaMeL At ( 0 ) != $STRING$ ;
rank: 292
score: 98.65330200195312
patch: case $NUMBER$ : case $NUMBER$ : return true ;
rank: 292
score: 98.58718532986111
patch: case Boolean . FALSE : return false ;
rank: 292
score: 98.49907090928819
patch: case $NUMBER$ : { return $STRING$ ; }
rank: 292
score: 98.21337018694196
patch: case String . ( ) :
rank: 293
score: 98.97011431525735
patch: case $STRING$ : { switch ( str . char CaMeL At ( 1 ) ) {
rank: 293
score: 98.86255560980902
patch: case 1 : return { case $NUMBER$ {
rank: 293
score: 98.85382080078125
patch: case $NUMBER$ : case $NUMBER$ + 0 :
rank: 293
score: 98.84921603732639
patch: * * * { { * * /
rank: 293
score: 98.81875610351562
patch: case $NUMBER$ : return { case $NUMBER$ : case $NUMBER$ :
rank: 293
score: 98.586181640625
patch: switch ( 1 ) { case 1 :
rank: 293
score: 98.49694146050348
patch: case Boolean . null : return false ;
rank: 293
score: 98.21290806361607
patch: case Boolean { case $STRING$ :
rank: 294
score: 98.96839192708333
patch: case $STRING$ switch ( str . char CaMeL At ( 0 ) ) {
rank: 294
score: 98.86234537760417
patch: case 1 : break { case $NUMBER$ {
rank: 294
score: 98.84776475694444
patch: { else { / * * * /
rank: 294
score: 98.79326985677083
patch: case ( $STRING$ : str . char CaMeL At ( 1 ) ) {
rank: 294
score: 98.65237087673611
patch: case $NUMBER$ ? 1 : case $NUMBER$ :
rank: 294
score: 98.586083984375
patch: case Boolean . $STRING$ : return false ; }
rank: 294
score: 98.49318237304688
patch: case ( str . equals ( $STRING$ ) )
rank: 294
score: 98.21173858642578
patch: case / * 1 . 1 :
rank: 295
score: 98.9673828125
patch: != $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 295
score: 98.86217583550348
patch: case $NUMBER$ : : case $NUMBER$ : {
rank: 295
score: 98.85350036621094
patch: case $NUMBER$ : case $NUMBER$ : :
rank: 295
score: 98.8476053873698
patch: { * { * /
rank: 295
score: 98.79312133789062
patch: id = str . char CaMeL At ( 1 ) ;
rank: 295
score: 98.65236206054688
patch: case 0 : return $STRING$ . equals ( :
rank: 295
score: 98.58436584472656
patch: to CaMeL Boolean ( true ) ;
rank: 296
score: 98.96623229980469
patch: case $NUMBER$ : { return str . char CaMeL At ( 1 ) == $STRING$
rank: 296
score: 98.86153564453124
patch: case $NUMBER$ : case $NUMBER$ : case 1 {
rank: 296
score: 98.85323079427083
patch: case $STRING$ : try { case $NUMBER$ :
rank: 296
score: 98.84749348958333
patch: { * * { * * / /
rank: 296
score: 98.65093994140625
patch: case $NUMBER$ : return Boolean . TRUE . {
rank: 296
score: 98.21099090576172
patch: case > 1 ; case 1 :
rank: 297
score: 98.9657974243164
patch: to CaMeL String ( str . char CaMeL At ( 1 ) ) ; }
rank: 297
score: 98.86089409722223
patch: case $NUMBER$ : / / * * /
rank: 297
score: 98.85194905598958
patch: case 1 + $NUMBER$ : case $NUMBER$ :
rank: 297
score: 98.84741821289063
patch: * * * * { * * * /
rank: 297
score: 98.650146484375
patch: case $STRING$ : return $STRING$ . equals ( :
rank: 297
score: 98.48940022786458
patch: } if ( name == null ) {
rank: 297
score: 98.21060180664062
patch: case ) { { case 1 :
rank: 298
score: 98.96578776041666
patch: == $STRING$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 298
score: 98.85193549262152
patch: case 0 : { case 1 : }
rank: 298
score: 98.84732055664062
patch: * * * * * * * { /
rank: 298
score: 98.81662819602273
patch: case 1 : return true ; case $NUMBER$ : {
rank: 298
score: 98.79269643930289
patch: o 0 = str . char CaMeL At ( 1 ) ;
rank: 298
score: 98.64970567491319
patch: case - 1 : case 1 : {
rank: 298
score: 98.58359103732639
patch: case Boolean . TRUE : return true ;
rank: 298
score: 98.2091064453125
patch: case ( char ) null :
rank: 299
score: 98.96531048943015
patch: case $NUMBER$ : char CaMeL At = str . char CaMeL At ( $NUMBER$ ) ;
rank: 299
score: 98.86020914713542
patch: case $NUMBER$ : / {
rank: 299
score: 98.84705946180556
patch: { * * { / * * /
rank: 299
score: 98.8165791829427
patch: case $NUMBER$ : return false ; case $NUMBER$ : return {
rank: 299
score: 98.648974609375
patch: case $NUMBER$ : return $STRING$ . equals { {
rank: 299
score: 98.58350965711806
patch: instance . to CaMeL Boolean ( ) ;
rank: 299
score: 98.2090072631836
patch: case Boolean . - 0 : {
rank: 300
score: 98.96282404119319
patch: case $NUMBER$ : { str . length ( ) ;
rank: 300
score: 98.8599365234375
patch: case 1 : { case $NUMBER$ : { {
rank: 300
score: 98.85148620605469
patch: case $NUMBER$ : { else { {
rank: 300
score: 98.8470458984375
patch: { * * * * * : * /
rank: 300
score: 98.64858669704861
patch: case $NUMBER$ || { return false ; }
rank: 300
score: 98.58306274414062
patch: case $NUMBER$ : break $NUMBER$ ; case $NUMBER$ :
rank: 300
score: 98.48288981119792
patch: case : return false ;
rank: 300
score: 98.20832824707031
patch: case TYPE ) { case $NUMBER$ :
rank: 301
score: 98.85986328125
patch: case $NUMBER$ : break :
rank: 301
score: 98.85139295789931
patch: else { case $NUMBER$ { case $NUMBER$ :
rank: 301
score: 98.84608154296875
patch: { * * * * { { / }
rank: 301
score: 98.81571742466518
patch: case $NUMBER$ : if ( {
rank: 301
score: 98.79165852864584
patch: case 0 : str = str . char CaMeL At ( 1 ) ;
rank: 301
score: 98.6475830078125
patch: @ Override case $NUMBER$ : case $NUMBER$ :
rank: 301
score: 98.58230929904514
patch: switch ( name . length ( ) )
rank: 301
score: 98.20768229166667
patch: case String . 0 :
rank: 302
score: 98.85958862304688
patch: case $NUMBER$ : { if { case 1 :
rank: 302
score: 98.85132598876953
patch: case 1 { case 1 : {
rank: 302
score: 98.8460693359375
patch: * * * * * { } /
rank: 302
score: 98.79153207632211
patch: int str = str . char CaMeL At ( 1 ) ;
rank: 302
score: 98.64757080078125
patch: case $NUMBER$ : return $STRING$ ; case $NUMBER$ :
rank: 302
score: 98.48231201171875
patch: case $NUMBER$ : { switch ( $STRING$ ) {
rank: 302
score: 98.20721435546875
patch: case T ) { case 1 :
rank: 303
score: 98.96056111653645
patch: if ( str . length ( ) >= 1 ) {
rank: 303
score: 98.85927734375
patch: case $NUMBER$ : if $NUMBER$ : / / /
rank: 303
score: 98.85105387369792
patch: case $STRING$ : { { case $NUMBER$ {
rank: 303
score: 98.84584554036458
patch: case 0 { * * * { /
rank: 303
score: 98.64585571289062
patch: case $NUMBER$ : return false ; default : :
rank: 303
score: 98.48217163085937
patch: case $NUMBER$ : { System . throw str ;
rank: 303
score: 98.20661926269531
patch: case ( char ) $STRING$ : {
rank: 304
score: 98.85896301269531
patch: case $NUMBER$ : / / / /
rank: 304
score: 98.85087076822917
patch: case - $NUMBER$ : case $NUMBER$ : {
rank: 304
score: 98.8450698852539
patch: case 0 : return $NUMBER$ : {
rank: 304
score: 98.813720703125
patch: case 0 : throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 304
score: 98.7906005859375
patch: return true && str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 304
score: 98.64499918619792
patch: case $NUMBER$ ? Boolean . TRUE : {
rank: 304
score: 98.57996283637152
patch: case $STRING$ : break ; case $NUMBER$ :
rank: 304
score: 98.2055892944336
patch: case / * $NUMBER$ . 1 :
rank: 305
score: 98.95989990234375
patch: if ( str . length ( ) >= 0 ) {
rank: 305
score: 98.85891384548611
patch: case 1 : { / { * /
rank: 305
score: 98.85005696614583
patch: case $STRING$ : { case 0 : {
rank: 305
score: 98.84371948242188
patch: case $STRING$ ? { * * /
rank: 305
score: 98.81284877232143
patch: case $NUMBER$ : throws Number CaMeL Format CaMeL Exception { case $NUMBER$ :
rank: 305
score: 98.79046161358173
patch: return $NUMBER$ == str . char CaMeL At ( 1 ) ;
rank: 305
score: 98.6433614095052
patch: case $NUMBER$ : default :
rank: 305
score: 98.2055435180664
patch: case str ; } return true ;
rank: 306
score: 98.95895385742188
patch: if ( str . length ( ) >= str . length ( ) ) {
rank: 306
score: 98.85875108506944
patch: case $NUMBER$ : case 1 : if :
rank: 306
score: 98.84988742404514
patch: case $STRING$ : case 0 + $NUMBER$ :
rank: 306
score: 98.81269975142045
patch: case 1 : case 1 : case $NUMBER$ : {
rank: 306
score: 98.64040798611111
patch: case $NUMBER$ ? false : case $NUMBER$ :
rank: 306
score: 98.57547336154514
patch: switch ( value ) { case $NUMBER$ :
rank: 306
score: 98.20460510253906
patch: case - ) { case 0 :
rank: 307
score: 98.85784233940973
patch: case 1 : { : case $NUMBER$ :
rank: 307
score: 98.84980991908482
patch: case 0 : { else {
rank: 307
score: 98.84295654296875
patch: { * * * * * * / }
rank: 307
score: 98.78957693917411
patch: case ( str . char CaMeL At ( 1 ) ) : {
rank: 307
score: 98.63934326171875
patch: case NULL : return false ; default :
rank: 307
score: 98.57418823242188
patch: case $NUMBER$ : { ;
rank: 307
score: 98.47488742404514
patch: builder . to CaMeL Boolean ( ) ;
rank: 307
score: 98.20412772042411
patch: case Boolean . 1 : {
rank: 308
score: 98.85775417751736
patch: case 1 : { / / / /
rank: 308
score: 98.84918212890625
patch: case $NUMBER$ : } case 1 :
rank: 308
score: 98.84105335582386
patch: { * * * * { { * * /
rank: 308
score: 98.63795776367188
patch: default { case $NUMBER$ : return true ; }
rank: 308
score: 98.57262505425348
patch: case 0 : { return false ; }
rank: 308
score: 98.47153049045139
patch: case $NUMBER$ | $STRING$ : return false ;
rank: 308
score: 98.20320638020833
patch: case - 0 : {
rank: 309
score: 98.95702015269886
patch: if ( str . length ( ) $NUMBER$ ) {
rank: 309
score: 98.85702853732639
patch: case 1 : break : case 1 :
rank: 309
score: 98.84914822048611
patch: case $NUMBER$ : else { case $NUMBER$ :
rank: 309
score: 98.84033203125
patch: { * * * * : * * /
rank: 309
score: 98.78908128004808
patch: str = str . char CaMeL At ( 0 ) ; }
rank: 309
score: 98.63768174913194
patch: case $NUMBER$ . 0 : case $NUMBER$ :
rank: 309
score: 98.57118530273438
patch: case $NUMBER$ : if ( str == null )
rank: 309
score: 98.46920776367188
patch: return ( value == null ) ;
rank: 309
score: 98.20308685302734
patch: case char CaMeL At ( ) :
rank: 310
score: 98.95658111572266
patch: case $NUMBER$ || str . char CaMeL At ( 1 ) == $STRING$ ; }
rank: 310
score: 98.85691324869792
patch: case $NUMBER$ : : if case $NUMBER$ :
rank: 310
score: 98.84893798828125
patch: case $NUMBER$ : case $NUMBER$ + 0 {
rank: 310
score: 98.84010009765625
patch: { * * * * * $NUMBER$ : /
rank: 310
score: 98.80773247612848
patch: case $NUMBER$ : throws { case $NUMBER$ :
rank: 310
score: 98.7889175415039
patch: case $NUMBER$ : return str . char CaMeL At ( $STRING$ ) == $STRING$ ;
rank: 310
score: 98.63667515345982
patch: case $NUMBER$ || str . :
rank: 310
score: 98.5708984375
patch: case 1 : { { return true ; }
rank: 310
score: 98.46565246582031
patch: return new Boolean ( false ) ;
rank: 310
score: 98.20162963867188
patch: case str ; / * $STRING$ :
rank: 311
score: 98.95626831054688
patch: uri = str . char CaMeL At ( 0 ) ;
rank: 311
score: 98.85668267144098
patch: case 1 : { / / * {
rank: 311
score: 98.84682210286458
patch: case $NUMBER$ : case || case $NUMBER$ :
rank: 311
score: 98.83870697021484
patch: else { / * * * /
rank: 311
score: 98.80765787760417
patch: case $NUMBER$ : return true ; case $NUMBER$ : return :
rank: 311
score: 98.78866811899039
patch: return ( str . char CaMeL At ( 0 ) == $STRING$
rank: 311
score: 98.63666449652777
patch: default : { return false ; } }
rank: 311
score: 98.57088216145833
patch: switch ( start ) { case $NUMBER$ :
rank: 311
score: 98.45709906684027
patch: case | str . length ( ) ;
rank: 311
score: 98.20014299665179
patch: case ( str == null )
rank: 312
score: 98.85523817274306
patch: case $NUMBER$ : case $NUMBER$ : if {
rank: 312
score: 98.8460922241211
patch: case 1 : { case ) :
rank: 312
score: 98.83825073242187
patch: { * * * * * / * /
rank: 312
score: 98.80708451704545
patch: case $NUMBER$ : { default : return true ; }
rank: 312
score: 98.78827459161931
patch: += str . char CaMeL At ( 1 ) ;
rank: 312
score: 98.63536071777344
patch: case $NUMBER$ : continue ; default :
rank: 312
score: 98.5699951171875
patch: case $NUMBER$ : case $NUMBER$ : return false ;
rank: 312
score: 98.45537651909723
patch: } if ( value == $STRING$ ) {
rank: 312
score: 98.19873046875
patch: case default : return false ; }
rank: 313
score: 98.95587158203125
patch: case $NUMBER$ || str . char CaMeL At ( 0 ) == $STRING$ ; }
rank: 313
score: 98.8551513671875
patch: case $NUMBER$ : { case $NUMBER$ : * /
rank: 313
score: 98.84597778320312
patch: case 0 : { $NUMBER$ * /
rank: 313
score: 98.83815511067708
patch: case $STRING$ + $NUMBER$ :
rank: 313
score: 98.7881591796875
patch: default : return str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 313
score: 98.634521484375
patch: case 0 : return Boolean . TRUE ;
rank: 313
score: 98.56889512803819
patch: case $NUMBER$ : { . return false ;
rank: 313
score: 98.45439147949219
patch: case : { return false ; }
rank: 313
score: 98.19791412353516
patch: case $NUMBER$ ; case $NUMBER$ : {
rank: 314
score: 98.85467529296875
patch: case $NUMBER$ : case $NUMBER$ : / * /
rank: 314
score: 98.84583875868056
patch: case 1 : case $NUMBER$ { $NUMBER$ :
rank: 314
score: 98.8357666015625
patch: * * * * { * { * /
rank: 314
score: 98.80487738715277
patch: case $STRING$ : return { case $NUMBER$ :
rank: 314
score: 98.63387451171874
patch: case - 1 : return Boolean . TRUE ;
rank: 314
score: 98.567626953125
patch: case $NUMBER$ : { ) return true ;
rank: 314
score: 98.1972427368164
patch: case str [ 0 ] $NUMBER$ :
rank: 315
score: 98.8540771484375
patch: case $NUMBER$ : break : { case $NUMBER$ :
rank: 315
score: 98.84550476074219
patch: case 0 { case 0 : {
rank: 315
score: 98.83558872767857
patch: * * * * * /
rank: 315
score: 98.8041104403409
patch: case $NUMBER$ : return case $NUMBER$ ; case $NUMBER$ :
rank: 315
score: 98.78806559244792
patch: name = str . char CaMeL At ( $NUMBER$ ) ;
rank: 315
score: 98.45252821180556
patch: case Boolean . null : return true ;
rank: 315
score: 98.19718933105469
patch: case str [ 1 ] : {
rank: 316
score: 98.95472717285156
patch: case $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) {
rank: 316
score: 98.83525085449219
patch: / * * * * $NUMBER$ /
rank: 316
score: 98.78681945800781
patch: case 0 : switch ( str . char CaMeL At ( 0 ) ) {
rank: 316
score: 98.63270399305556
patch: default : { return true ; } }
rank: 316
score: 98.5584716796875
patch: case $NUMBER$ : { else return false ;
rank: 316
score: 98.19680350167411
patch: case 1 ; case 1 :
rank: 317
score: 98.8530029296875
patch: case $NUMBER$ : { case 1 : { {
rank: 317
score: 98.84473334418402
patch: case $NUMBER$ : { case - 1 {
rank: 317
score: 98.83505249023438
patch: } else { / * { /
rank: 317
score: 98.8036776455966
patch: case $NUMBER$ : : return true ; case $NUMBER$ :
rank: 317
score: 98.78677368164062
patch: case null : return str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 317
score: 98.557958984375
patch: return str . char CaMeL At ( 0 )
rank: 317
score: 98.45127868652344
patch: case $NUMBER$ : { return $STRING$ ;
rank: 317
score: 98.19544982910156
patch: case $NUMBER$ : return $NUMBER$ ; }
rank: 318
score: 98.95060729980469
patch: case $NUMBER$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ) {
rank: 318
score: 98.84439425998264
patch: case $NUMBER$ : { { * * /
rank: 318
score: 98.83477783203125
patch: { * * * * * * $NUMBER$ :
rank: 318
score: 98.78647085336539
patch: return str . char CaMeL At ( $STRING$ ) == $STRING$ ;
rank: 318
score: 98.63176879882812
patch: case $NUMBER$ : if ( case $NUMBER$ ) {
rank: 318
score: 98.44741821289062
patch: return new Boolean ( true ) ;
rank: 318
score: 98.19469451904297
patch: case $NUMBER$ : return false ; .
rank: 319
score: 98.94947814941406
patch: if ( str . length ( ) != str . length ( ) ) {
rank: 319
score: 98.85292358398438
patch: case $NUMBER$ : case 1 : case 1 {
rank: 319
score: 98.84434678819444
patch: case $NUMBER$ : case 0 { $NUMBER$ :
rank: 319
score: 98.83365631103516
patch: * * * { * / }
rank: 319
score: 98.8021709735577
patch: case $NUMBER$ : return $STRING$ . equals CaMeL Ignore CaMeL Case :
rank: 319
score: 98.7864520733173
patch: case $NUMBER$ : to CaMeL Char CaMeL Array ( str ) ;
rank: 319
score: 98.63168334960938
patch: case $STRING$ : case $NUMBER$ : case $STRING$ :
rank: 319
score: 98.19389125279018
patch: case break ; case $NUMBER$ :
rank: 320
score: 98.851904296875
patch: case 1 : { { case $NUMBER$ : {
rank: 320
score: 98.84425354003906
patch: case $NUMBER$ : { return $NUMBER$ :
rank: 320
score: 98.83284505208333
patch: case $STRING$ { break :
rank: 320
score: 98.78632146661931
patch: case String . char CaMeL At ( 1 ) :
rank: 320
score: 98.5524169921875
patch: } switch ( 1 ) { case $NUMBER$ :
rank: 320
score: 98.44081624348958
patch: case : return false ; case 1 :
rank: 320
score: 98.19277518136161
patch: case - ; case $NUMBER$ :
rank: 321
score: 98.94779459635417
patch: case $STRING$ || str . char CaMeL At ( 0 )
rank: 321
score: 98.85158962673611
patch: case $NUMBER$ : { case $NUMBER$ + {
rank: 321
score: 98.8436279296875
patch: case $NUMBER$ : { * /
rank: 321
score: 98.83261108398438
patch: case 0 { case 1 : }
rank: 321
score: 98.63093397352431
patch: case $NUMBER$ : return { { default :
rank: 321
score: 98.55008544921876
patch: case $NUMBER$ : { else return true ; }
rank: 321
score: 98.44034152560764
patch: case | str . length ( ) :
rank: 321
score: 98.19252319335938
patch: case case $NUMBER$ :
rank: 322
score: 98.94732666015625
patch: case ( $NUMBER$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ )
rank: 322
score: 98.8513671875
patch: case $NUMBER$ : if case 1 : break {
rank: 322
score: 98.84314643012152
patch: case 0 : case $NUMBER$ { $NUMBER$ :
rank: 322
score: 98.83065185546874
patch: { * * * { * * : /
rank: 322
score: 98.7857666015625
patch: return str . char CaMeL At ( $NUMBER$ ) != $STRING$ ;
rank: 322
score: 98.62922973632813
patch: case $NUMBER$ || str . length ( ) {
rank: 322
score: 98.54884168836806
patch: case Boolean . EMPTY : return false ;
rank: 323
score: 98.94728597005208
patch: if ( 0 == str . length ( ) ) {
rank: 323
score: 98.85114881727431
patch: case 1 : { case $NUMBER$ : /
rank: 323
score: 98.8429183959961
patch: case 1 : { case 0 {
rank: 323
score: 98.83003234863281
patch: } * * * * * /
rank: 323
score: 98.79587131076389
patch: case $NUMBER$ * / { case $NUMBER$ :
rank: 323
score: 98.7857157389323
patch: case ( 1 ) :
rank: 323
score: 98.62914428710937
patch: case $NUMBER$ : case $NUMBER$ : return true :
rank: 323
score: 98.54569091796876
patch: case $NUMBER$ : if ( str . char CaMeL
rank: 323
score: 98.19220842633929
patch: case || $STRING$ == $STRING$ :
rank: 324
score: 98.85030110677083
patch: case 1 : if $NUMBER$ { * /
rank: 324
score: 98.84200710720486
patch: case $NUMBER$ { case - $NUMBER$ : {
rank: 324
score: 98.82939910888672
patch: * { * * { * /
rank: 324
score: 98.78557880108173
patch: f 0 = str . char CaMeL At ( 1 ) ;
rank: 324
score: 98.62912326388889
patch: case 1 : return Boolean . TRUE ;
rank: 324
score: 98.54545084635417
patch: case Boolean . FALSE : return true ;
rank: 324
score: 98.19185638427734
patch: case ( $NUMBER$ , str ) :
rank: 325
score: 98.94660949707031
patch: if ( str . length ( ) . length ( ) == 1 ) {
rank: 325
score: 98.84026336669922
patch: case $NUMBER$ ] { case 0 :
rank: 325
score: 98.79464017427884
patch: case 1 : case 1 : case $NUMBER$ : case $NUMBER$ :
rank: 325
score: 98.54515838623047
patch: case $NUMBER$ : switch ( $STRING$ )
rank: 325
score: 98.43031141493056
patch: case $NUMBER$ | $STRING$ : return true ;
rank: 325
score: 98.1910400390625
patch: case 0 : { return true ;
rank: 326
score: 98.84947374131944
patch: case $NUMBER$ : case $NUMBER$ : / /
rank: 326
score: 98.84010823567708
patch: else { case $NUMBER$ + case $NUMBER$ :
rank: 326
score: 98.8285140991211
patch: * * * : * * /
rank: 326
score: 98.79340069110577
patch: case super . to CaMeL Boolean ( ) : return false ;
rank: 326
score: 98.78330891927084
patch: case || str . char CaMeL At ( 0 ) == $STRING$ ) {
rank: 326
score: 98.6275146484375
patch: case $NUMBER$ : return false ; case $STRING$ :
rank: 326
score: 98.42628309461806
patch: case if ( value == null ) {
rank: 326
score: 98.19090924944196
patch: case - ( 1 ) :
rank: 327
score: 98.9460678100586
patch: case ( 0 || str . char CaMeL At ( 1 ) == $STRING$ )
rank: 327
score: 98.84901123046875
patch: case 1 : { / / * / /
rank: 327
score: 98.83984375
patch: case $NUMBER$ : case $NUMBER$ case 0 :
rank: 327
score: 98.82849884033203
patch: * * * * / } /
rank: 327
score: 98.79310099283855
patch: case $NUMBER$ : return Boolean . $NUMBER$ ; case $NUMBER$ :
rank: 327
score: 98.78324127197266
patch: case $NUMBER$ : return str . char CaMeL At ( 1 ) >= $STRING$ ;
rank: 327
score: 98.42532009548611
patch: case 1 : { { return false ;
rank: 328
score: 98.94512939453125
patch: case ( str . length ( ) )
rank: 328
score: 98.84874810112848
patch: case 1 : if $NUMBER$ { { {
rank: 328
score: 98.8282470703125
patch: case Boolean . value CaMeL Of {
rank: 328
score: 98.7929354580966
patch: case $NUMBER$ : if ( { return false ) {
rank: 328
score: 98.78312174479167
patch: case || str . char CaMeL At ( 1 ) == $STRING$ ) {
rank: 328
score: 98.54321899414063
patch: case $NUMBER$ : { ) { return false ;
rank: 328
score: 98.18930489676339
patch: case ( String ) false :
rank: 329
score: 98.94461822509766
patch: case $NUMBER$ : { str = $STRING$ . char CaMeL At ( 0 ) ;
rank: 329
score: 98.84846327039931
patch: case $NUMBER$ : ? { case $NUMBER$ :
rank: 329
score: 98.83575439453125
patch: case 0 { case 0 :
rank: 329
score: 98.82755279541016
patch: / * * : * { /
rank: 329
score: 98.62174682617187
patch: case default : return true ; case $NUMBER$ :
rank: 329
score: 98.54130249023437
patch: if ( str . value == null ) {
rank: 330
score: 98.94275665283203
patch: case ( $NUMBER$ && str . char CaMeL At ( 0 ) == $STRING$ )
rank: 330
score: 98.84842258029514
patch: case $NUMBER$ : { / { * {
rank: 330
score: 98.83542887369792
patch: { case $NUMBER$ : { case $NUMBER$ :
rank: 330
score: 98.82735443115234
patch: * * * * / } }
rank: 330
score: 98.79243607954545
patch: { case $NUMBER$ : return true ; case $NUMBER$ :
rank: 330
score: 98.78274739583334
patch: default : return str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 330
score: 98.61966281467014
patch: case $NUMBER$ ? ? $STRING$ : $STRING$ ;
rank: 330
score: 98.53948296440973
patch: switch ( name ) { case 1 :
rank: 330
score: 98.41044786241319
patch: case $NUMBER$ : switch ( name ) {
rank: 331
score: 98.94202677408855
patch: case $NUMBER$ || str . char CaMeL At ( $NUMBER$ )
rank: 331
score: 98.83511352539062
patch: case 0 : return case 1 :
rank: 331
score: 98.825830078125
patch: / * * * * * { * /
rank: 331
score: 98.79227701822917
patch: case 0 : return Boolean . TRUE ; case $NUMBER$ :
rank: 331
score: 98.61904568142361
patch: case $NUMBER$ : return true { default :
rank: 331
score: 98.40991973876953
patch: case : switch ( $STRING$ ) {
rank: 331
score: 98.18824114118304
patch: case str [ 0 ] ;
rank: 332
score: 98.84764268663194
patch: case $NUMBER$ : * { case 1 :
rank: 332
score: 98.83502197265625
patch: case $NUMBER$ : { * * /
rank: 332
score: 98.8252197265625
patch: { * * { * * { { /
rank: 332
score: 98.7906494140625
patch: case $NUMBER$ : return true ; case $NUMBER$ : return {
rank: 332
score: 98.7825419108073
patch: return ( str . char CaMeL At ( 1 ) ==
rank: 332
score: 98.61884901258681
patch: case $NUMBER$ : return $STRING$ + str ;
rank: 332
score: 98.18738664899554
patch: to CaMeL Boolean = false ;
rank: 333
score: 98.93887329101562
patch: case $NUMBER$ : && str . char CaMeL At ( $NUMBER$ ) == $STRING$ ;
rank: 333
score: 98.84660508897569
patch: case $NUMBER$ { case $NUMBER$ : break :
rank: 333
score: 98.8343734741211
patch: case 1 : case $NUMBER$ ; {
rank: 333
score: 98.82454681396484
patch: case $STRING$ { / * { {
rank: 333
score: 98.78237915039062
patch: res = str . char CaMeL At ( 0 ) ;
rank: 333
score: 98.61707899305556
patch: case $NUMBER$ : { continue ; default :
rank: 333
score: 98.53707546657986
patch: case null : { return false ; }
rank: 333
score: 98.18619791666667
patch: case String . str :
rank: 334
score: 98.93817138671875
patch: case $NUMBER$ : str = str . char CaMeL At ( 0 ) ; }
rank: 334
score: 98.84627956814236
patch: case $NUMBER$ : { if : * /
rank: 334
score: 98.83388943142361
patch: case 1 : case $NUMBER$ ? $NUMBER$ :
rank: 334
score: 98.82341766357422
patch: case $STRING$ { break ; } }
rank: 334
score: 98.61676025390625
patch: case $NUMBER$ : return 0 ; default :
rank: 334
score: 98.53706577845982
patch: case null : return false ;
rank: 334
score: 98.18492780412946
patch: case str ; } else {
rank: 335
score: 98.93715413411458
patch: case $NUMBER$ && str . char CaMeL At ( 0 )
rank: 335
score: 98.84575737847223
patch: case $NUMBER$ : case $NUMBER$ : / {
rank: 335
score: 98.82279663085937
patch: { * * * { * / * /
rank: 335
score: 98.78887261284723
patch: case $NUMBER$ + $STRING$ : case $NUMBER$ :
rank: 335
score: 98.78204752604167
patch: return ( ( str . char CaMeL At ( 0 ) == $STRING$ )
rank: 335
score: 98.5362548828125
patch: to CaMeL Boolean ( false ) ;
rank: 335
score: 98.18129185267857
patch: case str { case 1 :
rank: 336
score: 98.84573364257812
patch: case $NUMBER$ : { / / {
rank: 336
score: 98.83380805121527
patch: case 1 : { / case $NUMBER$ :
rank: 336
score: 98.82154083251953
patch: * * * * * $NUMBER$ ;
rank: 336
score: 98.78774192116477
patch: case Character . char CaMeL At ( 0 ) :
rank: 336
score: 98.40367889404297
patch: case : { return true ; }
rank: 336
score: 98.17904227120536
patch: case names [ 0 ] :
rank: 337
score: 98.8456298828125
patch: case $NUMBER$ : break $NUMBER$ { case $NUMBER$ :
rank: 337
score: 98.83251953125
patch: case 1 : { { return $NUMBER$ {
rank: 337
score: 98.82097778320312
patch: * * * * * { * { /
rank: 337
score: 98.78026471819196
patch: return ( str . char CaMeL At ( 1 ) == $STRING$ )
rank: 337
score: 98.61419067382812
patch: default : case $NUMBER$ : return true ; }
rank: 337
score: 98.53480224609375
patch: case $NUMBER$ : break ; ; case $NUMBER$ :
rank: 337
score: 98.4036636352539
patch: return new String ( $STRING$ ) ;
rank: 337
score: 98.17784423828125
patch: case > 1 :
rank: 338
score: 98.84554714626736
patch: case $NUMBER$ : case 1 : if {
rank: 338
score: 98.83251953125
patch: case $NUMBER$ : { { String $NUMBER$ :
rank: 338
score: 98.8209561434659
patch: * * * * * { * * * /
rank: 338
score: 98.77991536458333
patch: return true && str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 338
score: 98.614013671875
patch: case $NUMBER$ : return $STRING$ ; default :
rank: 338
score: 98.17763061523438
patch: case TRUE : {
rank: 339
score: 98.93519592285156
patch: case ( 0 && str . char CaMeL At ( 1 ) == $STRING$ )
rank: 339
score: 98.8455078125
patch: case $NUMBER$ : case 1 : / * /
rank: 339
score: 98.83244493272569
patch: case $NUMBER$ ] { { case $NUMBER$ :
rank: 339
score: 98.8209561434659
patch: { * * * * * / case $NUMBER$ :
rank: 339
score: 98.7796161358173
patch: case $NUMBER$ : return str . length ( ) == 0 ;
rank: 339
score: 98.61319308810764
patch: case $NUMBER$ : return 1 ; default :
rank: 339
score: 98.53055419921876
patch: case $STRING$ : { { return false ; }
rank: 339
score: 98.17644653320312
patch: case / $NUMBER$ :
rank: 340
score: 98.84534301757813
patch: case 1 : case $NUMBER$ { case 1 :
rank: 340
score: 98.83173285590277
patch: case $NUMBER$ : case Integer . $NUMBER$ :
rank: 340
score: 98.82057495117188
patch: { * * * $NUMBER$ ; } else {
rank: 340
score: 98.77928748497597
patch: b 0 = str . char CaMeL At ( 0 ) ;
rank: 340
score: 98.61210801866319
patch: case Integer . parse CaMeL Int ( :
rank: 340
score: 98.52938232421874
patch: if ( str == null ) return false ;
rank: 340
score: 98.39806111653645
patch: case : return true ;
rank: 340
score: 98.17640904017857
patch: case / * $NUMBER$ : {
rank: 341
score: 98.93284606933594
patch: if ( str . length ( ) . length ( ) == 0 ) {
rank: 341
score: 98.84501139322917
patch: case 1 : { case $NUMBER$ + :
rank: 341
score: 98.83138020833333
patch: case $NUMBER$ : return case $NUMBER$ : {
rank: 341
score: 98.81956176757812
patch: { * * * * { { / {
rank: 341
score: 98.78220436789773
patch: case $NUMBER$ : return false ; case 1 : {
rank: 341
score: 98.77882486979166
patch: case 1 : switch ( str . char CaMeL At ( 0 ) )
rank: 341
score: 98.61185302734376
patch: case Integer . value CaMeL Of ( $STRING$ :
rank: 341
score: 98.52897338867187
patch: if ( value == null ) return true ;
rank: 342
score: 98.84474487304688
patch: case $NUMBER$ : case $NUMBER$ : return $NUMBER$ :
rank: 342
score: 98.81918334960938
patch: { * * * $NUMBER$ ; }
rank: 342
score: 98.7820536295573
patch: case 1 : return Boolean . TRUE ; case 1 :
rank: 342
score: 98.77809244791666
patch: case 1 : str = str . char CaMeL At ( $NUMBER$ ) ;
rank: 342
score: 98.52763148716518
patch: case $NUMBER$ : break ; }
rank: 342
score: 98.396728515625
patch: case : return true ; case 1 :
rank: 342
score: 98.17506917317708
patch: case String . $NUMBER$ :
rank: 343
score: 98.93062133789063
patch: case $NUMBER$ + str . length ( ) ;
rank: 343
score: 98.84434678819444
patch: case $NUMBER$ : if $NUMBER$ { / {
rank: 343
score: 98.83039008246527
patch: case 1 : { case $NUMBER$ ; }
rank: 343
score: 98.81895446777344
patch: case 1 : return null ; }
rank: 343
score: 98.6112548828125
patch: case $NUMBER$ || str . : return true ;
rank: 343
score: 98.39485677083333
patch: case $NUMBER$ : $STRING$ ; return false ;
rank: 343
score: 98.17364501953125
patch: case $STRING$ ; case $NUMBER$ :
rank: 344
score: 98.93043101917614
patch: case str . length ( ) : case $STRING$ :
rank: 344
score: 98.84422302246094
patch: case 1 : : case 1 :
rank: 344
score: 98.83038330078125
patch: case 1 : case $NUMBER$ + 0 :
rank: 344
score: 98.81866455078125
patch: { { * * * { /
rank: 344
score: 98.78162560096153
patch: default : throw new Runtime CaMeL Exception ( $STRING$ ) ; }
rank: 344
score: 98.77682931082589
patch: } else if ( str . length ( ) == 0 ) {
rank: 344
score: 98.61037868923611
patch: case Double . $NUMBER$ : case $NUMBER$ :
rank: 344
score: 98.52356635199652
patch: b . to CaMeL Boolean ( ) ;
rank: 344
score: 98.17307826450893
patch: case Boolean . & $STRING$ :
rank: 345
score: 98.84410858154297
patch: case 1 : { if : {
rank: 345
score: 98.83009847005208
patch: case 1 : { $NUMBER$ case $NUMBER$ :
rank: 345
score: 98.8186279296875
patch: { * * { * * * : /
rank: 345
score: 98.780029296875
patch: case $NUMBER$ : return Boolean . MIN _ VALUE ;
rank: 345
score: 98.61019558376736
patch: case $NUMBER$ || $STRING$ . equals ( {
rank: 345
score: 98.52205657958984
patch: to CaMeL Boolean ( $STRING$ ) ;
rank: 345
score: 98.39337836371527
patch: return ! $STRING$ . length ( ) ;
rank: 345
score: 98.16891043526786
patch: case ] ; case $STRING$ :
rank: 346
score: 98.9271748860677
patch: case $NUMBER$ && str . char CaMeL At ( 1 )
rank: 346
score: 98.84378814697266
patch: case 1 : return - $NUMBER$ :
rank: 346
score: 98.81825561523438
patch: { * * { * * { * /
rank: 346
score: 98.77926635742188
patch: case 1 : { case $NUMBER$ : case $NUMBER$ : {
rank: 346
score: 98.60997924804687
patch: default : { { return false ; } }
rank: 346
score: 98.51864963107639
patch: case $NUMBER$ : { . return true ;
rank: 346
score: 98.39148627387152
patch: return get CaMeL Boolean ( str ) ;
rank: 346
score: 98.16809953962054
patch: case null ; case $NUMBER$ :
rank: 347
score: 98.92650349934895
patch: if ( str . length ( ) <= 1 ) {
rank: 347
score: 98.84354248046876
patch: case $NUMBER$ : { case $NUMBER$ : / /
rank: 347
score: 98.82990264892578
patch: case $STRING$ : return case $NUMBER$ :
rank: 347
score: 98.81621551513672
patch: { / * * * { /
rank: 347
score: 98.77909545898437
patch: case $NUMBER$ : case $NUMBER$ : if ( {
rank: 347
score: 98.77538190569196
patch: case $NUMBER$ : += str . char CaMeL At ( 0 ) ;
rank: 347
score: 98.60760498046875
patch: case $NUMBER$ : return boolean CaMeL Value ;
rank: 347
score: 98.51850721571181
patch: case $NUMBER$ : break ; length $NUMBER$ :
rank: 347
score: 98.1680908203125
patch: case $STRING$ : return $STRING$ ;
rank: 348
score: 98.84323120117188
patch: case 1 : if case 1 {
rank: 348
score: 98.81613159179688
patch: * * * { * / /
rank: 348
score: 98.7778789813702
patch: case $NUMBER$ : { case $NUMBER$ : break ; case $NUMBER$ :
rank: 348
score: 98.60723266601562
patch: case Integer . MIN _ VALUE : default :
rank: 348
score: 98.38951958550348
patch: return ! str . length ( ) ;
rank: 348
score: 98.16715785435268
patch: case $STRING$ finally { else {
rank: 349
score: 98.91866048177083
patch: / * if ( str . length ( ) ) {
rank: 349
score: 98.84273681640624
patch: case $NUMBER$ : if case $NUMBER$ : break {
rank: 349
score: 98.82950265066964
patch: case $NUMBER$ : return $NUMBER$ {
rank: 349
score: 98.81595865885417
patch: case $STRING$ : break :
rank: 349
score: 98.77759728064903
patch: case super . to CaMeL Boolean ( ) : return true ;
rank: 349
score: 98.77434539794922
patch: case 1 : return str . char CaMeL At ( $NUMBER$ ) != $STRING$ ;
rank: 349
score: 98.60607299804687
patch: case $NUMBER$ : return false : case $NUMBER$ :
rank: 349
score: 98.1671142578125
patch: case / / * $STRING$ :
rank: 350
score: 98.84225463867188
patch: case 1 : { { { case $NUMBER$ :
rank: 350
score: 98.82944064670139
patch: case 0 : case $NUMBER$ case 0 :
rank: 350
score: 98.8158846768466
patch: { * * * * $NUMBER$ { case $NUMBER$ :
rank: 350
score: 98.77427164713542
patch: start = str . char CaMeL At ( 1 ) ;
rank: 350
score: 98.60560438368056
patch: case $NUMBER$ : return true case $NUMBER$ :
rank: 350
score: 98.50953504774306
patch: case $NUMBER$ : { else return true ;
rank: 350
score: 98.38870578342014
patch: case 1 : { { return true ;
rank: 351
score: 98.91652425130208
patch: if ( str . length ( ) <= 0 ) {
rank: 351
score: 98.84196254185268
patch: case 1 : / / /
rank: 351
score: 98.82942962646484
patch: case case $NUMBER$ : case 1 :
rank: 351
score: 98.81575775146484
patch: { * * * * { {
rank: 351
score: 98.77394104003906
patch: case $NUMBER$ : return str . char CaMeL At ( 0 ) == 0 ;
rank: 351
score: 98.60540161132812
patch: case - $NUMBER$ : return true ; default :
rank: 351
score: 98.50871446397569
patch: case 0 : { return true ; }
rank: 351
score: 98.16636962890625
patch: case null : {
rank: 352
score: 98.84089491102431
patch: case $NUMBER$ { case 1 : break :
rank: 352
score: 98.82881164550781
patch: case $STRING$ ] { case 1 :
rank: 352
score: 98.815673828125
patch: { * * * * { case 1 :
rank: 352
score: 98.77611194957386
patch: case $NUMBER$ : case 1 : case $NUMBER$ : {
rank: 352
score: 98.77392578125
patch: return ( str . char CaMeL At ( 0 ) == $STRING$ )
rank: 352
score: 98.60260009765625
patch: case NULL : return true ; case $NUMBER$ :
rank: 352
score: 98.50825330946181
patch: switch ( key ) { case $NUMBER$ :
rank: 352
score: 98.16404506138393
patch: case / * case $NUMBER$ :
rank: 353
score: 98.9160664876302
patch: case ( str . length ( ) + $NUMBER$ ) :
rank: 353
score: 98.84008178710937
patch: case 1 : case 1 { case 1 :
rank: 353
score: 98.82830810546875
patch: case $NUMBER$ : { case 0 ;
rank: 353
score: 98.8156494140625
patch: { * * * * { / } }
rank: 353
score: 98.77578500600961
patch: case $NUMBER$ : throw new Illegal CaMeL Argument CaMeL Exception { $STRING$
rank: 353
score: 98.7739028930664
patch: case $NUMBER$ : return str . char CaMeL At ( $NUMBER$ ) == str ;
rank: 353
score: 98.60147094726562
patch: default { case $NUMBER$ : return false ; }
rank: 353
score: 98.16104561941964
patch: case $STRING$ { case $STRING$ :
rank: 354
score: 98.83985595703125
patch: case $NUMBER$ : return $NUMBER$ : case 1 :
rank: 354
score: 98.82826063368056
patch: case 1 : { $NUMBER$ * * /
rank: 354
score: 98.81551513671874
patch: { * * * * $NUMBER$ . $NUMBER$ :
rank: 354
score: 98.77550330528847
patch: case $NUMBER$ : { case $NUMBER$ : { return false ; }
rank: 354
score: 98.77365944602273
patch: case $NUMBER$ : return str . char CaMeL At (
rank: 354
score: 98.6014404296875
patch: case $NUMBER$ : return {
rank: 354
score: 98.50771077473958
patch: case Boolean . EMPTY : return true ;
rank: 354
score: 98.38295491536458
patch: case str . to CaMeL String ( )
rank: 354
score: 98.15978131975446
patch: case TYPE { case $NUMBER$ :
rank: 355
score: 98.83980984157986
patch: case $NUMBER$ : if $NUMBER$ : / /
rank: 355
score: 98.8276138305664
patch: case 0 : case $NUMBER$ : }
rank: 355
score: 98.81522369384766
patch: case 1 { return false ; }
rank: 355
score: 98.77372602982955
patch: case $NUMBER$ : return $STRING$ . equals ( { $STRING$
rank: 355
score: 98.60074462890626
patch: case $NUMBER$ : return ( { case $NUMBER$ :
rank: 355
score: 98.3824462890625
patch: case str . append ( $STRING$ ) ;
rank: 355
score: 98.15711321149554
patch: case str ; / * /
rank: 356
score: 98.83975558810764
patch: case $NUMBER$ : break { case 1 {
rank: 356
score: 98.82754516601562
patch: case case 1 : case 0 :
rank: 356
score: 98.81505737304687
patch: { * * * * $NUMBER$ . 0 :
rank: 356
score: 98.77334255642361
patch: case Long . MIN _ VALUE : {
rank: 356
score: 98.60020141601562
patch: case $NUMBER$ : return true ; } else {
rank: 357
score: 98.9052734375
patch: case ( str . length ( ) == $STRING$ )
rank: 357
score: 98.8392822265625
patch: case $NUMBER$ : { $NUMBER$ { case $NUMBER$ :
rank: 357
score: 98.82733832465277
patch: case case 1 : case 1 : {
rank: 357
score: 98.81371307373047
patch: case 1 : break $NUMBER$ : }
rank: 357
score: 98.7732266512784
patch: case 0 : { case $NUMBER$ : case $NUMBER$ :
rank: 357
score: 98.5999755859375
patch: / * { case $NUMBER$ : case $NUMBER$ :
rank: 357
score: 98.37788609095982
patch: case : return false ; }
rank: 357
score: 98.15367431640625
patch: case + $NUMBER$ :
rank: 358
score: 98.83921983506944
patch: case $NUMBER$ : case 1 { * /
rank: 358
score: 98.82733154296875
patch: case $NUMBER$ : { { int $NUMBER$ :
rank: 358
score: 98.81355285644531
patch: case $NUMBER$ { return false ; }
rank: 358
score: 98.77271379743304
patch: case $NUMBER$ : { default :
rank: 358
score: 98.5998046875
patch: case Integer . value CaMeL Of ( $NUMBER$ :
rank: 358
score: 98.50371636284723
patch: case to CaMeL Boolean : return false ;
rank: 358
score: 98.3777847290039
patch: case $NUMBER$ : { return $NUMBER$ ;
rank: 358
score: 98.15302385602679
patch: case String . - $NUMBER$ :
rank: 359
score: 98.82709612165179
patch: case $STRING$ : case $NUMBER$ ;
rank: 359
score: 98.81298828125
patch: case 0 : return false : }
rank: 359
score: 98.50280083550348
patch: case Boolean . 0 : return false ;
rank: 359
score: 98.15219552176339
patch: case ( value 0 ) :
rank: 360
score: 98.90018920898437
patch: case $NUMBER$ * str . length ( ) :
rank: 360
score: 98.82659912109375
patch: case 0 : case $NUMBER$ ? $NUMBER$ :
rank: 360
score: 98.81276245117188
patch: { * * * * { / * /
rank: 360
score: 98.77211692116477
patch: case $NUMBER$ : { case $NUMBER$ : return false ;
rank: 360
score: 98.59949951171875
patch: case NULL : case $NUMBER$ : case $NUMBER$ :
rank: 360
score: 98.15079752604167
patch: case String . null :
rank: 361
score: 98.89891468394886
patch: if ( str . length ( ) 1 ) {
rank: 361
score: 98.82645670572917
patch: case $NUMBER$ : case $NUMBER$ + 1 :
rank: 361
score: 98.81260986328125
patch: { * * * { / } else {
rank: 361
score: 98.77141655815973
patch: case $NUMBER$ : return $NUMBER$ == $NUMBER$ ;
rank: 361
score: 98.77012634277344
patch: return $STRING$ . equals ( str . char CaMeL At ( $NUMBER$ ) ) ;
rank: 361
score: 98.599462890625
patch: case 0 : { return true ; default :
rank: 361
score: 98.49745686848958
patch: if ( value == null ) { {
rank: 361
score: 98.14882986886161
patch: case Boolean . $NUMBER$ : {
rank: 362
score: 98.82639567057292
patch: case $NUMBER$ : case Integer . 0 :
rank: 362
score: 98.81255231584821
patch: * * * * { /
rank: 362
score: 98.77001190185547
patch: case $NUMBER$ : return str . char CaMeL At ( 1 ) & $STRING$ ;
rank: 362
score: 98.5988037109375
patch: case $NUMBER$ || str . { return true ;
rank: 362
score: 98.37130737304688
patch: case Boolean . null :
rank: 362
score: 98.14855085100446
patch: case String . - 1 :
rank: 363
score: 98.83717854817708
patch: case $NUMBER$ : : if case 1 :
rank: 363
score: 98.82563612196181
patch: case 0 : { * case $NUMBER$ :
rank: 363
score: 98.81254577636719
patch: { * * * / } }
rank: 363
score: 98.7697265625
patch: return str . char CaMeL At ( 0 ) . char CaMeL At (
rank: 363
score: 98.59743923611111
patch: case Short . MIN _ VALUE : {
rank: 363
score: 98.49631754557292
patch: case $NUMBER$ : catch ( $STRING$ ) {
rank: 363
score: 98.14269147600446
patch: to CaMeL Boolean = true ;
rank: 364
score: 98.88289018110795
patch: super . to CaMeL Boolean ( str ) ; }
rank: 364
score: 98.8370590209961
patch: case $NUMBER$ + : case $NUMBER$ :
rank: 364
score: 98.825439453125
patch: case $STRING$ : { { case 1 :
rank: 364
score: 98.81178588867188
patch: * * * * * * * * /
rank: 364
score: 98.76942661830357
patch: return str . char CaMeL At ( 0 ] ) == $STRING$ ;
rank: 364
score: 98.5960693359375
patch: case default : return false ; case $NUMBER$ :
rank: 364
score: 98.49574110243056
patch: switch ( 0 ) { case 1 :
rank: 364
score: 98.36854383680556
patch: case $NUMBER$ : str 0 = $STRING$ ;
rank: 365
score: 98.8807040127841
patch: case ( str . length ( ) + 1 )
rank: 365
score: 98.83705647786458
patch: case 1 : if case 1 : :
rank: 365
score: 98.82475450303819
patch: else { case 1 : return $NUMBER$ {
rank: 365
score: 98.81177867542614
patch: { * * * * * * : * /
rank: 365
score: 98.76863403320313
patch: case 1 : { break ; case $NUMBER$ :
rank: 365
score: 98.59603881835938
patch: case NULL : return false ; case $NUMBER$ :
rank: 365
score: 98.13978794642857
patch: case Boolean . - 0 :
rank: 366
score: 98.88006036931819
patch: if ( str . length ( ) == $STRING$ )
rank: 366
score: 98.83681640625
patch: case 1 : { if : case $NUMBER$ :
rank: 366
score: 98.82457733154297
patch: case 1 : { { * /
rank: 366
score: 98.810791015625
patch: * * * * * * { * * /
rank: 366
score: 98.76534016927083
patch: case $NUMBER$ : return $NUMBER$ == $NUMBER$ ; case $NUMBER$ :
rank: 366
score: 98.59549713134766
patch: case $NUMBER$ || str . length :
rank: 366
score: 98.36484103732639
patch: case $NUMBER$ : { { return null ;
rank: 366
score: 98.13722446986607
patch: public String value ( ) {
rank: 367
score: 98.83668212890625
patch: case $NUMBER$ : case $NUMBER$ : if $NUMBER$ :
rank: 367
score: 98.80989074707031
patch: { / * * : * /
rank: 367
score: 98.76835414341518
patch: case $NUMBER$ : += str . char CaMeL At ( $NUMBER$ ) ;
rank: 367
score: 98.59488525390626
patch: case $NUMBER$ : if ( str . trim :
rank: 367
score: 98.48964146205357
patch: case $NUMBER$ : { ; }
rank: 367
score: 98.13687133789062
patch: case str ; $STRING$ :
rank: 368
score: 98.83619384765625
patch: case $NUMBER$ : { return { case 1 :
rank: 368
score: 98.8095947265625
patch: { * * { * * * * /
rank: 368
score: 98.76360529119319
patch: case $NUMBER$ : return false : boolean CaMeL Value ;
rank: 368
score: 98.59452989366319
patch: case $NUMBER$ : return $STRING$ { default :
rank: 368
score: 98.13636997767857
patch: case TYPE { case $STRING$ :
rank: 369
score: 98.83602566189236
patch: case 1 : if $NUMBER$ { break {
rank: 369
score: 98.822998046875
patch: case 0 : { case 1 ;
rank: 369
score: 98.80873325892857
patch: / * * * * /
rank: 369
score: 98.76308371803977
patch: case 1 : { return false ; case $NUMBER$ :
rank: 369
score: 98.59356689453125
patch: case null : return true ; default :
rank: 369
score: 98.48377143012152
patch: case - ( $NUMBER$ / $NUMBER$ ) :
rank: 369
score: 98.36225891113281
patch: return new char [ 0 ] ;
rank: 369
score: 98.13633219401042
patch: case Boolean == false :
rank: 370
score: 98.83597140842014
patch: case $NUMBER$ : { case $NUMBER$ : *
rank: 370
score: 98.8228530883789
patch: case 1 : return case 1 :
rank: 370
score: 98.80850982666016
patch: case $STRING$ : return false : }
rank: 370
score: 98.76804606119792
patch: path = str . char CaMeL At ( 1 ) ;
rank: 370
score: 98.76228471235795
patch: case 1 : { return true ; case $NUMBER$ :
rank: 370
score: 98.59326782226563
patch: case $NUMBER$ : return true { case $NUMBER$ :
rank: 370
score: 98.35887315538194
patch: case $NUMBER$ : switch ( value ) {
rank: 371
score: 98.83553738064236
patch: case $NUMBER$ : case 1 : / /
rank: 371
score: 98.82264539930556
patch: case 0 : case 0 : { {
rank: 371
score: 98.80841827392578
patch: / * * * / * /
rank: 371
score: 98.76190185546875
patch: case 0 : return Boolean . FALSE ; case 1 :
rank: 371
score: 98.47979058159723
patch: case Boolean . XML : return false ;
rank: 371
score: 98.1343994140625
patch: case > 0 :
rank: 372
score: 98.86985473632812
patch: case $NUMBER$ | str . length ( ) :
rank: 372
score: 98.83515167236328
patch: case 1 : { / { /
rank: 372
score: 98.82212999131944
patch: case $NUMBER$ : case 1 case $NUMBER$ :
rank: 372
score: 98.80821533203125
patch: { * { * * * { * /
rank: 372
score: 98.76767403738839
patch: case $NUMBER$ : return str . char CaMeL At ( 0 ) ==
rank: 372
score: 98.76181030273438
patch: case $NUMBER$ : case $NUMBER$ : return : {
rank: 372
score: 98.59026421440973
patch: case - 1 : case - 1 :
rank: 372
score: 98.35702853732639
patch: public int to CaMeL Boolean ( ) {
rank: 372
score: 98.13394601004464
patch: case ) { case ) :
rank: 373
score: 98.83485717773438
patch: case 1 : case $NUMBER$ : * / /
rank: 373
score: 98.82151963975694
patch: case $STRING$ : { { case 0 :
rank: 373
score: 98.80797322591145
patch: { * * { /
rank: 373
score: 98.76118774414063
patch: case $NUMBER$ : { case $NUMBER$ : return :
rank: 373
score: 98.589990234375
patch: case super . to CaMeL Boolean ( $NUMBER$ :
rank: 373
score: 98.13377888997395
patch: case Boolean . false :
rank: 374
score: 98.86752319335938
patch: case $NUMBER$ | str . length ( ) ;
rank: 374
score: 98.83466186523438
patch: case 1 : { case 1 : break {
rank: 374
score: 98.82142469618056
patch: case 1 : case 0 case 0 :
rank: 374
score: 98.80758666992188
patch: case 0 { / * * /
rank: 374
score: 98.76693960336539
patch: xsp 0 = str . char CaMeL At ( 0 ) ;
rank: 374
score: 98.7607421875
patch: case 0 : return false ; case 1 : {
rank: 374
score: 98.47586059570312
patch: case $NUMBER$ : str = $STRING$ ;
rank: 374
score: 98.13158307756696
patch: case ( $STRING$ ) 0 :
rank: 375
score: 98.86627197265625
patch: case ( str . length ( ) ) ;
rank: 375
score: 98.83461216517857
patch: case 1 : if $NUMBER$ {
rank: 375
score: 98.82049560546875
patch: case 0 : case 1 { {
rank: 375
score: 98.80756378173828
patch: / * * { * / /
rank: 375
score: 98.7667987530048
patch: return $STRING$ . char CaMeL At ( 1 ) == $STRING$ ;
rank: 375
score: 98.7606689453125
patch: case $NUMBER$ : return false { case $NUMBER$ :
rank: 375
score: 98.58915405273437
patch: case $NUMBER$ : case $STRING$ : case $STRING$ :
rank: 375
score: 98.47460259331598
patch: case null : { return true ; }
rank: 375
score: 98.13148716517857
patch: case Boolean ; case 1 :
rank: 376
score: 98.83460828993056
patch: case 1 : return $NUMBER$ : { {
rank: 376
score: 98.82017686631944
patch: case 0 : case 0 case 0 :
rank: 376
score: 98.80556640625
patch: { * * * * { * / {
rank: 376
score: 98.76642608642578
patch: case 0 : switch ( str . char CaMeL At ( 1 ) ) {
rank: 376
score: 98.7604248046875
patch: case $NUMBER$ : return false ; case $NUMBER$ {
rank: 376
score: 98.5887451171875
patch: case $NUMBER$ || str . { return false ;
rank: 376
score: 98.13125174386161
patch: case ( $STRING$ ) ; }
rank: 377
score: 98.8649569424716
patch: case ( str . length ( ) + $NUMBER$ )
rank: 377
score: 98.83447265625
patch: case $NUMBER$ : case $NUMBER$ : case $NUMBER$ {
rank: 377
score: 98.81993950737848
patch: case 0 : { { return $NUMBER$ {
rank: 377
score: 98.75960693359374
patch: case 1 : return { { case $NUMBER$ :
rank: 377
score: 98.58769395616319
patch: case Long . $NUMBER$ : case $NUMBER$ :
rank: 377
score: 98.47098117404514
patch: case 1 : continue ; case 1 :
rank: 377
score: 98.350830078125
patch: case $NUMBER$ : { System . finally {
rank: 377
score: 98.128173828125
patch: case ] { case $STRING$ :
rank: 378
score: 98.83433702256944
patch: case $NUMBER$ : { case 1 + :
rank: 378
score: 98.81972830636161
patch: case $NUMBER$ { case $STRING$ :
rank: 378
score: 98.80506134033203
patch: case $STRING$ { return false ; }
rank: 378
score: 98.76640973772321
patch: if ( str . char CaMeL At ( $NUMBER$ ) == $STRING$ )
rank: 378
score: 98.75905354817708
patch: case $NUMBER$ : return Boolean . FALSE ; case 1 :
rank: 378
score: 98.58694893973214
patch: case $NUMBER$ : return false {
rank: 378
score: 98.46998426649306
patch: case $NUMBER$ : { switch ( $STRING$ )
rank: 378
score: 98.12725830078125
patch: case $NUMBER$ : / *
rank: 379
score: 98.8617276278409
patch: case $NUMBER$ : return str . length ( ) ;
rank: 379
score: 98.8342529296875
patch: case 1 : case 1 : / / /
rank: 379
score: 98.81913248697917
patch: case 1 : case 0 : { {
rank: 379
score: 98.7661361694336
patch: case $NUMBER$ : return str . char CaMeL At ( 1 ) == $NUMBER$ ;
rank: 379
score: 98.75892223011364
patch: case $NUMBER$ : { case 1 : case 1 :
rank: 379
score: 98.58663601345486
patch: case Char CaMeL Sequence . $NUMBER$ : {
rank: 379
score: 98.34812418619792
patch: case TRUE : { return false ; }
rank: 379
score: 98.12612915039062
patch: case str == $STRING$ :
rank: 380
score: 98.83359375
patch: case 1 : case $NUMBER$ : / / /
rank: 380
score: 98.81911214192708
patch: case $NUMBER$ ] : { case $NUMBER$ :
rank: 380
score: 98.80424360795455
patch: { * * * * { * { * /
rank: 380
score: 98.7649395282452
patch: i 1 = str . char CaMeL At ( 1 ) ;
rank: 380
score: 98.586376953125
patch: case $NUMBER$ : return true : return true ;
rank: 380
score: 98.34674750434027
patch: case str : { return false ; }
rank: 380
score: 98.12319946289062
patch: try { case $NUMBER$ :
rank: 381
score: 98.86015181107955
patch: case ( str . length ( ) , $STRING$ )
rank: 381
score: 98.83348931206598
patch: case $NUMBER$ : { case $NUMBER$ : System
rank: 381
score: 98.81903754340277
patch: case $NUMBER$ : { { * / {
rank: 381
score: 98.80375162760417
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; {
rank: 381
score: 98.7649154663086
patch: case ( ( char ) str . char CaMeL At ( 0 ) ) {
rank: 381
score: 98.58600531684027
patch: case $NUMBER$ ? true : case $NUMBER$ :
rank: 381
score: 98.4674072265625
patch: switch ( $STRING$ ) { case 0 :
rank: 381
score: 98.34552001953125
patch: case str . equals ( str ) :
rank: 381
score: 98.12119838169643
patch: case / * $STRING$ : {
rank: 382
score: 98.85960804332386
patch: case ( str . length ( ) $NUMBER$ ) :
rank: 382
score: 98.83348388671875
patch: case $NUMBER$ : case 1 : return $NUMBER$ :
rank: 382
score: 98.80317993164063
patch: { * * { * * * { /
rank: 382
score: 98.76459612165179
patch: case $NUMBER$ : { break ;
rank: 382
score: 98.75805053710937
patch: case $STRING$ : return false ; case 1 :
rank: 382
score: 98.58585611979167
patch: default : case $NUMBER$ : return true ;
rank: 382
score: 98.46529134114583
patch: switch ( value . length ( ) )
rank: 382
score: 98.1176045735677
patch: default : return false ;
rank: 383
score: 98.85784357244319
patch: case $NUMBER$ || str . length ( ) $NUMBER$ :
rank: 383
score: 98.83333129882813
patch: case $NUMBER$ : if $NUMBER$ { case $NUMBER$ {
rank: 383
score: 98.8178482055664
patch: case - 1 : case $NUMBER$ {
rank: 383
score: 98.8030517578125
patch: / * * * * * { { /
rank: 383
score: 98.76435852050781
patch: return ( str . char CaMeL At ( 1 ) == $STRING$ ) ; }
rank: 383
score: 98.5851318359375
patch: case - 1 : return { case $NUMBER$ :
rank: 383
score: 98.46528455946181
patch: case $NUMBER$ : break ; case 0 :
rank: 383
score: 98.34064592633929
patch: case : { return false ;
rank: 383
score: 98.11714390345982
patch: case $STRING$ { case $NUMBER$ :
rank: 384
score: 98.83322143554688
patch: case 1 : { / $NUMBER$ {
rank: 384
score: 98.81768798828125
patch: else { case $NUMBER$ : {
rank: 384
score: 98.802490234375
patch: * * * * * { case $NUMBER$ :
rank: 384
score: 98.76366170247395
patch: ret = str . char CaMeL At ( 0 ) ;
rank: 384
score: 98.58478393554688
patch: case 1 : { return true ; default :
rank: 384
score: 98.1171366373698
patch: case Na CaMeL N :
rank: 385
score: 98.83314732142857
patch: case $NUMBER$ : { / /
rank: 385
score: 98.81692843967014
patch: else { case $NUMBER$ : return $NUMBER$ :
rank: 385
score: 98.80232238769531
patch: case 0 { * * { /
rank: 385
score: 98.76336200420673
patch: case $NUMBER$ : return $STRING$ . to CaMeL String ( ) ;
rank: 385
score: 98.5845703125
patch: case $NUMBER$ : return $STRING$ { case $NUMBER$ :
rank: 385
score: 98.11608014787946
patch: case str ; case null :
rank: 386
score: 98.83275010850694
patch: case 1 : return : case $NUMBER$ :
rank: 386
score: 98.81644439697266
patch: case 1 : { { else {
rank: 386
score: 98.80150257457386
patch: { * * * * * * * : /
rank: 386
score: 98.75670166015625
patch: case $NUMBER$ : return default : return false ;
rank: 386
score: 98.58426513671876
patch: case $NUMBER$ : { continue ; case $NUMBER$ :
rank: 386
score: 98.46100531684027
patch: case $NUMBER$ : { break false ; }
rank: 386
score: 98.11539132254464
patch: case ( - 1 ) :
rank: 387
score: 98.83271484375
patch: case 1 : case 1 : * / /
rank: 387
score: 98.81644439697266
patch: case 0 : { case 0 {
rank: 387
score: 98.80132446289062
patch: { * * * * * { / }
rank: 387
score: 98.58307562934027
patch: case Integer . NULL : case $NUMBER$ :
rank: 387
score: 98.32761056082589
patch: case $NUMBER$ | $STRING$ : {
rank: 387
score: 98.11474609375
patch: case String . $STRING$ : {
rank: 388
score: 98.83263481987848
patch: case $NUMBER$ : return $NUMBER$ : break {
rank: 388
score: 98.80119018554687
patch: { * * * * / } else /
rank: 388
score: 98.76104125976562
patch: int length = str . length ( ) ;
rank: 388
score: 98.75640314275569
patch: case $NUMBER$ : case $NUMBER$ : case 1 : {
rank: 388
score: 98.58164469401042
patch: default : return { return true ; }
rank: 389
score: 98.84743923611111
patch: case $NUMBER$ : { return - $NUMBER$ ;
rank: 389
score: 98.81610107421875
patch: case 1 : case $NUMBER$ + 0 {
rank: 389
score: 98.8011474609375
patch: case 0 { return $NUMBER$ ; }
rank: 389
score: 98.76089477539062
patch: result = ( str . char CaMeL At ( 0 ) == $STRING$ ) ;
rank: 389
score: 98.75480513139205
patch: case $STRING$ : case $STRING$ : case $STRING$ : {
rank: 389
score: 98.58131408691406
patch: case Boolean . MIN _ VALUE :
rank: 389
score: 98.45645480685764
patch: case $NUMBER$ : catch ( null ) {
rank: 389
score: 98.31608363560268
patch: case : return true ; }
rank: 389
score: 98.11424037388393
patch: return false ; case 1 :
rank: 390
score: 98.83204481336806
patch: case $NUMBER$ : { case $NUMBER$ { :
rank: 390
score: 98.8154067993164
patch: case $NUMBER$ { case $NUMBER$ : }
rank: 390
score: 98.80010986328125
patch: case 0 + $NUMBER$ :
rank: 390
score: 98.76063889723558
patch: case ( Integer . char CaMeL At ( 0 ) ) :
rank: 390
score: 98.45368787977431
patch: case FALSE : { return false ; }
rank: 390
score: 98.11127580915179
patch: case - } case $NUMBER$ :
rank: 391
score: 98.83766004774306
patch: case $NUMBER$ : { return 0 ; }
rank: 391
score: 98.81499565972223
patch: case 0 : { { if $NUMBER$ :
rank: 391
score: 98.80001831054688
patch: { * * { { * /
rank: 391
score: 98.7605972290039
patch: case $NUMBER$ : return ( str . char CaMeL At ( $NUMBER$ ) == $STRING$
rank: 391
score: 98.57996283637152
patch: case $NUMBER$ : if ( case $NUMBER$ )
rank: 391
score: 98.10888671875
patch: return ( str == null )
rank: 392
score: 98.8147964477539
patch: case 1 : { * / {
rank: 392
score: 98.79903738839286
patch: * * * * / }
rank: 392
score: 98.76058197021484
patch: return ( str . char CaMeL At ( 0 ) == $STRING$ ) ; }
rank: 392
score: 98.75365532769098
patch: case $NUMBER$ : return : case $NUMBER$ ;
rank: 392
score: 98.45122419084821
patch: case null : return true ;
rank: 392
score: 98.30662536621094
patch: case ( Boolean . 0 ) :
rank: 392
score: 98.10691615513393
patch: return false ; case $STRING$ :
rank: 393
score: 98.83053927951389
patch: case $NUMBER$ : { / / break {
rank: 393
score: 98.81476593017578
patch: case $NUMBER$ ] : case $NUMBER$ :
rank: 393
score: 98.79898834228516
patch: / * * ? * * /
rank: 393
score: 98.75929260253906
patch: case 1 || str . char CaMeL At ( 1 ) == $STRING$ ) {
rank: 393
score: 98.57642364501953
patch: case Integer . Na CaMeL N :
rank: 393
score: 98.44866943359375
patch: case 1 : { }
rank: 393
score: 98.30492401123047
patch: return new String ( str ) ;
rank: 393
score: 98.10526820591518
patch: case / * * $STRING$ :
rank: 394
score: 98.83017306857639
patch: case $NUMBER$ : / / * / /
rank: 394
score: 98.81460571289062
patch: case 0 : { case ) :
rank: 394
score: 98.79852294921875
patch: case $STRING$ : / * * {
rank: 394
score: 98.57615831163194
patch: case $NUMBER$ ? ? default : default :
rank: 394
score: 98.44794464111328
patch: case $NUMBER$ : { break false ;
rank: 394
score: 98.10459681919643
patch: case str [ 1 ) :
rank: 395
score: 98.83034939236111
patch: case $NUMBER$ : return ( true ) ;
rank: 395
score: 98.83005777994792
patch: case $NUMBER$ { case $NUMBER$ : * /
rank: 395
score: 98.798486328125
patch: case $STRING$ { / * { * * /
rank: 395
score: 98.75143432617188
patch: case 1 : return { case $NUMBER$ : {
rank: 395
score: 98.57552490234374
patch: case $NUMBER$ || str . : return false ;
rank: 395
score: 98.29520416259766
patch: } to CaMeL Boolean = false ;
rank: 395
score: 98.10415213448661
patch: case $STRING$ : / * /
rank: 396
score: 98.83002387152777
patch: case $NUMBER$ : { return $NUMBER$ : {
rank: 396
score: 98.8297119140625
patch: case $NUMBER$ : { return 0 ;
rank: 396
score: 98.81402587890625
patch: case 0 : { / case $NUMBER$ :
rank: 396
score: 98.79819946289062
patch: { * * * * { { } /
rank: 396
score: 98.75857747395834
patch: return ! str . char CaMeL At ( 0 ) == $STRING$ ; }
rank: 396
score: 98.57503662109374
patch: { case $NUMBER$ : return true ; default :
rank: 396
score: 98.29090118408203
patch: if ( name == null ) {
rank: 396
score: 98.10286458333333
patch: case $NUMBER$ | $STRING$ :
rank: 397
score: 98.82978515625
patch: case $NUMBER$ : { / { case $NUMBER$ :
rank: 397
score: 98.81401231553819
patch: case 1 : case $NUMBER$ case 0 :
rank: 397
score: 98.79814910888672
patch: case 0 { / * { {
rank: 397
score: 98.75830078125
patch: return ( str . char CaMeL At ( 0 ) ==
rank: 397
score: 98.10084751674107
patch: case / / * $NUMBER$ :
rank: 398
score: 98.827392578125
patch: case $NUMBER$ + str . length ( ) :
rank: 398
score: 98.81387765066964
patch: case $STRING$ : case 1 {
rank: 398
score: 98.79772186279297
patch: case $STRING$ + 0 + $NUMBER$ :
rank: 398
score: 98.75816999162946
patch: case $NUMBER$ : return str . char CaMeL At ( $NUMBER$ ) ;
rank: 398
score: 98.74925740559895
patch: case $NUMBER$ : return false ; default : return false ;
rank: 398
score: 98.57367621527777
patch: case null : return false ; default :
rank: 398
score: 98.44335065569196
patch: case $NUMBER$ : return ) ;
rank: 398
score: 98.2872314453125
patch: return new char [ 1 ] ;
rank: 398
score: 98.09773763020833
patch: case str + $NUMBER$ :
rank: 399
score: 98.82952880859375
patch: case $NUMBER$ : case 1 : if $NUMBER$ :
rank: 399
score: 98.82697889539931
patch: case $NUMBER$ : return ( false ) ;
rank: 399
score: 98.81215994698661
patch: case 0 : case 0 ;
rank: 399
score: 98.79743957519531
patch: * * * * { / }
rank: 399
score: 98.75815054086539
patch: ++ str . char CaMeL At ( 0 ) == $STRING$ ;
rank: 399
score: 98.74696858723958
patch: case 1 : break ; case $NUMBER$ : case $NUMBER$ :
rank: 399
score: 98.57315673828126
patch: case $NUMBER$ : break ; { case $NUMBER$ :
rank: 399
score: 98.4420166015625
patch: case $NUMBER$ : switch ( 1 )
rank: 399
score: 98.28466796875
patch: case $NUMBER$ : { throw str ;
rank: 399
score: 98.09647914341518
patch: case ( String ) true :
rank: 400
score: 98.8293212890625
patch: case $NUMBER$ : { if case $NUMBER$ { {
rank: 400
score: 98.82614135742188
patch: > ( str . length ( ) ) ;
rank: 400
score: 98.81096733940973
patch: case $STRING$ : { case - $NUMBER$ {
rank: 400
score: 98.7973388671875
patch: * * * * { / } else {
rank: 400
score: 98.75790405273438
patch: case ( ( char ) str . char CaMeL At ( 1 ) ) {
rank: 400
score: 98.74647105823864
patch: case $NUMBER$ : return true ; case 1 : {
rank: 400
score: 98.57247924804688
patch: case $NUMBER$ || { return true ; default :
rank: 400
score: 98.28319091796875
patch: case >> $NUMBER$ :
rank: 400
score: 98.0963846842448
patch: case str = $STRING$ ;
rank: 401
score: 98.82860107421875
patch: case 1 : return $NUMBER$ : case $NUMBER$ :
rank: 401
score: 98.82609049479167
patch: case $STRING$ : { case $STRING$ : {
rank: 401
score: 98.79670715332031
patch: { { * * * * /
rank: 401
score: 98.74598388671875
patch: case 1 : break ; case $NUMBER$ : {
rank: 401
score: 98.28273315429688
patch: case | $STRING$ :
rank: 401
score: 98.09617614746094
patch: case str ;
rank: 402
score: 98.82859971788194
patch: case $NUMBER$ : return { case 1 {
rank: 402
score: 98.80902777777777
patch: case case 1 : { case 1 :
rank: 402
score: 98.7955078125
patch: case $STRING$ { / * * * * /
rank: 402
score: 98.571826171875
patch: case $STRING$ : { return true ; default :
rank: 402
score: 98.43437957763672
patch: static ) { case $NUMBER$ : {
rank: 402
score: 98.27822440011161
patch: } switch ( $STRING$ ) {
rank: 402
score: 98.09481811523438
patch: case Integer . 0 :
rank: 403
score: 98.82757568359375
patch: case $NUMBER$ : if case $NUMBER$ : /
rank: 403
score: 98.82443237304688
patch: case $NUMBER$ -= str . length ( ) ;
rank: 403
score: 98.80854627821181
patch: case 0 : case 1 : { {
rank: 403
score: 98.79550170898438
patch: / * * * $NUMBER$ { /
rank: 403
score: 98.75651041666667
patch: case ( ( int ) str . char CaMeL At ( 0 ) )
rank: 403
score: 98.5718017578125
patch: case $NUMBER$ : { return : case $NUMBER$ :
rank: 403
score: 98.27791922433036
patch: case : { return true ;
rank: 403
score: 98.09355817522321
patch: case str [ 1 ] ;
rank: 404
score: 98.8272705078125
patch: case $NUMBER$ : case 1 : / {
rank: 404
score: 98.82439575195312
patch: case str . length ( ) / $NUMBER$ :
rank: 404
score: 98.80816650390625
patch: case $NUMBER$ : { { for $NUMBER$ :
rank: 404
score: 98.79548950195313
patch: case $STRING$ { / * * * / }
rank: 404
score: 98.75641632080078
patch: case $NUMBER$ : return str . char CaMeL At ( 1 ) == 1 ;
rank: 404
score: 98.74207652698864
patch: case $NUMBER$ : { return true ; case 1 :
rank: 404
score: 98.57149658203124
patch: case $NUMBER$ || { return false ; default :
rank: 404
score: 98.42884063720703
patch: case ? $STRING$ : return false ;
rank: 404
score: 98.093505859375
patch: case - ; case 1 :
rank: 405
score: 98.82721625434027
patch: case $NUMBER$ : case $NUMBER$ + $NUMBER$ {
rank: 405
score: 98.82420654296875
patch: case $NUMBER$ * str . length ( ) ;
rank: 405
score: 98.80796983506944
patch: case 0 : { $NUMBER$ * * /
rank: 405
score: 98.79528045654297
patch: case $STRING$ { } * * {
rank: 405
score: 98.56739637586806
patch: case $NUMBER$ : if ( str . :
rank: 405
score: 98.27335357666016
patch: case $NUMBER$ ? { case $NUMBER$ :
rank: 405
score: 98.09318324497768
patch: case ( char ) false :
rank: 406
score: 98.82673950195313
patch: case 1 : case $NUMBER$ { case $NUMBER$ :
rank: 406
score: 98.8072280883789
patch: case case $NUMBER$ : case 0 :
rank: 406
score: 98.79474639892578
patch: case 0 { break ; } }
rank: 406
score: 98.41959381103516
patch: case $NUMBER$ : { break ; }
rank: 406
score: 98.27203369140625
patch: case $NUMBER$ : << $NUMBER$ : {
rank: 406
score: 98.08983503069196
patch: case Boolean { case 1 :
rank: 407
score: 98.81724853515625
patch: case $NUMBER$ ( str . length ( ) )
rank: 407
score: 98.80719672309027
patch: else { case $NUMBER$ : case 1 :
rank: 407
score: 98.79469992897727
patch: { * * * * $NUMBER$ { case 1 :
rank: 407
score: 98.75410461425781
patch: case $NUMBER$ : return str . char CaMeL At ( 0 ) == null ;
rank: 407
score: 98.74176788330078
patch: case $NUMBER$ : return true : {
rank: 407
score: 98.27137756347656
patch: length ( ) ; return false ;
rank: 407
score: 98.08877127511161
patch: case ( == $NUMBER$ ) :
rank: 408
score: 98.82592095269098
patch: case $NUMBER$ : { / * { /
rank: 408
score: 98.80679660373264
patch: case $NUMBER$ : { case 1 ; {
rank: 408
score: 98.793701171875
patch: { else { / * * /
rank: 408
score: 98.7520751953125
patch: case $NUMBER$ : return str . char CaMeL At ( 1 ) > $STRING$ ;
rank: 408
score: 98.41631317138672
patch: for ( ; ; ; ) {
rank: 408
score: 98.26502990722656
patch: return ( value == $STRING$ ) ;
rank: 408
score: 98.08831176757812
patch: case & $STRING$ :
rank: 409
score: 98.82576497395833
patch: case $NUMBER$ { case $NUMBER$ { break {
rank: 409
score: 98.80647108289931
patch: case 0 : { case $NUMBER$ ; {
rank: 409
score: 98.79351806640625
patch: / * * { /
rank: 409
score: 98.75155639648438
patch: case 1 : || str . char CaMeL At ( 1 ) == $STRING$ ;
rank: 409
score: 98.74078924005681
patch: case $NUMBER$ : { return false ; case 1 :
rank: 409
score: 98.56448025173611
patch: case super . to CaMeL Boolean ( :
rank: 409
score: 98.26397705078125
patch: } case $NUMBER$ :
rank: 409
score: 98.08817836216518
patch: case TYPE { case 1 :
rank: 410
score: 98.82562255859375
patch: case 1 : return * $NUMBER$ : {
rank: 410
score: 98.80801391601562
patch: case str . length ( ) * $NUMBER$ :
rank: 410
score: 98.80643463134766
patch: case 1 { case 0 : {
rank: 410
score: 98.79315948486328
patch: case $STRING$ : case $STRING$ : }
rank: 410
score: 98.7508544921875
patch: case $NUMBER$ : return str . char CaMeL At ( $NUMBER$ ) == 0 ;
rank: 410
score: 98.740234375
patch: case $NUMBER$ : if ( { return true ) {
rank: 410
score: 98.56432342529297
patch: case Character . MIN _ VALUE :
rank: 410
score: 98.26348876953125
patch: case ? { case $NUMBER$ :
rank: 410
score: 98.08802141462054
patch: case ( char ) 0 :
rank: 411
score: 98.82545301649306
patch: case 1 : if case $NUMBER$ : :
rank: 411
score: 98.80616590711806
patch: case 0 : case $NUMBER$ + 0 {
rank: 411
score: 98.79266357421875
patch: / * * * * { * * /
rank: 411
score: 98.75069173177083
patch: res = str . char CaMeL At ( 1 ) ;
rank: 411
score: 98.73973499644886
patch: case 1 : case 1 : case 1 : {
rank: 411
score: 98.41244942801339
patch: static ) { case $NUMBER$ :
rank: 411
score: 98.25697326660156
patch: return ( str , null ) ;
rank: 411
score: 98.08774820963542
patch: case str ; $NUMBER$ :
rank: 412
score: 98.82520209418402
patch: case 1 : { / - * /
rank: 412
score: 98.80134412977431
patch: case $NUMBER$ : if ( false ) {
rank: 412
score: 98.79263916015626
patch: { * * * / * * * /
rank: 412
score: 98.41085052490234
patch: case $NUMBER$ : break ; $STRING$ :
rank: 412
score: 98.25518798828125
patch: case TRUE : { return false ;
rank: 412
score: 98.08723958333333
patch: case Boolean == true :
rank: 413
score: 98.82511596679687
patch: case 1 : { / / * * /
rank: 413
score: 98.80559430803571
patch: case $NUMBER$ : case 0 ;
rank: 413
score: 98.80118136935764
patch: case ( str . length ( ) ;
rank: 413
score: 98.79163469587054
patch: / * * * { /
rank: 413
score: 98.74908447265625
patch: case ( str . char CaMeL At ( str . length ( ) ) ;
rank: 413
score: 98.73884721235795
patch: case - 1 : return false ; case 1 :
rank: 413
score: 98.56082492404514
patch: case $STRING$ : return Boolean . TRUE ;
rank: 413
score: 98.08670043945312
patch: case MIN _ VALUE :
rank: 414
score: 98.80546061197917
patch: else { case 1 : case $NUMBER$ :
rank: 414
score: 98.80025906032986
patch: case $NUMBER$ : if ( true ) {
rank: 414
score: 98.79124866832386
patch: case $STRING$ : / * * * * * /
rank: 414
score: 98.73844770951705
patch: case $NUMBER$ : return default : return false ; }
rank: 414
score: 98.08566284179688
patch: case String . Boolean :
rank: 415
score: 98.80515543619792
patch: case $NUMBER$ : try { case 0 :
rank: 415
score: 98.79102325439453
patch: / { * * * { /
rank: 415
score: 98.74758911132812
patch: case $NUMBER$ : return str . char CaMeL At ( 0 ) >= $STRING$ ;
rank: 415
score: 98.55921088324652
patch: default : { { return false ; }
rank: 415
score: 98.24833679199219
patch: case | str . length ( )
rank: 415
score: 98.08564976283482
patch: case ( - $NUMBER$ ) :
rank: 416
score: 98.82413940429687
patch: case 1 : { / / * { /
rank: 416
score: 98.80510118272569
patch: case $NUMBER$ case $NUMBER$ : case $NUMBER$ :
rank: 416
score: 98.79083806818181
patch: { * * * * : * * * /
rank: 416
score: 98.7376953125
patch: case 1 : default : return false ; }
rank: 416
score: 98.08540852864583
patch: default : return true ;
rank: 417
score: 98.8228515625
patch: case $NUMBER$ : { { case 1 : {
rank: 417
score: 98.80486382378473
patch: case case 1 : case 0 : {
rank: 417
score: 98.79057312011719
patch: * * * * $NUMBER$ { /
rank: 417
score: 98.74513753255208
patch: return str . char CaMeL At ( 1 ) == $STRING$
rank: 417
score: 98.7357686360677
patch: case $NUMBER$ : break ; default : return false ; }
rank: 417
score: 98.55728488498264
patch: case Double . MIN _ VALUE : {
rank: 417
score: 98.40482330322266
patch: case - $NUMBER$ : return false ;
rank: 417
score: 98.08450753348214
patch: case TRUE : return false ;
rank: 418
score: 98.82223510742188
patch: case $NUMBER$ : case 1 : case $NUMBER$ {
rank: 418
score: 98.8045654296875
patch: case 1 : case Integer . 0 :
rank: 418
score: 98.79500122070313
patch: case $NUMBER$ : { return ( true ) ;
rank: 418
score: 98.79025268554688
patch: case 0 : * * * /
rank: 418
score: 98.7355624112216
patch: case 0 : { case 1 : case $NUMBER$ :
rank: 418
score: 98.55703396267361
patch: case $NUMBER$ . $NUMBER$ : case $NUMBER$ :
rank: 418
score: 98.08438110351562
patch: case Boolean . FALSE :
rank: 419
score: 98.82197265625
patch: case $NUMBER$ : case $NUMBER$ : * { /
rank: 419
score: 98.79144965277777
patch: length = str . length ( ) ;
rank: 419
score: 98.78992919921875
patch: { * * * * * * / {
rank: 419
score: 98.74325561523438
patch: ret = str . char CaMeL At ( 1 ) ;
rank: 419
score: 98.39898681640625
patch: case $NUMBER$ : return null ;
rank: 419
score: 98.24567413330078
patch: return false ;
rank: 419
score: 98.08347574869792
patch: case $STRING$ : { {
rank: 420
score: 98.82161865234374
patch: case 1 : { case 1 : break :
rank: 420
score: 98.80436706542969
patch: case 1 : { $NUMBER$ * {
rank: 420
score: 98.7908935546875
patch: 0 = str . length ( ) ;
rank: 420
score: 98.7898941040039
patch: * * * * * $NUMBER$ :
rank: 420
score: 98.73140092329545
patch: case 1 : return false ; case 1 : {
rank: 420
score: 98.55377875434027
patch: case Integer . TYPE : case $NUMBER$ :
rank: 420
score: 98.24508666992188
patch: } to CaMeL Boolean = true ;
rank: 420
score: 98.0833740234375
patch: case / * 1 :
rank: 421
score: 98.8181396484375
patch: case $NUMBER$ : return $NUMBER$ { case 1 :
rank: 421
score: 98.80422634548611
patch: case 0 : { $NUMBER$ case $NUMBER$ :
rank: 421
score: 98.79010009765625
patch: case $NUMBER$ : { return ( false ) ;
rank: 421
score: 98.78952026367188
patch: { * * * * / * * /
rank: 421
score: 98.73075358072917
patch: case $NUMBER$ : default : return false ;
rank: 421
score: 98.24460856119792
patch: case $NUMBER$ + 1 :
rank: 422
score: 98.81796700613839
patch: case $NUMBER$ + $NUMBER$ : {
rank: 422
score: 98.80320909288194
patch: case $NUMBER$ { * { case $NUMBER$ :
rank: 422
score: 98.78879801432292
patch: * * * { /
rank: 422
score: 98.73030229048295
patch: case $NUMBER$ : return : false ; case $NUMBER$ :
rank: 423
score: 98.81793212890625
patch: case $NUMBER$ : case $NUMBER$ : * * /
rank: 423
score: 98.80309380425348
patch: case $NUMBER$ : case $NUMBER$ | $NUMBER$ :
rank: 423
score: 98.7880126953125
patch: case $STRING$ : { return $NUMBER$ ; } }
rank: 423
score: 98.73682750355114
patch: return str . char CaMeL At ( 1 ) ==
rank: 423
score: 98.72950439453125
patch: case $NUMBER$ : return { { case 1 :
rank: 423
score: 98.55246988932292
patch: case Boolean . TRUE : case $NUMBER$ :
rank: 423
score: 98.39690399169922
patch: case - 1 : return false ;
rank: 423
score: 98.08031354631696
patch: case Boolean . null : {
rank: 424
score: 98.81781616210938
patch: case $NUMBER$ : { if : case 1 :
rank: 424
score: 98.80303955078125
patch: case - $NUMBER$ : case 0 :
rank: 424
score: 98.78765869140625
patch: case $STRING$ { return $NUMBER$ ; }
rank: 424
score: 98.73634847005208
patch: case 1 : break ;
rank: 424
score: 98.72938028971355
patch: case 0 : return Boolean . FALSE ; case $NUMBER$ :
rank: 424
score: 98.55244276258681
patch: case $NUMBER$ : return ! case $NUMBER$ :
rank: 424
score: 98.3949203491211
patch: case $NUMBER$ : . return false ;
rank: 425
score: 98.81492919921875
patch: case 1 : return $NUMBER$ { case $NUMBER$ :
rank: 425
score: 98.80284966362848
patch: case $NUMBER$ : case $STRING$ : { {
rank: 425
score: 98.78758544921875
patch: case $STRING$ { * * * * / }
rank: 425
score: 98.78477172851562
patch: case $NUMBER$ : str . length ( ) ;
rank: 425
score: 98.72920365767045
patch: case 0 : return false ; case $NUMBER$ : {
rank: 425
score: 98.55219862196181
patch: case $NUMBER$ : System . case $NUMBER$ :
rank: 425
score: 98.393798828125
patch: case $NUMBER$ : switch = $STRING$ ;
rank: 425
score: 98.2376480102539
patch: case : switch ( name ) {
rank: 425
score: 98.0740966796875
patch: case MAX _ VALUE :
rank: 426
score: 98.8145751953125
patch: case $NUMBER$ : if : {
rank: 426
score: 98.80259874131944
patch: catch case $STRING$ : { case $NUMBER$ :
rank: 426
score: 98.7874526977539
patch: { else { * * * /
rank: 426
score: 98.78199114118304
patch: case $NUMBER$ : return $NUMBER$ ;
rank: 426
score: 98.54923502604167
patch: case $NUMBER$ : return { default : {
rank: 426
score: 98.39290945870536
patch: case $NUMBER$ : continue ; }
rank: 426
score: 98.07253592354911
patch: case MIN _ VALUE 0 :
rank: 427
score: 98.81441650390624
patch: case 1 : case 1 { case $NUMBER$ :
rank: 427
score: 98.80235460069444
patch: case 0 : case $NUMBER$ + 0 :
rank: 427
score: 98.78739013671876
patch: * * * { * / } else {
rank: 427
score: 98.77503662109375
patch: } if ( str . length ( ) )
rank: 427
score: 98.39149693080357
patch: case $NUMBER$ : { System .
rank: 427
score: 98.23532104492188
patch: case str . trim ( ) ;
rank: 427
score: 98.07192557198661
patch: case ? $STRING$ : $STRING$ ;
rank: 428
score: 98.81436157226562
patch: case 1 : if case $NUMBER$ {
rank: 428
score: 98.78727583451705
patch: case $STRING$ : * * * * * * /
rank: 428
score: 98.72903103298611
patch: case $NUMBER$ : return str == $STRING$ ;
rank: 428
score: 98.72586398654514
patch: case $NUMBER$ : do { case $NUMBER$ :
rank: 428
score: 98.54734971788194
patch: case $NUMBER$ : break ; default : {
rank: 428
score: 98.39061482747395
patch: case $NUMBER$ / $NUMBER$ :
rank: 428
score: 98.07134137834821
patch: case $NUMBER$ : return $STRING$ ;
rank: 429
score: 98.81331089564732
patch: case 1 : if $NUMBER$ :
rank: 429
score: 98.7872647372159
patch: { * * * * * * { * /
rank: 429
score: 98.728515625
patch: case String . value CaMeL Of ( $STRING$ ) :
rank: 429
score: 98.725830078125
patch: case $NUMBER$ : { case $NUMBER$ : return : {
rank: 429
score: 98.38994489397321
patch: to CaMeL Boolean return false ;
rank: 429
score: 98.07096644810268
patch: return true ; case 1 :
rank: 430
score: 98.80189514160156
patch: case $NUMBER$ : case case $NUMBER$ :
rank: 430
score: 98.78711954752605
patch: case 0 { break :
rank: 430
score: 98.72792746803977
patch: return str . char CaMeL At ( 0 ) ==
rank: 430
score: 98.07095336914062
patch: case $STRING$ | $STRING$ :
rank: 431
score: 98.81300048828125
patch: case $NUMBER$ : case 1 : * { /
rank: 431
score: 98.80184936523438
patch: case $NUMBER$ : / case $NUMBER$ :
rank: 431
score: 98.78653564453126
patch: { * / * * * { * /
rank: 431
score: 98.76807996961806
patch: case $NUMBER$ : return ; case $NUMBER$ :
rank: 431
score: 98.72417658025569
patch: case $NUMBER$ : { case $NUMBER$ : return { {
rank: 431
score: 98.38810221354167
patch: case $NUMBER$ : $STRING$ :
rank: 431
score: 98.226318359375
patch: ch [ 0 ] = $STRING$ ;
rank: 431
score: 98.07090541294643
patch: / * case $NUMBER$ : {
rank: 432
score: 98.81126098632812
patch: case $NUMBER$ : if $NUMBER$ : * / /
rank: 432
score: 98.80129665798611
patch: case $NUMBER$ : { { if : {
rank: 432
score: 98.78651428222656
patch: case $STRING$ : return $NUMBER$ : {
rank: 432
score: 98.76741536458333
patch: case $NUMBER$ : { return 1 ; }
rank: 432
score: 98.7216463955966
patch: case ( str . length ( ) ) : {
rank: 432
score: 98.54596625434027
patch: case $NUMBER$ || { return true ; }
rank: 432
score: 98.38622283935547
patch: case $NUMBER$ : ) return false ;
rank: 432
score: 98.22445678710938
patch: case $NUMBER$ : System . else {
rank: 432
score: 98.06859479631696
patch: case str 0 = $STRING$ ;
rank: 433
score: 98.81064453125
patch: case $NUMBER$ { case $NUMBER$ : case 1 :
rank: 433
score: 98.8011474609375
patch: case $NUMBER$ : { * * * /
rank: 433
score: 98.78643035888672
patch: { * * * * $NUMBER$ ;
rank: 433
score: 98.54498291015625
patch: case - 1 : return case $NUMBER$ :
rank: 433
score: 98.38592529296875
patch: case $NUMBER$ : / * $NUMBER$ /
rank: 433
score: 98.220458984375
patch: case str : { return false ;
rank: 433
score: 98.06507364908855
patch: case $STRING$ : / *
rank: 434
score: 98.81041463216145
patch: case $NUMBER$ : * {
rank: 434
score: 98.80106608072917
patch: case 0 : case Integer . 0 :
rank: 434
score: 98.78592936197917
patch: * * { * /
rank: 434
score: 98.72197931463069
patch: case $NUMBER$ : { case $NUMBER$ : return true ;
rank: 434
score: 98.70991346571181
patch: if ( str . length ( ) ==
rank: 434
score: 98.54305691189236
patch: case $NUMBER$ : { return : default :
rank: 434
score: 98.38357543945312
patch: case - ( $NUMBER$ ) : {
rank: 434
score: 98.06488037109375
patch: case / * - $NUMBER$ :
rank: 435
score: 98.80088975694444
patch: case 1 : { { String $NUMBER$ :
rank: 435
score: 98.78587757457386
patch: { * * * * * $NUMBER$ . 0 :
rank: 435
score: 98.76513061523437
patch: case $NUMBER$ : { } case $NUMBER$ : {
rank: 435
score: 98.721435546875
patch: case $NUMBER$ : continue ; case $NUMBER$ : case $NUMBER$ :
rank: 435
score: 98.70840793185764
patch: return $STRING$ . equals ( str ) ;
rank: 435
score: 98.38115692138672
patch: case ? $STRING$ : return true ;
rank: 435
score: 98.21827043805804
patch: case switch ( $STRING$ ) {
rank: 436
score: 98.81018829345703
patch: case $NUMBER$ : case 1 : :
rank: 436
score: 98.7855453491211
patch: { * * : * * /
rank: 436
score: 98.53879801432292
patch: case $NUMBER$ : return value case $NUMBER$ :
rank: 436
score: 98.37833658854167
patch: case $STRING$ : { }
rank: 436
score: 98.2180404663086
patch: return new char [ $NUMBER$ ] ;
rank: 436
score: 98.06252615792411
patch: case ) { case null :
rank: 437
score: 98.78466796875
patch: * * * * { } /
rank: 437
score: 98.72076416015625
patch: case $NUMBER$ : { break ; case 1 :
rank: 437
score: 98.21319580078125
patch: case $NUMBER$ : { return str ;
rank: 437
score: 98.06173706054688
patch: case String . 1 :
rank: 438
score: 98.80987548828125
patch: case 1 : if $NUMBER$ : / / /
rank: 438
score: 98.80000305175781
patch: case 0 : case $NUMBER$ : :
rank: 438
score: 98.78457641601562
patch: * * * * * { { { /
rank: 438
score: 98.72062174479167
patch: case 1 : return Boolean . FALSE ; case 1 :
rank: 438
score: 98.53756713867188
patch: case $NUMBER$ : return $STRING$ . :
rank: 438
score: 98.21198272705078
patch: case TRUE : { return true ;
rank: 438
score: 98.06173270089286
patch: case ( char ) $NUMBER$ :
rank: 439
score: 98.80982971191406
patch: case $NUMBER$ : { * / /
rank: 439
score: 98.78414154052734
patch: case 1 : return false : }
rank: 439
score: 98.72001509232955
patch: case $STRING$ : { case $NUMBER$ : case $NUMBER$ :
rank: 439
score: 98.53538004557292
patch: case - 1 : return { default :
rank: 439
score: 98.06155831473214
patch: case Integer . - 1 :
rank: 440
score: 98.80973510742187
patch: case $NUMBER$ : if $NUMBER$ : / * /
rank: 440
score: 98.79983520507812
patch: case $NUMBER$ { { case 0 :
rank: 440
score: 98.78354714133523
patch: * * * * * * / case $NUMBER$ :
rank: 440
score: 98.70134887695312
patch: int 0 = str . length ( ) ;
rank: 440
score: 98.53529866536458
patch: case Integer . $NUMBER$ : case 1 :
rank: 440
score: 98.37051391601562
patch: case $NUMBER$ : return false ; ;
rank: 440
score: 98.06095377604167
patch: case Boolean . Double :
rank: 441
score: 98.80924224853516
patch: case 1 + { case $NUMBER$ :
rank: 441
score: 98.79901801215277
patch: case $NUMBER$ : try { if $NUMBER$ :
rank: 441
score: 98.78315734863281
patch: case 0 : break $NUMBER$ : }
rank: 441
score: 98.71912638346355
patch: case $NUMBER$ : return true ; default : return false ;
rank: 441
score: 98.70097212357955
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ;
rank: 441
score: 98.53519015842014
patch: case $STRING$ : return { case $STRING$ :
rank: 441
score: 98.36983489990234
patch: case $NUMBER$ : break ; $NUMBER$ :
rank: 441
score: 98.21058654785156
patch: case ( Boolean . 1 ) :
rank: 441
score: 98.06013706752232
patch: / * $STRING$ . * /
rank: 442
score: 98.80838012695312
patch: case 1 : { $NUMBER$ { case $NUMBER$ :
rank: 442
score: 98.79891204833984
patch: case 0 : { { * /
rank: 442
score: 98.782763671875
patch: * * * * * { * / }
rank: 442
score: 98.75565338134766
patch: case $NUMBER$ : return - $NUMBER$ ;
rank: 442
score: 98.7186767578125
patch: case $NUMBER$ : continue ; case $NUMBER$ : {
rank: 442
score: 98.3689193725586
patch: case $NUMBER$ : { System . else
rank: 442
score: 98.20932006835938
patch: <= str . length ( ) ;
rank: 442
score: 98.06003243582589
patch: match 0 ( $STRING$ ) ;
rank: 443
score: 98.80657958984375
patch: case 1 : if case 1 : break {
rank: 443
score: 98.79805501302083
patch: case $NUMBER$ { case - 1 : {
rank: 443
score: 98.69459117542614
patch: case str . to CaMeL String ( ) : {
rank: 443
score: 98.3680419921875
patch: case $NUMBER$ : { System . }
rank: 443
score: 98.05976213727679
patch: case $NUMBER$ finally { else {
rank: 444
score: 98.79737854003906
patch: case 1 : case $NUMBER$ : :
rank: 444
score: 98.78251647949219
patch: { * * * / } /
rank: 444
score: 98.75235595703126
patch: case $NUMBER$ : { str = $STRING$ ; }
rank: 444
score: 98.7167635830966
patch: { case 1 : return false ; case $NUMBER$ :
rank: 444
score: 98.69017333984375
patch: case ( str . length ( ) ] )
rank: 444
score: 98.53431532118056
patch: case EMPTY : return false ; default :
rank: 444
score: 98.20191192626953
patch: to CaMeL Boolean ( value ) ;
rank: 444
score: 98.05882917131696
patch: case else { case $NUMBER$ :
rank: 445
score: 98.8064208984375
patch: case 1 : { if { case 1 :
rank: 445
score: 98.79737684461806
patch: case 1 : { case 0 : }
rank: 445
score: 98.78251139322917
patch: case $NUMBER$ + 0 :
rank: 445
score: 98.68545532226562
patch: return true ; case $NUMBER$ : {
rank: 445
score: 98.53199598524306
patch: case - 1 : continue ; default :
rank: 445
score: 98.36482238769531
patch: case $NUMBER$ : { break $NUMBER$ ;
rank: 445
score: 98.20164489746094
patch: return true ;
rank: 445
score: 98.05733816964286
patch: case decode ( $STRING$ ) :
rank: 446
score: 98.80570220947266
patch: case 1 : { / * /
rank: 446
score: 98.79727935791016
patch: case 0 : { { else {
rank: 446
score: 98.78233337402344
patch: * * * ? * * /
rank: 446
score: 98.74924723307292
patch: case $NUMBER$ : return Boolean . false ;
rank: 446
score: 98.68330522017045
patch: case $NUMBER$ : return ( str == null ) ;
rank: 446
score: 98.53178575303819
patch: default : case $STRING$ : case $NUMBER$ :
rank: 446
score: 98.19929504394531
patch: case : switch ( value ) {
rank: 446
score: 98.05731201171875
patch: case / * * $NUMBER$ :
rank: 447
score: 98.80567169189453
patch: case $NUMBER$ : if $NUMBER$ : /
rank: 447
score: 98.78232828776042
patch: case 1 + 0 :
rank: 447
score: 98.74884796142578
patch: case str . length ( ) {
rank: 447
score: 98.53114149305556
patch: case Short . NULL : case $NUMBER$ :
rank: 447
score: 98.363134765625
patch: case $NUMBER$ : ;
rank: 447
score: 98.1988525390625
patch: length ( ) ; return true ;
rank: 447
score: 98.0570068359375
patch: case Boolean . TRUE : {
rank: 448
score: 98.80494995117188
patch: case $NUMBER$ { case 1 : case 1 :
rank: 448
score: 98.78131103515625
patch: case $STRING$ : / * { * * /
rank: 448
score: 98.71554565429688
patch: case $NUMBER$ : return true : case $NUMBER$ :
rank: 448
score: 98.53058539496527
patch: case $NUMBER$ : return false { default :
rank: 448
score: 98.19632720947266
patch: case String CaMeL Buffer . $STRING$ :
rank: 448
score: 98.0566914876302
patch: case Integer . $NUMBER$ :
rank: 449
score: 98.80431518554687
patch: case $NUMBER$ : { / / case $NUMBER$ :
rank: 449
score: 98.79696994357639
patch: case 0 : case 1 case $NUMBER$ :
rank: 449
score: 98.7809326171875
patch: { * * * * case { * /
rank: 449
score: 98.7151387532552
patch: case 1 : { public String to CaMeL String ( )
rank: 449
score: 98.6817294034091
patch: } else switch ( str . length ( ) )
rank: 449
score: 98.05663190569196
patch: case / - $NUMBER$ : {
rank: 450
score: 98.80386352539062
patch: case 1 : return $NUMBER$ : case 1 :
rank: 450
score: 98.79694475446429
patch: / * { case $NUMBER$ :
rank: 450
score: 98.77850341796875
patch: { * { * * * { { /
rank: 450
score: 98.6803866299716
patch: case $NUMBER$ : return ( str == $STRING$ ) ;
rank: 450
score: 98.53009033203125
patch: case $NUMBER$ : return new { default :
rank: 450
score: 98.19187927246094
patch: case 1 : { return null ;
rank: 450
score: 98.05589076450893
patch: return true ; case $STRING$ :
rank: 451
score: 98.80311279296875
patch: case $NUMBER$ : case 1 : * * /
rank: 451
score: 98.79667154947917
patch: case $STRING$ : case 1 + $NUMBER$ :
rank: 451
score: 98.77818298339844
patch: case 1 { return $NUMBER$ ; }
rank: 451
score: 98.67611083984374
patch: int 1 = str . length ( ) ;
rank: 451
score: 98.52921840122768
patch: case $NUMBER$ : return $STRING$ :
rank: 451
score: 98.35497174944196
patch: to CaMeL Boolean return true ;
rank: 451
score: 98.05574253627232
patch: case / * == $STRING$ :
rank: 452
score: 98.80261993408203
patch: case $NUMBER$ : case - 1 {
rank: 452
score: 98.79661051432292
patch: case 1 ] { case $NUMBER$ : {
rank: 452
score: 98.7772445678711
patch: / * : * * * /
rank: 452
score: 98.52900041852679
patch: default : return case $NUMBER$ :
rank: 452
score: 98.19068254743304
patch: case static : return false ;
rank: 452
score: 98.05272216796875
patch: case << $NUMBER$ :
rank: 453
score: 98.8025634765625
patch: case $NUMBER$ : if $NUMBER$ { / / /
rank: 453
score: 98.79622105189732
patch: case 1 { case 0 :
rank: 453
score: 98.77719948508523
patch: { * * * * * * * * /
rank: 453
score: 98.71300591362848
patch: case $NUMBER$ : continue { case $NUMBER$ :
rank: 453
score: 98.35360717773438
patch: parse CaMeL Boolean ( str ) ;
rank: 453
score: 98.05247279575893
patch: case ) { / * /
rank: 454
score: 98.80213623046875
patch: case $NUMBER$ : { { { case 1 :
rank: 454
score: 98.79572211371527
patch: case 1 : { { case $NUMBER$ ;
rank: 454
score: 98.77666015625
patch: * * * * * * : * /
rank: 454
score: 98.73667689732143
patch: case $NUMBER$ : return 0 ;
rank: 454
score: 98.52763536241319
patch: case $NUMBER$ | $NUMBER$ : case $NUMBER$ :
rank: 454
score: 98.05202811104911
patch: case decode ( str ) :
rank: 455
score: 98.801806640625
patch: case $NUMBER$ : { if case 1 { {
rank: 455
score: 98.79492865668402
patch: case case $NUMBER$ : case 1 : {
rank: 455
score: 98.77621459960938
patch: * * * * $NUMBER$ ; }
rank: 455
score: 98.7123135653409
patch: case 0 : return true ; case 1 : {
rank: 455
score: 98.52724202473958
patch: case Character . $NUMBER$ : case $STRING$ :
rank: 455
score: 98.35344587053571
patch: case Boolean . $STRING$ : {
rank: 455
score: 98.18726348876953
patch: case SIZE : { return false ;
rank: 455
score: 98.05111258370536
patch: case chars [ 0 ] :
rank: 456
score: 98.80103149414063
patch: case 1 : { case 1 : { {
rank: 456
score: 98.79490831163194
patch: case $NUMBER$ : { case $STRING$ : }
rank: 456
score: 98.77574462890625
patch: { * * { * { * * /
rank: 456
score: 98.71145629882812
patch: case $NUMBER$ : return true ; case $NUMBER$ {
rank: 456
score: 98.66117640904018
patch: break ; case $NUMBER$ : {
rank: 456
score: 98.52650282118056
patch: case $NUMBER$ : return false case $NUMBER$ :
rank: 456
score: 98.35282897949219
patch: case $NUMBER$ : { return FALSE ;
rank: 456
score: 98.04816545758929
patch: case SIZE { case $NUMBER$ :
rank: 457
score: 98.80082397460937
patch: case $NUMBER$ : { / / / * /
rank: 457
score: 98.79475911458333
patch: case 1 : { { return $NUMBER$ :
rank: 457
score: 98.7755615234375
patch: { * { * * * * : /
rank: 457
score: 98.71070556640625
patch: case $STRING$ : return true ; case 1 :
rank: 457
score: 98.52598063151042
patch: case ? case $NUMBER$ : case $NUMBER$ :
rank: 457
score: 98.35125732421875
patch: to CaMeL Boolean ( null ) ;
rank: 457
score: 98.04800415039062
patch: case / case $NUMBER$ :
rank: 458
score: 98.80015563964844
patch: case 1 : { / { *
rank: 458
score: 98.77527465820313
patch: / * * * * * * { /
rank: 458
score: 98.72774505615234
patch: case $NUMBER$ : { return 1 ;
rank: 458
score: 98.6532211303711
patch: ++ str . length ( ) ;
rank: 458
score: 98.5256576538086
patch: case $NUMBER$ : if ( str :
rank: 458
score: 98.04774693080357
patch: / $NUMBER$ . case $NUMBER$ :
rank: 459
score: 98.79993286132813
patch: case $NUMBER$ : case $NUMBER$ : break $NUMBER$ :
rank: 459
score: 98.79388427734375
patch: else { case $NUMBER$ + case 1 :
rank: 459
score: 98.77474365234374
patch: { * * * : * * { /
rank: 459
score: 98.65068223741319
patch: pos = str . length ( ) ;
rank: 459
score: 98.52496337890625
patch: case $NUMBER$ : { return true :
rank: 459
score: 98.18299102783203
patch: case 1 : { return ) ;
rank: 459
score: 98.04733712332589
patch: String str 0 = str ;
rank: 460
score: 98.79869384765625
patch: case 1 : case 1 : / * /
rank: 460
score: 98.79387749565973
patch: case $STRING$ : case $NUMBER$ ? $NUMBER$ :
rank: 460
score: 98.77464294433594
patch: case $NUMBER$ : break $NUMBER$ : }
rank: 460
score: 98.72138129340277
patch: if ( str . length ( ) )
rank: 460
score: 98.70780436197917
patch: case $NUMBER$ : case $NUMBER$ : break ;
rank: 460
score: 98.65040418836806
patch: return to CaMeL String ( str ) ;
rank: 460
score: 98.04722377232143
patch: case ) return false ; }
rank: 461
score: 98.7938003540039
patch: case $NUMBER$ : case $NUMBER$ : *
rank: 461
score: 98.77451171875
patch: / * * * * { { * /
rank: 461
score: 98.65020751953125
patch: return false ; case $NUMBER$ : {
rank: 461
score: 98.52298990885417
patch: case $NUMBER$ : return $NUMBER$ != 0 ;
rank: 461
score: 98.34209442138672
patch: case - ( $STRING$ ) : {
rank: 461
score: 98.04617745535714
patch: case TRUE : return true ;
rank: 462
score: 98.79733276367188
patch: case 1 : { case $NUMBER$ : * /
rank: 462
score: 98.79377577039931
patch: case 1 : { { return $NUMBER$ ;
rank: 462
score: 98.77423095703125
patch: { * { * * { * * /
rank: 462
score: 98.71952311197917
patch: case $NUMBER$ : return Boolean . true ;
rank: 462
score: 98.52184380425348
patch: case State . $NUMBER$ : case $NUMBER$ :
rank: 462
score: 98.17923990885417
patch: case : case $NUMBER$ :
rank: 462
score: 98.04576619466145
patch: case / * $NUMBER$ /
rank: 463
score: 98.79674072265625
patch: case 1 : case 1 : case 1 {
rank: 463
score: 98.79374864366319
patch: case $NUMBER$ : case 0 { { {
rank: 463
score: 98.77418518066406
patch: case 0 { / * { /
rank: 463
score: 98.52083333333333
patch: case $NUMBER$ : return ( { default :
rank: 463
score: 98.17641775948661
patch: case $NUMBER$ : { try {
rank: 463
score: 98.04356166294643
patch: case str ; length $NUMBER$ :
rank: 464
score: 98.79663696289063
patch: case $NUMBER$ : / * / case $NUMBER$ :
rank: 464
score: 98.793701171875
patch: case 1 : { else { {
rank: 464
score: 98.70398627387152
patch: case 0 : continue ; case 1 :
rank: 464
score: 98.52027045355902
patch: case super . to CaMeL Boolean ( {
rank: 464
score: 98.17526245117188
patch: case String CaMeL Buffer . $NUMBER$ :
rank: 464
score: 98.04224853515625
patch: case str == null
rank: 465
score: 98.79596557617188
patch: case $NUMBER$ : case $NUMBER$ : if $NUMBER$ {
rank: 465
score: 98.79328748914931
patch: case 1 : case Integer . $NUMBER$ :
rank: 465
score: 98.772998046875
patch: * * * { * * * * /
rank: 465
score: 98.70392400568181
patch: case $NUMBER$ : { case $NUMBER$ : return true :
rank: 465
score: 98.70044623480902
patch: if ( str . length ( ) {
rank: 465
score: 98.64176635742187
patch: length ( str . length ( ) ) {
rank: 465
score: 98.51966010199652
patch: case EMPTY : return true ; default :
rank: 465
score: 98.17256927490234
patch: if ( $STRING$ == $STRING$ ) {
rank: 465
score: 98.0406982421875
patch: case false : {
rank: 466
score: 98.79585266113281
patch: case $NUMBER$ : { if { /
rank: 466
score: 98.79324001736111
patch: else { case $NUMBER$ : break $NUMBER$ {
rank: 466
score: 98.77236938476562
patch: case $STRING$ { / * * {
rank: 466
score: 98.70362684461806
patch: case $NUMBER$ : { if ( { {
rank: 466
score: 98.64077419704861
patch: len = str . length ( ) ;
rank: 466
score: 98.51960584852431
patch: case $NUMBER$ : return true : default :
rank: 466
score: 98.33629608154297
patch: if ( to CaMeL Boolean ) {
rank: 466
score: 98.17159271240234
patch: case str : { return true ;
rank: 466
score: 98.04044342041016
patch: case true :
rank: 467
score: 98.79566650390625
patch: case $NUMBER$ : case 1 : if $NUMBER$ {
rank: 467
score: 98.79303741455078
patch: case 0 : case $NUMBER$ ; {
rank: 467
score: 98.77236328125
patch: / * * * * { * { /
rank: 467
score: 98.70270330255681
patch: case $NUMBER$ : return - $NUMBER$ ; case $NUMBER$ :
rank: 467
score: 98.63963012695312
patch: len ( str . length ( ) ) {
rank: 467
score: 98.51173400878906
patch: case $NUMBER$ : return str . :
rank: 467
score: 98.33515167236328
patch: log . log ( $STRING$ ) ;
rank: 467
score: 98.17125447591145
patch: case $NUMBER$ + $STRING$ :
rank: 467
score: 98.03779820033482
patch: case Integer . - $NUMBER$ :
rank: 468
score: 98.79447428385417
patch: case 1 : { :
rank: 468
score: 98.79251437717014
patch: else { case $NUMBER$ : return $NUMBER$ ;
rank: 468
score: 98.77227783203125
patch: { * * * ? * /
rank: 468
score: 98.70011393229167
patch: case $NUMBER$ : return false ; default : break ; }
rank: 468
score: 98.69204372829861
patch: case $NUMBER$ finally { return false ; }
rank: 468
score: 98.03724888392857
patch: } else { case $NUMBER$ :
rank: 469
score: 98.79431915283203
patch: case $NUMBER$ : { if : /
rank: 469
score: 98.79195827907986
patch: case 1 : case 0 { $NUMBER$ :
rank: 469
score: 98.77195739746094
patch: * * * * { } }
rank: 469
score: 98.6997958096591
patch: case $NUMBER$ : { break ; case $NUMBER$ : {
rank: 469
score: 98.50563049316406
patch: case $NUMBER$ : return true ; :
rank: 469
score: 98.33022635323661
patch: case $NUMBER$ : throws $STRING$ :
rank: 469
score: 98.03669084821429
patch: case ? Boolean . $NUMBER$ :
rank: 470
score: 98.79398193359376
patch: case 1 : break : { case $NUMBER$ :
rank: 470
score: 98.79143524169922
patch: case 0 { case - $NUMBER$ :
rank: 470
score: 98.77188110351562
patch: { * * * * * case { /
rank: 470
score: 98.69933064778645
patch: case $NUMBER$ : return $NUMBER$ & $NUMBER$ ; case $NUMBER$ :
rank: 470
score: 98.50479888916016
patch: case $NUMBER$ : if ( str {
rank: 470
score: 98.33010864257812
patch: return ( str == null ) ;
rank: 470
score: 98.03529866536458
patch: case Boolean . Number :
rank: 471
score: 98.79359436035156
patch: case $NUMBER$ : / / * /
rank: 471
score: 98.79109700520833
patch: case 1 : { { case $STRING$ :
rank: 471
score: 98.77176666259766
patch: * * * * * { {
rank: 471
score: 98.50164794921875
patch: case - 1 { case $NUMBER$ :
rank: 471
score: 98.32849731445313
patch: case 1 : }
rank: 471
score: 98.0316670735677
patch: case ? - $NUMBER$ :
rank: 472
score: 98.79305419921874
patch: case $NUMBER$ : break $NUMBER$ { case 1 :
rank: 472
score: 98.79066975911458
patch: case case $NUMBER$ : { case 1 :
rank: 472
score: 98.77174595424107
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return $NUMBER$ ;
rank: 472
score: 98.50120544433594
patch: case Float . MIN _ VALUE :
rank: 472
score: 98.325927734375
patch: case $NUMBER$ : return ) ; }
rank: 472
score: 98.16267613002232
patch: return new String ( ) ;
rank: 472
score: 98.03157261439732
patch: case ] { case 1 :
rank: 473
score: 98.79296875
patch: case 1 : case $NUMBER$ : / * /
rank: 473
score: 98.79002380371094
patch: case 0 : { * / {
rank: 473
score: 98.77109985351562
patch: * * * * { { * * /
rank: 473
score: 98.69734700520833
patch: case $NUMBER$ : throws Interrupted CaMeL Exception {
rank: 473
score: 98.32585144042969
patch: case $NUMBER$ : / * $STRING$ /
rank: 473
score: 98.1593246459961
patch: to CaMeL Boolean 0 = false ;
rank: 473
score: 98.03014119466145
patch: case $STRING$ : ; }
rank: 474
score: 98.79250662667411
patch: case $NUMBER$ : / $NUMBER$ {
rank: 474
score: 98.78861490885417
patch: case 0 { else { case $NUMBER$ :
rank: 474
score: 98.77105712890625
patch: { * * * / if {
rank: 474
score: 98.69608764648437
patch: case $NUMBER$ : break 1 ; case $NUMBER$ :
rank: 474
score: 98.623291015625
patch: case ( $NUMBER$ ) : return true ;
rank: 474
score: 98.49836730957031
patch: case 1 : return { default :
rank: 474
score: 98.32451782226562
patch: case $NUMBER$ : :
rank: 474
score: 98.15636335100446
patch: case str : return false ;
rank: 474
score: 98.0296630859375
patch: case str ; == null
rank: 475
score: 98.79179382324219
patch: case 1 + : case $NUMBER$ :
rank: 475
score: 98.78860812717014
patch: case $NUMBER$ { case $NUMBER$ case $NUMBER$ :
rank: 475
score: 98.77098388671875
patch: * * * * * case { * /
rank: 475
score: 98.695703125
patch: case $NUMBER$ : return : { case $NUMBER$ :
rank: 475
score: 98.623291015625
patch: buffer [ str . length ( ) ] ;
rank: 475
score: 98.49629211425781
patch: case $NUMBER$ || { case $NUMBER$ :
rank: 475
score: 98.02875366210938
patch: case << 1 :
rank: 476
score: 98.79090118408203
patch: case $NUMBER$ { if case 1 :
rank: 476
score: 98.77090454101562
patch: case $STRING$ { { * * /
rank: 476
score: 98.62327357700893
patch: case ( 0 ) : {
rank: 476
score: 98.49552154541016
patch: case default : return true ; }
rank: 476
score: 98.32298932756696
patch: case FALSE : return false ;
rank: 476
score: 98.0270751953125
patch: case > $NUMBER$ :
rank: 477
score: 98.79065704345703
patch: case 1 { { case 1 :
rank: 477
score: 98.78764125279018
patch: case 1 : case 0 ;
rank: 477
score: 98.77033996582031
patch: * * * * / if {
rank: 477
score: 98.69544135199652
patch: case 0 : continue ; case $NUMBER$ :
rank: 477
score: 98.66843668619792
patch: case $NUMBER$ : { return false ; ;
rank: 477
score: 98.61928982204861
patch: start = str . length ( ) ;
rank: 477
score: 98.49468994140625
patch: case $NUMBER$ ) { case $NUMBER$ :
rank: 477
score: 98.0263163248698
patch: case String . TYPE :
rank: 478
score: 98.79010009765625
patch: case 1 : / / / /
rank: 478
score: 98.78743489583333
patch: case 0 ] { case $NUMBER$ : {
rank: 478
score: 98.76974487304688
patch: { * * * * { / } else
rank: 478
score: 98.6947733561198
patch: case $NUMBER$ : { return false ; case $NUMBER$ : {
rank: 478
score: 98.61839599609375
patch: case switch ( str . length ( ) )
rank: 478
score: 98.48857770647321
patch: case $NUMBER$ : if ( :
rank: 478
score: 98.3228530883789
patch: case $NUMBER$ : / * $STRING$ :
rank: 478
score: 98.14063262939453
patch: case : {
rank: 478
score: 98.02614920479911
patch: case $NUMBER$ = $STRING$ ; }
rank: 479
score: 98.78997802734375
patch: case $NUMBER$ : / * / /
rank: 479
score: 98.76969909667969
patch: case $NUMBER$ : return false : }
rank: 479
score: 98.6946309407552
patch: case $NUMBER$ : return { default : return false ; }
rank: 479
score: 98.66361236572266
patch: case ( str . length ( )
rank: 479
score: 98.48599243164062
patch: case $NUMBER$ || { return false ;
rank: 479
score: 98.32247924804688
patch: case $NUMBER$ : { break true ;
rank: 479
score: 98.025390625
patch: case FALSE : {
rank: 480
score: 98.78569030761719
patch: case 1 : { return $NUMBER$ :
rank: 480
score: 98.76956939697266
patch: { * * * $NUMBER$ { /
rank: 480
score: 98.6943692294034
patch: case 1 : return true ; case 1 : {
rank: 480
score: 98.61302185058594
patch: case . length ( ) : {
rank: 480
score: 98.024658203125
patch: case Exception . $STRING$ :
rank: 481
score: 98.78931884765625
patch: case 1 : break $NUMBER$ { case $NUMBER$ :
rank: 481
score: 98.78516303168402
patch: case 1 : { { * * /
rank: 481
score: 98.76856231689453
patch: { * / * * { /
rank: 481
score: 98.69422607421875
patch: case $NUMBER$ : case $NUMBER$ : return false :
rank: 481
score: 98.02388509114583
patch: case Integer . $STRING$ :
rank: 482
score: 98.78515625
patch: case 0 : { case 1 {
rank: 482
score: 98.76776123046875
patch: { * * * * / case $NUMBER$ :
rank: 482
score: 98.69395141601562
patch: case $NUMBER$ : { case $NUMBER$ : break ;
rank: 482
score: 98.63550821940105
patch: case $NUMBER$ * $NUMBER$ :
rank: 482
score: 98.61153738839286
patch: case . length ( ) :
rank: 482
score: 98.47996520996094
patch: case $NUMBER$ || str . trim :
rank: 482
score: 98.3197021484375
patch: case $NUMBER$ : ) {
rank: 482
score: 98.02278355189732
patch: case str + $STRING$ : {
rank: 483
score: 98.7885233561198
patch: case 1 : / /
rank: 483
score: 98.78470865885417
patch: case $STRING$ : { { if $NUMBER$ {
rank: 483
score: 98.76744842529297
patch: / * * / * * /
rank: 483
score: 98.63312639508929
patch: case $NUMBER$ : return 1 ;
rank: 483
score: 98.61104329427083
patch: case ( $NUMBER$ ) {
rank: 483
score: 98.47844696044922
patch: case 1 : break ; default :
rank: 483
score: 98.31936645507812
patch: case - $NUMBER$ : return true ;
rank: 483
score: 98.02154541015625
patch: case ( null ) :
rank: 484
score: 98.78823852539062
patch: case 1 : case $NUMBER$ : case 1 {
rank: 484
score: 98.78395298549107
patch: case $NUMBER$ : { $NUMBER$ {
rank: 484
score: 98.76640319824219
patch: case $STRING$ { } * * /
rank: 484
score: 98.60841200086806
patch: case $NUMBER$ : return str == null ;
rank: 484
score: 98.47834014892578
patch: case $STRING$ : return { default :
rank: 484
score: 98.31900460379464
patch: case $NUMBER$ : { } }
rank: 484
score: 98.1289571126302
patch: case $NUMBER$ : continue ;
rank: 484
score: 98.02151489257812
patch: case $NUMBER$ : ; }
rank: 485
score: 98.78743286132813
patch: case $NUMBER$ : case $NUMBER$ { * / /
rank: 485
score: 98.7838134765625
patch: case 0 : { $NUMBER$ * {
rank: 485
score: 98.76620483398438
patch: case $STRING$ { { * * * * /
rank: 485
score: 98.6928202311198
patch: case $NUMBER$ : case $NUMBER$ : { return false ; }
rank: 485
score: 98.6077372233073
patch: case 0 : break ;
rank: 485
score: 98.4774169921875
patch: case - 1 : return true ;
rank: 485
score: 98.12624686104911
patch: case ( byte ) $STRING$ :
rank: 485
score: 98.01885375976562
patch: case + 0 :
rank: 486
score: 98.78723754882813
patch: case $NUMBER$ : if $NUMBER$ { / * /
rank: 486
score: 98.76581682477679
patch: * * * { * /
rank: 486
score: 98.47529602050781
patch: case - $NUMBER$ : case $STRING$ :
rank: 486
score: 98.31733921595982
patch: case $NUMBER$ : { ) ;
rank: 486
score: 98.01847330729167
patch: case Boolean . Boolean :
rank: 487
score: 98.78683471679688
patch: case $NUMBER$ : { * / case $NUMBER$ :
rank: 487
score: 98.78219265407986
patch: case 0 : case $NUMBER$ { { {
rank: 487
score: 98.765625
patch: * * * * * { { * * /
rank: 487
score: 98.69151722301136
patch: case $NUMBER$ : return true : boolean CaMeL Value ;
rank: 487
score: 98.606591796875
patch: case $NUMBER$ : to CaMeL String ( ) ;
rank: 487
score: 98.47405133928571
patch: case $NUMBER$ || case $NUMBER$ :
rank: 487
score: 98.1251220703125
patch: case static : return true ;
rank: 487
score: 98.01784842354911
patch: case $NUMBER$ : = $STRING$ ;
rank: 488
score: 98.78588256835937
patch: case $NUMBER$ : case 1 : break $NUMBER$ :
rank: 488
score: 98.78209092881944
patch: case $NUMBER$ : else { if $NUMBER$ :
rank: 488
score: 98.76554107666016
patch: * * { / * * /
rank: 488
score: 98.60593872070312
patch: substring ( str . length ( ) ) ;
rank: 488
score: 98.47338104248047
patch: case $NUMBER$ | { case $NUMBER$ :
rank: 488
score: 98.0168965657552
patch: case length ( ) :
rank: 489
score: 98.7857894897461
patch: case $NUMBER$ {
rank: 489
score: 98.78120252821181
patch: case $NUMBER$ : } case $NUMBER$ : {
rank: 489
score: 98.76553344726562
patch: case 1 : * * * /
rank: 489
score: 98.69124755859374
patch: case $NUMBER$ : if ( { return true )
rank: 489
score: 98.31614685058594
patch: case $NUMBER$ : ) return true ;
rank: 489
score: 98.12158203125
patch: return Boolean . null ;
rank: 489
score: 98.01619466145833
patch: case ; case 1 :
rank: 490
score: 98.78566284179688
patch: case $NUMBER$ : { if case $NUMBER$ : /
rank: 490
score: 98.78059387207031
patch: case - 1 : case 0 {
rank: 490
score: 98.76535034179688
patch: { * * * * { { / /
rank: 490
score: 98.6007568359375
patch: case $NUMBER$ : return ( str . last CaMeL
rank: 490
score: 98.3155517578125
patch: case 1 : { ) {
rank: 490
score: 98.01308186848958
patch: case str + 1 :
rank: 491
score: 98.78550415039062
patch: case 1 : if $NUMBER$ { case $NUMBER$ {
rank: 491
score: 98.78019883897569
patch: case $NUMBER$ : { case 0 { {
rank: 491
score: 98.76520538330078
patch: * * * * ? * /
rank: 491
score: 98.60462951660156
patch: case $NUMBER$ : { return ; }
rank: 491
score: 98.60065307617188
patch: case str . length ( ) : break ;
rank: 491
score: 98.46736145019531
patch: case Double . POSITIVE _ INFINITY :
rank: 491
score: 98.31452178955078
patch: case * ) { case $NUMBER$ :
rank: 491
score: 98.01165771484375
patch: case Integer . 1 :
rank: 492
score: 98.78525216238839
patch: case 1 : / * /
rank: 492
score: 98.77956136067708
patch: case 0 { case $NUMBER$ : { {
rank: 492
score: 98.76426003196023
patch: * * * * * * { case $NUMBER$ :
rank: 492
score: 98.6895980834961
patch: case $NUMBER$ : { / * {
rank: 492
score: 98.60424041748047
patch: -- str . length ( ) ;
rank: 492
score: 98.46524810791016
patch: case Math . Na CaMeL N :
rank: 492
score: 98.00785319010417
patch: case String . TRUE :
rank: 493
score: 98.78508758544922
patch: case $NUMBER$ : { { { {
rank: 493
score: 98.77935112847223
patch: { case 1 : { case $NUMBER$ :
rank: 493
score: 98.76390991210937
patch: { * * * * { / } /
rank: 493
score: 98.60276794433594
patch: case $NUMBER$ : return return false ;
rank: 493
score: 98.59365505642361
patch: case ( $NUMBER$ ) : return false ;
rank: 493
score: 98.11237444196429
patch: } switch ( name ) {
rank: 493
score: 98.00731404622395
patch: case Boolean . TYPE :
rank: 494
score: 98.78475952148438
patch: case $NUMBER$ : if $NUMBER$ { * / /
rank: 494
score: 98.77927652994792
patch: case 1 : case $NUMBER$ + $NUMBER$ {
rank: 494
score: 98.76368408203125
patch: { * * * * * { / /
rank: 494
score: 98.5875244140625
patch: case ( ( char ) $STRING$ ) :
rank: 494
score: 98.31146240234375
patch: to CaMeL Boolean return false ; }
rank: 494
score: 98.1092529296875
patch: return false ; }
rank: 495
score: 98.78469848632812
patch: case 1 : { / { {
rank: 495
score: 98.77924346923828
patch: case 1 ] ; case $NUMBER$ :
rank: 495
score: 98.76331676136364
patch: { * * * * * / case 1 :
rank: 495
score: 98.59788004557292
patch: case $NUMBER$ : return ;
rank: 495
score: 98.46241978236607
patch: case - 1 : default :
rank: 495
score: 98.104541015625
patch: } return false ;
rank: 495
score: 98.00701032366071
patch: case : { case 1 :
rank: 496
score: 98.78455200195313
patch: case 1 : { case $NUMBER$ : / /
rank: 496
score: 98.77903529575893
patch: case $NUMBER$ : case 1 ;
rank: 496
score: 98.76329803466797
patch: } { * * * * /
rank: 496
score: 98.68589089133523
patch: case 0 : return true ; case $NUMBER$ : {
rank: 496
score: 98.59580775669643
patch: case $STRING$ : case $STRING$ ;
rank: 496
score: 98.46222686767578
patch: case $STRING$ : break ; default :
rank: 496
score: 98.30595397949219
patch: switch ( String . $STRING$ ) {
rank: 496
score: 98.00588553292411
patch: public String str = str ;
rank: 497
score: 98.78406372070313
patch: case 1 : if case $NUMBER$ : break {
rank: 497
score: 98.77900041852679
patch: case $NUMBER$ : case false :
rank: 497
score: 98.76324462890625
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { {
rank: 497
score: 98.46198381696429
patch: case $NUMBER$ : return { {
rank: 497
score: 98.00559779575893
patch: case ( == 1 ) :
rank: 498
score: 98.78392333984375
patch: case $NUMBER$ : { break { case $NUMBER$ :
rank: 498
score: 98.7784194946289
patch: case 0 : case case $NUMBER$ :
rank: 498
score: 98.76319885253906
patch: case $NUMBER$ { case 1 : }
rank: 498
score: 98.68555797230114
patch: case 0 : { case 1 : case 1 :
rank: 498
score: 98.57677001953125
patch: case ( str . length ( ) && str
rank: 498
score: 98.00481305803571
patch: case $STRING$ : return null ;
rank: 499
score: 98.78376770019531
patch: case - 1 : / / /
rank: 499
score: 98.77813720703125
patch: case 0 : { { return $NUMBER$ ;
rank: 499
score: 98.76309204101562
patch: { * * * * * { $NUMBER$ /
rank: 499
score: 98.68391418457031
patch: case $NUMBER$ : { default : {
rank: 499
score: 98.5908203125
patch: case $NUMBER$ : { return ;
rank: 499
score: 98.57630072699652
patch: max = str . length ( ) ;
rank: 499
score: 98.46117401123047
patch: case 0 : return { default :
rank: 499
score: 98.30192565917969
patch: case $NUMBER$ : switch ( char CaMeL
rank: 500
score: 98.77803548177083
patch: case 1 : { case - 1 {
rank: 500
score: 98.76285552978516
patch: case $STRING$ + case 1 : {
rank: 500
score: 98.4607162475586
patch: case $NUMBER$ || str . substring :
rank: 500
score: 98.09266880580357
patch: case str : return true ;
rank: 500
score: 98.00260707310268
patch: case / * - $NUMBER$ /
rank: 501
score: 98.76189630681819
patch: { * * * * { { { * /
rank: 501
score: 98.68206176757812
patch: case 1 : { case $NUMBER$ : return {
rank: 501
score: 98.58370971679688
patch: != str . length ( ) ;
rank: 501
score: 98.45960235595703
patch: case - 1 : return default :
rank: 501
score: 98.29651896158855
patch: case + $NUMBER$ : {
rank: 502
score: 98.78143310546875
patch: case $NUMBER$ + { case 1 :
rank: 502
score: 98.77754974365234
patch: case 0 { case - 1 :
rank: 502
score: 98.76165216619319
patch: { * * * : * * * * /
rank: 502
score: 98.68123779296874
patch: case 1 : return : ; case $NUMBER$ :
rank: 502
score: 98.57294311523438
patch: } if ( str . length ( ) ==
rank: 502
score: 98.4595718383789
patch: case $NUMBER$ : { return true {
rank: 502
score: 98.29638671875
patch: case $NUMBER$ : break false ; }
rank: 502
score: 98.09047154017857
patch: case - : return false ;
rank: 503
score: 98.78139038085938
patch: case $NUMBER$ : { if case $NUMBER$ : :
rank: 503
score: 98.7772445678711
patch: case 1 : { * * /
rank: 503
score: 98.76116943359375
patch: / * * * * : /
rank: 503
score: 98.57521275111607
patch: case $NUMBER$ : { for (
rank: 503
score: 98.571240234375
patch: int ( str . length ( ) ) {
rank: 503
score: 98.45932006835938
patch: case $NUMBER$ : return false ; :
rank: 503
score: 98.29283905029297
patch: case null : { return false ;
rank: 503
score: 98.00013950892857
patch: case / - 1 : {
rank: 504
score: 98.78116455078126
patch: case 1 : case 1 : return $NUMBER$ :
rank: 504
score: 98.77713351779514
patch: case 0 : { case - 1 {
rank: 504
score: 98.76116943359375
patch: { / * * { * /
rank: 504
score: 98.57098388671875
patch: case $NUMBER$ : to CaMeL Char = $STRING$ ;
rank: 504
score: 98.45706939697266
patch: case ? ? ? ? * /
rank: 504
score: 98.28860473632812
patch: case $NUMBER$ : { ) ; }
rank: 504
score: 97.99688110351562
patch: case extends $STRING$ :
rank: 505
score: 98.78101196289063
patch: case $NUMBER$ : break { case $NUMBER$ : {
rank: 505
score: 98.77699110243056
patch: case $NUMBER$ { case 1 : { {
rank: 505
score: 98.76105291193181
patch: { * * * * * * $NUMBER$ : /
rank: 505
score: 98.4538803100586
patch: case Boolean . MAX _ VALUE :
rank: 505
score: 98.28632354736328
patch: case 1 : switch ( $STRING$ )
rank: 505
score: 97.99572143554687
patch: case ? $NUMBER$ :
rank: 506
score: 98.78097534179688
patch: case 1 : break {
rank: 506
score: 98.76102447509766
patch: * * * * { / /
rank: 506
score: 98.57241821289062
patch: >= str . length ( ) ;
rank: 506
score: 98.56927490234375
patch: return $STRING$ . length ( ) == 1 ;
rank: 506
score: 98.45040893554688
patch: case $NUMBER$ : case $NUMBER$ $NUMBER$ :
rank: 506
score: 98.08447265625
patch: switch ( $STRING$ ) {
rank: 506
score: 97.99560546875
patch: case names [ 1 ] :
rank: 507
score: 98.78095703125
patch: case $NUMBER$ : { case 1 : * /
rank: 507
score: 98.77579074435764
patch: case case $NUMBER$ : case 0 : {
rank: 507
score: 98.76041412353516
patch: case 0 : / * * /
rank: 507
score: 98.67913263494319
patch: case $NUMBER$ : { case $NUMBER$ : if ( {
rank: 507
score: 98.56672668457031
patch: case $NUMBER$ : return return true ;
rank: 507
score: 98.44872283935547
patch: case Long . Na CaMeL N :
rank: 507
score: 98.28506033761161
patch: case $NUMBER$ : return FALSE ;
rank: 507
score: 97.99413045247395
patch: case str ; } }
rank: 508
score: 98.7807373046875
patch: case 1 : { return { case 1 :
rank: 508
score: 98.76002502441406
patch: / * * : * / }
rank: 508
score: 98.5667236328125
patch: return str . length ( ) == $NUMBER$ ;
rank: 508
score: 98.44686889648438
patch: { case 1 : case $NUMBER$ :
rank: 508
score: 98.2836685180664
patch: case $NUMBER$ : return true ; ;
rank: 508
score: 97.9936014811198
patch: case $STRING$ : ) {
rank: 509
score: 98.78072684151786
patch: case 1 : { / {
rank: 509
score: 98.77439371744792
patch: case $NUMBER$ : { { case 0 {
rank: 509
score: 98.75865936279297
patch: / * { / / * /
rank: 509
score: 98.56658325195312
patch: case . length ( ) : return true ;
rank: 509
score: 98.44550323486328
patch: case Short . Na CaMeL N :
rank: 509
score: 98.28255462646484
patch: to CaMeL Boolean return true ; }
rank: 509
score: 98.07831682477679
patch: return Boolean . null ; }
rank: 509
score: 97.99174281529018
patch: case this . str 0 :
rank: 510
score: 98.78071899414063
patch: case $NUMBER$ : return * { case $NUMBER$ :
rank: 510
score: 98.77427673339844
patch: case 0 : { if $NUMBER$ :
rank: 510
score: 98.75817108154297
patch: { * * { / * /
rank: 510
score: 98.67738037109375
patch: case 1 { case $NUMBER$ : case $NUMBER$ :
rank: 510
score: 98.56978607177734
patch: case $STRING$ ;
rank: 510
score: 98.44419860839844
patch: case $NUMBER$ : { return default :
rank: 510
score: 98.07630920410156
patch: case SIZE :
rank: 510
score: 97.9888203938802
patch: case ( $STRING$ ) ;
rank: 511
score: 98.78048706054688
patch: case $NUMBER$ : case $NUMBER$ : System
rank: 511
score: 98.77367485894098
patch: case 0 : { case $NUMBER$ ; }
rank: 511
score: 98.75801086425781
patch: case 0 { case 0 : }
rank: 511
score: 98.67594770951705
patch: case 1 : if ( { return false ) {
rank: 511
score: 98.56637573242188
patch: case $NUMBER$ : { return ( ;
rank: 511
score: 98.27613321940105
patch: case $NUMBER$ : $NUMBER$ :
rank: 511
score: 97.988037109375
patch: case String . Double :
rank: 512
score: 98.77882080078125
patch: case $NUMBER$ : { if : = $NUMBER$ :
rank: 512
score: 98.77251519097223
patch: case $STRING$ : case $NUMBER$ case 0 :
rank: 512
score: 98.75719451904297
patch: { * * * { } /
rank: 512
score: 98.67497114701705
patch: case $NUMBER$ : return $STRING$ . equals ( $STRING$ :
rank: 512
score: 98.4364242553711
patch: case $NUMBER$ || str . char {
rank: 512
score: 98.272705078125
patch: case default : return false ;
rank: 512
score: 97.9871826171875
patch: case ~ $NUMBER$ :
rank: 513
score: 98.7723617553711
patch: case $NUMBER$ : case - $NUMBER$ {
rank: 513
score: 98.75689697265625
patch: case 1 { break ; } }
rank: 513
score: 98.43370819091797
patch: case $NUMBER$ : { } else {
rank: 513
score: 98.06825764973958
patch: return Boolean . 0 ;
rank: 514
score: 98.77814331054688
patch: case $NUMBER$ : if $NUMBER$ { case 1 {
rank: 514
score: 98.7720718383789
patch: case 0 ] : case $NUMBER$ :
rank: 514
score: 98.75666155133929
patch: / * * : * /
rank: 514
score: 98.67131042480469
patch: case $NUMBER$ : if ( { {
rank: 514
score: 98.5641098022461
patch: case $STRING$ : { case $STRING$ ;
rank: 514
score: 98.43331146240234
patch: case - 1 : return true :
rank: 514
score: 98.06454467773438
patch: case $NUMBER$ << $NUMBER$ :
rank: 514
score: 97.9867655436198
patch: case ? - 1 :
rank: 515
score: 98.77204047309027
patch: case 1 : case || case $NUMBER$ :
rank: 515
score: 98.75511169433594
patch: case $NUMBER$ { return $NUMBER$ ; }
rank: 515
score: 98.6708651455966
patch: case $NUMBER$ : return { { case $NUMBER$ : {
rank: 515
score: 97.98490397135417
patch: case String . false :
rank: 516
score: 98.77121988932292
patch: case $NUMBER$ : else { if $NUMBER$ {
rank: 516
score: 98.75486755371094
patch: case $STRING$ + { * * /
rank: 516
score: 98.5626220703125
patch: > str . length ( ) ;
rank: 516
score: 98.42765045166016
patch: case $NUMBER$ : return default : {
rank: 516
score: 98.06265869140626
patch: return true ; }
rank: 516
score: 97.98282296316964
patch: case 1 = $STRING$ ; }
rank: 517
score: 98.77682495117188
patch: case 1 : break :
rank: 517
score: 98.77088758680556
patch: case $NUMBER$ : case $NUMBER$ + $STRING$ :
rank: 517
score: 98.75379289899554
patch: case $STRING$ + case 1 :
rank: 517
score: 98.56231689453125
patch: case str . length ( ) ?
rank: 517
score: 98.2646993001302
patch: case 1 : { ;
rank: 517
score: 98.06238664899554
patch: case $NUMBER$ : { do {
rank: 518
score: 98.77664184570312
patch: case 1 : case $NUMBER$ : return $NUMBER$ :
rank: 518
score: 98.77072482638889
patch: case $STRING$ : case - $NUMBER$ : {
rank: 518
score: 98.75351784446023
patch: { * * * * * / case 0 :
rank: 518
score: 98.05660574776786
patch: return Boolean . Boolean ; }
rank: 518
score: 97.98012869698661
patch: case $STRING$ = $STRING$ ; }
rank: 519
score: 98.77030436197917
patch: case $NUMBER$ : return { char $NUMBER$ :
rank: 519
score: 98.75310516357422
patch: case 0 : return null : {
rank: 519
score: 98.67005072699652
patch: case $NUMBER$ : { return false ; {
rank: 519
score: 98.55937194824219
patch: } else { case $NUMBER$ : {
rank: 519
score: 98.26056780133929
patch: case 1 : break ; }
rank: 519
score: 97.97985229492187
patch: { case $NUMBER$ :
rank: 520
score: 98.77618408203125
patch: case $NUMBER$ : case $NUMBER$ { return $NUMBER$ :
rank: 520
score: 98.76998562282986
patch: case 0 : { { * * /
rank: 520
score: 98.7528963955966
patch: { * * * * * $NUMBER$ . $NUMBER$ :
rank: 520
score: 98.5430908203125
patch: sb . append ( $STRING$ ) ;
rank: 520
score: 97.978759765625
patch: case Boolean . true :
rank: 521
score: 98.76997884114583
patch: case 0 : case 0 { $NUMBER$ :
rank: 521
score: 98.75274658203125
patch: case 1 { case 1 : }
rank: 521
score: 98.66920055042614
patch: case $NUMBER$ : { case $NUMBER$ : return default :
rank: 521
score: 98.42389678955078
patch: case $NUMBER$ || str . char :
rank: 521
score: 98.04692731584821
patch: case >> : return false ;
rank: 521
score: 97.97621459960938
patch: case / 1 :
rank: 522
score: 98.77531127929687
patch: case $NUMBER$ { case 1 : case $NUMBER$ :
rank: 522
score: 98.76974148220486
patch: case 0 : { { case $NUMBER$ ;
rank: 522
score: 98.42259724934895
patch: case $NUMBER$ : return :
rank: 522
score: 97.97428385416667
patch: case / >> $NUMBER$ :
rank: 523
score: 98.77529296875
patch: case $NUMBER$ : break : { case 1 :
rank: 523
score: 98.7686767578125
patch: else { case 1 : }
rank: 523
score: 98.66871337890625
patch: case 1 : break false ; case $NUMBER$ :
rank: 523
score: 98.2551981608073
patch: case ? $STRING$ : {
rank: 523
score: 97.9730936686198
patch: case Short . $STRING$ :
rank: 524
score: 98.77498168945313
patch: case 1 : return $NUMBER$ { case 1 :
rank: 524
score: 98.76854790581598
patch: case 1 : { { * / {
rank: 524
score: 98.75227573939732
patch: / * * * / }
rank: 524
score: 98.6676358309659
patch: case 1 : case $NUMBER$ : case 1 : {
rank: 524
score: 98.54083251953125
patch: case $NUMBER$ : true ;
rank: 524
score: 98.25320870535714
patch: case $NUMBER$ : { { }
rank: 525
score: 98.77361297607422
patch: case $NUMBER$ : String case $NUMBER$ :
rank: 525
score: 98.76819610595703
patch: case $NUMBER$ ] : case 1 :
rank: 525
score: 98.75215148925781
patch: case $STRING$ { * * { /
rank: 525
score: 98.54722377232143
patch: case $NUMBER$ * $NUMBER$ : {
rank: 525
score: 98.53579711914062
patch: case ( 1 ) {
rank: 525
score: 98.03755950927734
patch: case str :
rank: 526
score: 98.7736104329427
patch: case 1 : * /
rank: 526
score: 98.76802571614583
patch: case 0 : case || case $NUMBER$ :
rank: 526
score: 98.74793590198864
patch: * * * * * * { { * /
rank: 526
score: 98.41797637939453
patch: case $NUMBER$ || { return true ;
rank: 526
score: 98.0361836751302
patch: } { case $NUMBER$ :
rank: 526
score: 97.97226388113839
patch: case ) return true ; }
rank: 527
score: 98.77281494140625
patch: case $NUMBER$ : case $NUMBER$ : break $NUMBER$ {
rank: 527
score: 98.74592729048295
patch: case $STRING$ { / * { * * * /
rank: 527
score: 98.66689453125
patch: case $STRING$ : return $NUMBER$ ; case $STRING$ :
rank: 527
score: 98.54418182373047
patch: case $STRING$ : { return $NUMBER$ ;
rank: 527
score: 98.53236219618056
patch: / * str . length ( ) ;
rank: 527
score: 98.25040980747768
patch: case FALSE : return true ;
rank: 528
score: 98.77274322509766
patch: case $NUMBER$ : case $NUMBER$ : /
rank: 528
score: 98.76720319475446
patch: case 1 : { * /
rank: 528
score: 98.74400745738636
patch: { * * * * { * * { /
rank: 528
score: 98.66585693359374
patch: case $NUMBER$ : return TRUE ; case $NUMBER$ :
rank: 528
score: 98.54302978515625
patch: 0 : { case $NUMBER$ : {
rank: 528
score: 98.03094482421875
patch: return Boolean . Boolean ;
rank: 528
score: 97.97050258091518
patch: case $STRING$ : == $STRING$ ;
rank: 529
score: 98.77132742745536
patch: case 1 + $NUMBER$ : {
rank: 529
score: 98.766845703125
patch: case 0 : if case $NUMBER$ :
rank: 529
score: 98.74294211647727
patch: case $STRING$ : / * { * * * /
rank: 529
score: 98.66520385742187
patch: case $NUMBER$ : { default : return false ;
rank: 529
score: 98.24727376302083
patch: case $NUMBER$ . $NUMBER$ :
rank: 529
score: 97.96804373604911
patch: case || null == $STRING$ ;
rank: 530
score: 98.76632351345486
patch: case 1 : { { int $NUMBER$ :
rank: 530
score: 98.74143288352273
patch: * * { * * * * : * /
rank: 530
score: 98.66379616477273
patch: case $NUMBER$ : { if ( case $NUMBER$ ) {
rank: 530
score: 98.52711995442708
patch: case ( str . length ( ) ==
rank: 530
score: 98.02721150716145
patch: return Boolean . false ;
rank: 530
score: 97.96584647042411
patch: case Boolean . false : {
rank: 531
score: 98.77076416015625
patch: case $NUMBER$ : case $NUMBER$ : break { /
rank: 531
score: 98.74046630859375
patch: * * { /
rank: 531
score: 98.53512573242188
patch: $NUMBER$ : { case $NUMBER$ : {
rank: 531
score: 98.4161376953125
patch: case $NUMBER$ : { continue ; }
rank: 531
score: 98.24258858816964
patch: case default : return true ;
rank: 531
score: 98.02632359095982
patch: case $NUMBER$ : + $STRING$ ;
rank: 531
score: 97.96548025948661
patch: case char CaMeL At 0 :
rank: 532
score: 98.77041625976562
patch: case $NUMBER$ : case $NUMBER$ : return { {
rank: 532
score: 98.76607937282986
patch: case 0 : case $STRING$ : { {
rank: 532
score: 98.7392333984375
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ ; }
rank: 532
score: 98.53435516357422
patch: == str . length ( ) ;
rank: 532
score: 98.41537475585938
patch: default : return true ; } :
rank: 532
score: 97.96307373046875
patch: case Boolean == false : {
rank: 533
score: 98.77017647879464
patch: case 1 : { { {
rank: 533
score: 98.76583523220486
patch: case 1 : case $STRING$ : { {
rank: 533
score: 98.73818137428977
patch: { * * * * / if case 1 :
rank: 533
score: 98.66115500710227
patch: case $NUMBER$ : case 1 : case 1 : {
rank: 533
score: 98.53433227539062
patch: if ( key == $STRING$ ) {
rank: 533
score: 98.52456665039062
patch: case $NUMBER$ : $STRING$ ;
rank: 533
score: 98.02239118303571
patch: case ( String ) null ;
rank: 534
score: 98.76999337332589
patch: case $NUMBER$ : * { /
rank: 534
score: 98.76583426339286
patch: case $NUMBER$ : { $NUMBER$ :
rank: 534
score: 98.66087510850694
patch: case Long . MAX _ VALUE : {
rank: 534
score: 98.23487200055804
patch: case true : return false ;
rank: 534
score: 98.02163696289062
patch: return ( true ) ;
rank: 534
score: 97.96262032645089
patch: case str , $STRING$ * /
rank: 535
score: 98.76979370117188
patch: case $NUMBER$ + $NUMBER$ : { case $NUMBER$ :
rank: 535
score: 98.76547241210938
patch: case $NUMBER$ : { case ) ;
rank: 535
score: 98.7364169034091
patch: { * * * { * { * * /
rank: 535
score: 98.52153184678819
patch: ++ str . length ( ) ; }
rank: 535
score: 98.41180419921875
patch: { case $STRING$ : case $STRING$ :
rank: 535
score: 98.02035086495536
patch: case $NUMBER$ : throws $STRING$ ;
rank: 536
score: 98.76959838867188
patch: case $NUMBER$ : { * { case $NUMBER$ :
rank: 536
score: 98.76541900634766
patch: case $NUMBER$ : { else { }
rank: 536
score: 98.66005637428977
patch: case $NUMBER$ : return $NUMBER$ $NUMBER$ ; case $NUMBER$ :
rank: 536
score: 98.41036224365234
patch: case $NUMBER$ : switch ( $NUMBER$ )
rank: 536
score: 98.23290143694196
patch: case $NUMBER$ : { / :
rank: 537
score: 98.76942138671875
patch: case $NUMBER$ : if $NUMBER$ : case $NUMBER$ {
rank: 537
score: 98.76535034179688
patch: case $NUMBER$ : { case SIZE :
rank: 537
score: 98.65971235795455
patch: case $NUMBER$ : return $NUMBER$ : ; case $NUMBER$ :
rank: 537
score: 98.52774047851562
patch: case ( Double . length ) :
rank: 537
score: 98.51975504557292
patch: case ( 1 ) : return true ;
rank: 537
score: 98.41035461425781
patch: case 0 : break ; default :
rank: 537
score: 98.23141043526786
patch: case null : case $NUMBER$ :
rank: 537
score: 98.01756940569196
patch: } switch ( value ) {
rank: 538
score: 98.76884460449219
patch: case $NUMBER$ : * case $NUMBER$ :
rank: 538
score: 98.76518903459821
patch: case $NUMBER$ { case $NUMBER$ ;
rank: 538
score: 98.73268636067708
patch: { * * * * * * / case $NUMBER$ :
rank: 538
score: 98.65858154296875
patch: case $NUMBER$ : case $NUMBER$ : return default :
rank: 538
score: 98.5189208984375
patch: case $NUMBER$ : false ;
rank: 538
score: 98.22819213867187
patch: case $STRING$ : }
rank: 538
score: 98.01425606863839
patch: return Boolean . 0 ; }
rank: 538
score: 97.95458984375
patch: case String . Number :
rank: 539
score: 98.76864624023438
patch: case 1 : case 1 : * { /
rank: 539
score: 98.73188920454545
patch: { * { * * * * : * /
rank: 539
score: 98.65801447088069
patch: case $NUMBER$ : case $NUMBER$ : { case $NUMBER$ :
rank: 539
score: 98.51731872558594
patch: System . catch ( $STRING$ ) {
rank: 539
score: 98.40771484375
patch: case $NUMBER$ : { return {
rank: 539
score: 98.2249755859375
patch: if ( str . char CaMeL
rank: 539
score: 98.01363699776786
patch: case - : return true ;
rank: 539
score: 97.9508768717448
patch: case Boolean . Character :
rank: 540
score: 98.76446533203125
patch: case 0 ] ; case $NUMBER$ :
rank: 540
score: 98.7314786044034
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) {
rank: 540
score: 98.65633719308036
patch: case 1 : return : {
rank: 540
score: 98.52430725097656
patch: case ( $NUMBER$ ) * $NUMBER$ :
rank: 540
score: 98.01280517578125
patch: case >> : {
rank: 540
score: 97.94815063476562
patch: case ) {
rank: 541
score: 98.76414489746094
patch: case 0 : return - $NUMBER$ :
rank: 541
score: 98.73140092329545
patch: * * * * * $NUMBER$ { case $NUMBER$ :
rank: 541
score: 98.52427673339844
patch: case $STRING$ : str = $STRING$ ;
rank: 541
score: 98.4054667154948
patch: @ Override case $NUMBER$ :
rank: 541
score: 98.22005208333333
patch: case $NUMBER$ / 1 :
rank: 541
score: 98.011962890625
patch: case ( char ) true :
rank: 541
score: 97.94655354817708
patch: case signum ( ) :
rank: 542
score: 98.76741333007813
patch: case $NUMBER$ : { case $NUMBER$ + : /
rank: 542
score: 98.76313018798828
patch: case $NUMBER$ : { case $STRING$ ;
rank: 542
score: 98.73064630681819
patch: { * * * * * { case 0 :
rank: 542
score: 98.65582830255681
patch: case $NUMBER$ : return false ; default : return :
rank: 542
score: 98.52353922526042
patch: case $STRING$ : break ;
rank: 542
score: 97.94393920898438
patch: case str + 0 :
rank: 543
score: 98.76284790039062
patch: case 1 { case - $NUMBER$ :
rank: 543
score: 98.73061301491477
patch: } else { * * * * * * /
rank: 543
score: 98.52018737792969
patch: case $NUMBER$ : str = null ;
rank: 543
score: 98.40470123291016
patch: case $NUMBER$ : { return false {
rank: 543
score: 98.00688825334821
patch: to CaMeL Boolean ( ) ;
rank: 544
score: 98.73023478190105
patch: { * * * * * { * * * /
rank: 544
score: 98.51125759548611
patch: case 1 : return str == $STRING$ ;
rank: 544
score: 98.40242004394531
patch: case super . { case $NUMBER$ :
rank: 544
score: 98.00520542689732
patch: case $NUMBER$ : throw str ;
rank: 544
score: 97.93625895182292
patch: case Boolean [ 0 :
rank: 545
score: 98.76714477539062
patch: case 1 : case 1 : if $NUMBER$ :
rank: 545
score: 98.76213836669922
patch: case 0 : { else { {
rank: 545
score: 98.7293701171875
patch: case $STRING$ : break : }
rank: 545
score: 98.40220642089844
patch: { case $NUMBER$ : case 1 :
rank: 545
score: 98.00430908203126
patch: } return true ;
rank: 545
score: 97.93587239583333
patch: case / * false :
rank: 546
score: 98.76193237304688
patch: case 0 : { case 0 ;
rank: 546
score: 98.72816051136364
patch: { * * * { * * : * /
rank: 546
score: 98.39977264404297
patch: case Character . Na CaMeL N :
rank: 546
score: 98.21568952287946
patch: case false : return false ;
rank: 546
score: 97.93551635742188
patch: case String . err :
rank: 547
score: 98.76181030273438
patch: case 1 : { case 0 ;
rank: 547
score: 98.72816051136364
patch: * * * * * { / } else /
rank: 547
score: 98.649853515625
patch: case 1 : return { { case 1 :
rank: 547
score: 98.51800537109375
patch: case $NUMBER$ : { case $NUMBER$ ?
rank: 547
score: 98.50423177083333
patch: int ( str . length ( ) )
rank: 547
score: 98.39840698242188
patch: { case 0 : case 1 :
rank: 547
score: 98.21274239676339
patch: switch ( str . char CaMeL
rank: 547
score: 98.00132533482143
patch: return ( String ) true ;
rank: 547
score: 97.93077596028645
patch: case String . true :
rank: 548
score: 98.766845703125
patch: case $NUMBER$ : { case 1 : / /
rank: 548
score: 98.75886535644531
patch: case $NUMBER$ ] { case $STRING$ :
rank: 548
score: 98.72763893821023
patch: { * * * { * * * * /
rank: 548
score: 98.51689910888672
patch: case $STRING$ : { return 0 ;
rank: 548
score: 98.50326538085938
patch: case $NUMBER$ : return ( str ;
rank: 548
score: 98.21224539620536
patch: case 1 : return ) ;
rank: 548
score: 97.926708984375
patch: case >> 1 :
rank: 549
score: 98.76681518554688
patch: case $NUMBER$ : { : { case $NUMBER$ :
rank: 549
score: 98.75849914550781
patch: case 0 : case - $NUMBER$ {
rank: 549
score: 98.72672895951705
patch: { * * * * / if case $NUMBER$ :
rank: 549
score: 98.51573181152344
patch: case $NUMBER$ : return - 1 ;
rank: 549
score: 98.50166151258681
patch: case ( str . length ( ) -
rank: 549
score: 98.21122523716518
patch: case Boolean . FALSE : {
rank: 549
score: 97.92661539713542
patch: case str , $STRING$ :
rank: 550
score: 98.7660888671875
patch: case $NUMBER$ : if case 1 : break :
rank: 550
score: 98.75833565848214
patch: case 1 : case 1 ;
rank: 550
score: 98.64917670355902
patch: case $NUMBER$ : return false : { {
rank: 550
score: 98.50997488839286
patch: case ; case $NUMBER$ : {
rank: 550
score: 98.39689127604167
patch: case $NUMBER$ | $NUMBER$ :
rank: 550
score: 97.92467244466145
patch: case + 1 : {
rank: 551
score: 98.76602783203126
patch: case 1 : { if : case 1 :
rank: 551
score: 98.72474254261364
patch: { * * * * * $NUMBER$ : * /
rank: 551
score: 98.50950404575893
patch: 0 : { case $NUMBER$ :
rank: 552
score: 98.76583862304688
patch: case $NUMBER$ : { / * * / /
rank: 552
score: 98.7230224609375
patch: { * * * * { { case 1 :
rank: 552
score: 98.39494323730469
patch: case - 1 { case 1 :
rank: 552
score: 98.20053536551339
patch: case $NUMBER$ / $NUMBER$ : {
rank: 552
score: 97.91908569335938
patch: case / * /
rank: 553
score: 98.76580047607422
patch: case $NUMBER$ : case 1 : System
rank: 553
score: 98.75570678710938
patch: case $NUMBER$ : } case 0 :
rank: 553
score: 98.72266496930804
patch: * * { * * /
rank: 553
score: 98.39447784423828
patch: case $NUMBER$ : return Character . :
rank: 553
score: 98.19520786830357
patch: case $NUMBER$ : { / *
rank: 553
score: 97.98319498697917
patch: return Boolean . true ;
rank: 553
score: 97.91445922851562
patch: case str . char CaMeL
rank: 554
score: 98.76522827148438
patch: case $NUMBER$ : { if : *
rank: 554
score: 98.75422886439732
patch: case 0 : return $NUMBER$ :
rank: 554
score: 98.7216796875
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; if {
rank: 554
score: 98.64540405273438
patch: case $NUMBER$ : : break ; case $NUMBER$ :
rank: 554
score: 98.39422607421875
patch: case $NUMBER$ : return : default :
rank: 554
score: 98.19488525390625
patch: case 1 : { ; }
rank: 554
score: 97.9142354329427
patch: case String . out :
rank: 555
score: 98.76492309570312
patch: case $NUMBER$ : return - 1 {
rank: 555
score: 98.75389862060547
patch: { case $STRING$ : case $NUMBER$ :
rank: 555
score: 98.72149103338069
patch: { * { * * * { * * /
rank: 555
score: 98.64533148871527
patch: case $NUMBER$ : throws Runtime CaMeL Exception {
rank: 555
score: 98.49721854073661
patch: case 1 : { break ;
rank: 555
score: 98.39358520507812
patch: default : return false ; } :
rank: 555
score: 98.19038609095982
patch: case $NUMBER$ : $STRING$ ) {
rank: 555
score: 97.91061401367188
patch: case String . class :
rank: 556
score: 98.76484375
patch: case 1 : if $NUMBER$ : * / /
rank: 556
score: 98.75335693359375
patch: case $STRING$ : { case 0 {
rank: 556
score: 98.72147993607955
patch: * * { * * { * * * /
rank: 556
score: 98.64484514508929
patch: case 1 : if ( {
rank: 556
score: 98.49288177490234
patch: return ( str == $STRING$ ) ;
rank: 556
score: 98.3931884765625
patch: case $NUMBER$ : { return false :
rank: 556
score: 97.90673828125
patch: case EMPTY :
rank: 557
score: 98.76419067382812
patch: case 1 : case 1 : case $NUMBER$ {
rank: 557
score: 98.72124372209821
patch: { * * { * /
rank: 557
score: 98.49238586425781
patch: case ( char ) $NUMBER$ : {
rank: 557
score: 98.39154052734375
patch: default { case $NUMBER$ :
rank: 557
score: 98.18670654296875
patch: switch ( $STRING$ ) { }
rank: 557
score: 97.90622965494792
patch: case ( str ) :
rank: 558
score: 98.7637710571289
patch: case $NUMBER$ : / * { /
rank: 558
score: 98.74980163574219
patch: case $NUMBER$ : case $NUMBER$ / {
rank: 558
score: 98.72123579545455
patch: * * * * * { * { * /
rank: 558
score: 98.64325629340277
patch: case $NUMBER$ : { return false : {
rank: 558
score: 98.49060821533203
patch: case ( 0 - 1 ) :
rank: 558
score: 98.48862711588542
patch: case $NUMBER$ : else {
rank: 558
score: 98.38965861002605
patch: default : case $STRING$ :
rank: 558
score: 97.98028564453125
patch: case Boolean . Long :
rank: 558
score: 97.90064493815105
patch: case / * 1 /
rank: 559
score: 98.76360321044922
patch: case $NUMBER$ { if case $NUMBER$ :
rank: 559
score: 98.74772644042969
patch: case 0 { case $NUMBER$ { {
rank: 559
score: 98.72096946022727
patch: case 0 { case 1 : return false ; }
rank: 559
score: 98.64325561523438
patch: case $NUMBER$ : if ( { return false )
rank: 559
score: 98.38821411132812
patch: @ case $NUMBER$ : case $NUMBER$ :
rank: 559
score: 98.18429129464286
patch: if ( value == null )
rank: 559
score: 97.89487711588542
patch: case String . String :
rank: 560
score: 98.76358032226562
patch: case $NUMBER$ : case $NUMBER$ { break $NUMBER$ :
rank: 560
score: 98.74663543701172
patch: case $STRING$ : } case $NUMBER$ :
rank: 560
score: 98.720703125
patch: { * * * * { { case $NUMBER$ :
rank: 560
score: 98.64246283637152
patch: { case $NUMBER$ : case $NUMBER$ : {
rank: 560
score: 98.48460388183594
patch: case $NUMBER$ ;
rank: 560
score: 98.3877665201823
patch: case Character . $NUMBER$ :
rank: 560
score: 97.97688802083333
patch: case $NUMBER$ | $STRING$ ;
rank: 560
score: 97.89471435546875
patch: case ; case $STRING$ :
rank: 561
score: 98.76323852539062
patch: case 1 : { { case 1 : {
rank: 561
score: 98.72052556818181
patch: case 0 : return new $NUMBER$ : case 1 :
rank: 561
score: 98.18190220424107
patch: case $NUMBER$ : { / ?
rank: 561
score: 97.89007568359375
patch: case ( $STRING$ ) }
rank: 562
score: 98.76318969726563
patch: case $NUMBER$ : { if $NUMBER$ : break {
rank: 562
score: 98.74610900878906
patch: case $NUMBER$ : { case Short :
rank: 562
score: 98.71946022727273
patch: case 1 : return new $NUMBER$ : case $NUMBER$ :
rank: 562
score: 98.48027801513672
patch: throw str . length ( ) ;
rank: 562
score: 98.38624572753906
patch: case $NUMBER$ || str . : {
rank: 562
score: 97.88985188802083
patch: case || $STRING$ ) {
rank: 563
score: 98.76266479492188
patch: case 1 : case $NUMBER$ : * { /
rank: 563
score: 98.74571228027344
patch: case $NUMBER$ ++ { case $NUMBER$ :
rank: 563
score: 98.71933815696023
patch: { * * * * * * { { /
rank: 563
score: 98.47255161830357
patch: $NUMBER$ : { case $NUMBER$ :
rank: 563
score: 98.17872837611607
patch: case $STRING$ : { ; }
rank: 563
score: 97.97396414620536
patch: case ( char ) $STRING$ ;
rank: 563
score: 97.88956705729167
patch: case 1 | $STRING$ :
rank: 564
score: 98.7626220703125
patch: case $NUMBER$ : / / / * / /
rank: 564
score: 98.7178955078125
patch: { * * * * { { * * * /
rank: 564
score: 98.64049530029297
patch: case $NUMBER$ : return : { {
rank: 564
score: 98.38350677490234
patch: case $NUMBER$ . length ( ) :
rank: 564
score: 98.1781982421875
patch: case ? $STRING$ :
rank: 564
score: 97.97015380859375
patch: case FORMAT : return false ;
rank: 564
score: 97.88909912109375
patch: continue ; case $NUMBER$ :
rank: 565
score: 98.76237182617187
patch: case $NUMBER$ : case 1 : break $NUMBER$ {
rank: 565
score: 98.7450180053711
patch: case $NUMBER$ : return - $NUMBER$ {
rank: 565
score: 98.71757368607955
patch: * * * * * * { case 1 :
rank: 565
score: 97.88826904296874
patch: case str 0 :
rank: 566
score: 98.7612060546875
patch: case 1 : case $NUMBER$ : if $NUMBER$ :
rank: 566
score: 98.74488830566406
patch: case $NUMBER$ { case $NUMBER$ : :
rank: 566
score: 98.71756998697917
patch: } else { if {
rank: 566
score: 98.63989868164063
patch: case $STRING$ : return $NUMBER$ ; case $NUMBER$ :
rank: 566
score: 98.38198852539062
patch: case Char CaMeL Sequence . NULL :
rank: 566
score: 98.17034912109375
patch: case $NUMBER$ : $NUMBER$ $NUMBER$ :
rank: 566
score: 97.8827616373698
patch: case lower CaMeL Case :
rank: 567
score: 98.76109619140625
patch: case $NUMBER$ : { if : * / /
rank: 567
score: 98.74381256103516
patch: case $STRING$ : case 1 { {
rank: 567
score: 98.71726296164773
patch: * * { * * * { * * /
rank: 567
score: 98.63853624131944
patch: case $NUMBER$ : { return true ; {
rank: 567
score: 98.46555873325893
patch: case $STRING$ : return $NUMBER$ ;
rank: 567
score: 98.37954711914062
patch: case $NUMBER$ || $STRING$ . equals :
rank: 567
score: 97.87868245442708
patch: / * case $STRING$ :
rank: 568
score: 98.76103515625
patch: case $NUMBER$ : if case 1 : { {
rank: 568
score: 98.74333190917969
patch: case $NUMBER$ : return $NUMBER$ { {
rank: 568
score: 98.71700032552083
patch: { * * * * $NUMBER$ . 0 : * /
rank: 568
score: 98.63732231987848
patch: case $NUMBER$ : { if ( ! {
rank: 568
score: 97.96237182617188
patch: return Boolean . Number ;
rank: 568
score: 97.87689208984375
patch: case str . Boolean :
rank: 569
score: 98.76078491210937
patch: case $NUMBER$ : { case $NUMBER$ + { /
rank: 569
score: 98.74189758300781
patch: case $STRING$ : case $NUMBER$ : :
rank: 569
score: 98.71513227982955
patch: } else { / * { * * * /
rank: 569
score: 98.63630981445313
patch: case 0 : break ; case 1 : {
rank: 569
score: 98.37880161830357
patch: case Character . $NUMBER$ : {
rank: 569
score: 98.1654561360677
patch: case >> $NUMBER$ : {
rank: 569
score: 97.9619140625
patch: case $NUMBER$ & $STRING$ :
rank: 570
score: 98.76057739257813
patch: case 1 : if $NUMBER$ : / * /
rank: 570
score: 98.74121965680804
patch: else { { case $NUMBER$ :
rank: 570
score: 98.71493094308036
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ ;
rank: 570
score: 98.63549194335937
patch: case 0 : case $NUMBER$ : case 1 :
rank: 570
score: 98.37850189208984
patch: case $NUMBER$ || str . { {
rank: 570
score: 98.16482107979911
patch: case 1 : return $STRING$ ;
rank: 570
score: 97.95978655133929
patch: match 0 ( str ) ;
rank: 570
score: 97.87001546223958
patch: case str ; static :
rank: 571
score: 98.7604736328125
patch: case 1 : { / { case $NUMBER$ :
rank: 571
score: 98.7412109375
patch: case 0 ] : case 1 :
rank: 571
score: 98.71446644176136
patch: { * * * * * * * { /
rank: 571
score: 98.37841033935547
patch: default case $NUMBER$ : case $NUMBER$ :
rank: 571
score: 98.16327776227679
patch: case 1 : return null ;
rank: 571
score: 97.86868286132812
patch: case String . default :
rank: 572
score: 98.76038208007813
patch: case $NUMBER$ : / / / case $NUMBER$ :
rank: 572
score: 98.7402572631836
patch: case 0 : } case 1 :
rank: 572
score: 98.71375383649554
patch: case 0 + 0 : {
rank: 572
score: 98.63335571289062
patch: case $STRING$ { case $NUMBER$ : case $NUMBER$ :
rank: 572
score: 98.4676742553711
patch: throw new Exception ( $STRING$ ) ;
rank: 572
score: 98.4562744140625
patch: length ( ) ;
rank: 572
score: 98.37812151227679
patch: case $NUMBER$ ? { default :
rank: 572
score: 97.95595877511161
patch: case >> : return true ;
rank: 572
score: 97.86683146158855
patch: case String . FALSE :
rank: 573
score: 98.76013793945313
patch: case $NUMBER$ : return 1 { case $NUMBER$ :
rank: 573
score: 98.71339000355114
patch: * * * * * * * * * /
rank: 573
score: 98.63265380859374
patch: case 1 : return false ; default : {
rank: 573
score: 98.37747955322266
patch: / * case $NUMBER$ : * /
rank: 573
score: 97.8662109375
patch: case Boolean . str :
rank: 574
score: 98.7597900390625
patch: case 1 : { if case $NUMBER$ { {
rank: 574
score: 98.73785400390625
patch: case $STRING$ : return case 1 :
rank: 574
score: 98.713134765625
patch: { * * * * { * : * /
rank: 574
score: 98.631396484375
patch: case $NUMBER$ : { default : case $NUMBER$ :
rank: 574
score: 98.465087890625
patch: case ( str . ) : {
rank: 574
score: 97.95255533854167
patch: return value == $STRING$ ;
rank: 574
score: 97.86477661132812
patch: case / $NUMBER$ : {
rank: 575
score: 98.758984375
patch: case $NUMBER$ : { / { * { /
rank: 575
score: 98.73725237165179
patch: case $NUMBER$ ] { $NUMBER$ :
rank: 575
score: 98.71120383522727
patch: { * * * { { * * * /
rank: 575
score: 98.63123236762152
patch: case $NUMBER$ : { int case $NUMBER$ :
rank: 575
score: 98.46469116210938
patch: break ; case $NUMBER$ :
rank: 575
score: 98.37635803222656
patch: case 0 : return true ; {
rank: 575
score: 98.15420532226562
patch: case $STRING$ : { ;
rank: 575
score: 97.94789632161458
patch: length 1 = $STRING$ ;
rank: 575
score: 97.86390177408855
patch: case $NUMBER$ : / ?
rank: 576
score: 98.75873565673828
patch: case 1 : { / / {
rank: 576
score: 98.71117054332386
patch: { * * * * { { / * /
rank: 576
score: 98.63062744140625
patch: case $NUMBER$ : { default : break ; }
rank: 576
score: 98.37484741210938
patch: case Integer . POSITIVE _ INFINITY :
rank: 576
score: 97.94718715122768
patch: case 1 | $STRING$ : {
rank: 577
score: 98.75828857421875
patch: case $NUMBER$ : case 1 { return $NUMBER$ :
rank: 577
score: 98.736572265625
patch: case 0 ] ; case 1 :
rank: 577
score: 98.7106045809659
patch: { * { * * { * * * /
rank: 577
score: 98.62925211588542
patch: case Math . abs ( $NUMBER$ ) :
rank: 577
score: 98.45866394042969
patch: case ( $NUMBER$ ) : break ;
rank: 577
score: 98.4425048828125
patch: case $NUMBER$ : } else {
rank: 577
score: 98.37392752511161
patch: case $NUMBER$ : { return :
rank: 577
score: 98.15395682198661
patch: / : { case $NUMBER$ :
rank: 577
score: 97.94549560546875
patch: case ? Boolean . 1 :
rank: 577
score: 97.86185709635417
patch: case str ; ; }
rank: 578
score: 98.75821533203126
patch: case 1 : case 1 : * * /
rank: 578
score: 98.7102383700284
patch: case 1 : return new $NUMBER$ : case 1 :
rank: 578
score: 98.62872992621527
patch: case 1 : return $NUMBER$ ; default :
rank: 578
score: 98.44208635602679
patch: case ( String ) 0 :
rank: 578
score: 98.37322235107422
patch: default : return false ; } {
rank: 578
score: 97.86112467447917
patch: case str [ ) :
rank: 579
score: 98.75787353515625
patch: case 1 : case $NUMBER$ : * * /
rank: 579
score: 98.73416137695312
patch: case $STRING$ : case $NUMBER$ : }
rank: 579
score: 98.70994984019886
patch: * * * * * * * : * /
rank: 579
score: 98.44130859375
patch: case $NUMBER$ ? {
rank: 579
score: 98.37312622070313
patch: case $NUMBER$ ] :
rank: 579
score: 97.85915120442708
patch: case / >> 1 :
rank: 580
score: 98.75739135742188
patch: case $NUMBER$ : case 1 { * / /
rank: 580
score: 98.73351287841797
patch: case $NUMBER$ : case $NUMBER$ * {
rank: 580
score: 98.43954467773438
patch: case $NUMBER$ : str {
rank: 580
score: 98.15181477864583
patch: case $NUMBER$ : $NUMBER$ .
rank: 580
score: 97.85689290364583
patch: case / * - :
rank: 581
score: 98.75731549944196
patch: case $NUMBER$ : break $NUMBER$ {
rank: 581
score: 98.73336029052734
patch: case 1 ] ; case 1 :
rank: 581
score: 98.70896218039773
patch: { * { * * * { { * /
rank: 581
score: 98.45217895507812
patch: case $NUMBER$ : str = str ;
rank: 581
score: 98.43738664899554
patch: case ( String ) $NUMBER$ :
rank: 581
score: 97.93983968098958
patch: } case $NUMBER$ : {
rank: 581
score: 97.85570271809895
patch: case || $STRING$ ; }
rank: 582
score: 98.7565185546875
patch: case $NUMBER$ : * $NUMBER$ { case $NUMBER$ :
rank: 582
score: 98.73299407958984
patch: case - $NUMBER$ { case $NUMBER$ :
rank: 582
score: 98.70881791548295
patch: case $STRING$ : / * * * * { /
rank: 582
score: 98.62679714626736
patch: case 1 : throws { case $NUMBER$ :
rank: 582
score: 98.4514872233073
patch: else case $NUMBER$ : {
rank: 582
score: 98.37117222377232
patch: case Integer . $NUMBER$ : {
rank: 582
score: 98.15133231026786
patch: case $NUMBER$ : $STRING$ : {
rank: 582
score: 97.93916320800781
patch: } else {
rank: 582
score: 97.85384114583333
patch: case / * 0 /
rank: 583
score: 98.75651245117187
patch: case 1 : if $NUMBER$ { / / /
rank: 583
score: 98.7322006225586
patch: case $NUMBER$ ; { case $NUMBER$ :
rank: 583
score: 98.70864868164062
patch: { * * * * * * { case $NUMBER$ :
rank: 583
score: 98.62583923339844
patch: case $NUMBER$ : { return : {
rank: 583
score: 97.93794759114583
patch: return Boolean . TRUE ;
rank: 583
score: 97.85133666992188
patch: case $STRING$ ; }
rank: 584
score: 98.75604248046875
patch: case 1 : case $NUMBER$ : case $NUMBER$ {
rank: 584
score: 98.70855158025569
patch: case $STRING$ : / * * { * * /
rank: 584
score: 98.62513563368056
patch: case 1 : case $NUMBER$ : return :
rank: 584
score: 98.44773646763393
patch: case $NUMBER$ : { $STRING$ ;
rank: 584
score: 98.36868286132812
patch: case $NUMBER$ : return $STRING$ . {
rank: 584
score: 97.93735758463542
patch: return ( false ) ;
rank: 584
score: 97.8495381673177
patch: case 0 : { {
rank: 585
score: 98.75592041015625
patch: case 1 : String case $NUMBER$ :
rank: 585
score: 98.7301025390625
patch: case 0 : { return $NUMBER$ :
rank: 585
score: 98.70808549360795
patch: { * * * * { / } else {
rank: 585
score: 98.6241455078125
patch: case $NUMBER$ : return : ; case 1 :
rank: 585
score: 98.44552176339286
patch: case ( 1 ] ) {
rank: 585
score: 98.36665344238281
patch: case $NUMBER$ || str case $NUMBER$ :
rank: 585
score: 98.14351109095982
patch: case $NUMBER$ : / * }
rank: 585
score: 97.92820231119792
patch: case $NUMBER$ - $NUMBER$ :
rank: 586
score: 98.75564575195312
patch: case $NUMBER$ : { / ? {
rank: 586
score: 98.73004150390625
patch: case $NUMBER$ : case 0 : :
rank: 586
score: 98.70714222301136
patch: * * * * * $NUMBER$ { case 1 :
rank: 586
score: 98.42605154854911
patch: case $STRING$ : { else {
rank: 586
score: 98.36627197265625
patch: default : return true ; } {
rank: 586
score: 97.84796142578125
patch: case * * $NUMBER$ :
rank: 587
score: 98.75516357421876
patch: case $NUMBER$ : { { case $NUMBER$ { {
rank: 587
score: 98.70652077414773
patch: { * * * * * * / * /
rank: 587
score: 98.62274780273438
patch: case 1 : return 1 ; case $NUMBER$ :
rank: 587
score: 98.4256591796875
patch: case $NUMBER$ : { str {
rank: 587
score: 98.14346313476562
patch: case > 1 : {
rank: 588
score: 98.75502014160156
patch: case $NUMBER$ : : if $NUMBER$ {
rank: 588
score: 98.728271484375
patch: / else { case $NUMBER$ :
rank: 588
score: 98.7062276204427
patch: { * * * * * { { * * /
rank: 588
score: 98.14299665178571
patch: case true : return true ;
rank: 588
score: 97.921142578125
patch: ch 0 = $STRING$ ;
rank: 588
score: 97.84539794921875
patch: case String . name :
rank: 589
score: 98.75460815429688
patch: case $NUMBER$ : { if : / / /
rank: 589
score: 98.7279052734375
patch: case 1 { case - 1 :
rank: 589
score: 98.70579020182292
patch: case 0 : break :
rank: 589
score: 98.36453247070312
patch: case ~ $NUMBER$ : case $NUMBER$ :
rank: 589
score: 98.142822265625
patch: case $NUMBER$ : / 1 .
rank: 589
score: 97.84154256184895
patch: case / * null :
rank: 590
score: 98.754150390625
patch: case $NUMBER$ : if case $NUMBER$ : { {
rank: 590
score: 98.72769165039062
patch: case 1 : } case 1 :
rank: 590
score: 98.70561079545455
patch: { * * * * * * { $NUMBER$ /
rank: 590
score: 98.42340087890625
patch: case $STRING$ : { break ;
rank: 590
score: 98.36407470703125
patch: case $NUMBER$ : return $STRING$ {
rank: 590
score: 98.1385498046875
patch: case $NUMBER$ : length $NUMBER$ :
rank: 590
score: 97.8404052734375
patch: case || $STRING$ :
rank: 591
score: 98.72761535644531
patch: case 0 : { * * /
rank: 591
score: 98.7052001953125
patch: { * * * * * { { { /
rank: 591
score: 98.61975708007813
patch: case $NUMBER$ : { break : case $NUMBER$ :
rank: 591
score: 98.4302978515625
patch: case ( $NUMBER$ ) case $NUMBER$ :
rank: 591
score: 98.36396484375
patch: case $NUMBER$ || {
rank: 591
score: 97.91982014973958
patch: case Boolean . Integer :
rank: 591
score: 97.83998616536458
patch: case Integer . null :
rank: 592
score: 98.75327758789062
patch: case $NUMBER$ : for $NUMBER$ : case $NUMBER$ :
rank: 592
score: 98.70329145951705
patch: { * * * * { * / } }
rank: 592
score: 98.42731475830078
patch: case ( 0 - $NUMBER$ ) :
rank: 592
score: 98.36302839006696
patch: case $NUMBER$ : return value :
rank: 592
score: 98.13748168945312
patch: case $NUMBER$ / $STRING$ :
rank: 592
score: 97.83719889322917
patch: case Integer . TRUE :
rank: 593
score: 98.75325317382813
patch: case $NUMBER$ : case 1 : break { /
rank: 593
score: 98.7255630493164
patch: case $STRING$ ] : case $NUMBER$ :
rank: 593
score: 98.70279947916667
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ : {
rank: 593
score: 98.61896362304688
patch: case 1 : { break ; case 1 :
rank: 593
score: 98.3622817993164
patch: case $NUMBER$ : { { default :
rank: 593
score: 98.13636997767857
patch: case ? Boolean . 0 :
rank: 593
score: 97.91260782877605
patch: case $NUMBER$ << 1 :
rank: 593
score: 97.83701578776042
patch: case Boolean == $STRING$ :
rank: 594
score: 98.75279235839844
patch: case $NUMBER$ : { $NUMBER$ { {
rank: 594
score: 98.72519356863839
patch: case 1 : { $NUMBER$ {
rank: 594
score: 98.70273659446023
patch: { * * * * * : * * /
rank: 594
score: 98.41858782087054
patch: case ) { return false ;
rank: 594
score: 98.13345336914062
patch: case $NUMBER$ : / :
rank: 594
score: 97.90479125976563
patch: case ^ $STRING$ :
rank: 594
score: 97.8235575358073
patch: true ; case $NUMBER$ :
rank: 595
score: 98.752587890625
patch: case $NUMBER$ : { case $NUMBER$ + : {
rank: 595
score: 98.70182582310268
patch: case 0 : break : }
rank: 595
score: 98.42368570963542
patch: case ( $NUMBER$ ) ;
rank: 595
score: 98.41812569754464
patch: case $NUMBER$ ( $STRING$ ) :
rank: 595
score: 97.82120768229167
patch: case size ( ) :
rank: 596
score: 98.75242309570312
patch: case $NUMBER$ : if case $NUMBER$ : break :
rank: 596
score: 98.7245864868164
patch: case $STRING$ : case $NUMBER$ { :
rank: 596
score: 98.70145670572917
patch: case $STRING$ : * /
rank: 596
score: 98.4236551920573
patch: return str == $STRING$ ;
rank: 596
score: 98.41732352120536
patch: case $NUMBER$ * * $NUMBER$ :
rank: 596
score: 98.12898472377232
patch: case false : return true ;
rank: 596
score: 97.82079060872395
patch: case * * $STRING$ :
rank: 597
score: 98.7518310546875
patch: case 1 : / {
rank: 597
score: 98.72449493408203
patch: case $NUMBER$ : { $NUMBER$ : {
rank: 597
score: 98.7010498046875
patch: case 0 : return new $NUMBER$ : case $NUMBER$ :
rank: 597
score: 98.42164829799107
patch: case ( $NUMBER$ ] ) {
rank: 597
score: 97.81960042317708
patch: case str ; 0 :
rank: 598
score: 98.75177001953125
patch: case $NUMBER$ : { * { /
rank: 598
score: 98.72419084821429
patch: case 0 : case 1 ;
rank: 598
score: 98.70093883167614
patch: { * * * * { * / * /
rank: 598
score: 98.4124755859375
patch: case $NUMBER$ : return ( ;
rank: 598
score: 98.35565185546875
patch: case $NUMBER$ || Boolean . TRUE ;
rank: 598
score: 98.12765938895089
patch: case 1 : { System .
rank: 598
score: 97.81884765625
patch: case String . XML :
rank: 599
score: 98.75172119140625
patch: case $NUMBER$ : if $NUMBER$ : * { /
rank: 599
score: 98.7240982055664
patch: case $STRING$ : if case $NUMBER$ :
rank: 599
score: 98.70040893554688
patch: { / * * /
rank: 599
score: 98.355224609375
patch: case 1 : return true ; {
rank: 599
score: 98.12708391462054
patch: case 1 : continue ; }
rank: 599
score: 97.81869506835938
patch: case this . $STRING$ :
rank: 600
score: 98.75164794921875
patch: case $NUMBER$ : equals case 1 :
rank: 600
score: 98.72362518310547
patch: case $NUMBER$ + case $NUMBER$ : {
rank: 600
score: 98.69972922585227
patch: * { * * * * { * * /
rank: 600
score: 98.41794840494792
patch: case ( $NUMBER$ : {
rank: 600
score: 98.12628173828125
patch: case $NUMBER$ : } }
rank: 600
score: 97.81777954101562
patch: case << $NUMBER$ : {
rank: 601
score: 98.72351837158203
patch: case 1 ] : case $NUMBER$ :
rank: 601
score: 98.69856480189732
patch: / * * { * /
rank: 601
score: 98.41644287109375
patch: case ( - 1 ) : {
rank: 601
score: 98.41114153180804
patch: case $STRING$ : return 0 ;
rank: 601
score: 98.35338483537946
patch: case $NUMBER$ : return str :
rank: 601
score: 97.81752319335938
patch: case * $NUMBER$ :
rank: 602
score: 98.7509765625
patch: case $NUMBER$ : for $NUMBER$ { case $NUMBER$ :
rank: 602
score: 98.72308349609375
patch: else { $NUMBER$ { case $NUMBER$ :
rank: 602
score: 98.69840864701705
patch: { * * * { * / } else {
rank: 602
score: 98.61297607421875
patch: case $NUMBER$ : break true ; case $NUMBER$ :
rank: 602
score: 98.35163225446429
patch: case $NUMBER$ || str . {
rank: 602
score: 98.12574114118304
patch: case $NUMBER$ : { false ;
rank: 602
score: 97.8153788248698
patch: case $NUMBER$ : for (
rank: 603
score: 98.75009155273438
patch: case 1 : { / / case $NUMBER$ :
rank: 603
score: 98.722900390625
patch: case $NUMBER$ : return $NUMBER$ ; {
rank: 603
score: 98.69828657670455
patch: { * * * * * * case { /
rank: 603
score: 98.61225043402777
patch: case 1 : default : return false ;
rank: 603
score: 98.41562325613839
patch: case SIZE : return true ;
rank: 603
score: 98.409423828125
patch: case $STRING$ : { System .
rank: 603
score: 98.12568010602679
patch: case Boolean == true : {
rank: 603
score: 97.81392415364583
patch: case $STRING$ : / ?
rank: 604
score: 98.74960327148438
patch: case 1 : { / / / * /
rank: 604
score: 98.69775390625
patch: case $STRING$ : * * * * * { /
rank: 604
score: 98.40932210286458
patch: case $NUMBER$ $NUMBER$ : {
rank: 604
score: 98.12445068359375
patch: case > $NUMBER$ : {
rank: 604
score: 97.88084920247395
patch: do { case $NUMBER$ :
rank: 604
score: 97.81272379557292
patch: / * case 1 :
rank: 605
score: 98.74937438964844
patch: case 1 : { * / /
rank: 605
score: 98.72209930419922
patch: case $STRING$ : { { else {
rank: 605
score: 98.697265625
patch: { * * * / }
rank: 605
score: 98.41452462332589
patch: case $NUMBER$ == $NUMBER$ : {
rank: 605
score: 98.11934988839286
patch: case $NUMBER$ : / $NUMBER$ .
rank: 605
score: 97.87886555989583
patch: length 1 ( ) ;
rank: 605
score: 97.81256713867188
patch: case == $STRING$ :
rank: 606
score: 98.7493408203125
patch: case $NUMBER$ : case 1 : return { {
rank: 606
score: 98.72183663504464
patch: case 1 : { $NUMBER$ :
rank: 606
score: 98.6971435546875
patch: case 0 { break : }
rank: 606
score: 98.61100260416667
patch: case $NUMBER$ * / { case 1 :
rank: 606
score: 98.40626743861607
patch: case $NUMBER$ : - $NUMBER$ :
rank: 606
score: 98.32499476841518
patch: case 0 : return true :
rank: 606
score: 98.11778041294643
patch: Format ) { case $NUMBER$ :
rank: 606
score: 97.81252034505208
patch: case = $STRING$ ; }
rank: 607
score: 98.74930419921876
patch: case $NUMBER$ : { / { * * /
rank: 607
score: 98.72181701660156
patch: case $NUMBER$ : case case 1 :
rank: 607
score: 98.69388834635417
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { return $NUMBER$ ; }
rank: 607
score: 98.32254464285714
patch: default : case $NUMBER$ : {
rank: 607
score: 98.11771937779018
patch: case $STRING$ : { ) {
rank: 607
score: 97.8617655436198
patch: return Boolean . $NUMBER$ ;
rank: 607
score: 97.81163533528645
patch: case $STRING$ : $STRING$ :
rank: 608
score: 98.74920043945312
patch: case $NUMBER$ : { / * * { /
rank: 608
score: 98.6922607421875
patch: { * * * * * * * : * /
rank: 608
score: 98.60985649956598
patch: case 0 : break : case 1 :
rank: 608
score: 98.41361999511719
patch: case ( 0 + $NUMBER$ ) :
rank: 608
score: 98.40576171875
patch: case ( String ) 1 :
rank: 608
score: 98.31830705915179
patch: case 1 : return true :
rank: 608
score: 97.8614501953125
patch: return value == null ;
rank: 608
score: 97.81134033203125
patch: / * /
rank: 609
score: 98.74908447265625
patch: case $NUMBER$ : { if { * / /
rank: 609
score: 98.71965789794922
patch: case 0 + { case $NUMBER$ :
rank: 609
score: 98.11614118303571
patch: static ) { case 1 :
rank: 609
score: 97.81040445963542
patch: case << 1 : {
rank: 610
score: 98.74862670898438
patch: case $NUMBER$ : if $NUMBER$ : * * /
rank: 610
score: 98.71954345703125
patch: case 1 ] { case 0 :
rank: 610
score: 98.68731689453125
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; if { {
rank: 610
score: 98.3163553873698
patch: case LINE _ SEPARATOR :
rank: 610
score: 97.85718790690105
patch: return Boolean . $STRING$ ;
rank: 610
score: 97.80991617838542
patch: case / & $STRING$ :
rank: 611
score: 98.74755859375
patch: case $NUMBER$ : { if case 1 : :
rank: 611
score: 98.71915435791016
patch: case 1 : case - $NUMBER$ {
rank: 611
score: 98.60610961914062
patch: case 1 : { if ( {
rank: 611
score: 98.40281982421875
patch: case ( $NUMBER$ )
rank: 611
score: 97.85545857747395
patch: case | $STRING$ : {
rank: 611
score: 97.809716796875
patch: case / $STRING$ :
rank: 612
score: 98.74717407226562
patch: case 1 : case 1 : if $NUMBER$ {
rank: 612
score: 98.71904754638672
patch: case 0 : case $NUMBER$ : *
rank: 612
score: 98.60346221923828
patch: : return true ; case $NUMBER$ :
rank: 612
score: 98.40483856201172
patch: case ( $NUMBER$ - 1 ) :
rank: 612
score: 98.31057303292411
patch: case NULL : case $NUMBER$ :
rank: 612
score: 97.8096923828125
patch: case Exception . null :
rank: 613
score: 98.74668884277344
patch: case $NUMBER$ : { if { *
rank: 613
score: 98.71879577636719
patch: char $NUMBER$ : { case $NUMBER$ :
rank: 613
score: 98.68479410807292
patch: { * * * : * * * * * /
rank: 613
score: 98.4041748046875
patch: case $NUMBER$ : : return true ;
rank: 613
score: 98.40054757254464
patch: case $NUMBER$ ? case $NUMBER$ :
rank: 613
score: 97.85386149088542
patch: case Boolean . $STRING$ ;
rank: 613
score: 97.80889892578125
patch: case $STRING$ = $STRING$ ;
rank: 614
score: 98.74656372070312
patch: case 1 : break $NUMBER$ { case 1 :
rank: 614
score: 98.71796417236328
patch: case $NUMBER$ ] { { $NUMBER$ :
rank: 614
score: 98.68384806315105
patch: { * * * * * * { case 1 :
rank: 614
score: 98.60161675347223
patch: case 0 : break { case $NUMBER$ :
rank: 614
score: 98.10991559709821
patch: case null : case $STRING$ :
rank: 614
score: 97.85033162434895
patch: case 1 + $STRING$ :
rank: 614
score: 97.8067118326823
patch: case Na CaMeL N ;
rank: 615
score: 98.74651489257812
patch: case 1 { case 1 : case 1 :
rank: 615
score: 98.71773529052734
patch: case $NUMBER$ ] { $NUMBER$ : {
rank: 615
score: 98.68126424153645
patch: { * * * * $NUMBER$ . $NUMBER$ : * /
rank: 615
score: 98.40097481863839
patch: case $NUMBER$ : throw $STRING$ ;
rank: 615
score: 98.3915303548177
patch: case $NUMBER$ 1 : {
rank: 615
score: 98.29677908761161
patch: default : { case $NUMBER$ :
rank: 615
score: 97.804931640625
patch: case $STRING$ : $STRING$ ;
rank: 616
score: 98.7460693359375
patch: case $NUMBER$ : { if case 1 : /
rank: 616
score: 98.71710968017578
patch: case 1 : case $NUMBER$ : *
rank: 616
score: 98.68056233723958
patch: * * * * * * * / case $NUMBER$ :
rank: 616
score: 98.39988490513393
patch: case ( str . ) :
rank: 616
score: 98.39007568359375
patch: case $NUMBER$ : { } {
rank: 616
score: 98.10593959263393
patch: case min : return false ;
rank: 616
score: 97.84485880533855
patch: return Boolean . 1 ;
rank: 616
score: 97.8044942220052
patch: case / * 0 :
rank: 617
score: 98.74571228027344
patch: case $NUMBER$ : if $NUMBER$ { /
rank: 617
score: 98.7158203125
patch: case 0 : { * /
rank: 617
score: 98.67979939778645
patch: * * * * * * { * * * /
rank: 617
score: 98.5970458984375
patch: case 1 : throw { case $NUMBER$ :
rank: 617
score: 98.39886474609375
patch: return false ; } else {
rank: 618
score: 98.74521484375
patch: case 1 { case $NUMBER$ : case 1 :
rank: 618
score: 98.71483612060547
patch: case $NUMBER$ : case $NUMBER$ + {
rank: 618
score: 98.67767333984375
patch: { * * * * * * / case 0 :
rank: 618
score: 98.59356689453125
patch: case $NUMBER$ + $STRING$ { case $NUMBER$ :
rank: 618
score: 98.38372802734375
patch: case $NUMBER$ | $NUMBER$ : {
rank: 618
score: 97.8004150390625
patch: case null : { {
rank: 619
score: 98.74520263671874
patch: case $NUMBER$ : { / / / / /
rank: 619
score: 98.67655436197917
patch: case $STRING$ : / * * * * * * /
rank: 619
score: 98.38279506138393
patch: case $NUMBER$ : * * /
rank: 619
score: 97.83643595377605
patch: equals ( $STRING$ ) ;
rank: 619
score: 97.80005900065105
patch: case / * TRUE :
rank: 620
score: 98.745068359375
patch: case $NUMBER$ : { if $NUMBER$ { { {
rank: 620
score: 98.71424102783203
patch: case $NUMBER$ : { return $NUMBER$ {
rank: 620
score: 98.67581176757812
patch: { * * * * * * { * * /
rank: 620
score: 98.59230041503906
patch: > $NUMBER$ ) { case $NUMBER$ :
rank: 620
score: 98.39468819754464
patch: match $NUMBER$ ( str ) ;
rank: 620
score: 98.28743198939732
patch: case $NUMBER$ : default : {
rank: 620
score: 98.09991455078125
patch: if ( str == null )
rank: 620
score: 97.79791259765625
patch: case String . Integer :
rank: 621
score: 98.74492797851562
patch: case 1 : if $NUMBER$ { * / /
rank: 621
score: 98.71356201171875
patch: case 0 : case case 1 :
rank: 621
score: 98.67544991629464
patch: / * { * * /
rank: 621
score: 98.59193929036458
patch: case $NUMBER$ : case $NUMBER$ : else {
rank: 621
score: 98.09831019810268
patch: case $NUMBER$ : break false ;
rank: 621
score: 97.82886759440105
patch: case $NUMBER$ = $NUMBER$ ;
rank: 621
score: 97.79740397135417
patch: case & $STRING$ : {
rank: 622
score: 98.74488067626953
patch: case $NUMBER$ : : if $NUMBER$ :
rank: 622
score: 98.67530314127605
patch: case $STRING$ : / * * { * * * /
rank: 622
score: 98.39413016183036
patch: case SIZE : return false ;
rank: 622
score: 97.82725219726562
patch: case SIZE : {
rank: 622
score: 97.79613240559895
patch: case ( $NUMBER$ ] )
rank: 623
score: 98.74444580078125
patch: case $NUMBER$ : if $NUMBER$ : if $NUMBER$ :
rank: 623
score: 98.71275111607143
patch: case 0 : return $NUMBER$ {
rank: 623
score: 98.67465444711539
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { if {
rank: 623
score: 98.39274088541667
patch: case ( 1 ) ;
rank: 623
score: 98.38228062220982
patch: case $NUMBER$ : case $NUMBER$ ?
rank: 623
score: 98.28547014508929
patch: case $NUMBER$ ? - 1 :
rank: 623
score: 98.09602573939732
patch: case $NUMBER$ : { continue ;
rank: 623
score: 97.79544067382812
patch: case case $NUMBER$ : {
rank: 624
score: 98.71239471435547
patch: case 1 : { case ) ;
rank: 624
score: 98.67436872209821
patch: case 1 : break : }
rank: 624
score: 98.38143484933036
patch: case $NUMBER$ : case $STRING$ ;
rank: 624
score: 98.28104073660714
patch: case $NUMBER$ : System . :
rank: 624
score: 97.82418060302734
patch: return $STRING$ ;
rank: 624
score: 97.79421997070312
patch: case ) { $STRING$ :
rank: 625
score: 98.71212768554688
patch: case 0 : if case 1 :
rank: 625
score: 98.67385428292411
patch: case 0 : return null {
rank: 625
score: 98.38805135091145
patch: default ( str ) ;
rank: 625
score: 98.27979532877605
patch: case $NUMBER$ ? $STRING$ :
rank: 625
score: 97.82274373372395
patch: case Long . $STRING$ :
rank: 625
score: 97.7937520345052
patch: case $NUMBER$ : { .
rank: 626
score: 98.74401245117187
patch: case 1 : if $NUMBER$ { / * /
rank: 626
score: 98.71158272879464
patch: case 0 : { $NUMBER$ {
rank: 626
score: 98.6728515625
patch: { * * * * * $NUMBER$ . 0 : * /
rank: 626
score: 98.57550048828125
patch: : return false ; case $NUMBER$ :
rank: 626
score: 98.38793182373047
patch: case ( $NUMBER$ - $NUMBER$ ) :
rank: 626
score: 98.27565220424107
patch: case - 1 : return :
rank: 626
score: 97.81570434570312
patch: update ( str ) ;
rank: 626
score: 97.79246215820312
patch: case case 1 :
rank: 627
score: 98.74362182617188
patch: case $NUMBER$ : while $NUMBER$ { case $NUMBER$ :
rank: 627
score: 98.71121651785714
patch: case $NUMBER$ : { * {
rank: 627
score: 98.67137145996094
patch: { * /
rank: 627
score: 98.5684814453125
patch: case $NUMBER$ : { System . :
rank: 627
score: 98.37992640904018
patch: case 1 : return $NUMBER$ ;
rank: 627
score: 98.27513776506696
patch: case $STRING$ : return true :
rank: 627
score: 98.09230259486607
patch: case $STRING$ : return ) ;
rank: 627
score: 97.81370035807292
patch: return Boolean . Integer ;
rank: 627
score: 97.79227701822917
patch: case ? case $NUMBER$ :
rank: 628
score: 98.71007537841797
patch: else { case $NUMBER$ + $NUMBER$ :
rank: 628
score: 98.67059326171875
patch: { * * * * { * * * * /
rank: 628
score: 98.27425711495536
patch: case - 1 : { {
rank: 628
score: 97.81142171223958
patch: return Boolean . FALSE ;
rank: 629
score: 98.74180908203125
patch: case $NUMBER$ : if case 1 : * /
rank: 629
score: 98.70850372314453
patch: case case $STRING$ : case $NUMBER$ :
rank: 629
score: 98.27377319335938
patch: default : {
rank: 629
score: 97.81116943359375
patch: case - : {
rank: 630
score: 98.74142456054688
patch: case $NUMBER$ : { case $NUMBER$ + 1 :
rank: 630
score: 98.70829772949219
patch: catch case $STRING$ : case $NUMBER$ :
rank: 630
score: 98.668505859375
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return $NUMBER$ : {
rank: 630
score: 98.56502278645833
patch: { case $NUMBER$ : {
rank: 630
score: 98.26904296875
patch: default : return true ; {
rank: 630
score: 97.8108418782552
patch: case Boolean . $NUMBER$ ;
rank: 630
score: 97.79016723632813
patch: case & null :
rank: 631
score: 98.74127197265625
patch: case $NUMBER$ : { / / ?
rank: 631
score: 98.70733642578125
patch: case 1 : { case SIZE :
rank: 631
score: 98.66813151041667
patch: case $STRING$ : * * * * * * * /
rank: 631
score: 97.78902180989583
patch: case Long . $NUMBER$ :
rank: 632
score: 98.74124581473214
patch: case 1 : if : {
rank: 632
score: 98.70635223388672
patch: case $NUMBER$ : { { $NUMBER$ :
rank: 632
score: 98.66783854166667
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return $NUMBER$ ; }
rank: 632
score: 98.37391153971355
patch: if ( false ) {
rank: 632
score: 98.26772054036458
patch: case $NUMBER$ || str {
rank: 632
score: 98.08762032645089
patch: case $NUMBER$ : for ( )
rank: 632
score: 97.81021118164062
patch: to CaMeL Boolean ++ ;
rank: 632
score: 97.78785400390625
patch: case length $NUMBER$ :
rank: 633
score: 98.7410400390625
patch: case 1 : case $NUMBER$ { * / /
rank: 633
score: 98.70555114746094
patch: case 1 ? { case $NUMBER$ :
rank: 633
score: 98.66764322916667
patch: case 0 + 1 :
rank: 633
score: 98.37712751116071
patch: case length ( ) : {
rank: 633
score: 98.3721923828125
patch: } if ( false ) {
rank: 633
score: 98.26588657924107
patch: case $NUMBER$ | { default :
rank: 633
score: 98.0866190592448
patch: case ) return false ;
rank: 633
score: 97.7869364420573
patch: case str . name :
rank: 634
score: 98.74074096679688
patch: case $NUMBER$ : { / * * * /
rank: 634
score: 98.70533752441406
patch: case 0 : case - 1 {
rank: 634
score: 98.37346540178571
patch: case $NUMBER$ : { } else
rank: 634
score: 98.37115478515625
patch: case / case $NUMBER$ : {
rank: 634
score: 98.2652587890625
patch: default : return false ; {
rank: 634
score: 98.0860595703125
patch: case static $NUMBER$ : {
rank: 634
score: 97.80770874023438
patch: case $NUMBER$ switch $NUMBER$ :
rank: 634
score: 97.78664143880208
patch: case 1 : / *
rank: 635
score: 98.74058837890625
patch: case 1 : / * / case $NUMBER$ :
rank: 635
score: 98.70425415039062
patch: case 0 : { if $NUMBER$ {
rank: 635
score: 98.66641235351562
patch: case 0 : * /
rank: 635
score: 98.55070277622768
patch: > $NUMBER$ ; case $NUMBER$ :
rank: 635
score: 97.78603108723958
patch: case ) { / *
rank: 636
score: 98.70417785644531
patch: case $NUMBER$ : case $NUMBER$ { :
rank: 636
score: 98.66600545247395
patch: { * * * * * * / case 1 :
rank: 636
score: 98.54206848144531
patch: case 1 : return false ; {
rank: 636
score: 97.8016866048177
patch: switch ( name ) {
rank: 636
score: 97.78352864583333
patch: case String == $STRING$ :
rank: 637
score: 98.70378112792969
patch: case $STRING$ : { { * /
rank: 637
score: 98.66534423828125
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { if { {
rank: 637
score: 98.54084777832031
patch: case $STRING$ { case $NUMBER$ : {
rank: 637
score: 98.37245396205357
patch: case ( $STRING$ : break ;
rank: 637
score: 98.36910574776786
patch: case $NUMBER$ case $NUMBER$ : {
rank: 637
score: 98.257080078125
patch: case $NUMBER$ . 0 :
rank: 637
score: 98.0767110188802
patch: case $NUMBER$ : char CaMeL
rank: 637
score: 97.78333536783855
patch: length ( ) ; }
rank: 638
score: 98.74024963378906
patch: case $NUMBER$ : case 1 : /
rank: 638
score: 98.70367431640625
patch: case $NUMBER$ : { { * {
rank: 638
score: 98.66323852539062
patch: { * * * * { { / } } }
rank: 638
score: 98.3699951171875
patch: case $NUMBER$ : break $NUMBER$ ;
rank: 638
score: 98.36812918526786
patch: case $NUMBER$ : throw null ;
rank: 638
score: 98.25169154575893
patch: case $NUMBER$ : * / {
rank: 638
score: 97.79781087239583
patch: case : return null ;
rank: 638
score: 97.78160603841145
patch: case Exception . 0 :
rank: 639
score: 98.7399169921875
patch: case $NUMBER$ : / $NUMBER$ { case $NUMBER$ :
rank: 639
score: 98.70174734933036
patch: case $NUMBER$ + case $NUMBER$ :
rank: 639
score: 98.66304524739583
patch: case $STRING$ { / * * { * * * /
rank: 639
score: 98.53931535993304
patch: case 1 : { default :
rank: 639
score: 98.36990792410714
patch: return true ; } else {
rank: 639
score: 98.24891008649554
patch: case $NUMBER$ : return ! {
rank: 639
score: 97.79703776041667
patch: case Boolean . Number ;
rank: 639
score: 97.77978515625
patch: case ++ $NUMBER$ :
rank: 640
score: 98.73903982979911
patch: case $NUMBER$ : * $NUMBER$ {
rank: 640
score: 98.70172119140625
patch: case 1 : { else { }
rank: 640
score: 98.65924072265625
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return $NUMBER$ :
rank: 640
score: 98.0607401529948
patch: case $NUMBER$ . 1 :
rank: 640
score: 97.79404703776042
patch: case $NUMBER$ case $NUMBER$ :
rank: 640
score: 97.77942911783855
patch: case - 1 ; }
rank: 641
score: 98.73850708007812
patch: case 1 : { { { case 1 :
rank: 641
score: 98.65903145926339
patch: { * * * : /
rank: 641
score: 98.5346908569336
patch: { case 1 : case 1 :
rank: 641
score: 98.2446797688802
patch: default : case 1 :
rank: 641
score: 98.06026204427083
patch: case ) return true ;
rank: 641
score: 97.79271240234375
patch: case -= $NUMBER$ :
rank: 641
score: 97.7786356608073
patch: case str ; 1 :
rank: 642
score: 98.7012710571289
patch: case - $NUMBER$ : case 0 {
rank: 642
score: 98.65831502278645
patch: { * * * * * * $NUMBER$ : * /
rank: 642
score: 98.36505998883929
patch: case $NUMBER$ : return str ;
rank: 642
score: 98.36307198660714
patch: 0 ) { case $NUMBER$ :
rank: 642
score: 97.77650960286458
patch: case ) { static :
rank: 643
score: 98.7379638671875
patch: case $NUMBER$ : case 1 { break $NUMBER$ :
rank: 643
score: 98.65573120117188
patch: { * * * * * * : * * /
rank: 643
score: 98.5321273803711
patch: case $NUMBER$ : return { { {
rank: 643
score: 98.36163330078125
patch: case $NUMBER$ : System .
rank: 643
score: 98.35901750837054
patch: case $NUMBER$ == 1 : {
rank: 643
score: 98.24419294084821
patch: case $NUMBER$ : { if :
rank: 643
score: 98.0585428873698
patch: case ? $NUMBER$ : {
rank: 643
score: 97.78922526041667
patch: case $NUMBER$ >> $NUMBER$ :
rank: 643
score: 97.77609252929688
patch: / * * $NUMBER$ /
rank: 644
score: 98.73764038085938
patch: case 1 : if $NUMBER$ : /
rank: 644
score: 98.70053100585938
patch: case 1 { case $NUMBER$ { {
rank: 644
score: 98.65492350260416
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ ; {
rank: 644
score: 98.36032540457589
patch: 0 : { case $STRING$ :
rank: 644
score: 98.35879952566964
patch: case $NUMBER$ : return break ;
rank: 644
score: 97.77577718098958
patch: case str , $STRING$ ;
rank: 645
score: 98.73762817382813
patch: case $NUMBER$ : { if : * * /
rank: 645
score: 98.69963836669922
patch: case $NUMBER$ : { case $NUMBER$ }
rank: 645
score: 98.65465436662946
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return $NUMBER$ {
rank: 645
score: 98.5300521850586
patch: case $NUMBER$ : return case $NUMBER$ ;
rank: 645
score: 98.35582478841145
patch: case $NUMBER$ : : {
rank: 645
score: 98.23915318080357
patch: case 0 : return default :
rank: 645
score: 98.05152384440105
patch: case 1 : $STRING$ :
rank: 646
score: 98.7373291015625
patch: case $NUMBER$ : { if $NUMBER$ : { {
rank: 646
score: 98.69912719726562
patch: case 0 : : case $NUMBER$ :
rank: 646
score: 98.65382893880208
patch: * * { * * * { * * * /
rank: 646
score: 98.35930524553571
patch: case $NUMBER$ / case $NUMBER$ :
rank: 646
score: 98.35464041573661
patch: case ( $NUMBER$ ] ) :
rank: 646
score: 98.23841349283855
patch: case $NUMBER$ || str :
rank: 646
score: 97.78113810221355
patch: case { case $NUMBER$ :
rank: 646
score: 97.7742207845052
patch: case Long . 0 :
rank: 647
score: 98.737060546875
patch: case $NUMBER$ : { if { / * /
rank: 647
score: 98.69905090332031
patch: case $NUMBER$ : { case Integer :
rank: 647
score: 98.65318952287946
patch: case $NUMBER$ + 0 : {
rank: 647
score: 98.35344587053571
patch: case $NUMBER$ : return ( str
rank: 647
score: 98.23753138950893
patch: case 1 : return false :
rank: 647
score: 98.04597981770833
patch: case $NUMBER$ . $STRING$ :
rank: 647
score: 97.77264404296875
patch: case + $STRING$ :
rank: 648
score: 98.73680419921875
patch: case $NUMBER$ : { / { * / /
rank: 648
score: 98.69854736328125
patch: case $NUMBER$ : case $NUMBER$ | {
rank: 648
score: 98.65315755208333
patch: { * * * * * * * * / /
rank: 648
score: 98.35682024274554
patch: case $NUMBER$ { return false ;
rank: 648
score: 97.76841227213542
patch: case str , $STRING$ }
rank: 649
score: 98.73663330078125
patch: case 1 : case 1 : :
rank: 649
score: 98.69827270507812
patch: case 0 : / case $NUMBER$ :
rank: 649
score: 98.65199497767857
patch: / * * * / /
rank: 649
score: 98.52385711669922
patch: : case $NUMBER$ : case $NUMBER$ :
rank: 649
score: 98.35581752232143
patch: case ) { return true ;
rank: 649
score: 98.23460170200893
patch: case $NUMBER$ : return format :
rank: 649
score: 97.76786295572917
patch: case to CaMeL Boolean :
rank: 650
score: 98.73662719726562
patch: case $NUMBER$ : { case $NUMBER$ : if :
rank: 650
score: 98.6970443725586
patch: i case $STRING$ : case $NUMBER$ :
rank: 650
score: 98.65176391601562
patch: { * * * * * : * * * /
rank: 650
score: 98.35573904854911
patch: 0 { case $NUMBER$ : {
rank: 650
score: 98.23080008370536
patch: default : case - 1 :
rank: 650
score: 97.7711893717448
patch: case Math . $STRING$ :
rank: 650
score: 97.7672831217448
patch: String str = str ;
rank: 651
score: 98.69659423828125
patch: case 0 ] { case 0 :
rank: 651
score: 98.65041097005208
patch: { * * * : * { * * * /
rank: 651
score: 98.517333984375
patch: case 1 : return true : {
rank: 651
score: 98.35560825892857
patch: case $NUMBER$ : { case $NUMBER$
rank: 651
score: 98.23018973214286
patch: case $NUMBER$ ? $STRING$ : {
rank: 651
score: 97.76699829101562
patch: case / / * /
rank: 652
score: 98.73636300223214
patch: case $NUMBER$ : break : {
rank: 652
score: 98.69569396972656
patch: case 0 { case $STRING$ : {
rank: 652
score: 98.51596069335938
patch: : return true ; case 1 :
rank: 652
score: 98.230078125
patch: default : return {
rank: 652
score: 98.03424072265625
patch: case static $NUMBER$ :
rank: 652
score: 97.76552327473958
patch: case >> 1 : {
rank: 653
score: 98.73617989676339
patch: case $NUMBER$ { case 1 {
rank: 653
score: 98.64903767903645
patch: { * { * * * { * * * /
rank: 653
score: 98.51380920410156
patch: case 1 : if ( { {
rank: 653
score: 98.35251290457589
patch: case 1 : return 0 ;
rank: 653
score: 98.22896902901786
patch: case 0 : { default :
rank: 653
score: 97.7643330891927
patch: case this . str :
rank: 654
score: 98.73611450195312
patch: case 1 : case - 1 {
rank: 654
score: 98.6951904296875
patch: case $STRING$ : case $NUMBER$ / {
rank: 654
score: 98.64901733398438
patch: * * { * * * : * * * /
rank: 654
score: 98.3513692220052
patch: case ( $STRING$ ) {
rank: 654
score: 98.22678920200893
patch: case 1 : return default :
rank: 654
score: 98.03335571289062
patch: case extends $STRING$ : {
rank: 654
score: 97.76643371582031
patch: return null ;
rank: 654
score: 97.76388549804688
patch: case Long . 1 :
rank: 655
score: 98.73599243164062
patch: case 1 : { case 1 : * /
rank: 655
score: 98.6949462890625
patch: case 0 : case $NUMBER$ { :
rank: 655
score: 98.64817301432292
patch: { * * * * * * * * : /
rank: 655
score: 98.35108293805804
patch: case $NUMBER$ : { false :
rank: 655
score: 97.76600341796875
patch: return $STRING$ ; }
rank: 656
score: 98.7353515625
patch: case 1 : case $NUMBER$ : break $NUMBER$ :
rank: 656
score: 98.69486999511719
patch: case 1 : { case $STRING$ ;
rank: 656
score: 98.6466064453125
patch: { * { * * /
rank: 656
score: 98.35107421875
patch: case $STRING$ case $STRING$ : {
rank: 656
score: 98.32853480747768
patch: case $NUMBER$ : * $STRING$ ;
rank: 656
score: 97.76568603515625
patch: case Boolean . Boolean ;
rank: 656
score: 97.76082356770833
patch: case str ; / ?
rank: 657
score: 98.73504638671875
patch: case 1 : case $NUMBER$ : if $NUMBER$ {
rank: 657
score: 98.69446563720703
patch: case $NUMBER$ : case false : {
rank: 657
score: 98.6465555826823
patch: { * * * * * / if case $NUMBER$ :
rank: 657
score: 98.34818812779018
patch: case ( String ) $STRING$ ;
rank: 657
score: 98.32780238560268
patch: case ( - 1 ) {
rank: 657
score: 98.22442626953125
patch: case Double . $NUMBER$ :
rank: 657
score: 97.763427734375
patch: return Boolean . Double ;
rank: 657
score: 97.75941772460938
patch: case ) { }
rank: 658
score: 98.734716796875
patch: case $NUMBER$ : case $NUMBER$ + $NUMBER$ : {
rank: 658
score: 98.69419860839844
patch: case $NUMBER$ : } case $STRING$ :
rank: 658
score: 98.64585658482143
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return null ;
rank: 658
score: 98.32765415736607
patch: case ( 1 ] ) :
rank: 658
score: 98.2210693359375
patch: case $NUMBER$ ? $NUMBER$ : {
rank: 658
score: 97.76295979817708
patch: case $NUMBER$ = $STRING$ ;
rank: 658
score: 97.75850423177083
patch: public String ( ) {
rank: 659
score: 98.69414520263672
patch: case case $NUMBER$ { case $NUMBER$ :
rank: 659
score: 98.64567057291667
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return false ; }
rank: 659
score: 98.50334930419922
patch: case $NUMBER$ * { case $NUMBER$ :
rank: 659
score: 98.34565080915179
patch: case $NUMBER$ - $NUMBER$ : {
rank: 659
score: 98.3275146484375
patch: try { case $NUMBER$ : {
rank: 659
score: 98.2197977701823
patch: case $NUMBER$ * $STRING$ :
rank: 659
score: 97.75839233398438
patch: case & - $NUMBER$ :
rank: 660
score: 98.734423828125
patch: case 1 : { if case 1 { {
rank: 660
score: 98.69383239746094
patch: case 0 : case 0 : :
rank: 660
score: 98.64523315429688
patch: { * * * * : * * * * /
rank: 660
score: 98.5029525756836
patch: > 0 ? { case $NUMBER$ :
rank: 660
score: 98.32395717075893
patch: case 1 : { try {
rank: 660
score: 98.21852329799107
patch: case 0 : return true {
rank: 660
score: 98.02604370117187
patch: case >= $NUMBER$ :
rank: 661
score: 98.73356628417969
patch: case $NUMBER$ : / * / {
rank: 661
score: 98.69377899169922
patch: case $NUMBER$ : case 0 { :
rank: 661
score: 98.64470563616071
patch: case $STRING$ { break ; }
rank: 661
score: 98.34425571986607
patch: case ; case $STRING$ : {
rank: 661
score: 98.32340785435268
patch: case ( char ) str :
rank: 661
score: 98.21831403459821
patch: case - 1 : return {
rank: 661
score: 97.76186116536458
patch: if ( true ) {
rank: 661
score: 97.75599161783855
patch: case String . NULL :
rank: 662
score: 98.73345947265625
patch: case 1 : { / /
rank: 662
score: 98.69358607700893
patch: case 1 : return $NUMBER$ {
rank: 662
score: 98.6444091796875
patch: * * * * * * * { case $NUMBER$ :
rank: 662
score: 98.50260925292969
patch: case $NUMBER$ : return : : {
rank: 662
score: 98.34414672851562
patch: case $STRING$ case $STRING$ :
rank: 662
score: 98.32262166341145
patch: case ( $STRING$ : {
rank: 662
score: 97.75823974609375
patch: case / + $NUMBER$ :
rank: 662
score: 97.75533040364583
patch: case $STRING$ | $STRING$ ;
rank: 663
score: 98.73274993896484
patch: case $NUMBER$ : : case $NUMBER$ {
rank: 663
score: 98.69349670410156
patch: case $NUMBER$ : case - $STRING$ :
rank: 663
score: 98.64345296223958
patch: { * * * * { * / } else {
rank: 663
score: 98.49893188476562
patch: case $NUMBER$ : { <= $NUMBER$ ;
rank: 663
score: 98.32237897600446
patch: case ( $NUMBER$ $NUMBER$ ) :
rank: 663
score: 98.21372767857143
patch: case $NUMBER$ : return 1 :
rank: 663
score: 97.75384521484375
patch: case * - $NUMBER$ :
rank: 664
score: 98.64219447544643
patch: case 1 + 0 : {
rank: 664
score: 98.21175711495536
patch: case $NUMBER$ || { default :
rank: 664
score: 97.75426228841145
patch: case Boolean . null ;
rank: 664
score: 97.7506815592448
patch: case String . in :
rank: 665
score: 98.69326782226562
patch: case 1 : { case Short :
rank: 665
score: 98.6418965657552
patch: * * * * * { { * * * /
rank: 665
score: 98.31947835286458
patch: case ( 0 ) {
rank: 665
score: 98.20987374441964
patch: case 0 : return false :
rank: 665
score: 98.0177734375
patch: case true : {
rank: 665
score: 97.75389607747395
patch: return new return false ;
rank: 665
score: 97.74959309895833
patch: case / > 1 :
rank: 666
score: 98.73045349121094
patch: case 1 : / * / /
rank: 666
score: 98.69319915771484
patch: case 0 : { case ) ;
rank: 666
score: 98.64142252604167
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { return $NUMBER$ : {
rank: 666
score: 98.49258422851562
patch: case $NUMBER$ : { if ( :
rank: 666
score: 98.20738874162946
patch: case $NUMBER$ : switch ( :
rank: 666
score: 97.751953125
patch: return null ; }
rank: 666
score: 97.74954833984376
patch: case $STRING$ : ;
rank: 667
score: 98.69291687011719
patch: case 1 : case $NUMBER$ * {
rank: 667
score: 98.64115397135417
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return null ; }
rank: 667
score: 98.48875427246094
patch: case 1 : ; case $NUMBER$ :
rank: 667
score: 98.31894938151042
patch: case $NUMBER$ == $NUMBER$ :
rank: 667
score: 98.20452008928571
patch: case 1 : return true {
rank: 667
score: 98.0172831217448
patch: System . return false ;
rank: 667
score: 97.75057983398438
patch: } System . else {
rank: 667
score: 97.74550374348958
patch: case 1 : ; }
rank: 668
score: 98.72799682617188
patch: case $NUMBER$ : { / $NUMBER$ :
rank: 668
score: 98.69253540039062
patch: case $NUMBER$ { case $NUMBER$ ; {
rank: 668
score: 98.33781215122768
patch: $NUMBER$ : { case $STRING$ :
rank: 668
score: 98.20266287667411
patch: default : { return false ;
rank: 668
score: 97.74432373046875
patch: case Boolean . default :
rank: 669
score: 98.72773742675781
patch: case $NUMBER$ : while case $NUMBER$ :
rank: 669
score: 98.69200897216797
patch: catch case $NUMBER$ { case $NUMBER$ :
rank: 669
score: 98.20172119140625
patch: case $STRING$ : return true {
rank: 669
score: 97.74767049153645
patch: switch ( value ) {
rank: 669
score: 97.74411010742188
patch: case $STRING$ : for (
rank: 670
score: 98.72721862792969
patch: case $NUMBER$ : String / $NUMBER$ {
rank: 670
score: 98.69182477678571
patch: else { case 1 : {
rank: 670
score: 98.63679722377232
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { case $STRING$ :
rank: 670
score: 98.33368791852679
patch: case $NUMBER$ : $NUMBER$ : {
rank: 670
score: 98.20062255859375
patch: case $NUMBER$ : return str {
rank: 671
score: 98.72689056396484
patch: case $NUMBER$ : return * $NUMBER$ :
rank: 671
score: 98.69149780273438
patch: case 0 : case $NUMBER$ * {
rank: 671
score: 98.63443429129464
patch: case 0 + $NUMBER$ : {
rank: 671
score: 98.33336530412946
patch: case $NUMBER$ : * $NUMBER$ :
rank: 671
score: 98.30487060546875
patch: case $NUMBER$ : case ) {
rank: 671
score: 98.20049176897321
patch: case $NUMBER$ || $STRING$ . :
rank: 671
score: 97.74688720703125
patch: } } case $NUMBER$ :
rank: 671
score: 97.7437032063802
patch: case char CaMeL At ;
rank: 672
score: 98.72617885044643
patch: case $NUMBER$ : / / {
rank: 672
score: 98.69134521484375
patch: * * { case $NUMBER$ :
rank: 672
score: 98.63421020507812
patch: * { * /
rank: 672
score: 98.33122035435268
patch: } if ( true ) {
rank: 672
score: 98.30405883789062
patch: case ( $NUMBER$ :
rank: 672
score: 98.19927978515625
patch: case $NUMBER$ : for $NUMBER$ :
rank: 672
score: 97.7434794108073
patch: case > 0 : {
rank: 673
score: 98.72591400146484
patch: case - $NUMBER$ : / / /
rank: 673
score: 98.69111633300781
patch: { case $NUMBER$ : case 0 :
rank: 673
score: 98.48061697823661
patch: case 0 : return : {
rank: 673
score: 98.30238560267857
patch: case ( int ) $STRING$ :
rank: 673
score: 98.1990966796875
patch: case NULL :
rank: 673
score: 97.74153645833333
patch: case $NUMBER$ : log .
rank: 674
score: 98.69100952148438
patch: case $NUMBER$ : case 1 : }
rank: 674
score: 98.63345102163461
patch: { * * * * * $NUMBER$ . $NUMBER$ : * /
rank: 674
score: 98.47967529296875
patch: : return false ; case 1 :
rank: 674
score: 98.3016845703125
patch: case str : {
rank: 674
score: 98.1990966796875
patch: case default : case $NUMBER$ :
rank: 675
score: 98.63328334263393
patch: case $STRING$ : break : {
rank: 675
score: 98.47869110107422
patch: case 1 : { default : {
rank: 675
score: 98.30133928571429
patch: case $NUMBER$ : / : {
rank: 675
score: 98.1985575358073
patch: case $NUMBER$ ? $NUMBER$ :
rank: 675
score: 98.00736490885417
patch: case Boolean . XML :
rank: 675
score: 97.74019368489583
patch: case String . string CaMeL
rank: 676
score: 98.72230529785156
patch: case 1 : / / * /
rank: 676
score: 98.69068145751953
patch: case $STRING$ : { case 1 ;
rank: 676
score: 98.63327462332589
patch: case 1 : return null {
rank: 676
score: 98.32802908761161
patch: case $NUMBER$ - 1 : {
rank: 676
score: 98.19294084821429
patch: case $NUMBER$ : return value {
rank: 677
score: 98.72212219238281
patch: case new $NUMBER$ : case $NUMBER$ :
rank: 677
score: 98.69044494628906
patch: case $NUMBER$ : case 0 : }
rank: 677
score: 98.62901088169643
patch: case $STRING$ : break ; }
rank: 677
score: 98.29764811197917
patch: case 0 : { }
rank: 677
score: 98.19042096819196
patch: case $NUMBER$ : ? default :
rank: 677
score: 97.739208984375
patch: case - ) {
rank: 678
score: 98.72098541259766
patch: case $NUMBER$ : { return 1 :
rank: 678
score: 98.69004821777344
patch: case $NUMBER$ { { * / {
rank: 678
score: 98.6285909016927
patch: case 1 { break :
rank: 678
score: 98.47296142578125
patch: case $NUMBER$ : return : false ;
rank: 678
score: 98.2912841796875
patch: result = true ;
rank: 678
score: 97.99610392252605
patch: case & null : {
rank: 678
score: 97.73734130859376
patch: case $STRING$ finally {
rank: 678
score: 97.73477172851562
patch: case << : {
rank: 679
score: 98.71847970145089
patch: case $NUMBER$ : / { /
rank: 679
score: 98.68846893310547
patch: case $NUMBER$ : case - : {
rank: 679
score: 98.62854875837054
patch: case $STRING$ + 0 : {
rank: 679
score: 98.28194173177083
patch: case $NUMBER$ == 1 :
rank: 679
score: 98.18003627232143
patch: case Double . $NUMBER$ : {
rank: 679
score: 97.7369384765625
patch: / * $NUMBER$ /
rank: 680
score: 98.71717180524554
patch: case $NUMBER$ : * / /
rank: 680
score: 98.68846784319196
patch: case 0 { case $NUMBER$ {
rank: 680
score: 98.62743268694196
patch: case $STRING$ : return null {
rank: 680
score: 98.27681884765624
patch: result = false ;
rank: 680
score: 98.17987932477679
patch: case $NUMBER$ : - 1 :
rank: 680
score: 97.99276733398438
patch: case 1 : ) {
rank: 680
score: 97.73594156901042
patch: case str [ 0 :
rank: 680
score: 97.72940063476562
patch: case $NUMBER$ : )
rank: 681
score: 98.68807983398438
patch: else { case $NUMBER$ {
rank: 681
score: 98.625732421875
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return false ; }
rank: 681
score: 98.2595723470052
patch: case ( 0 ) ;
rank: 681
score: 98.17732747395833
patch: case Integer . NULL :
rank: 681
score: 97.73572794596355
patch: case Boolean , $STRING$ :
rank: 681
score: 97.72393798828125
patch: case Boolean . Double ;
rank: 682
score: 98.71449497767857
patch: case $NUMBER$ : / { {
rank: 682
score: 98.68778991699219
patch: case 0 : case $NUMBER$ / {
rank: 682
score: 98.62510463169643
patch: case $STRING$ { break : }
rank: 682
score: 98.46470424107143
patch: case $NUMBER$ : / * {
rank: 682
score: 97.73541259765625
patch: case ] = $STRING$ ;
rank: 683
score: 98.71280343191964
patch: case $NUMBER$ : * { {
rank: 683
score: 98.68744659423828
patch: case 1 : case $NUMBER$ / {
rank: 683
score: 98.30967407226562
patch: case $NUMBER$ ) {
rank: 683
score: 98.16928536551339
patch: case $STRING$ : return default :
rank: 683
score: 97.98998006184895
patch: case $NUMBER$ / 0 :
rank: 683
score: 97.73414103190105
patch: case Integer . false :
rank: 684
score: 98.71129499162946
patch: case 1 : / $NUMBER$ {
rank: 684
score: 98.46161651611328
patch: case Character . MAX _ VALUE :
rank: 684
score: 98.30289713541667
patch: case $NUMBER$ - 1 :
rank: 684
score: 97.9894510904948
patch: case / 1 : {
rank: 684
score: 97.73318481445312
patch: case String . str ;
rank: 684
score: 97.72055053710938
patch: case ~ $STRING$ :
rank: 685
score: 98.71075439453125
patch: case $NUMBER$ : = $NUMBER$ :
rank: 685
score: 98.62222290039062
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { return $NUMBER$ ; } }
rank: 685
score: 98.30245971679688
patch: case $NUMBER$ * 1 :
rank: 685
score: 97.9876200358073
patch: case $NUMBER$ : $NUMBER$ ;
rank: 685
score: 97.73184204101562
patch: case String . count :
rank: 685
score: 97.71897379557292
patch: case $NUMBER$ + str ;
rank: 686
score: 98.71002197265625
patch: case $NUMBER$ : break $NUMBER$ :
rank: 686
score: 98.68684387207031
patch: case 0 : case $NUMBER$ + {
rank: 686
score: 98.62217610677084
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return false : {
rank: 686
score: 98.45805358886719
patch: case $NUMBER$ : if ( : {
rank: 686
score: 97.72869262695312
patch: case - $STRING$ :
rank: 686
score: 97.71582641601563
patch: case | $NUMBER$ :
rank: 687
score: 98.70646158854167
patch: case 1 : * {
rank: 687
score: 98.68437194824219
patch: case $STRING$ : case - $NUMBER$ {
rank: 687
score: 98.62157264122597
patch: { * * { * * * : * * * /
rank: 687
score: 98.45795440673828
patch: case $NUMBER$ else { case $NUMBER$ :
rank: 687
score: 98.24692789713542
patch: / * $NUMBER$ : {
rank: 687
score: 98.1670633951823
patch: default : return true {
rank: 687
score: 97.72714233398438
patch: case static :
rank: 688
score: 98.68370819091797
patch: case - $NUMBER$ : case $NUMBER$ {
rank: 688
score: 98.62085832868304
patch: case 1 : break $NUMBER$ :
rank: 688
score: 98.23961181640625
patch: else case $NUMBER$ :
rank: 688
score: 98.16684977213542
patch: default : return true :
rank: 688
score: 97.72684733072917
patch: case ) { / ?
rank: 688
score: 97.71324462890625
patch: case $NUMBER$ : .
rank: 689
score: 98.70443725585938
patch: case $NUMBER$ : if :
rank: 689
score: 98.68353271484375
patch: case 1 : case $NUMBER$ { :
rank: 689
score: 98.62067057291667
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return 1 ; }
rank: 689
score: 98.164794921875
patch: case - 1 : if :
rank: 689
score: 97.9771016438802
patch: System . return true ;
rank: 689
score: 97.7267822265625
patch: case value 0 :
rank: 690
score: 98.68310546875
patch: case $NUMBER$ : / case 1 :
rank: 690
score: 98.61884416852679
patch: { { * * * /
rank: 690
score: 98.45755440848214
patch: <= $NUMBER$ ; case $NUMBER$ :
rank: 690
score: 97.97597249348958
patch: case - - $NUMBER$ :
rank: 690
score: 97.72084350585938
patch: / * for (
rank: 690
score: 97.71164957682292
patch: return new return true ;
rank: 691
score: 98.68307931082589
patch: case 0 : { $NUMBER$ :
rank: 691
score: 98.61677769252232
patch: case $NUMBER$ : break : }
rank: 691
score: 98.16118512834821
patch: default : throw new : {
rank: 691
score: 97.71939086914062
patch: case value CaMeL Of :
rank: 692
score: 98.70029122488839
patch: case $NUMBER$ : { : {
rank: 692
score: 98.68211146763393
patch: case $NUMBER$ : case SIZE :
rank: 692
score: 98.61625453404018
patch: case 0 : break $NUMBER$ :
rank: 692
score: 98.16072300502232
patch: default : { return true ;
rank: 692
score: 97.97556559244792
patch: case $NUMBER$ : { )
rank: 692
score: 97.71921793619792
patch: case ? str 0 :
rank: 692
score: 97.70767211914062
patch: debug ( $STRING$ ) ;
rank: 693
score: 98.70005580357143
patch: case $NUMBER$ : if { {
rank: 693
score: 98.68183135986328
patch: case 0 ? { case $NUMBER$ :
rank: 693
score: 98.61570521763393
patch: * { * * * /
rank: 693
score: 98.22874959309895
patch: default case $NUMBER$ : {
rank: 693
score: 97.71873982747395
patch: / * $STRING$ ) {
rank: 693
score: 97.70750935872395
patch: case Boolean . 1 ;
rank: 694
score: 98.68057686941964
patch: else { case - $NUMBER$ :
rank: 694
score: 98.27618408203125
patch: case $NUMBER$ ?
rank: 694
score: 98.15992228190105
patch: case 1 : default :
rank: 694
score: 97.70465087890625
patch: fail ( $STRING$ ) ;
rank: 695
score: 98.67867279052734
patch: case $STRING$ : { case 0 ;
rank: 695
score: 98.61328125
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return false ;
rank: 695
score: 98.22414143880208
patch: case 1 : continue ;
rank: 695
score: 98.15723528180804
patch: case NULL : return false ;
rank: 695
score: 97.7027587890625
patch: str 0 = $STRING$ ;
rank: 696
score: 98.69562639508929
patch: case $NUMBER$ : { if {
rank: 696
score: 98.67849731445312
patch: case 1 : / case $NUMBER$ :
rank: 696
score: 98.61328125
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return null ;
rank: 696
score: 98.45244489397321
patch: case $NUMBER$ : { break :
rank: 696
score: 98.22313435872395
patch: case $NUMBER$ : return }
rank: 696
score: 98.15643310546875
patch: case Short . $NUMBER$ : {
rank: 696
score: 97.70177205403645
patch: case Boolean . 0 ;
rank: 697
score: 98.61322021484375
patch: { case $STRING$ : break :
rank: 697
score: 98.2629638671875
patch: case $NUMBER$ $NUMBER$ :
rank: 697
score: 97.7126973470052
patch: case str , $STRING$ )
rank: 698
score: 98.68472726004464
patch: case 1 : * { /
rank: 698
score: 98.67798614501953
patch: case 0 : case $NUMBER$ { }
rank: 698
score: 98.61037772042411
patch: case 1 { break : }
rank: 698
score: 98.25518798828125
patch: case $NUMBER$ finally {
rank: 698
score: 98.22252400716145
patch: case $NUMBER$ / : {
rank: 698
score: 97.7119852701823
patch: filter ( str ) ;
rank: 698
score: 97.70062255859375
patch: case *= $NUMBER$ :
rank: 699
score: 98.68238321940105
patch: case $NUMBER$ : { *
rank: 699
score: 98.67756870814732
patch: { else { case $NUMBER$ :
rank: 699
score: 98.61015973772321
patch: case 0 : break ; }
rank: 699
score: 98.44754791259766
patch: case $NUMBER$ : { switch ( :
rank: 699
score: 97.95925903320312
patch: case * $NUMBER$ : {
rank: 699
score: 97.70953369140625
patch: case / * ?
rank: 700
score: 98.68083844866071
patch: case $NUMBER$ : return / {
rank: 700
score: 98.61008707682292
patch: case $STRING$ > 0 :
rank: 700
score: 98.2154541015625
patch: return str == null ;
rank: 700
score: 98.15068359375
patch: case $NUMBER$ * /
rank: 700
score: 97.70762329101562
patch: case EMPTY : {
rank: 701
score: 98.67989676339286
patch: case 1 : break $NUMBER$ {
rank: 701
score: 98.67229352678571
patch: case 1 : case false :
rank: 701
score: 98.6092529296875
patch: / * { * /
rank: 701
score: 98.14898681640625
patch: default : throw new { }
rank: 701
score: 97.95440673828125
patch: case $NUMBER$ : . {
rank: 701
score: 97.70334879557292
patch: case ? value 0 :
rank: 701
score: 97.6989034016927
patch: / * return false ;
rank: 702
score: 98.4439697265625
patch: case $NUMBER$ : return : :
rank: 702
score: 98.14578683035714
patch: case str . length ( :
rank: 702
score: 97.69796752929688
patch: case / 0 :
rank: 702
score: 97.69659423828125
patch: match ( $STRING$ ) ;
rank: 703
score: 98.60837965745192
patch: { * * * * * { case $NUMBER$ : * /
rank: 703
score: 98.4427490234375
patch: case $NUMBER$ && { case $NUMBER$ :
rank: 703
score: 98.20145670572917
patch: switch ( str ) {
rank: 703
score: 98.14437430245536
patch: case NULL : return true ;
rank: 703
score: 97.95108032226562
patch: case str / $NUMBER$ :
rank: 703
score: 97.69547119140626
patch: case $STRING$ 0 :
rank: 704
score: 98.67637416294643
patch: case 1 : * $NUMBER$ {
rank: 704
score: 98.66943359375
patch: case 0 : { { {
rank: 704
score: 98.60599190848214
patch: / * * ? * /
rank: 704
score: 98.2453104654948
patch: case $STRING$ : return ;
rank: 704
score: 98.14057268415179
patch: default : return { default :
rank: 704
score: 97.69399007161458
patch: length 1 = 0 ;
rank: 704
score: 97.69009399414062
patch: case break $NUMBER$ :
rank: 705
score: 98.66863141741071
patch: case $NUMBER$ : case true :
rank: 705
score: 98.60573167067308
patch: { * * * : * * * * * * /
rank: 705
score: 98.2442398071289
patch: case $STRING$ {
rank: 705
score: 97.6905008951823
patch: case : return $STRING$ ;
rank: 705
score: 97.6839111328125
patch: case ? 1 :
rank: 706
score: 98.67037527901786
patch: case $NUMBER$ : { break {
rank: 706
score: 98.66701834542411
patch: case 0 : case false :
rank: 706
score: 98.60475667317708
patch: case 0 { * /
rank: 706
score: 98.44066619873047
patch: case - 1 : return : {
rank: 706
score: 98.13868931361607
patch: case - $NUMBER$ : default :
rank: 706
score: 97.67977294921874
patch: case ( ) :
rank: 707
score: 98.66650390625
patch: case 0 : return $NUMBER$ ;
rank: 707
score: 98.43920135498047
patch: { case $NUMBER$ : return : {
rank: 707
score: 98.13556780133929
patch: case 1 : return false {
rank: 707
score: 97.68936157226562
patch: case : return ) ;
rank: 708
score: 98.60443584735577
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return {
rank: 708
score: 98.4382095336914
patch: case 1 : return : { {
rank: 708
score: 98.18871053059895
patch: case 1 : true ;
rank: 708
score: 98.13459123883929
patch: case $NUMBER$ * * $STRING$ :
rank: 708
score: 97.685791015625
patch: case $NUMBER$ + TRUE :
rank: 708
score: 97.6738052368164
patch: case / ?
rank: 709
score: 98.65791538783482
patch: case 1 : break : {
rank: 709
score: 98.60434395926339
patch: / * { / * /
rank: 709
score: 98.43761335100446
patch: case 0 : if ( {
rank: 709
score: 98.22869873046875
patch: case $NUMBER$ + $STRING$ ;
rank: 709
score: 98.18668619791667
patch: case 1 : $STRING$ ;
rank: 709
score: 98.12969098772321
patch: case $NUMBER$ : return value ;
rank: 709
score: 97.68375651041667
patch: return this == $STRING$ ;
rank: 709
score: 97.67325592041016
patch: case $STRING$ }
rank: 710
score: 98.60432652064732
patch: case 1 : return { {
rank: 710
score: 98.12955147879464
patch: case 0 : return false {
rank: 710
score: 97.68365478515625
patch: } return false ; }
rank: 710
score: 97.6730224609375
patch: case case $STRING$ :
rank: 711
score: 98.43653869628906
patch: case $NUMBER$ : return : ! {
rank: 711
score: 98.22600708007812
patch: case $NUMBER$ 1 :
rank: 711
score: 98.12928118024554
patch: default : { return true :
rank: 711
score: 97.67049560546874
patch: case * $STRING$ :
rank: 712
score: 98.652587890625
patch: case 1 : case $STRING$ ;
rank: 712
score: 98.60294015066964
patch: case $NUMBER$ : return null {
rank: 712
score: 98.43450164794922
patch: default : : return false ; }
rank: 712
score: 98.22364298502605
patch: 0 { case $NUMBER$ :
rank: 712
score: 98.11729939778645
patch: { case - 1 :
rank: 712
score: 97.93240356445312
patch: case >= $NUMBER$ : {
rank: 712
score: 97.66788330078126
patch: case $STRING$ : .
rank: 713
score: 98.65224783761161
patch: case 0 : case $STRING$ ;
rank: 713
score: 98.60251290457589
patch: case 0 : return { {
rank: 713
score: 98.18123372395833
patch: case 1 : return ;
rank: 713
score: 98.1146240234375
patch: default : return false {
rank: 713
score: 97.93211873372395
patch: case null : { }
rank: 713
score: 97.6825663248698
patch: log ( $STRING$ ) ;
rank: 713
score: 97.66594848632812
patch: case >= 1 :
rank: 714
score: 98.63766043526786
patch: case 1 : return 1 :
rank: 714
score: 98.60150146484375
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return 1 ;
rank: 714
score: 98.43083953857422
patch: case $NUMBER$ : default : break ;
rank: 714
score: 98.22153727213542
patch: break ; case $STRING$ :
rank: 714
score: 98.17516072591145
patch: case ( char ) :
rank: 714
score: 98.11306762695312
patch: case Short . $NUMBER$ :
rank: 714
score: 97.68141682942708
patch: case str . $STRING$ :
rank: 714
score: 97.66559600830078
patch: case max :
rank: 715
score: 98.63755580357143
patch: case 1 { case $NUMBER$ {
rank: 715
score: 98.60131022135417
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return false : }
rank: 715
score: 98.42992401123047
patch: case $NUMBER$ : return $NUMBER$ $NUMBER$ ;
rank: 715
score: 98.21968587239583
patch: case $NUMBER$ : { $STRING$
rank: 715
score: 98.17139689127605
patch: trim ( str ) ;
rank: 715
score: 98.10050455729167
patch: case 0 : default :
rank: 715
score: 97.6627426147461
patch: case abs :
rank: 716
score: 98.62825230189732
patch: case 1 : = $NUMBER$ :
rank: 716
score: 98.60097249348958
patch: / * * : /
rank: 716
score: 98.42922973632812
patch: > $NUMBER$ && { case $NUMBER$ :
rank: 716
score: 98.16946411132812
patch: result = false ; }
rank: 716
score: 97.680029296875
patch: case $NUMBER$ : ?
rank: 717
score: 98.59969656808036
patch: { * * * / /
rank: 717
score: 98.42821502685547
patch: case 1 : { / * {
rank: 717
score: 98.16885375976562
patch: case 1 : false ;
rank: 717
score: 97.92767333984375
patch: case 1 / $NUMBER$ :
rank: 718
score: 98.62734549386161
patch: case 1 : / / {
rank: 718
score: 98.59842354910714
patch: * * * * / /
rank: 718
score: 98.42781066894531
patch: case $NUMBER$ : throws case $NUMBER$ :
rank: 718
score: 97.67879231770833
patch: length $NUMBER$ ( ) ;
rank: 718
score: 97.66143188476562
patch: case $NUMBER$ ; }
rank: 719
score: 98.64089965820312
patch: case ] . $NUMBER$ :
rank: 719
score: 98.62724086216518
patch: case 1 : * / /
rank: 719
score: 98.59743088942308
patch: { * * * * * { case 1 : * /
rank: 719
score: 97.6782470703125
patch: case $NUMBER$ else {
rank: 719
score: 97.65909423828126
patch: case str ; ;
rank: 720
score: 98.59681193033855
patch: case $STRING$ : * {
rank: 720
score: 98.42701721191406
patch: case $STRING$ : case $STRING$ : :
rank: 720
score: 98.07323201497395
patch: case Integer . TYPE :
rank: 720
score: 97.9228271484375
patch: case 1 : ;
rank: 720
score: 97.67406209309895
patch: case Boolean . EMPTY :
rank: 720
score: 97.65347900390626
patch: case % $NUMBER$ :
rank: 721
score: 98.63706752232143
patch: case 1 : { * {
rank: 721
score: 98.59641520182292
patch: { case $STRING$ : {
rank: 721
score: 98.07257080078125
patch: case Double . NULL :
rank: 721
score: 97.92226155598958
patch: case $NUMBER$ : break }
rank: 721
score: 97.65320587158203
patch: case - :
rank: 722
score: 98.63344029017857
patch: case $STRING$ + case $NUMBER$ :
rank: 722
score: 98.62520054408482
patch: case 1 { case 1 {
rank: 722
score: 98.07239786783855
patch: case $NUMBER$ ^ $STRING$ :
rank: 722
score: 97.91925048828125
patch: case str / 1 :
rank: 722
score: 97.67050170898438
patch: case Boolean . Float :
rank: 723
score: 98.62728445870536
patch: case $STRING$ : return $NUMBER$ :
rank: 723
score: 98.59367370605469
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { return $NUMBER$ ; } else
rank: 723
score: 98.20697021484375
patch: for ( int ) {
rank: 723
score: 98.0706278483073
patch: case $NUMBER$ || { {
rank: 724
score: 98.62282889229911
patch: case 1 : if { {
rank: 724
score: 98.59327799479166
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return $NUMBER$ ; {
rank: 724
score: 97.90879313151042
patch: case ^ $STRING$ ) ;
rank: 724
score: 97.66466267903645
patch: case Boolean . Short :
rank: 725
score: 98.62537493024554
patch: case $NUMBER$ + case 1 :
rank: 725
score: 98.62168666294643
patch: case 1 : / { /
rank: 725
score: 98.5926513671875
patch: * { * * /
rank: 725
score: 98.20602416992188
patch: case $NUMBER$ * $STRING$ ;
rank: 726
score: 98.62214878627232
patch: case $STRING$ ] case $NUMBER$ :
rank: 726
score: 98.62166341145833
patch: case $NUMBER$ : { else
rank: 726
score: 98.59253801618304
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return null {
rank: 726
score: 97.6629638671875
patch: length 1 = $NUMBER$ ;
rank: 726
score: 97.64075317382813
patch: case ? 0 :
rank: 727
score: 98.62193952287946
patch: / * ] case $NUMBER$ :
rank: 727
score: 98.62135823567708
patch: case 1 : if :
rank: 727
score: 98.591064453125
patch: * * * / }
rank: 727
score: 98.14395141601562
patch: case $NUMBER$ : null ;
rank: 727
score: 97.90303548177083
patch: static str = $STRING$ ;
rank: 727
score: 97.65570068359375
patch: case $NUMBER$ -= $STRING$ ;
rank: 727
score: 97.6405517578125
patch: { case 1 :
rank: 728
score: 98.61976841517857
patch: case 1 : * { {
rank: 728
score: 98.61971609933036
patch: char $NUMBER$ : case $NUMBER$ :
rank: 728
score: 98.59102957589286
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return null {
rank: 728
score: 98.05760498046875
patch: default case $NUMBER$ :
rank: 728
score: 97.65418090820313
patch: } case 1 :
rank: 728
score: 97.6312744140625
patch: case || $NUMBER$ :
rank: 729
score: 98.61662074497768
patch: case $NUMBER$ { return $NUMBER$ :
rank: 729
score: 98.61556570870536
patch: case $NUMBER$ : == $NUMBER$ :
rank: 729
score: 98.59085787259616
patch: { * * * * * * : * * * /
rank: 729
score: 98.13699340820312
patch: case ( 1 : {
rank: 729
score: 97.65321044921875
patch: case $NUMBER$ : $STRING$
rank: 730
score: 98.61451067243304
patch: case 0 { case $STRING$ :
rank: 730
score: 98.61336844308036
patch: case $NUMBER$ : <= $NUMBER$ {
rank: 730
score: 98.58966064453125
patch: case $NUMBER$ { break :
rank: 730
score: 98.2006327311198
patch: case $NUMBER$ return false ;
rank: 730
score: 98.13431803385417
patch: result = true ; }
rank: 730
score: 98.05386352539062
patch: case $STRING$ : default :
rank: 730
score: 97.64573160807292
patch: return in == null ;
rank: 730
score: 97.6278076171875
patch: case & $NUMBER$ :
rank: 731
score: 98.61313302176339
patch: case 1 : case SIZE :
rank: 731
score: 98.61143275669643
patch: case 1 : / { {
rank: 731
score: 98.58504813058036
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return false :
rank: 731
score: 98.198974609375
patch: case $NUMBER$ ] {
rank: 731
score: 98.13430786132812
patch: case ( boolean ) :
rank: 731
score: 97.62660522460938
patch: case str ) {
rank: 732
score: 98.61309814453125
patch: else { case $NUMBER$ + {
rank: 732
score: 98.61034138997395
patch: case $NUMBER$ : if {
rank: 732
score: 98.58189039963942
patch: { * * * * * $NUMBER$ . 0 * * /
rank: 732
score: 98.0500996907552
patch: case 0 : return {
rank: 732
score: 97.90076700846355
patch: case Boolean . err :
rank: 732
score: 97.63861083984375
patch: case static : {
rank: 732
score: 97.62125244140626
patch: case ? false :
rank: 733
score: 98.60939243861607
patch: case $NUMBER$ { $NUMBER$ : {
rank: 733
score: 98.60402134486607
patch: case 0 : case SIZE :
rank: 733
score: 98.58092322716347
patch: { * * * * * { { * * * /
rank: 733
score: 98.12640380859375
patch: case 0 case $NUMBER$ :
rank: 733
score: 97.6092529296875
patch: case $NUMBER$ 0 :
rank: 734
score: 98.60384695870536
patch: case $STRING$ : case 0 ;
rank: 734
score: 98.58072916666667
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { return $NUMBER$ ; {
rank: 734
score: 98.18570963541667
patch: case $STRING$ / $NUMBER$ :
rank: 734
score: 98.12198893229167
patch: case Boolean [ ] :
rank: 734
score: 97.89901733398438
patch: catch ( $STRING$ ) {
rank: 734
score: 97.60728149414062
patch: case > $STRING$ :
rank: 735
score: 98.57963053385417
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return $NUMBER$ : }
rank: 735
score: 98.1852518717448
patch: case $STRING$ : else {
rank: 735
score: 98.11974080403645
patch: match ( str ) ;
rank: 735
score: 97.89760335286458
patch: case $NUMBER$ : { false
rank: 736
score: 98.60505022321429
patch: case 1 : * * /
rank: 736
score: 98.60044642857143
patch: case $NUMBER$ : { { :
rank: 736
score: 98.57909217247597
patch: { * * * { * * : * * * /
rank: 736
score: 98.36097935267857
patch: case $NUMBER$ : throws $NUMBER$ :
rank: 736
score: 98.03763834635417
patch: case 1 : return {
rank: 736
score: 97.89632161458333
patch: Format ( str ) ;
rank: 736
score: 97.60186157226562
patch: case length 0 :
rank: 737
score: 98.60216413225446
patch: case $NUMBER$ : <= $NUMBER$ :
rank: 737
score: 98.60028076171875
patch: case $STRING$ : return $NUMBER$ {
rank: 737
score: 98.5784403483073
patch: / * * / }
rank: 737
score: 98.1832763671875
patch: case ( $STRING$ )
rank: 737
score: 98.11753540039062
patch: case ( $STRING$ :
rank: 737
score: 97.89625244140625
patch: case 1 : :
rank: 738
score: 98.6017074584961
patch: case 1 {
rank: 738
score: 98.5782470703125
patch: { * * * * $NUMBER$ . 0 : * * /
rank: 738
score: 98.34954833984375
patch: case $NUMBER$ : return : ;
rank: 738
score: 98.18247477213542
patch: case $NUMBER$ : try {
rank: 738
score: 97.6260498046875
patch: case FORMAT : {
rank: 738
score: 97.5998046875
patch: case max : {
rank: 739
score: 98.59955705915179
patch: else { case $STRING$ : }
rank: 739
score: 98.57680100661058
patch: * * * { * * * : * * * /
rank: 739
score: 98.114501953125
patch: case str : break ;
rank: 739
score: 98.01899719238281
patch: case default :
rank: 739
score: 97.89520263671875
patch: case / / $STRING$ :
rank: 739
score: 97.58694458007812
patch: case == $NUMBER$ :
rank: 740
score: 98.59781319754464
patch: case $NUMBER$ ] case $NUMBER$ :
rank: 740
score: 98.57428448016827
patch: case 1 : return { case $NUMBER$ : return false ; }
rank: 740
score: 98.17692057291667
patch: case $STRING$ - $NUMBER$ :
rank: 740
score: 98.0119120279948
patch: / { case $NUMBER$ :
rank: 740
score: 97.89459228515625
patch: case min : {
rank: 740
score: 97.5864013671875
patch: case $STRING$ : :
rank: 741
score: 98.59914725167411
patch: case 1 : / * {
rank: 741
score: 98.59666224888393
patch: case 0 { case $NUMBER$ ;
rank: 741
score: 98.57373046875
patch: case 1 + 1 :
rank: 741
score: 98.17430623372395
patch: / / case $NUMBER$ :
rank: 741
score: 97.89312744140625
patch: format ( str ) ;
rank: 741
score: 97.62164306640625
patch: case | $STRING$ ;
rank: 742
score: 98.59835379464286
patch: case 1 : { : {
rank: 742
score: 98.59343610491071
patch: / else { case 1 :
rank: 742
score: 98.57302621694711
patch: case $STRING$ : / * * * * * * * /
rank: 742
score: 98.17329915364583
patch: case $STRING$ * $NUMBER$ :
rank: 742
score: 98.10512288411458
patch: if ( str ) {
rank: 742
score: 98.00979614257812
patch: case $NUMBER$ || default :
rank: 742
score: 97.89308675130208
patch: case - $NUMBER$ : }
rank: 743
score: 98.59549386160714
patch: case $NUMBER$ : * : /
rank: 743
score: 98.57281024639423
patch: { * * * * $NUMBER$ . 0 : case $NUMBER$ :
rank: 743
score: 98.09946695963542
patch: if ( $STRING$ ) {
rank: 743
score: 97.57592163085937
patch: / case $NUMBER$ :
rank: 744
score: 98.59284319196429
patch: case 1 : { if {
rank: 744
score: 98.59079415457589
patch: case 0 ; case $NUMBER$ :
rank: 744
score: 98.57092895507813
patch: { case $STRING$ :
rank: 744
score: 98.34137834821429
patch: case $STRING$ { case 1 :
rank: 744
score: 98.00626627604167
patch: default { case 1 :
rank: 744
score: 97.59951171875
patch: case ^ $NUMBER$ :
rank: 744
score: 97.57174072265624
patch: case || $STRING$ ;
rank: 745
score: 98.58945719401042
patch: case $NUMBER$ : : /
rank: 745
score: 98.5698711688702
patch: case $STRING$ : * * * * * * * * /
rank: 745
score: 98.1702880859375
patch: case $NUMBER$ - 0 :
rank: 745
score: 98.09862263997395
patch: case ( 1 ] )
rank: 745
score: 98.00375366210938
patch: default : { return {
rank: 745
score: 97.57161254882813
patch: case size $NUMBER$ :
rank: 746
score: 98.59002685546875
patch: case $STRING$ : { * /
rank: 746
score: 98.58924211774554
patch: case $NUMBER$ : / ? {
rank: 746
score: 98.56973031850961
patch: { * * * * * * * / case $NUMBER$ :
rank: 746
score: 98.33790079752605
patch: { case 1 : {
rank: 746
score: 98.16575113932292
patch: case $NUMBER$ * 0 :
rank: 746
score: 97.8855489095052
patch: case $NUMBER$ : $STRING$ }
rank: 746
score: 97.5814697265625
patch: case ? true :
rank: 746
score: 97.56453247070313
patch: case start : {
rank: 747
score: 98.58986118861607
patch: / * { case 1 :
rank: 747
score: 98.58866664341518
patch: case 1 : * / {
rank: 747
score: 98.56920447716347
patch: { * * * * { { case 1 : * /
rank: 747
score: 98.16493733723958
patch: case $STRING$ case $STRING$ ;
rank: 747
score: 97.9895528157552
patch: case Integer . class :
rank: 747
score: 97.88433837890625
patch: case 1 : $NUMBER$ :
rank: 747
score: 97.577099609375
patch: } } else {
rank: 748
score: 98.5897216796875
patch: case $NUMBER$ { case 0 {
rank: 748
score: 98.58543904622395
patch: case 1 : : {
rank: 748
score: 98.56880696614583
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return false : {
rank: 748
score: 98.33719308035714
patch: case $STRING$ : if ( {
rank: 748
score: 98.16201782226562
patch: case $NUMBER$ : case $NUMBER$
rank: 748
score: 98.0944091796875
patch: case $NUMBER$ : return
rank: 748
score: 97.57554931640625
patch: case | null :
rank: 748
score: 97.55889129638672
patch: case / /
rank: 749
score: 98.58830915178571
patch: case 1 { case $STRING$ :
rank: 749
score: 98.58018275669643
patch: case 1 : return / {
rank: 749
score: 98.09177652994792
patch: case ( ) : {
rank: 749
score: 97.97932942708333
patch: case $NUMBER$ , $STRING$ :
rank: 749
score: 97.57465209960938
patch: } return null ;
rank: 749
score: 97.55792236328125
patch: case NULL : {
rank: 750
score: 98.56246512276786
patch: { * * * * * $NUMBER$ . 0 : * * /
rank: 750
score: 98.08800048828125
patch: default ( ) ;
rank: 750
score: 97.9769999186198
patch: case ? ? * /
rank: 750
score: 97.8721415201823
patch: case ] . $STRING$ :
rank: 750
score: 97.55635986328124
patch: case str 1 :
rank: 751
score: 98.57982526506696
patch: case $NUMBER$ : return 1 {
rank: 751
score: 98.14369710286458
patch: case 1 * $NUMBER$ :
rank: 751
score: 97.9756571451823
patch: default : return { {
rank: 751
score: 97.86289469401042
patch: case extends $NUMBER$ : {
rank: 752
score: 98.58412388392857
patch: else { case - 1 :
rank: 752
score: 98.55412074497768
patch: { * * * { * * * * * * * /
rank: 752
score: 98.08723958333333
patch: / * $STRING$ : {
rank: 752
score: 97.970947265625
patch: default { case $STRING$ :
rank: 752
score: 97.86283365885417
patch: case $NUMBER$ : : }
rank: 753
score: 98.58356584821429
patch: else { case $NUMBER$ { {
rank: 753
score: 98.57792154947917
patch: case $NUMBER$ : { System
rank: 753
score: 98.55313110351562
patch: case $STRING$ : if {
rank: 753
score: 98.319091796875
patch: case $NUMBER$ + $STRING$ : {
rank: 753
score: 98.08646240234376
patch: trim ( ) ;
rank: 753
score: 97.86245727539062
patch: case $NUMBER$ throws $STRING$ :
rank: 753
score: 97.552685546875
patch: case str $NUMBER$ :
rank: 753
score: 97.55098724365234
patch: case $NUMBER$ }
rank: 754
score: 98.58233642578125
patch: / * / case $NUMBER$ {
rank: 754
score: 98.5519775390625
patch: { * * * * { * * * * * * * /
rank: 754
score: 98.31850760323661
patch: { case $NUMBER$ : { {
rank: 754
score: 98.08500162760417
patch: switch ( 0 ) {
rank: 754
score: 97.551953125
patch: case null ; }
rank: 755
score: 98.57618931361607
patch: case 1 : { break {
rank: 755
score: 98.54971749441964
patch: { * * * * : * * * * * * /
rank: 755
score: 98.08484903971355
patch: return false ; } else
rank: 755
score: 97.95729573567708
patch: case $NUMBER$ ? 1 :
rank: 755
score: 97.8585205078125
patch: case / / $NUMBER$ :
rank: 755
score: 97.54892578125
patch: case % 1 :
rank: 756
score: 98.58027866908482
patch: case 0 : if $NUMBER$ {
rank: 756
score: 98.575927734375
patch: case $NUMBER$ : / : /
rank: 756
score: 98.31768798828125
patch: case $NUMBER$ : continue :
rank: 756
score: 98.13008626302083
patch: case $NUMBER$ : false :
rank: 757
score: 98.57979038783482
patch: case 0 : { * {
rank: 757
score: 98.57444545200893
patch: case $NUMBER$ : if : /
rank: 757
score: 98.547607421875
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ ; } }
rank: 757
score: 98.31497628348214
patch: case $STRING$ : return : {
rank: 757
score: 98.12694295247395
patch: case $NUMBER$ return true ;
rank: 757
score: 98.08394368489583
patch: } else return false ;
rank: 757
score: 97.85504150390625
patch: case / $STRING$ : {
rank: 757
score: 97.5482421875
patch: case 1 0 :
rank: 758
score: 98.578369140625
patch: else { $NUMBER$ case $NUMBER$ :
rank: 758
score: 98.08340454101562
patch: case $NUMBER$ == 0 ;
rank: 758
score: 97.85384114583333
patch: case - - 1 :
rank: 758
score: 97.538623046875
patch: case substring $NUMBER$ :
rank: 758
score: 97.5174560546875
patch: case -= $NUMBER$ ;
rank: 759
score: 98.578125
patch: case 0 : if $NUMBER$ :
rank: 759
score: 98.56601969401042
patch: case 1 : { *
rank: 759
score: 98.54705810546875
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ : { }
rank: 759
score: 98.12381998697917
patch: case ( $NUMBER$ ) ?
rank: 759
score: 98.08317057291667
patch: case 0 : continue ;
rank: 759
score: 97.9489237467448
patch: case Long . NULL :
rank: 759
score: 97.85270182291667
patch: case * $STRING$ : {
rank: 759
score: 97.53763427734376
patch: case Na CaMeL N
rank: 760
score: 98.57716587611607
patch: case $NUMBER$ : case $STRING$ {
rank: 760
score: 98.54670061383929
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ {
rank: 760
score: 98.30792236328125
patch: > 1 ; case $NUMBER$ :
rank: 760
score: 98.08052571614583
patch: substring ( 1 ) ;
rank: 760
score: 97.850830078125
patch: Log . return null ;
rank: 760
score: 97.5106201171875
patch: str = $STRING$ ;
rank: 761
score: 98.57632010323661
patch: else { { case $NUMBER$ {
rank: 761
score: 98.56168038504464
patch: case $NUMBER$ : String * /
rank: 761
score: 98.54386901855469
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ { } }
rank: 761
score: 98.11795043945312
patch: case / case $STRING$ :
rank: 761
score: 97.94141642252605
patch: case JAVA _ VERSION :
rank: 761
score: 97.53438720703124
patch: case str name :
rank: 761
score: 97.49649658203126
patch: < 0 ) {
rank: 762
score: 98.57613699776786
patch: case 1 + case $NUMBER$ :
rank: 762
score: 98.56108747209821
patch: case $NUMBER$ : == $NUMBER$ {
rank: 762
score: 98.54379272460938
patch: case $STRING$ + 0 ;
rank: 762
score: 98.30551583426339
patch: > $NUMBER$ ; case 1 :
rank: 762
score: 98.11753336588542
patch: case $STRING$ : str {
rank: 762
score: 98.08009847005208
patch: length ( str ) ;
rank: 762
score: 97.8462626139323
patch: case str 0 : {
rank: 762
score: 97.53274536132812
patch: case $NUMBER$ _
rank: 762
score: 97.4923095703125
patch: case += $STRING$ ;
rank: 763
score: 98.57587541852679
patch: else { case $NUMBER$ ; }
rank: 763
score: 98.54369245256696
patch: * * * * { * * * * * * * /
rank: 763
score: 98.11163330078125
patch: case $NUMBER$ : finally {
rank: 763
score: 98.07993570963542
patch: case 0 $NUMBER$ : {
rank: 763
score: 97.9345194498698
patch: case $NUMBER$ * / :
rank: 763
score: 97.84306640625
patch: case T 1 :
rank: 763
score: 97.5244873046875
patch: case <= 1 :
rank: 764
score: 98.57546997070312
patch: / ] case $NUMBER$ :
rank: 764
score: 98.54364885602679
patch: { * * * * $NUMBER$ . 0 : * * * /
rank: 764
score: 97.9344991048177
patch: case Void . TYPE :
rank: 764
score: 97.52440185546875
patch: case ] ; }
rank: 765
score: 98.57455880301339
patch: * * / case $NUMBER$ {
rank: 765
score: 98.54640706380208
patch: case $NUMBER$ { $NUMBER$ :
rank: 765
score: 98.54288736979167
patch: case 0 : * {
rank: 765
score: 98.1053975423177
patch: case length ( ) ;
rank: 765
score: 98.0784403483073
patch: case ~ $NUMBER$ : {
rank: 765
score: 97.93369547526042
patch: case $NUMBER$ ? false :
rank: 766
score: 98.5412089029948
patch: case 1 > 0 :
rank: 766
score: 98.10538736979167
patch: this . return false ;
rank: 766
score: 98.07820638020833
patch: case SIZE / $NUMBER$ :
rank: 766
score: 97.92867024739583
patch: case $NUMBER$ / * /
rank: 766
score: 97.51210021972656
patch: case min :
rank: 766
score: 97.46280517578126
patch: case $NUMBER$ ++ :
rank: 767
score: 98.56981549944196
patch: else { case $NUMBER$ { }
rank: 767
score: 98.54085286458333
patch: case 1 : { else
rank: 767
score: 98.53892299107143
patch: { * * * * { * * * * * * /
rank: 767
score: 98.10132853190105
patch: 0 : return false ;
rank: 767
score: 98.07761637369792
patch: default / * $STRING$ ;
rank: 767
score: 97.92574055989583
patch: case str . length :
rank: 767
score: 97.50892333984375
patch: case str != null
rank: 768
score: 98.53801413143383
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { return $NUMBER$ ; } else {
rank: 768
score: 98.28094482421875
patch: > 0 ; case $NUMBER$ :
rank: 768
score: 98.07664998372395
patch: case str $NUMBER$ : {
rank: 768
score: 97.92327880859375
patch: case $STRING$ : return {
rank: 768
score: 97.507958984375
patch: case - false :
rank: 768
score: 97.4574203491211
patch: return value ;
rank: 769
score: 98.56796700613839
patch: } else { case $NUMBER$ {
rank: 769
score: 98.53474934895833
patch: case $NUMBER$ : System {
rank: 769
score: 98.27863420758929
patch: case 1 : default : {
rank: 769
score: 98.09999593098958
patch: case $NUMBER$ : $STRING$ {
rank: 769
score: 98.07632446289062
patch: read ( str ) ;
rank: 770
score: 98.5674336751302
patch: else { case 0 :
rank: 770
score: 98.53572591145833
patch: case 0 { * {
rank: 770
score: 98.27757045200893
patch: >= $NUMBER$ ; case $NUMBER$ :
rank: 770
score: 97.83580525716145
patch: case 1 : } }
rank: 770
score: 97.50584106445312
patch: / * $STRING$ .
rank: 770
score: 97.45650634765624
patch: return new $STRING$ ;
rank: 771
score: 98.56671142578125
patch: case 0 + case $NUMBER$ :
rank: 771
score: 98.53480631510416
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ { {
rank: 771
score: 98.53196207682292
patch: $NUMBER$ : case $NUMBER$ :
rank: 771
score: 98.07460530598958
patch: case 0 : return ;
rank: 771
score: 97.92047119140625
patch: case names . length :
rank: 771
score: 97.83462524414062
patch: case >> / $NUMBER$ :
rank: 771
score: 97.501611328125
patch: case ( Boolean )
rank: 772
score: 98.56562151227679
patch: case $NUMBER$ { case 1 ;
rank: 772
score: 98.53413609095982
patch: { * * * { * * * : * * * /
rank: 772
score: 98.26895577566964
patch: case $NUMBER$ : { case :
rank: 772
score: 97.91885375976562
patch: case 1 : return :
rank: 772
score: 97.83396402994792
patch: Messages . return $NUMBER$ ;
rank: 772
score: 97.4545654296875
patch: case : else {
rank: 773
score: 98.56373814174107
patch: / ] { case $NUMBER$ :
rank: 773
score: 98.53357950846355
patch: { * / * /
rank: 773
score: 98.5270487467448
patch: case - 1 : /
rank: 773
score: 98.09346516927083
patch: case % $NUMBER$ : {
rank: 773
score: 97.9182861328125
patch: default : { {
rank: 773
score: 97.4992431640625
patch: ; case $NUMBER$ :
rank: 773
score: 97.44476318359375
patch: case -- $NUMBER$ :
rank: 774
score: 98.53319498697917
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return null ; }
rank: 774
score: 98.52284749348958
patch: case 1 : if {
rank: 774
score: 98.09136962890625
patch: case $NUMBER$ == $STRING$ ;
rank: 774
score: 98.0716552734375
patch: case $NUMBER$ == 0 :
rank: 774
score: 97.49627685546875
patch: return value == null
rank: 774
score: 97.44152221679687
patch: return ! $STRING$ ;
rank: 775
score: 98.53273228236607
patch: { * * * : * * * * * * * /
rank: 775
score: 98.51096598307292
patch: case 1 : / :
rank: 775
score: 98.26340157645089
patch: == $NUMBER$ ; case $NUMBER$ :
rank: 775
score: 98.06661987304688
patch: / * return true ;
rank: 775
score: 97.494775390625
patch: case str [ 0
rank: 775
score: 97.43653564453125
patch: } / * /
rank: 776
score: 98.56000627790179
patch: / * / case $NUMBER$ :
rank: 776
score: 98.49784545898437
patch: case $NUMBER$ { {
rank: 776
score: 98.06600341796874
patch: ret = true ;
rank: 776
score: 97.90745035807292
patch: case $NUMBER$ || str ;
rank: 776
score: 97.48959350585938
patch: case $STRING$ : $STRING$
rank: 777
score: 98.55711146763393
patch: / * ] case $NUMBER$ {
rank: 777
score: 98.53202601841518
patch: { * * * { * * : * * * * /
rank: 777
score: 98.48942057291667
patch: case 1 { $NUMBER$ :
rank: 777
score: 98.25982666015625
patch: case 1 : if ( :
rank: 777
score: 98.08650716145833
patch: $NUMBER$ : return false ;
rank: 777
score: 97.90669759114583
patch: case $NUMBER$ ? true :
rank: 777
score: 97.48834228515625
patch: case <= $NUMBER$ :
rank: 778
score: 98.53178187779018
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return { {
rank: 778
score: 98.48895263671875
patch: case $NUMBER$ : * :
rank: 778
score: 98.06219482421875
patch: case 0 : true ;
rank: 778
score: 97.9066162109375
patch: case $NUMBER$ % $NUMBER$ :
rank: 778
score: 97.486083984375
patch: case ? ) :
rank: 779
score: 98.55617850167411
patch: case 1 { case $NUMBER$ ;
rank: 779
score: 98.53076985677083
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { return false ; }
rank: 779
score: 98.06129964192708
patch: case 0 : $STRING$ ;
rank: 779
score: 97.90435791015625
patch: case MIN _ PRIORITY :
rank: 780
score: 98.55488804408482
patch: case $NUMBER$ : return 0 {
rank: 780
score: 98.53046875
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { if { { {
rank: 780
score: 98.48426310221355
patch: case 1 : : /
rank: 780
score: 98.25051443917411
patch: case $NUMBER$ : { int :
rank: 780
score: 98.08517456054688
patch: case Boolean . 0 {
rank: 780
score: 98.06124877929688
patch: case 0 : false ;
rank: 780
score: 97.82501220703125
patch: Messages . return $STRING$ ;
rank: 780
score: 97.48447265625
patch: / * else {
rank: 780
score: 97.41843872070312
patch: case *= $NUMBER$ ;
rank: 781
score: 98.55481828962054
patch: case 0 : break $NUMBER$ {
rank: 781
score: 98.529931640625
patch: case $STRING$ { {
rank: 781
score: 98.48197428385417
patch: case 1 : { System
rank: 781
score: 98.24835815429688
patch: : case $NUMBER$ :
rank: 781
score: 98.05925903320312
patch: ret = false ;
rank: 781
score: 97.47882690429688
patch: return value ; }
rank: 781
score: 97.41539001464844
patch: length $NUMBER$ :
rank: 782
score: 98.52736118861607
patch: { * * * * * * $NUMBER$ . 0 : * /
rank: 782
score: 98.47589111328125
patch: $NUMBER$ { case $NUMBER$ :
rank: 782
score: 98.05889892578125
patch: case ( char ) ;
rank: 782
score: 97.47764282226562
patch: case >= 0 :
rank: 783
score: 98.55258178710938
patch: else { case $STRING$ :
rank: 783
score: 98.526708984375
patch: { * * * * { { * * * * * * /
rank: 783
score: 98.46556599934895
patch: case $NUMBER$ : try /
rank: 783
score: 97.90004475911458
patch: default : break ; }
rank: 783
score: 97.81407470703125
patch: case extends $NUMBER$ :
rank: 783
score: 97.47608184814453
patch: case right :
rank: 784
score: 98.52643694196429
patch: { * * * { * * * * * * / /
rank: 784
score: 98.05440266927083
patch: case $NUMBER$ static : {
rank: 784
score: 97.47512817382812
patch: case count :
rank: 784
score: 97.38978881835938
patch: case != $STRING$ :
rank: 785
score: 98.5253662109375
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return $NUMBER$ { {
rank: 785
score: 98.23216029575893
patch: case 1 : } else {
rank: 785
score: 98.0541748046875
patch: default / * /
rank: 785
score: 97.47196044921876
patch: case length 1 :
rank: 785
score: 97.3884033203125
patch: <= $NUMBER$ : {
rank: 786
score: 98.55056326729911
patch: case 1 || case $NUMBER$ :
rank: 786
score: 98.5251973470052
patch: case $STRING$ { * /
rank: 786
score: 98.07762654622395
patch: case $NUMBER$ - $STRING$ :
rank: 786
score: 98.05325317382812
patch: case $NUMBER$ / :
rank: 786
score: 97.46951904296876
patch: case - true :
rank: 786
score: 97.38572387695312
patch: case | $STRING$ }
rank: 787
score: 98.54885428292411
patch: case $NUMBER$ : / else {
rank: 787
score: 98.52482604980469
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ : $NUMBER$ ;
rank: 787
score: 98.45245361328125
patch: case - $NUMBER$ : /
rank: 787
score: 98.05233764648438
patch: case $NUMBER$ |= $STRING$ ;
rank: 787
score: 97.89088948567708
patch: case System . $NUMBER$ :
rank: 787
score: 97.46834716796874
patch: / * * ?
rank: 787
score: 97.3850830078125
patch: case -= 1 ;
rank: 788
score: 98.54847063337054
patch: finally { case $NUMBER$ : }
rank: 788
score: 97.8876444498698
patch: / : case $NUMBER$ :
rank: 788
score: 97.46725463867188
patch: case ~ 1 :
rank: 788
score: 97.3828857421875
patch: case / : {
rank: 789
score: 98.52411295572917
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return null ; {
rank: 789
score: 98.44675903320312
patch: case $NUMBER$ : System
rank: 789
score: 98.04786173502605
patch: name ( str ) ;
rank: 789
score: 97.8871561686198
patch: case Boolean . NULL :
rank: 789
score: 97.46661987304688
patch: case - ; }
rank: 789
score: 97.38087158203125
patch: case Boolean . $STRING$
rank: 790
score: 98.54471842447917
patch: else { case $NUMBER$ ;
rank: 790
score: 98.52201334635417
patch: { else { if {
rank: 790
score: 98.44442749023438
patch: case $STRING$ : { /
rank: 790
score: 98.04463500976563
patch: case ( str .
rank: 790
score: 97.88709513346355
patch: case $NUMBER$ ] : {
rank: 790
score: 97.46290893554688
patch: case Boolean ) {
rank: 791
score: 98.54425920758929
patch: case $NUMBER$ { for $NUMBER$ :
rank: 791
score: 98.52014973958333
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return false ; {
rank: 791
score: 98.44286092122395
patch: case $NUMBER$ : { try
rank: 791
score: 98.20789446149554
patch: case $NUMBER$ : / * :
rank: 791
score: 98.07467651367188
patch: case $NUMBER$ * false :
rank: 791
score: 98.04351806640625
patch: return true ; } else
rank: 791
score: 97.88472493489583
patch: default : case 0 :
rank: 791
score: 97.7772705078125
patch: case 0 : }
rank: 791
score: 97.4613037109375
patch: case substring 1 :
rank: 791
score: 97.37750854492188
patch: case % : {
rank: 792
score: 98.54404994419643
patch: / * { case $NUMBER$ {
rank: 792
score: 98.51973470052083
patch: case $STRING$ : / {
rank: 792
score: 98.07309977213542
patch: case ( $STRING$ ) ?
rank: 792
score: 97.88455200195312
patch: case Short . NULL :
rank: 793
score: 98.51971028645833
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return 1 : {
rank: 793
score: 98.42513020833333
patch: case - 1 : :
rank: 793
score: 98.03938802083333
patch: case ( char ) {
rank: 793
score: 97.88197835286458
patch: case Integer . FALSE :
rank: 793
score: 97.46047973632812
patch: case / false :
rank: 793
score: 97.3670166015625
patch: } return $STRING$ ;
rank: 794
score: 98.51918131510416
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return 1 ; {
rank: 794
score: 98.07029215494792
patch: case $STRING$ : continue ;
rank: 794
score: 98.0381368001302
patch: case $NUMBER$ == $STRING$ :
rank: 794
score: 97.8811543782552
patch: case 0 : return :
rank: 794
score: 97.45394897460938
patch: case str ; {
rank: 794
score: 97.3659912109375
patch: case , $STRING$ :
rank: 795
score: 98.5423583984375
patch: case $STRING$ : { { {
rank: 795
score: 98.51839447021484
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { return false ; } }
rank: 795
score: 98.41579182942708
patch: case 1 : System {
rank: 795
score: 98.1964111328125
patch: : { case $NUMBER$ :
rank: 795
score: 98.03707885742188
patch: case $NUMBER$ : { int
rank: 795
score: 97.87888590494792
patch: case $NUMBER$ | 1 :
rank: 795
score: 97.45360717773437
patch: case 1 ; }
rank: 796
score: 98.41487630208333
patch: case $NUMBER$ + $NUMBER$ {
rank: 796
score: 98.03706868489583
patch: buf [ 0 ] ;
rank: 796
score: 97.87698364257812
patch: case trim ( ) :
rank: 796
score: 97.77166748046875
patch: case T $NUMBER$ :
rank: 796
score: 97.45119018554688
patch: / * $NUMBER$ :
rank: 797
score: 98.54078020368304
patch: case $NUMBER$ && case $NUMBER$ :
rank: 797
score: 98.5170186360677
patch: { * / if {
rank: 797
score: 98.06546630859376
patch: case ( 1 )
rank: 797
score: 98.03644409179688
patch: / * $STRING$ ;
rank: 797
score: 97.44397583007813
patch: case $STRING$ ] :
rank: 798
score: 98.53953334263393
patch: case $NUMBER$ || case $NUMBER$ {
rank: 798
score: 98.40870157877605
patch: case 1 : * :
rank: 798
score: 97.87214965820313
patch: case 0 $NUMBER$ :
rank: 798
score: 97.44391479492188
patch: case Boolean ; }
rank: 798
score: 97.35870971679688
patch: finally { else {
rank: 799
score: 98.53922816685268
patch: / * * case $NUMBER$ :
rank: 799
score: 98.51317342122395
patch: case $STRING$ ? false :
rank: 799
score: 98.01783447265625
patch: case $STRING$ ? {
rank: 799
score: 98.0063720703125
patch: case ( 1 :
rank: 799
score: 97.76382446289062
patch: switch ( $STRING$ )
rank: 799
score: 97.35809936523438
patch: < 1 ) {
rank: 800
score: 98.53848702566964
patch: / else { case $NUMBER$ {
rank: 800
score: 98.51158854166667
patch: { * * * * * $NUMBER$ . 0 : * * * /
rank: 800
score: 97.99005126953125
patch: case ( 0 )
rank: 800
score: 97.44166259765625
patch: / / * /
rank: 800
score: 97.35250854492188
patch: return new true ;
rank: 801
score: 98.51144409179688
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return null { } }
rank: 801
score: 98.39988199869792
patch: case 1 : / ?
rank: 801
score: 97.86582438151042
patch: case Short . class :
rank: 801
score: 97.4401611328125
patch: case $STRING$ else {
rank: 801
score: 97.34842529296876
patch: case ^= $NUMBER$ :
rank: 802
score: 98.53538295200893
patch: case 1 : case true :
rank: 802
score: 97.96315307617188
patch: case $STRING$ ) {
rank: 802
score: 97.8644510904948
patch: case $NUMBER$ || $STRING$ {
rank: 802
score: 97.74305419921875
patch: / * $STRING$ :
rank: 802
score: 97.34827270507813
patch: System . else {
rank: 803
score: 98.534423828125
patch: case $NUMBER$ : return 0 :
rank: 803
score: 98.51053873697917
patch: { * * * * { { case 1 : * * * /
rank: 803
score: 98.39646402994792
patch: case $NUMBER$ { break {
rank: 803
score: 98.13344319661458
patch: case Long . TYPE :
rank: 803
score: 97.98924255371094
patch: case 0 ;
rank: 803
score: 97.8490966796875
patch: case 0 ] :
rank: 803
score: 97.43773193359375
patch: case abs : {
rank: 803
score: 97.34387817382813
patch: case |= $STRING$ ;
rank: 804
score: 98.53145926339286
patch: } else { case 1 :
rank: 804
score: 98.39455159505208
patch: case $NUMBER$ { { {
rank: 804
score: 98.13299560546875
patch: : case $NUMBER$ : {
rank: 804
score: 97.84855143229167
patch: case State . $NUMBER$ :
rank: 804
score: 97.74161529541016
patch: case * :
rank: 804
score: 97.343505859375
patch: case switch $NUMBER$ :
rank: 805
score: 98.53097098214286
patch: case 0 : case true :
rank: 805
score: 98.38831583658855
patch: case $NUMBER$ { { /
rank: 805
score: 97.9837890625
patch: case 0 ) {
rank: 805
score: 97.84500122070312
patch: default : System . :
rank: 805
score: 97.43385009765625
patch: case right : {
rank: 806
score: 98.53084891183036
patch: else { case 0 : }
rank: 806
score: 98.508056640625
patch: * * * * * { * * * * * * * /
rank: 806
score: 98.38522338867188
patch: case $NUMBER$ { / {
rank: 806
score: 98.1273905436198
patch: case 0 case 1 :
rank: 806
score: 97.94033813476562
patch: case $NUMBER$ / {
rank: 806
score: 97.73265380859375
patch: close ( ) ;
rank: 806
score: 97.43040161132812
patch: case / / ?
rank: 807
score: 98.5079574584961
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ ; } else
rank: 807
score: 98.38437906901042
patch: case 1 + $NUMBER$ {
rank: 807
score: 97.98070678710937
patch: f = str ;
rank: 807
score: 97.84314982096355
patch: case $NUMBER$ ? default :
rank: 807
score: 97.42767333984375
patch: case == 0 :
rank: 807
score: 97.33326416015625
patch: case -= $STRING$ :
rank: 808
score: 98.50699869791667
patch: { { * * /
rank: 808
score: 98.378662109375
patch: case new $NUMBER$ : {
rank: 808
score: 97.96370239257813
patch: case null ) {
rank: 808
score: 97.9275634765625
patch: / $NUMBER$ : {
rank: 808
score: 97.84189860026042
patch: case $NUMBER$ || $STRING$ :
rank: 808
score: 97.42724609375
patch: case str , $STRING$
rank: 808
score: 97.33181762695312
patch: case * : {
rank: 809
score: 98.5238749186198
patch: case 1 case $NUMBER$ :
rank: 809
score: 98.50685221354166
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { return false : {
rank: 809
score: 98.37643432617188
patch: case 1 : try /
rank: 809
score: 97.96162109375
patch: f = $STRING$ ;
rank: 809
score: 97.92001953125
patch: case $NUMBER$ * {
rank: 809
score: 97.84037272135417
patch: case $NUMBER$ && ! {
rank: 809
score: 97.42720336914063
patch: throw str ; }
rank: 809
score: 97.33139038085938
patch: case TYPE ) {
rank: 810
score: 98.52140299479167
patch: case $NUMBER$ case 0 :
rank: 810
score: 98.50501251220703
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : { return $NUMBER$ ; }
rank: 810
score: 98.3747049967448
patch: case $NUMBER$ : } /
rank: 810
score: 97.84010823567708
patch: default : return false :
rank: 811
score: 98.50442504882812
patch: case $STRING$ { { {
rank: 811
score: 98.37450154622395
patch: case $NUMBER$ : ? {
rank: 811
score: 97.83964029947917
patch: case $NUMBER$ : || {
rank: 811
score: 97.42501831054688
patch: case & 1 :
rank: 812
score: 98.50357055664062
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ : { {
rank: 812
score: 98.37158203125
patch: case 1 | $NUMBER$ :
rank: 812
score: 97.90977478027344
patch: case 1 ;
rank: 812
score: 97.83687337239583
patch: case Integer . EMPTY :
rank: 812
score: 97.68243408203125
patch: case null : }
rank: 812
score: 97.33038330078125
patch: case >> $STRING$ :
rank: 813
score: 98.501318359375
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; if { { {
rank: 813
score: 98.37075805664062
patch: case $NUMBER$ : System /
rank: 813
score: 97.8365987141927
patch: case Double . TRUE :
rank: 813
score: 97.42031860351562
patch: case * /
rank: 814
score: 98.500732421875
patch: { * * * * { * * * * * * / /
rank: 814
score: 98.3662109375
patch: case $NUMBER$ { * /
rank: 814
score: 97.91487426757813
patch: case $NUMBER$ static :
rank: 814
score: 97.89285278320312
patch: case $NUMBER$
rank: 814
score: 97.41784057617187
patch: case = $STRING$ ;
rank: 815
score: 97.83121744791667
patch: case $NUMBER$ { default :
rank: 815
score: 97.41495361328126
patch: case SIZE $NUMBER$ :
rank: 815
score: 97.3244384765625
patch: case += $NUMBER$ :
rank: 816
score: 98.49680989583334
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return null : {
rank: 816
score: 97.66058349609375
patch: length $NUMBER$ : {
rank: 816
score: 97.31988525390625
patch: case equals $NUMBER$ :
rank: 817
score: 98.4822998046875
patch: $NUMBER$ { case 1 :
rank: 817
score: 98.36090087890625
patch: case $NUMBER$ : else /
rank: 817
score: 97.40916442871094
patch: case CR :
rank: 817
score: 97.31519775390625
patch: * case $NUMBER$ :
rank: 818
score: 98.49521891276042
patch: * * case 1 :
rank: 818
score: 97.87654418945313
patch: case $STRING$ * /
rank: 818
score: 97.31442260742188
patch: case . $NUMBER$ :
rank: 819
score: 98.4945556640625
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return false ; {
rank: 819
score: 98.47158813476562
patch: if ( case $NUMBER$ :
rank: 819
score: 98.35581461588542
patch: case $NUMBER$ : : :
rank: 819
score: 98.0521952311198
patch: case $NUMBER$ : -- {
rank: 819
score: 97.8229471842448
patch: case FORMAT . $NUMBER$ :
rank: 819
score: 97.40569458007812
patch: case str $STRING$ :
rank: 820
score: 98.49244791666666
patch: { * * * * { { case $NUMBER$ : * * * /
rank: 820
score: 97.8211161295573
patch: case / * * /
rank: 820
score: 97.64942016601563
patch: case >= $STRING$ :
rank: 820
score: 97.4040283203125
patch: case format == null
rank: 821
score: 98.49235026041667
patch: / { * * /
rank: 821
score: 98.46169026692708
patch: case $NUMBER$ { else {
rank: 821
score: 98.35355631510417
patch: case 1 : System .
rank: 821
score: 98.04585774739583
patch: case 1 : continue :
rank: 821
score: 97.89393920898438
patch: case == 1 :
rank: 821
score: 97.85750732421874
patch: - $NUMBER$ : {
rank: 821
score: 97.7957763671875
patch: default : throw {
rank: 821
score: 97.648974609375
patch: to CaMeL Boolean ;
rank: 821
score: 97.40303039550781
patch: case TYPE :
rank: 821
score: 97.30825805664062
patch: case | false :
rank: 822
score: 98.49219767252605
patch: case 0 > 0 :
rank: 822
score: 98.45355224609375
patch: case case 1 : {
rank: 822
score: 98.35293579101562
patch: case - $NUMBER$ : :
rank: 822
score: 97.85742797851563
patch: case $NUMBER$ * :
rank: 822
score: 97.79458618164062
patch: { case 0 :
rank: 822
score: 97.4017578125
patch: case / / /
rank: 823
score: 98.49114583333333
patch: { * * * * * { case $NUMBER$ : * * * /
rank: 823
score: 98.34969075520833
patch: case 0 : { /
rank: 823
score: 98.0411376953125
patch: case 1 : try {
rank: 823
score: 97.78760375976563
patch: case $NUMBER$ && {
rank: 823
score: 97.64530029296876
patch: case static 1 :
rank: 823
score: 97.39763793945312
patch: case $STRING$ $NUMBER$ :
rank: 824
score: 98.49102376302083
patch: { * * * * { * * * * * * { /
rank: 824
score: 98.3468017578125
patch: case 1 : { try
rank: 824
score: 97.7686279296875
patch: default case $STRING$ :
rank: 824
score: 97.39691772460938
patch: case || $STRING$ .
rank: 825
score: 98.48896484375
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return $NUMBER$ { }
rank: 825
score: 98.34168497721355
patch: case $NUMBER$ : } {
rank: 825
score: 98.0347900390625
patch: case Short . TYPE :
rank: 825
score: 97.3025131225586
patch: length 0 :
rank: 826
score: 98.48471069335938
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { return $NUMBER$ { } }
rank: 826
score: 98.42391967773438
patch: case 0 : { :
rank: 826
score: 98.02853393554688
patch: case $NUMBER$ : case :
rank: 826
score: 97.63414001464844
patch: case - ;
rank: 826
score: 97.39353637695312
patch: return str ; }
rank: 826
score: 97.30150146484375
patch: > 0 ) {
rank: 827
score: 98.48269856770834
patch: { * * * * { * * * * * { * /
rank: 827
score: 97.75778198242188
patch: case $NUMBER$ || :
rank: 828
score: 98.48240152994792
patch: / * * / /
rank: 828
score: 98.3256103515625
patch: case 1 : System
rank: 828
score: 97.8359619140625
patch: case 1 ? {
rank: 828
score: 97.8322021484375
patch: start = 0 ;
rank: 828
score: 97.61435546875
patch: case max 0 :
rank: 829
score: 98.48231608072916
patch: { * * * * { { / } } * * * /
rank: 829
score: 98.32457478841145
patch: $NUMBER$ : case 1 :
rank: 829
score: 97.8327880859375
patch: case $NUMBER$ , $STRING$
rank: 829
score: 97.75312805175781
patch: case $NUMBER$ )
rank: 829
score: 97.38951416015625
patch: case ++ $STRING$ :
rank: 829
score: 97.2986083984375
patch: case : { {
rank: 830
score: 98.48133138020833
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { if case $NUMBER$ :
rank: 830
score: 98.41480509440105
patch: case 0 { $NUMBER$ :
rank: 830
score: 98.32305908203125
patch: case $NUMBER$ + : {
rank: 830
score: 97.29805908203124
patch: case << 0 :
rank: 831
score: 98.48090362548828
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ { } else
rank: 831
score: 98.31592814127605
patch: case $NUMBER$ : System :
rank: 831
score: 97.82890014648437
patch: case $NUMBER$ ++ {
rank: 831
score: 97.8193359375
patch: end ( ) ;
rank: 831
score: 97.29046630859375
patch: case >> 0 :
rank: 832
score: 98.4803955078125
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return null { {
rank: 832
score: 98.3119384765625
patch: case 1 { {
rank: 832
score: 97.80986328125
patch: default / : {
rank: 832
score: 97.6008056640625
patch: reset ( ) ;
rank: 832
score: 97.38402099609375
patch: case $STRING$ 1 :
rank: 832
score: 97.28778686523438
patch: case | null ;
rank: 833
score: 98.47964680989584
patch: { * * * * { * * * * { * * /
rank: 833
score: 98.39900716145833
patch: { { case $NUMBER$ :
rank: 833
score: 98.31095377604167
patch: case $NUMBER$ : String :
rank: 833
score: 97.81788635253906
patch: case $STRING$ ?
rank: 833
score: 97.8075439453125
patch: case $NUMBER$ boolean :
rank: 833
score: 97.380908203125
patch: case new $STRING$ :
rank: 834
score: 98.47897338867188
patch: case $NUMBER$ > 0 :
rank: 834
score: 98.39537556966145
patch: case ] . $NUMBER$ {
rank: 834
score: 98.31015014648438
patch: case $NUMBER$ : /
rank: 834
score: 97.81365966796875
patch: c = $STRING$ ;
rank: 834
score: 97.80297241210937
patch: Nil ( ) ;
rank: 834
score: 97.59559936523438
patch: } case $STRING$ :
rank: 834
score: 97.38045654296874
patch: case default : {
rank: 834
score: 97.2851806640625
patch: case Boolean . null
rank: 835
score: 98.47770690917969
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return false : $NUMBER$ ;
rank: 835
score: 98.39052327473958
patch: case $NUMBER$ { * {
rank: 835
score: 97.69135131835938
patch: case $NUMBER$ | {
rank: 835
score: 97.57974243164062
patch: case Boolean ;
rank: 836
score: 98.47543131510416
patch: { * * * * * $NUMBER$ . $NUMBER$ : * * * /
rank: 836
score: 98.30807495117188
patch: case $NUMBER$ : while {
rank: 836
score: 97.79031372070312
patch: case )
rank: 836
score: 97.68746948242188
patch: case BYTES :
rank: 836
score: 97.57135009765625
patch: encoding ( ) ;
rank: 836
score: 97.2791015625
patch: case } else {
rank: 837
score: 98.47478841145833
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { { case $NUMBER$ :
rank: 837
score: 97.80723876953125
patch: == $NUMBER$ : {
rank: 837
score: 97.78897094726562
patch: case 0 static :
rank: 837
score: 97.36908569335938
patch: throw $STRING$ ; }
rank: 838
score: 98.47291666666666
patch: { * * * * * { case 1 : * * * /
rank: 838
score: 98.3792215983073
patch: * { case $NUMBER$ :
rank: 838
score: 97.78658447265624
patch: case 1 $NUMBER$ :
rank: 839
score: 97.800390625
patch: & $NUMBER$ : {
rank: 839
score: 97.78543701171876
patch: case ( str {
rank: 839
score: 97.67646789550781
patch: case escape :
rank: 839
score: 97.55985107421876
patch: case count : {
rank: 839
score: 97.36236572265625
patch: case case 0 :
rank: 840
score: 98.37376912434895
patch: else { case 1 ;
rank: 841
score: 98.47157389322916
patch: { * * * * { * * * : * * * /
rank: 841
score: 98.3727315266927
patch: / ] case $NUMBER$ {
rank: 841
score: 98.29628499348958
patch: case $NUMBER$ + { /
rank: 841
score: 97.7751708984375
patch: case ( str :
rank: 841
score: 97.26243591308594
patch: } try {
rank: 842
score: 98.47010294596355
patch: case $STRING$ > $NUMBER$ :
rank: 842
score: 98.29612223307292
patch: case $NUMBER$ : / _
rank: 842
score: 97.95494588216145
patch: : { case 1 :
rank: 842
score: 97.7966552734375
patch: case ( $STRING$ ;
rank: 842
score: 97.7710205078125
patch: buffer = $STRING$ ;
rank: 842
score: 97.26212158203126
patch: case -= 1 :
rank: 843
score: 98.46985880533855
patch: { * case 1 :
rank: 843
score: 97.76810302734376
patch: case ( $NUMBER$ ;
rank: 843
score: 97.35337829589844
patch: case private :
rank: 843
score: 97.26048583984375
patch: case | 0 :
rank: 844
score: 98.46864420572916
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ ; else
rank: 844
score: 98.29251098632812
patch: case $STRING$ : { :
rank: 844
score: 97.95262654622395
patch: case $NUMBER$ * : {
rank: 844
score: 97.76118774414063
patch: / * : {
rank: 844
score: 97.65914306640624
patch: case 1 || {
rank: 844
score: 97.3525146484375
patch: case ? default :
rank: 845
score: 98.46759440104167
patch: * * * * * { * * * * * * { /
rank: 845
score: 97.94956665039062
patch: : case 1 :
rank: 845
score: 97.65428466796875
patch: default : default :
rank: 845
score: 97.53583984375
patch: encoding == null ;
rank: 845
score: 97.35057373046875
patch: case <= 0 :
rank: 845
score: 97.25676879882812
patch: case > ) {
rank: 846
score: 98.46668243408203
patch: { * * * * { { * * * * * * * /
rank: 846
score: 97.7843994140625
patch: case $NUMBER$ $STRING$ :
rank: 846
score: 97.25535888671875
patch: case $NUMBER$ : else
rank: 847
score: 98.34913126627605
patch: value : case $NUMBER$ :
rank: 847
score: 97.9403788248698
patch: > $NUMBER$ * $NUMBER$ ;
rank: 847
score: 97.7534423828125
patch: case 0 : :
rank: 847
score: 97.34944458007813
patch: case - null :
rank: 847
score: 97.2529052734375
patch: <= $NUMBER$ ) {
rank: 848
score: 98.46511840820312
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ : false ;
rank: 848
score: 98.34859212239583
patch: case $NUMBER$ case 1 :
rank: 848
score: 98.2797342936198
patch: case $NUMBER$ : } :
rank: 848
score: 97.77891845703125
patch: case 1 ) {
rank: 848
score: 97.753271484375
patch: b = $STRING$ ;
rank: 848
score: 97.63145955403645
patch: default :
rank: 848
score: 97.34931030273438
patch: case Boolean == null
rank: 848
score: 97.25283813476562
patch: case + ) {
rank: 849
score: 98.27805582682292
patch: case 1 + : {
rank: 849
score: 97.3489501953125
patch: case abs 1 :
rank: 850
score: 98.46366373697917
patch: case $STRING$ : break {
rank: 850
score: 98.34445190429688
patch: case 1 : else {
rank: 850
score: 97.6162109375
patch: default { default :
rank: 850
score: 97.34791870117188
patch: case $NUMBER$ : ,
rank: 851
score: 98.46304321289062
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return case $NUMBER$ : {
rank: 851
score: 98.25809326171876
patch: case $NUMBER$ : try
rank: 851
score: 97.77021484375
patch: case $STRING$ ; {
rank: 851
score: 97.24181518554687
patch: case | str ;
rank: 852
score: 98.33960978190105
patch: catch case $STRING$ : {
rank: 852
score: 97.91175333658855
patch: case $NUMBER$ > $NUMBER$ :
rank: 852
score: 97.7388916015625
patch: / * $STRING$ {
rank: 852
score: 97.5119384765625
patch: if ( $STRING$ .
rank: 852
score: 97.3460205078125
patch: case equals 0 :
rank: 852
score: 97.24017333984375
patch: case 1 else {
rank: 853
score: 98.4596939086914
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return $NUMBER$ { } }
rank: 853
score: 98.33958943684895
patch: case 0 : : {
rank: 853
score: 98.16080322265626
patch: case 1 : /
rank: 853
score: 97.58624267578125
patch: default : return :
rank: 853
score: 97.50579223632812
patch: case $NUMBER$ : char
rank: 853
score: 97.34375
patch: case 1 finally {
rank: 854
score: 98.45923868815105
patch: / * * ? /
rank: 854
score: 98.15849609375
patch: case 1 : else
rank: 854
score: 97.9030049641927
patch: : case 1 : {
rank: 854
score: 97.75050659179688
patch: case $NUMBER$ boolean {
rank: 854
score: 97.730029296875
patch: else case 1 :
rank: 854
score: 97.57022705078126
patch: case 1 ] :
rank: 854
score: 97.34357299804688
patch: case 1 : .
rank: 855
score: 98.4585205078125
patch: case 0 { {
rank: 855
score: 98.14794921875
patch: case 1 : try
rank: 855
score: 97.74717407226562
patch: static ( ) ;
rank: 855
score: 97.72989501953126
patch: name = str ;
rank: 855
score: 97.49505004882812
patch: static return false ;
rank: 855
score: 97.1778793334961
patch: return FALSE ;
rank: 856
score: 98.45696258544922
patch: { * * * * * { * * * * * * * /
rank: 856
score: 98.06494750976563
patch: case $NUMBER$ { :
rank: 856
score: 97.5579833984375
patch: case Integer 1 :
rank: 856
score: 97.26466369628906
patch: case left :
rank: 857
score: 98.45533752441406
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return false ; } }
rank: 857
score: 98.32541910807292
patch: this . case $NUMBER$ :
rank: 857
score: 98.06143188476562
patch: case $NUMBER$ : *
rank: 857
score: 97.74342041015625
patch: case $NUMBER$ ? :
rank: 857
score: 97.2576675415039
patch: case 1 _
rank: 857
score: 97.15228271484375
patch: length 1 :
rank: 858
score: 98.45528157552083
patch: case $STRING$ { break ;
rank: 858
score: 98.32511393229167
patch: case 1 case 0 :
rank: 858
score: 97.88667805989583
patch: { : case $NUMBER$ :
rank: 858
score: 97.72335205078124
patch: default : break ;
rank: 858
score: 97.49052429199219
patch: case ] ;
rank: 858
score: 97.25286102294922
patch: case FORMAT :
rank: 859
score: 98.4542236328125
patch: case Exception . $NUMBER$ :
rank: 859
score: 98.32508341471355
patch: else { case 1 {
rank: 859
score: 98.02086181640625
patch: case - 1 {
rank: 859
score: 97.88389078776042
patch: case $NUMBER$ : ! {
rank: 859
score: 97.73701782226563
patch: & 1 : {
rank: 859
score: 97.72318725585937
patch: name = $STRING$ ;
rank: 859
score: 97.54418334960937
patch: @ case $NUMBER$ :
rank: 859
score: 97.25198364257812
patch: case TYPE )
rank: 860
score: 97.99046630859375
patch: case $NUMBER$ { String
rank: 860
score: 97.52859497070312
patch: case { default :
rank: 860
score: 97.24027252197266
patch: case floor :
rank: 861
score: 98.45193481445312
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return $NUMBER$ ; { }
rank: 861
score: 98.32200113932292
patch: case 0 : else {
rank: 861
score: 97.97364501953125
patch: case $NUMBER$ : String
rank: 861
score: 97.7291259765625
patch: case $STRING$ * :
rank: 861
score: 97.7183837890625
patch: switch ( str .
rank: 861
score: 97.23493194580078
patch: case / :
rank: 861
score: 97.13546752929688
patch: case $NUMBER$ *
rank: 862
score: 98.45104217529297
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { return false ; } else
rank: 862
score: 97.71806335449219
patch: case length :
rank: 862
score: 97.4718017578125
patch: case <= $STRING$ :
rank: 862
score: 97.13170623779297
patch: case round :
rank: 863
score: 98.45058186848958
patch: case $STRING$ { * {
rank: 863
score: 98.31742350260417
patch: 0 : case $NUMBER$ :
rank: 863
score: 97.72310791015624
patch: case $NUMBER$ String ;
rank: 864
score: 97.93692626953126
patch: case size : {
rank: 864
score: 97.716162109375
patch: case 1 : return
rank: 864
score: 97.09416961669922
patch: <= $NUMBER$ ;
rank: 865
score: 98.4489034016927
patch: * * case $NUMBER$ :
rank: 865
score: 97.923095703125
patch: case 1 { :
rank: 865
score: 97.7134765625
patch: start = $STRING$ ;
rank: 865
score: 97.4859375
patch: default case 1 :
rank: 865
score: 97.46826171875
patch: . return false ;
rank: 865
score: 97.21127319335938
patch: case start :
rank: 865
score: 97.08737182617188
patch: case PI :
rank: 866
score: 98.44668579101562
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return null { } else
rank: 866
score: 97.92225646972656
patch: case Integer :
rank: 866
score: 97.71121978759766
patch: case 0 {
rank: 866
score: 97.48245849609376
patch: case $NUMBER$ || str
rank: 866
score: 97.19851684570312
patch: case ] :
rank: 866
score: 97.08584594726562
patch: return $NUMBER$ ;
rank: 867
score: 98.4442850748698
patch: { * * * {
rank: 867
score: 98.30452473958333
patch: case 0 case 0 :
rank: 867
score: 97.71273193359374
patch: case $STRING$ ] {
rank: 867
score: 97.71028442382813
patch: case ( 0 ;
rank: 867
score: 97.642919921875
patch: case Character . :
rank: 867
score: 97.1985092163086
patch: case value :
rank: 867
score: 97.0511474609375
patch: case ceil :
rank: 868
score: 98.3035176595052
patch: case $NUMBER$ ] ; {
rank: 868
score: 97.70968017578124
patch: case $NUMBER$ ? }
rank: 868
score: 97.63027954101562
patch: : case $STRING$ :
rank: 868
score: 97.46289672851563
patch: case round : {
rank: 868
score: 97.18727111816406
patch: case size :
rank: 868
score: 97.04828643798828
patch: matched : {
rank: 869
score: 98.30343627929688
patch: $NUMBER$ { case 0 :
rank: 869
score: 97.70496826171875
patch: * $NUMBER$ : {
rank: 869
score: 97.18263244628906
patch: case T )
rank: 870
score: 98.4407450358073
patch: case $STRING$ { / {
rank: 870
score: 98.30288696289062
patch: substring $NUMBER$ case $NUMBER$ :
rank: 870
score: 97.903955078125
patch: case 1 : *
rank: 870
score: 97.70462036132812
patch: case $NUMBER$ ? ;
rank: 870
score: 97.58994140625
patch: case E $NUMBER$ :
rank: 870
score: 97.45574951171875
patch: case max $NUMBER$ :
rank: 870
score: 97.1748046875
patch: / * ?
rank: 870
score: 97.04315948486328
patch: case center :
rank: 871
score: 98.30262247721355
patch: / ] case 0 {
rank: 871
score: 97.6988525390625
patch: case $STRING$ } {
rank: 871
score: 97.58201293945312
patch: $NUMBER$ * $NUMBER$ ;
rank: 871
score: 97.45519256591797
patch: case >> :
rank: 871
score: 97.04273986816406
patch: > 0 ;
rank: 872
score: 98.43806966145833
patch: case $STRING$ + 0 {
rank: 872
score: 97.6991943359375
patch: case ( 1 ;
rank: 872
score: 97.69588012695313
patch: > 1 : {
rank: 872
score: 97.03339385986328
patch: return str ;
rank: 873
score: 98.43746948242188
patch: case 1 { * /
rank: 873
score: 98.29205322265625
patch: / ] case 0 :
rank: 873
score: 97.88978881835938
patch: case $NUMBER$ { System
rank: 873
score: 97.4518814086914
patch: case Void :
rank: 873
score: 97.1260986328125
patch: case str .
rank: 873
score: 97.01727294921875
patch: case else {
rank: 874
score: 98.43675231933594
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { { * * * /
rank: 874
score: 98.29049682617188
patch: case $NUMBER$ case $STRING$ :
rank: 874
score: 97.88392333984375
patch: case Integer : {
rank: 874
score: 97.6941630045573
patch: break ;
rank: 874
score: 97.69404602050781
patch: case null ;
rank: 874
score: 97.44949340820312
patch: default { {
rank: 874
score: 97.44725952148437
patch: static return true ;
rank: 874
score: 97.0157470703125
patch: <= 1 ;
rank: 875
score: 98.43583679199219
patch: { * * * * { { / } } * * * * /
rank: 875
score: 97.69327392578126
patch: case ( str ;
rank: 875
score: 97.11685943603516
patch: case - }
rank: 875
score: 97.00870513916016
patch: return TRUE ;
rank: 876
score: 97.87978515625
patch: case $NUMBER$ : public
rank: 876
score: 96.99806213378906
patch: } ) {
rank: 877
score: 98.43415832519531
patch: { * * * * { { * * * * * * / /
rank: 877
score: 97.86857299804687
patch: case $NUMBER$ : out
rank: 877
score: 97.69043579101563
patch: / * $STRING$ /
rank: 877
score: 97.49234619140626
patch: > $NUMBER$ * /
rank: 877
score: 97.10971069335938
patch: case minimum :
rank: 877
score: 96.9874038696289
patch: case Unknown CaMeL
rank: 878
score: 98.4327392578125
patch: { * * * * { * * * * * * * / /
rank: 878
score: 97.86181640625
patch: case $NUMBER$ { else
rank: 878
score: 97.68990478515624
patch: s $NUMBER$ : {
rank: 878
score: 97.47227783203125
patch: protected case $NUMBER$ :
rank: 878
score: 97.43612060546874
patch: case Integer $NUMBER$ :
rank: 878
score: 97.08467610677083
patch: case :
rank: 878
score: 96.96807098388672
patch: return ) ;
rank: 879
score: 98.43194580078125
patch: * { case 0 :
rank: 879
score: 98.24561157226563
patch: catch case $STRING$ :
rank: 879
score: 97.83643188476563
patch: case - $NUMBER$ {
rank: 879
score: 97.688134765625
patch: name ( ) ;
rank: 879
score: 97.68291625976562
patch: 0 = 0 ;
rank: 879
score: 97.07925415039062
patch: case wrap :
rank: 879
score: 96.96372985839844
patch: matched $NUMBER$ :
rank: 880
score: 98.43047332763672
patch: { * * * * { * * * * * * * * /
rank: 880
score: 97.83626708984374
patch: case 1 ] {
rank: 881
score: 98.43019104003906
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { return $NUMBER$ { } else
rank: 881
score: 97.8290771484375
patch: case 1 { String
rank: 881
score: 97.67410278320312
patch: case ( false )
rank: 881
score: 97.0749282836914
patch: case XML :
rank: 882
score: 98.42768096923828
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return $NUMBER$ { } else
rank: 882
score: 97.82355346679688
patch: case 1 : String
rank: 882
score: 97.45885620117187
patch: case ~ $STRING$ ;
rank: 882
score: 97.43241577148437
patch: case $NUMBER$ : false
rank: 882
score: 97.07414245605469
patch: case str }
rank: 882
score: 96.9466552734375
patch: case Assertion CaMeL
rank: 883
score: 98.22238159179688
patch: i case $NUMBER$ :
rank: 883
score: 97.8214111328125
patch: case TYPE : {
rank: 883
score: 97.62435150146484
patch: case $NUMBER$ ]
rank: 883
score: 97.43154296875
patch: switch ( 1 )
rank: 883
score: 97.07333374023438
patch: case ; }
rank: 884
score: 98.42687225341797
patch: * * * * * * { * * * * * * * /
rank: 884
score: 98.19903564453125
patch: catch case $NUMBER$ :
rank: 884
score: 97.59774017333984
patch: == $NUMBER$ ;
rank: 884
score: 97.43150024414062
patch: length $NUMBER$ $NUMBER$ :
rank: 884
score: 97.4085205078125
patch: case atan $NUMBER$ :
rank: 884
score: 96.94367980957031
patch: case >> ;
rank: 885
score: 98.18992919921875
patch: if case $NUMBER$ :
rank: 885
score: 97.67357177734375
patch: case $NUMBER$ static {
rank: 885
score: 97.435302734375
patch: case CR : {
rank: 885
score: 97.426904296875
patch: else return true ;
rank: 885
score: 97.04804992675781
patch: default $NUMBER$ :
rank: 886
score: 98.42369079589844
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return { case $NUMBER$ :
rank: 886
score: 97.81495361328125
patch: case $NUMBER$ : final
rank: 886
score: 97.67325439453126
patch: str = str ;
rank: 886
score: 97.5677719116211
patch: 0 : {
rank: 886
score: 97.42100219726562
patch: case ] $NUMBER$ :
rank: 886
score: 97.04801940917969
patch: / * ;
rank: 886
score: 96.93992614746094
patch: case unescape :
rank: 887
score: 98.42243957519531
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) ; return false : break ;
rank: 887
score: 97.8125732421875
patch: case Math : {
rank: 887
score: 97.67293701171874
patch: case length : {
rank: 887
score: 97.41715087890626
patch: . return true ;
rank: 887
score: 96.92554473876953
patch: } * /
rank: 888
score: 98.42138671875
patch: case $STRING$ + { ;
rank: 888
score: 98.18035888671875
patch: i case $STRING$ :
rank: 888
score: 97.66309814453125
patch: case 1 / :
rank: 888
score: 97.39197998046875
patch: case 0 || {
rank: 888
score: 96.91947937011719
patch: case capacity :
rank: 889
score: 98.42057291666667
patch: case $STRING$ { if {
rank: 889
score: 98.1697021484375
patch: else { $NUMBER$ {
rank: 889
score: 97.71649932861328
patch: case Double :
rank: 889
score: 97.65993041992188
patch: else case $STRING$ :
rank: 889
score: 97.52978515625
patch: == $NUMBER$ :
rank: 889
score: 96.91539001464844
patch: case 1 ?
rank: 890
score: 98.41978454589844
patch: { * * * * $NUMBER$ . 0 : * * * : * /
rank: 890
score: 98.16859130859375
patch: else { $NUMBER$ :
rank: 890
score: 97.67684173583984
patch: case Math :
rank: 890
score: 97.01866912841797
patch: case * ?
rank: 890
score: 96.91272735595703
patch: == $STRING$ ;
rank: 891
score: 98.41919708251953
patch: { * * * * { { * * * * { * * /
rank: 891
score: 98.16256713867188
patch: case $NUMBER$ ] ;
rank: 891
score: 97.65546875
patch: case 0 / :
rank: 891
score: 97.4093994140625
patch: case Integer . :
rank: 891
score: 97.38507080078125
patch: case $NUMBER$ T :
rank: 891
score: 97.01808166503906
patch: case err :
rank: 891
score: 96.90983581542969
patch: > 1 ;
rank: 892
score: 98.41895294189453
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : { return false ; }
rank: 892
score: 97.6531494140625
patch: return return true ;
rank: 892
score: 97.40921630859376
patch: case Long $NUMBER$ :
rank: 892
score: 97.3231201171875
patch: / $NUMBER$ :
rank: 893
score: 98.41877746582031
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return { case $NUMBER$ :
rank: 893
score: 98.12060546875
patch: catch case 1 :
rank: 893
score: 97.652294921875
patch: start = false ;
rank: 893
score: 97.50328826904297
patch: $NUMBER$ : {
rank: 893
score: 97.00579071044922
patch: case null }
rank: 893
score: 96.90548706054688
patch: case ( $STRING$
rank: 894
score: 98.41811116536458
patch: case 0 : if {
rank: 894
score: 97.38221435546875
patch: > $NUMBER$ || {
rank: 894
score: 97.00000762939453
patch: case SIZE }
rank: 895
score: 98.41673278808594
patch: { * * * * * { { * * * * * * /
rank: 895
score: 98.0741943359375
patch: else { * {
rank: 895
score: 97.49557495117188
patch: case $NUMBER$ boolean
rank: 895
score: 97.46937561035156
patch: case ) :
rank: 895
score: 97.377783203125
patch: case Short . :
rank: 895
score: 96.99836730957031
patch: case 1 }
rank: 895
score: 96.89420318603516
patch: case : else
rank: 896
score: 98.41612243652344
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return null ; } else
rank: 896
score: 98.0612548828125
patch: } case 0 :
rank: 896
score: 97.4744644165039
patch: - $NUMBER$ ;
rank: 896
score: 97.45160675048828
patch: case this :
rank: 896
score: 96.99766540527344
patch: case keep :
rank: 896
score: 96.89269256591797
patch: case maximum :
rank: 897
score: 98.41612243652344
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) { return $NUMBER$ : { }
rank: 897
score: 97.47357940673828
patch: length ++ ;
rank: 897
score: 97.3656982421875
patch: case $STRING$ || {
rank: 897
score: 97.36248779296875
patch: case Long . :
rank: 898
score: 98.4153823852539
patch: { * * * { * { * * * * * * * /
rank: 898
score: 97.46572875976562
patch: case false ;
rank: 898
score: 97.3590576171875
patch: case E 1 :
rank: 898
score: 96.99287414550781
patch: case str {
rank: 899
score: 98.4123764038086
patch: case Boolean . value CaMeL Of ( $NUMBER$ ) : return false : { }
rank: 899
score: 98.05731201171875
patch: j case $STRING$ :
rank: 899
score: 97.53301239013672
patch: / * {
rank: 899
score: 97.38399505615234
patch: if $NUMBER$ :
rank: 899
score: 97.34619140625
patch: $NUMBER$ * $NUMBER$ :
rank: 899
score: 97.21580505371094
patch: / * }
rank: 899
score: 96.99002075195312
patch: case exp :
rank: 899
score: 96.88538360595703
patch: case SIZE ;
rank: 900
score: 98.41190592447917
patch: / * case 0 :
rank: 900
score: 97.34469604492188
patch: > $NUMBER$ :
rank: 900
score: 97.20303344726562
patch: / $NUMBER$ .
rank: 900
score: 96.87493896484375
patch: case : }
rank: 901
score: 98.4105936686198
patch: { * * * :
rank: 901
score: 97.35752563476562
patch: case escape : {
rank: 901
score: 97.1959228515625
patch: for ( char
rank: 902
score: 98.4095967610677
patch: } / * * /
rank: 902
score: 97.34842529296876
patch: case $NUMBER$ long :
rank: 902
score: 97.1810073852539
patch: / 1 :
rank: 902
score: 96.97733306884766
patch: case / *
rank: 903
score: 98.40769449869792
patch: { case 0 : {
rank: 903
score: 97.48196411132812
patch: return 0 ;
rank: 903
score: 97.42900848388672
patch: & $NUMBER$ :
rank: 903
score: 97.34282836914062
patch: case join $NUMBER$ :
rank: 903
score: 97.31329345703125
patch: > $NUMBER$ ;
rank: 904
score: 98.4072998046875
patch: / * { /
rank: 904
score: 98.03364868164063
patch: else { * /
rank: 904
score: 97.3082046508789
patch: case Short :
rank: 905
score: 98.40658569335938
patch: case 0 : break {
rank: 905
score: 97.45086669921875
patch: break ; }
rank: 905
score: 97.40178680419922
patch: case $NUMBER$ break
rank: 905
score: 97.30654907226562
patch: case key :
rank: 905
score: 97.11235809326172
patch: & $STRING$ :
rank: 906
score: 98.4059346516927
patch: case 1 > $NUMBER$ :
rank: 906
score: 97.38679504394531
patch: - 1 ;
rank: 906
score: 97.29196166992188
patch: case 1 ]
rank: 906
score: 97.1094741821289
patch: / 0 :
rank: 906
score: 96.94400024414062
patch: case sum :
rank: 906
score: 96.84659576416016
patch: case static ;
rank: 907
score: 98.01085205078125
patch: if case 1 :
rank: 907
score: 97.36817932128906
patch: case $STRING$ )
rank: 907
score: 97.29004669189453
patch: case LF :
rank: 907
score: 97.28633880615234
patch: case name :
rank: 907
score: 97.0975112915039
patch: static $STRING$ :
rank: 907
score: 96.93851470947266
patch: case TYPE {
rank: 907
score: 96.84246826171875
patch: return new ;
rank: 908
score: 98.40277099609375
patch: } if case 1 :
rank: 908
score: 98.00923461914063
patch: catch case $NUMBER$ {
rank: 908
score: 97.3636703491211
patch: case ] {
rank: 908
score: 97.2739486694336
patch: case null {
rank: 908
score: 97.12401580810547
patch: <= $NUMBER$ :
rank: 908
score: 97.0903549194336
patch: static $NUMBER$ ;
rank: 908
score: 96.83336639404297
patch: case chars :
rank: 909
score: 98.00775146484375
patch: String case $NUMBER$ :
rank: 909
score: 97.36148071289062
patch: > 1 :
rank: 909
score: 97.24151611328125
patch: case Number :
rank: 909
score: 96.92899322509766
patch: throw str ;
rank: 910
score: 98.40155029296875
patch: * * * / /
rank: 910
score: 97.99830932617188
patch: i ( $NUMBER$ {
rank: 910
score: 97.35367584228516
patch: default / :
rank: 910
score: 97.07009887695312
patch: for ( }
rank: 910
score: 96.9244613647461
patch: / * *
rank: 911
score: 98.38992309570312
patch: / { case 0 :
rank: 911
score: 97.983349609375
patch: else { else {
rank: 911
score: 97.34754180908203
patch: - $NUMBER$ :
rank: 911
score: 97.34567260742188
patch: / * :
rank: 911
score: 97.102294921875
patch: case format :
rank: 911
score: 96.92198944091797
patch: case console :
rank: 911
score: 96.81730651855469
patch: case $NUMBER$ finally
rank: 912
score: 97.9810302734375
patch: while case $NUMBER$ :
rank: 912
score: 97.3454081217448
patch: case $STRING$
rank: 912
score: 97.19525146484375
patch: case false {
rank: 912
score: 97.09505462646484
patch: case trim :
rank: 912
score: 96.81669616699219
patch: case $NUMBER$ else
rank: 913
score: 98.38198852539062
patch: case $STRING$ + { {
rank: 913
score: 97.97161254882812
patch: i case $NUMBER$ {
rank: 913
score: 97.34450276692708
patch: case ;
rank: 913
score: 97.06741333007812
patch: case exit :
rank: 913
score: 97.05913543701172
patch: static $NUMBER$ :
rank: 914
score: 98.3534423828125
patch: { { * /
rank: 914
score: 97.96539306640625
patch: else { $NUMBER$ ;
rank: 914
score: 97.33260345458984
patch: & 1 :
rank: 914
score: 97.31993103027344
patch: case 1 boolean
rank: 914
score: 97.1710205078125
patch: case Character :
rank: 914
score: 97.03607177734375
patch: default : :
rank: 914
score: 96.90345764160156
patch: case Boolean :
rank: 915
score: 98.336376953125
patch: } else * /
rank: 915
score: 96.88912200927734
patch: case static }
rank: 915
score: 96.8037338256836
patch: case : ;
rank: 916
score: 98.330712890625
patch: { else * /
rank: 916
score: 97.95830078125
patch: N case $STRING$ :
rank: 916
score: 97.28375244140625
patch: break $NUMBER$ ;
rank: 916
score: 97.14833068847656
patch: $NUMBER$ : :
rank: 916
score: 97.019287109375
patch: } } }
rank: 916
score: 96.88127136230469
patch: case String ;
rank: 917
score: 98.30582275390626
patch: } else if {
rank: 917
score: 97.9506591796875
patch: if case $STRING$ :
rank: 917
score: 97.28495025634766
patch: 1 : {
rank: 917
score: 97.27764892578125
patch: s $NUMBER$ :
rank: 917
score: 97.02774810791016
patch: case decode :
rank: 917
score: 97.0156478881836
patch: System . }
rank: 917
score: 96.97903442382812
patch: case abstract :
rank: 917
score: 96.87435150146484
patch: case / }
rank: 917
score: 96.79009246826172
patch: case CONTROL :
rank: 918
score: 98.30390167236328
patch: * * /
rank: 918
score: 97.94852905273437
patch: i case 1 :
rank: 918
score: 97.28245544433594
patch: } finally {
rank: 918
score: 96.8729019165039
patch: case == null
rank: 918
score: 96.78608703613281
patch: << $NUMBER$ :
rank: 919
score: 98.29334716796875
patch: * case 1 :
rank: 919
score: 97.9401611328125
patch: j case $NUMBER$ :
rank: 919
score: 97.27766418457031
patch: $STRING$ ) ;
rank: 919
score: 97.12361907958984
patch: case long :
rank: 919
score: 97.00665283203125
patch: @ $NUMBER$ :
rank: 919
score: 96.99476623535156
patch: == $STRING$ :
rank: 920
score: 98.28341674804688
patch: i * $NUMBER$ ;
rank: 920
score: 96.99833679199219
patch: case out :
rank: 920
score: 96.86480712890625
patch: case EMPTY }
rank: 920
score: 96.77890014648438
patch: case : )
rank: 921
score: 97.25494384765625
patch: finally { }
rank: 921
score: 97.11911010742188
patch: case super :
rank: 921
score: 96.9794692993164
patch: / 1 .
rank: 921
score: 96.97917175292969
patch: case reverse :
rank: 922
score: 97.92808227539062
patch: N case $NUMBER$ :
rank: 922
score: 97.26058959960938
patch: $STRING$ ) {
rank: 922
score: 97.118408203125
patch: case Long :
rank: 922
score: 96.9754638671875
patch: case substring :
rank: 923
score: 97.92738037109375
patch: i ( $STRING$ :
rank: 923
score: 97.11392974853516
patch: return $NUMBER$ :
rank: 923
score: 96.851806640625
patch: case sleep :
rank: 923
score: 96.76707458496094
patch: * $NUMBER$ :
rank: 924
score: 97.92669067382812
patch: case 1 ] ;
rank: 924
score: 97.09974670410156
patch: case names :
rank: 924
score: 96.94528198242188
patch: equals 0 :
rank: 925
score: 98.25209350585938
patch: { else if {
rank: 925
score: 97.22785186767578
patch: - 1 :
rank: 925
score: 96.74887084960938
patch: case Safe CaMeL
rank: 926
score: 98.24974365234375
patch: } else { }
rank: 926
score: 97.90572509765624
patch: } case $NUMBER$ {
rank: 926
score: 97.24219512939453
patch: != 0 ;
rank: 926
score: 97.22308349609375
patch: case null )
rank: 926
score: 96.95548248291016
patch: case sin :
rank: 926
score: 96.82850138346355
patch: / ?
rank: 927
score: 98.24822387695312
patch: } if ( {
rank: 927
score: 97.23464965820312
patch: case 0 ?
rank: 927
score: 97.22251892089844
patch: case ) ;
rank: 927
score: 97.08872985839844
patch: case Integer {
rank: 927
score: 96.84105682373047
patch: >= $NUMBER$ ;
rank: 927
score: 96.81867980957031
patch: case Readable :
rank: 928
score: 97.2339096069336
patch: case $NUMBER$ --
rank: 928
score: 97.22251892089844
patch: count ++ ;
rank: 928
score: 96.89730834960938
patch: case Interrupted CaMeL
rank: 928
score: 96.73739624023438
patch: case : :
rank: 929
score: 98.20687866210938
patch: } else { {
rank: 929
score: 97.82328796386719
patch: { $NUMBER$ :
rank: 929
score: 97.22903442382812
patch: case $NUMBER$ ++
rank: 929
score: 97.2150650024414
patch: ++ 0 ;
rank: 929
score: 96.90963745117188
patch: case sqrt :
rank: 929
score: 96.88407135009766
patch: case Exception CaMeL
rank: 929
score: 96.83511352539062
patch: case protected :
rank: 929
score: 96.8092041015625
patch: case split :
rank: 930
score: 98.20352935791016
patch: } if {
rank: 930
score: 97.22819519042969
patch: 0 ) {
rank: 930
score: 97.21332550048828
patch: case 0 )
rank: 930
score: 96.82493591308594
patch: > 0 :
rank: 930
score: 96.79966735839844
patch: / * ,
rank: 931
score: 98.19769287109375
patch: } if { {
rank: 931
score: 97.22678629557292
patch: 0 :
rank: 931
score: 97.1942367553711
patch: } break ;
rank: 931
score: 96.7989501953125
patch: case Boolean }
rank: 931
score: 96.69259643554688
patch: case $NUMBER$ ,
rank: 932
score: 98.18796997070312
patch: { else { }
rank: 932
score: 97.22286224365234
patch: >= 1 ;
rank: 932
score: 97.06069946289062
patch: case Math {
rank: 932
score: 96.90518188476562
patch: case command :
rank: 932
score: 96.69230651855469
patch: case ? ;
rank: 933
score: 97.17913055419922
patch: default * /
rank: 933
score: 97.03740692138672
patch: int $NUMBER$ :
rank: 933
score: 96.86382293701172
patch: static ) {
rank: 933
score: 96.68450164794922
patch: case $NUMBER$ /
rank: 934
score: 98.1741943359375
patch: / * * :
rank: 934
score: 97.17413330078125
patch: int 1 :
rank: 934
score: 97.03236389160156
patch: if : {
rank: 935
score: 97.5325698852539
patch: $NUMBER$ * {
rank: 935
score: 97.02910614013672
patch: case this {
rank: 935
score: 96.87789916992188
patch: case Redirect :
rank: 935
score: 96.85166931152344
patch: / $STRING$ :
rank: 935
score: 96.79000854492188
patch: case E :
rank: 935
score: 96.67150115966797
patch: case Null CaMeL
rank: 936
score: 98.16036376953124
patch: i { * /
rank: 936
score: 97.520263671875
patch: substring $NUMBER$ :
rank: 936
score: 97.00855255126953
patch: case double :
rank: 936
score: 96.86746215820312
patch: case negate :
rank: 937
score: 98.16024169921874
patch: / { * /
rank: 937
score: 97.1604715983073
patch: } else
rank: 937
score: 96.99903869628906
patch: case String :
rank: 937
score: 96.84711456298828
patch: case * }
rank: 937
score: 96.79358673095703
patch: > $NUMBER$ )
rank: 937
score: 96.65966796875
patch: <= $STRING$ ;
rank: 938
score: 98.1600830078125
patch: case 1 * {
rank: 938
score: 97.15811920166016
patch: throw $STRING$ ;
rank: 938
score: 96.99638366699219
patch: case Float :
rank: 938
score: 96.84674072265625
patch: case finally {
rank: 938
score: 96.65937805175781
patch: } : {
rank: 939
score: 97.50299072265625
patch: * * {
rank: 939
score: 97.17814636230469
patch: case Boolean {
rank: 939
score: 97.14155578613281
patch: / / :
rank: 939
score: 96.99496459960938
patch: if $NUMBER$ {
rank: 939
score: 96.83678436279297
patch: case + ;
rank: 939
score: 96.75090789794922
patch: case $STRING$ _
rank: 940
score: 98.15399169921875
patch: case 0 * {
rank: 940
score: 96.99028015136719
patch: / $NUMBER$ {
rank: 940
score: 96.7772216796875
patch: case float :
rank: 940
score: 96.7494888305664
patch: / / *
rank: 941
score: 97.17353820800781
patch: == 1 ;
rank: 941
score: 96.95084381103516
patch: case SIZE {
rank: 941
score: 96.8420639038086
patch: case void :
rank: 941
score: 96.7675552368164
patch: >= $NUMBER$ :
rank: 941
score: 96.74425506591797
patch: case mid :
rank: 942
score: 98.1399169921875
patch: { * { /
rank: 942
score: 97.17169189453125
patch: case true ;
rank: 942
score: 96.74195861816406
patch: case TYPE }
rank: 943
score: 96.8229751586914
patch: With $NUMBER$ :
rank: 943
score: 96.74126434326172
patch: case TYPE ;
rank: 943
score: 96.64119720458984
patch: / * else
rank: 944
score: 98.124755859375
patch: / case 1 :
rank: 944
score: 97.1104507446289
patch: n $NUMBER$ :
rank: 944
score: 96.94430541992188
patch: case true {
rank: 944
score: 96.64090983072917
patch: } }
rank: 945
score: 98.1197998046875
patch: { / * /
rank: 945
score: 97.11019897460938
patch: case 0 }
rank: 945
score: 96.81848907470703
patch: for ( )
rank: 945
score: 96.74057006835938
patch: throws $STRING$ ;
rank: 945
score: 96.5180155436198
patch: $NUMBER$ {
rank: 946
score: 98.11937255859375
patch: } * * /
rank: 946
score: 97.44932556152344
patch: char $NUMBER$ :
rank: 946
score: 97.16165161132812
patch: case $STRING$ *
rank: 946
score: 97.10195922851562
patch: case ( str
rank: 946
score: 96.73846435546875
patch: case unescape $NUMBER$
rank: 946
score: 96.63623809814453
patch: case repeat :
rank: 946
score: 96.40533447265625
patch: $NUMBER$ :
rank: 947
score: 98.11072387695313
patch: i * * /
rank: 947
score: 97.44108581542969
patch: $NUMBER$ * /
rank: 947
score: 97.15909576416016
patch: >= 0 ;
rank: 947
score: 96.73826599121094
patch: case str [
rank: 947
score: 96.633544921875
patch: <= 0 ;
rank: 947
score: 96.34804280598958
patch: / {
rank: 948
score: 98.10423583984375
patch: { case $NUMBER$ {
rank: 948
score: 97.15613555908203
patch: case $STRING$ ]
rank: 948
score: 96.7376708984375
patch: case exec :
rank: 948
score: 95.8229268391927
patch: return {
rank: 949
score: 98.10394287109375
patch: else if { {
rank: 949
score: 97.42648315429688
patch: substring 1 :
rank: 949
score: 97.14237976074219
patch: / finally {
rank: 949
score: 97.07427215576172
patch: / : {
rank: 949
score: 96.80892944335938
patch: $STRING$ : {
rank: 949
score: 96.73518371582031
patch: case Boolean [
rank: 949
score: 96.6217041015625
patch: * /
rank: 949
score: 95.73826090494792
patch: / :
rank: 950
score: 98.09814453125
patch: { else { {
rank: 950
score: 97.12577311197917
patch: System .
rank: 950
score: 95.73158772786458
patch: } {
rank: 951
score: 98.09405517578125
patch: else { if {
rank: 951
score: 97.40695190429688
patch: String $NUMBER$ :
rank: 951
score: 97.06747436523438
patch: if ( str
rank: 951
score: 96.6132583618164
patch: } / *
rank: 951
score: 95.60711669921875
patch: if :
rank: 952
score: 98.092529296875
patch: default * * /
rank: 952
score: 97.39990234375
patch: default * {
rank: 952
score: 96.7842025756836
patch: case resume :
rank: 952
score: 96.72643280029297
patch: case xor :
rank: 952
score: 96.69461059570312
patch: case goto :
rank: 952
score: 96.61005401611328
patch: << 1 :
rank: 952
score: 95.55294799804688
patch: } :
rank: 953
score: 97.11619567871094
patch: case $STRING$ boolean
rank: 953
score: 96.78364562988281
patch: case new :
rank: 953
score: 96.72357177734375
patch: case SIZE )
rank: 953
score: 96.6048583984375
patch: < 1 ;
rank: 953
score: 95.52596028645833
patch: * {
rank: 954
score: 98.08756713867187
patch: { if { {
rank: 954
score: 97.04988098144531
patch: / ) {
rank: 954
score: 96.7977294921875
patch: case boolean CaMeL
rank: 954
score: 96.77963256835938
patch: case intern :
rank: 954
score: 95.38137817382812
patch: : {
rank: 955
score: 97.09950256347656
patch: == 1 :
rank: 955
score: 97.04529571533203
patch: case ( (
rank: 955
score: 96.7703628540039
patch: case UNASSIGNED :
rank: 955
score: 95.33323160807292
patch: if {
rank: 956
score: 97.38032531738281
patch: char * /
rank: 956
score: 97.04524739583333
patch: case ]
rank: 956
score: 96.76998901367188
patch: case ? :
rank: 956
score: 96.71886444091797
patch: case TRUE }
rank: 956
score: 96.66411590576172
patch: > : :
rank: 956
score: 96.5886739095052
patch: finally {
rank: 956
score: 95.20846557617188
patch: Assert {
rank: 957
score: 97.37665557861328
patch: catch $NUMBER$ :
rank: 957
score: 97.0361099243164
patch: case T :
rank: 957
score: 97.01059977213542
patch: case ?
rank: 957
score: 96.758544921875
patch: case digit :
rank: 957
score: 96.67795817057292
patch: / *
rank: 957
score: 96.5562744140625
patch: try {
rank: 957
score: 95.19744873046875
patch: break {
rank: 958
score: 98.07468872070312
patch: case 0 ] {
rank: 958
score: 97.03399658203125
patch: f ) {
rank: 958
score: 96.77284240722656
patch: case Verify CaMeL
rank: 958
score: 96.58517456054688
patch: for (
rank: 958
score: 96.34684244791667
patch: else {
rank: 958
score: 95.0595703125
patch: /
rank: 959
score: 97.34101867675781
patch: case char :
rank: 959
score: 97.0287094116211
patch: - 0 ;
rank: 959
score: 96.9535624186198
patch: 0 ;
rank: 959
score: 96.73450469970703
patch: case 1 )
rank: 959
score: 96.31732177734375
patch: case 1
rank: 959
score: 95.02410888671875
patch: }
rank: 960
score: 96.24920654296875
patch: case str
rank: 960
score: 94.17243194580078
patch: try
rank: 961
score: 98.05888671875
patch: i * 1 ;
rank: 961
score: 97.33960723876953
patch: substring $NUMBER$ {
rank: 961
score: 96.7302017211914
patch: { default :
rank: 961
score: 96.13694254557292
patch: case SIZE
rank: 961
score: 94.1032943725586
patch: {
rank: 962
score: 98.0583740234375
patch: case $STRING$ { }
rank: 962
score: 97.3345947265625
patch: case byte :
rank: 962
score: 96.84671020507812
patch: true ;
rank: 962
score: 96.24476114908855
patch: case -
rank: 962
score: 93.6556396484375
patch: else
rank: 963
score: 98.05817260742188
patch: ++ case 1 :
rank: 963
score: 97.32374572753906
patch: else { :
rank: 963
score: 96.72725677490234
patch: case strip :
rank: 963
score: 96.69755045572917
patch: result ;
rank: 963
score: 96.05281575520833
patch: case END
rank: 963
score: 93.46839141845703
patch: $NUMBER$
rank: 964
score: 98.05128784179688
patch: } { * /
rank: 964
score: 96.687744140625
patch: result {
rank: 964
score: 96.02024332682292
patch: case }
rank: 964
score: 93.3786392211914
patch: System
rank: 965
score: 96.74037679036458
patch: $STRING$ ;
rank: 965
score: 96.18752034505208
patch: log .
rank: 965
score: 95.95882161458333
patch: false ;
rank: 965
score: 93.32659912109375
patch: final
rank: 966
score: 96.66757202148438
patch: f {
rank: 966
score: 95.90647379557292
patch: matched :
rank: 966
score: 93.31454467773438
patch: String
rank: 967
score: 97.31269073486328
patch: while $NUMBER$ :
rank: 967
score: 96.71647644042969
patch: case concatenate :
rank: 967
score: 96.6876220703125
patch: 1 :
rank: 967
score: 96.16973876953125
patch: case
rank: 967
score: 93.30294036865234
patch: *
rank: 968
score: 96.08678181966145
patch: logger .
rank: 968
score: 93.25741577148438
patch: :
rank: 969
score: 96.70013427734375
patch: case signum :
rank: 969
score: 96.61627197265625
patch: return ;
rank: 969
score: 96.6156514485677
patch: 1 ;
rank: 969
score: 96.5514144897461
patch: <= 1 :
rank: 969
score: 93.0338134765625
patch: public
rank: 970
score: 96.58065795898438
patch: $NUMBER$ ;
rank: 970
score: 96.22003173828125
patch: Log .
rank: 970
score: 95.95864868164062
patch: LOGGING :
rank: 970
score: 95.73119099934895
patch: continue ;
rank: 970
score: 92.96015930175781
patch: boolean
rank: 971
score: 97.9214096069336
patch: { else {
rank: 971
score: 96.5368881225586
patch: { : :
rank: 971
score: 95.93113199869792
patch: $STRING$ :
rank: 971
score: 92.93406677246094
patch: Assert
rank: 972
score: 95.88939412434895
patch: / /
rank: 972
score: 92.75437927246094
patch: result
rank: 973
score: 97.72003173828125
patch: else if {
rank: 973
score: 96.51927185058594
patch: case in :
rank: 973
score: 96.46253458658855
patch: ret {
rank: 973
score: 96.14195760091145
patch: LOG .
rank: 973
score: 92.72319030761719
patch: do
rank: 974
score: 97.6878662109375
patch: else * /
rank: 974
score: 96.7882792154948
patch: N :
rank: 974
score: 96.4624532063802
patch: name {
rank: 974
score: 95.85252888997395
patch: case public
rank: 974
score: 95.62035115559895
patch: case LINE
rank: 974
score: 92.71726989746094
patch: throw
rank: 975
score: 96.78104654947917
patch: next :
rank: 975
score: 96.65001678466797
patch: case $NUMBER$ ||
rank: 975
score: 96.50691731770833
patch: null ;
rank: 975
score: 96.13975016276042
patch: Logger .
rank: 975
score: 95.57684326171875
patch: } ;
rank: 975
score: 92.70637512207031
patch: Asserts
rank: 976
score: 97.620849609375
patch: { if {
rank: 976
score: 96.72111002604167
patch: token :
rank: 976
score: 96.64788055419922
patch: case cos :
rank: 976
score: 96.50677490234375
patch: case 0
rank: 976
score: 96.42724609375
patch: ret ;
rank: 976
score: 95.57635498046875
patch: case static
rank: 976
score: 92.57705688476562
patch: return
rank: 977
score: 95.78188069661458
patch: case >
rank: 977
score: 95.5499267578125
patch: case FORMAT
rank: 977
score: 92.52951049804688
patch: @
rank: 978
score: 97.56059265136719
patch: ++ $NUMBER$ :
rank: 978
score: 96.7049560546875
patch: max :
rank: 978
score: 96.6373519897461
patch: case COMMON :
rank: 978
score: 95.54714965820312
patch: case START
rank: 978
score: 92.39585876464844
patch: path
rank: 979
score: 97.55772399902344
patch: else { }
rank: 979
score: 96.70133463541667
patch: start :
rank: 979
score: 96.50150299072266
patch: case translate :
rank: 979
score: 96.40004475911458
patch: $STRING$ )
rank: 979
score: 95.7765401204427
patch: case /
rank: 979
score: 95.528076171875
patch: length 1
rank: 979
score: 92.31104278564453
patch: s
rank: 980
score: 96.63997395833333
patch: else :
rank: 980
score: 96.49371337890625
patch: extends $NUMBER$ :
rank: 980
score: 92.20531463623047
patch: b
rank: 981
score: 97.52354431152344
patch: if { {
rank: 981
score: 96.5604248046875
patch: j :
rank: 981
score: 96.26747639973958
patch: case {
rank: 981
score: 92.09564208984375
patch: buf
rank: 982
score: 97.51115417480469
patch: case EMPTY {
rank: 982
score: 96.266845703125
patch: case null
rank: 982
score: 96.25717163085938
patch: case (
rank: 982
score: 95.8510233561198
patch: : :
rank: 982
score: 95.7391866048177
patch: case IS
rank: 983
score: 97.50206756591797
patch: case name ;
rank: 983
score: 96.53113810221355
patch: first :
rank: 983
score: 95.73732503255208
patch: case FILE
rank: 983
score: 91.97708892822266
patch: LOG
rank: 984
score: 97.45587921142578
patch: case name {
rank: 984
score: 96.52688598632812
patch: n :
rank: 984
score: 96.2630615234375
patch: static ;
rank: 984
score: 95.5882568359375
patch: { :
rank: 984
score: 95.4639892578125
patch: length 0
rank: 984
score: 91.93658447265625
patch: finally
rank: 985
score: 97.44027709960938
patch: * { /
rank: 985
score: 96.61091613769531
patch: default $NUMBER$ {
rank: 985
score: 96.2548116048177
patch: 0 }
rank: 985
score: 96.21413167317708
patch: n {
rank: 985
score: 95.5242919921875
patch: > :
rank: 985
score: 95.4595235188802
patch: ( (
rank: 985
score: 91.92596435546875
patch: Fre@@
rank: 986
score: 96.16798909505208
patch: str {
rank: 986
score: 95.77072143554688
patch: / ;
rank: 986
score: 95.44955444335938
patch: case USER
rank: 986
score: 91.90751647949219
patch: iterator
rank: 987
score: 97.19256591796875
patch: { else
rank: 987
score: 96.60563151041667
patch: default {
rank: 987
score: 96.20902506510417
patch: 0 {
rank: 987
score: 95.59926350911458
patch: default ;
rank: 987
score: 91.89248657226562
patch: x
rank: 988
score: 96.42578125
patch: expected :
rank: 988
score: 96.16062418619792
patch: b {
rank: 988
score: 96.13765462239583
patch: c {
rank: 988
score: 95.7578125
patch: static )
rank: 988
score: 95.58414713541667
patch: case TYPE
rank: 988
score: 91.88026428222656
patch: index
rank: 989
score: 96.58473205566406
patch: case serialize :
rank: 989
score: 96.418212890625
patch: text :
rank: 989
score: 96.07781982421875
patch: 0 )
rank: 989
score: 95.22011311848958
patch: <= :
rank: 989
score: 91.86544036865234
patch: ret
rank: 990
score: 96.70780436197917
patch: break :
rank: 990
score: 96.39227294921875
patch: value :
rank: 990
score: 95.72015380859375
patch: char CaMeL
rank: 990
score: 91.83270263671875
patch: parser
rank: 991
score: 96.57386016845703
patch: case directory :
rank: 991
score: 96.31528727213542
patch: SEPARATOR :
rank: 991
score: 95.69850667317708
patch: length ;
rank: 991
score: 91.80905151367188
patch: log
rank: 992
score: 96.566162109375
patch: case volatile :
rank: 992
score: 96.42953491210938
patch: while {
rank: 992
score: 96.12781778971355
patch: return }
rank: 992
score: 95.96626790364583
patch: case INTEGER
rank: 992
score: 95.155517578125
patch: 32 :
rank: 992
score: 94.61901092529297
patch: static
rank: 992
score: 91.80607604980469
patch: text
rank: 993
score: 96.28665161132812
patch: id :
rank: 993
score: 95.94879150390625
patch: Asserts .
rank: 993
score: 95.62979125976562
patch: Debug .
rank: 993
score: 94.04798889160156
patch: false
rank: 993
score: 93.4372787475586
patch: interned
rank: 993
score: 91.80442810058594
patch: out
rank: 994
score: 96.34864298502605
patch: i }
rank: 994
score: 96.26192220052083
patch: tmp :
rank: 994
score: 96.04833984375
patch: start {
rank: 994
score: 94.97616577148438
patch: 16 :
rank: 994
score: 93.32357025146484
patch: lower
rank: 994
score: 91.74717712402344
patch: options
rank: 995
score: 96.29551188151042
patch: { }
rank: 995
score: 94.97027587890625
patch: > $NUMBER$
rank: 995
score: 94.96086120605469
patch: ?
rank: 995
score: 93.04141235351562
patch: ch
rank: 995
score: 91.71266174316406
patch: start
rank: 996
score: 95.9606424967448
patch: f ;
rank: 996
score: 94.94938151041667
patch: 64 :
rank: 996
score: 93.96439361572266
patch: ;
rank: 996
score: 92.93402099609375
patch: matched
rank: 996
score: 91.68608093261719
patch: buffer
rank: 997
score: 96.26138305664062
patch: * :
rank: 997
score: 95.9586181640625
patch: int }
rank: 997
score: 94.88710530598958
patch: 8 :
rank: 997
score: 93.01749420166016
patch: default
rank: 997
score: 92.8492660522461
patch: length
rank: 997
score: 91.65414428710938
patch: c
rank: 998
score: 94.54539489746094
patch: 0
rank: 998
score: 91.65040588378906
patch: string
rank: 999
score: 94.40158081054688
patch: $STRING$
rank: 999
score: 92.80033874511719
patch: TAB
rank: 999
score: 91.63299560546875
patch: val
rank: 1000
score: 92.73699951171875
patch: fast
rank: 1000
score: 91.52799987792969
patch: Trace
