rank: 1
score: 99.87698567708334
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 1
score: 99.787353515625
patch: final int n 1 = n 1 * n $NUMBER$ ;
rank: 1
score: 99.72728207236842
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 2
score: 99.82699381510416
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 2
score: 99.76584879557292
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 2
score: 99.73746744791667
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 2
score: 99.71636555989583
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 2
score: 99.70173725328948
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 3
score: 99.77117513020833
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 3
score: 99.74310302734375
patch: final int n 1 n $NUMBER$ prod = n 1 ;
rank: 3
score: 99.72583725873162
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 3
score: 99.67515462239584
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 3
score: 99.64966498480902
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 3
score: 99.63322368421052
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 4
score: 99.617919921875
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 ;
rank: 4
score: 99.60150146484375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 5
score: 99.75096978081598
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ;
rank: 5
score: 99.68624674479166
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 5
score: 99.61333465576172
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 ;
rank: 5
score: 99.61023763020833
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 6
score: 99.74629720052083
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 6
score: 99.69113338694854
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 6
score: 99.61235495174633
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ ;
rank: 6
score: 99.5912353515625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ + n $NUMBER$ ;
rank: 6
score: 99.5614013671875
patch: final int n 1 = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 7
score: 99.60867470189145
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 7
score: 99.58856560202206
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . length ;
rank: 7
score: 99.55369466145834
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 ;
rank: 7
score: 99.5531982421875
patch: final int n 1 = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 8
score: 99.69084337022569
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ;
rank: 8
score: 99.63606092664931
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 ;
rank: 8
score: 99.61581420898438
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 1 * n $NUMBER$ ;
rank: 8
score: 99.58666314019098
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 8
score: 99.58645290798611
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 8
score: 99.58504231770833
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 . 0 ;
rank: 8
score: 99.55173746744792
patch: final int n 1 = n 1 + n $NUMBER$ ;
rank: 9
score: 99.68853759765625
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 9
score: 99.63444010416667
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 9
score: 99.58555603027344
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 9
score: 99.57980685763889
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 9
score: 99.5748046875
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n 1 . 0 ;
rank: 9
score: 99.48682358685662
patch: final int n 1 = n 1 ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 10
score: 99.66652544806985
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 10
score: 99.58282877604167
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ * n $NUMBER$ ;
rank: 10
score: 99.58113178453948
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ . 0 ;
rank: 10
score: 99.57184709821429
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ * $NUMBER$ . 0 ;
rank: 10
score: 99.54491170247395
patch: final int n 1 = n 1 * n 1 ;
rank: 11
score: 99.66765679253473
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n 1 ;
rank: 11
score: 99.56731214021382
patch: final long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 11
score: 99.54315948486328
patch: final int n 1 = n 1 * n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 11
score: 99.4705098470052
patch: final double n 1 = n 1 * n $NUMBER$ ;
rank: 12
score: 99.65204216452206
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ ;
rank: 12
score: 99.64448765345982
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ;
rank: 12
score: 99.602978515625
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ ;
rank: 12
score: 99.56706891741071
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 . 0 ;
rank: 12
score: 99.56133270263672
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 12
score: 99.55607774522569
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . n $NUMBER$ ;
rank: 12
score: 99.55398763020834
patch: final int n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ ;
rank: 12
score: 99.53470865885417
patch: final int n 1 = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 12
score: 99.46329171316964
patch: final int [ ] n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 13
score: 99.64044189453125
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 13
score: 99.62978228400735
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 . 0 ;
rank: 13
score: 99.55735868566177
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 13
score: 99.55465565557066
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 * $NUMBER$ . 0 ;
rank: 13
score: 99.550732421875
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 ;
rank: 13
score: 99.54621039496527
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . max $NUMBER$ }
rank: 13
score: 99.46288344439338
patch: final int n 1 = n $NUMBER$ ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 14
score: 99.6330207375919
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / /
rank: 14
score: 99.55646110983456
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 14
score: 99.5472412109375
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 14
score: 99.46037023207721
patch: final int n 1 = n 1 ; final int n 1 = n $NUMBER$ ;
rank: 15
score: 99.62363009982639
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / * /
rank: 15
score: 99.54962517233456
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * 1 ;
rank: 15
score: 99.54503676470588
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . length ;
rank: 15
score: 99.51819610595703
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 15
score: 99.45998965992646
patch: final int n 1 = n 1 ; final int n $NUMBER$ = n 1 ;
rank: 16
score: 99.62645128038194
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : n $NUMBER$ ;
rank: 16
score: 99.61161534926471
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ ;
rank: 16
score: 99.5492431640625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ - n $NUMBER$ ;
rank: 16
score: 99.54193725585938
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ $NUMBER$ . 0 ;
rank: 16
score: 99.53793514476104
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - $NUMBER$ ;
rank: 16
score: 99.43852682674633
patch: final int n 1 = n $NUMBER$ ; final int n 1 = n $NUMBER$ ;
rank: 17
score: 99.62206353081598
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 ;
rank: 17
score: 99.54802703857422
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 17
score: 99.53986467633929
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ * $NUMBER$ . 0 ;
rank: 17
score: 99.5322509765625
patch: final int n 1 = n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 17
score: 99.4357048483456
patch: final int n 1 = n $NUMBER$ ; final int n $NUMBER$ = n 1 ;
rank: 18
score: 99.61773274739583
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 18
score: 99.57107747395834
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 18
score: 99.54421817555146
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 1 ;
rank: 18
score: 99.53866577148438
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n 1 . 0 ;
rank: 18
score: 99.52669031479779
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . max $NUMBER$
rank: 18
score: 99.43301212086396
patch: final int n 1 = n 1 ; final int n 1 = n 1 ;
rank: 19
score: 99.61100260416667
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % n $NUMBER$ ;
rank: 19
score: 99.59951602711396
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 19
score: 99.53811806126645
patch: final long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 19
score: 99.53274972098214
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 19
score: 99.52325439453125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ ;
rank: 19
score: 99.50182088216145
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 19
score: 99.43167114257812
patch: final int n 1 n $NUMBER$ prod = - $NUMBER$ ;
rank: 20
score: 99.61039225260417
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * n 1 ;
rank: 20
score: 99.53546463815789
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / 1 . 0 ;
rank: 20
score: 99.52344563802083
patch: final int n 1 n $NUMBER$ prod += n 1 * n $NUMBER$ ;
rank: 20
score: 99.52265082465277
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . n $NUMBER$ ;
rank: 20
score: 99.51793148643092
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ . 0 ;
rank: 20
score: 99.49981282552083
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 20
score: 99.42633056640625
patch: final int n 1 = n $NUMBER$ * n 1 ;
rank: 21
score: 99.60969373914931
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 / n $NUMBER$ ;
rank: 21
score: 99.58666314019098
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . n 1 ;
rank: 21
score: 99.55931260850694
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 21
score: 99.53298021399456
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 : $NUMBER$ . 0 ;
rank: 21
score: 99.52003062855114
patch: int n 1 = n 1 * n $NUMBER$ ;
rank: 21
score: 99.42432512555804
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 22
score: 99.61248779296875
patch: final final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 22
score: 99.60922580295139
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : n 1 ;
rank: 22
score: 99.5314053622159
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 22
score: 99.51635024126838
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 22
score: 99.51447211371527
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . max $NUMBER$ }
rank: 22
score: 99.41869245256696
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n 1 ;
rank: 23
score: 99.60014073988971
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ ;
rank: 23
score: 99.51340203536184
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . max $NUMBER$ } ;
rank: 23
score: 99.51104377297794
patch: final int n 1 n $NUMBER$ prod = 0 * n $NUMBER$ * n $NUMBER$ ;
rank: 23
score: 99.4144287109375
patch: final int n 1 = n $NUMBER$ ; final int n 1 = n 1 ;
rank: 24
score: 99.5955810546875
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 24
score: 99.54536946614583
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 24
score: 99.52611586626838
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ ;
rank: 24
score: 99.50627585018383
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * 0 ;
rank: 24
score: 99.50554741753473
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 - n $NUMBER$ ;
rank: 24
score: 99.41384887695312
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 25
score: 99.59633501838235
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 25
score: 99.58837890625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 0 ;
rank: 25
score: 99.56511094835069
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ . 0 ;
rank: 25
score: 99.54423014322917
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 25
score: 99.41346086774554
patch: final int [ ] n 1 = n 1 * n $NUMBER$ ;
rank: 26
score: 99.59619140625
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 26
score: 99.58727309283088
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 ; / /
rank: 26
score: 99.52392578125
patch: final int n 1 = n 1 * ( n 1 + n $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 26
score: 99.50592041015625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . max $NUMBER$
rank: 26
score: 99.50070529513889
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n 1 ;
rank: 26
score: 99.46465594951923
patch: final int n 1 = n 1 1 * n $NUMBER$ ;
rank: 27
score: 99.56204223632812
patch: final double n 1 n $NUMBER$ prod = n 1 ;
rank: 27
score: 99.53521050347223
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ * n $NUMBER$ ;
rank: 27
score: 99.52307659646739
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 * $NUMBER$ . 0 ;
rank: 27
score: 99.50361633300781
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ ;
rank: 27
score: 99.5006965188419
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / *
rank: 27
score: 99.49004364013672
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ] * n $NUMBER$ ;
rank: 27
score: 99.46358489990234
patch: final int n 1 = n 1 * n $NUMBER$ + n $NUMBER$ $NUMBER$ ;
rank: 27
score: 99.40986851283482
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ ;
rank: 28
score: 99.59331597222223
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / n 1 ;
rank: 28
score: 99.53293863932292
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 + n $NUMBER$ ;
rank: 28
score: 99.52252518503289
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ % $NUMBER$ ;
rank: 28
score: 99.503515625
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 28
score: 99.482421875
patch: int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 28
score: 99.46114349365234
patch: final int n 1 $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 29
score: 99.58346896701389
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 ; / * /
rank: 29
score: 99.56010167738971
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 29
score: 99.53169080946181
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 29
score: 99.52166748046875
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ . 0 ;
rank: 29
score: 99.46070274939903
patch: final int n 1 = n 1 + n $NUMBER$ $NUMBER$ ;
rank: 29
score: 99.40029907226562
patch: final int n 1 = n 1 ; int n $NUMBER$ = n $NUMBER$ ;
rank: 30
score: 99.587646484375
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ ;
rank: 30
score: 99.52021484375
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ $NUMBER$ . 0 ;
rank: 30
score: 99.50025132123162
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . max ;
rank: 30
score: 99.47837136008523
patch: int n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 30
score: 99.46057942708333
patch: final int n 1 n $NUMBER$ prod = n 1 - n $NUMBER$ ;
rank: 31
score: 99.51976477581522
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 / $NUMBER$ . 0 ;
rank: 31
score: 99.50013020833333
patch: final String n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 31
score: 99.47481863839286
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 32
score: 99.58542767693015
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n 1 ;
rank: 32
score: 99.51846168154762
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 . 0 ;
rank: 32
score: 99.49870219983552
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . max $NUMBER$ } }
rank: 32
score: 99.492431640625
patch: try { final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 32
score: 99.47121294806985
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ * n $NUMBER$ ;
rank: 32
score: 99.4524395282452
patch: final int n 1 = n 1 $NUMBER$ * n $NUMBER$ ;
rank: 32
score: 99.39413686899039
patch: final int n 1 1 = n 1 * n $NUMBER$ ;
rank: 33
score: 99.51568048650569
patch: final int calculate CaMeL Asymptotic CaMeL P CaMeL Value ( n 1 , n 1 ) ;
rank: 33
score: 99.49866440716912
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . $NUMBER$ ;
rank: 33
score: 99.49142295435855
patch: return n 1 * ( n 1 + n $NUMBER$ + 1 ) / $NUMBER$ . 0 ;
rank: 33
score: 99.47086334228516
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ; final
rank: 33
score: 99.4504623413086
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ) ;
rank: 34
score: 99.58388264973958
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 / n $NUMBER$ ;
rank: 34
score: 99.52242024739583
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ + n $NUMBER$ ;
rank: 34
score: 99.5155029296875
patch: final int n 1 = n 1 * ( n 1 + n $NUMBER$ ) / $NUMBER$ ;
rank: 34
score: 99.49823357077206
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 34
score: 99.49124948601974
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / $NUMBER$ . 0 ;
rank: 34
score: 99.4447021484375
patch: final int n 1 $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 34
score: 99.381591796875
patch: final String n 1 = n 1 * n $NUMBER$ ;
rank: 35
score: 99.58257184709821
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$
rank: 35
score: 99.57382638113839
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 ;
rank: 35
score: 99.5205939797794
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 35
score: 99.51455078125
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * n 1 . 0 ;
rank: 35
score: 99.49078369140625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 35
score: 99.46879577636719
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ 1 ;
rank: 35
score: 99.444384765625
patch: final int n 1 = n 1 * n 1 + n $NUMBER$ ;
rank: 35
score: 99.38047880284927
patch: final int n 1 = n 1 ; final double n $NUMBER$ = n $NUMBER$ ;
rank: 36
score: 99.57341172960069
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . n $NUMBER$ ;
rank: 36
score: 99.51376778738839
patch: final int n 1 n $NUMBER$ prod = n 1 . 0 ;
rank: 36
score: 99.46798940805289
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ ;
rank: 36
score: 99.4433364868164
patch: final int n 1 = n 1 * n $NUMBER$ $NUMBER$ * n 1 ;
rank: 36
score: 99.37645766314338
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + 0 ;
rank: 37
score: 99.51647271050348
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 37
score: 99.49164690290179
patch: final int [ ] n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 37
score: 99.48565995065789
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 1 . 0 ;
rank: 37
score: 99.46453857421875
patch: final int n 1 equals = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 37
score: 99.44105529785156
patch: final int n 1 = n 1 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 37
score: 99.37625122070312
patch: final int n 1 n $NUMBER$ prod = - 1 ;
rank: 38
score: 99.50578169389205
patch: final double calculate CaMeL Asymptotic CaMeL P CaMeL Value ( n 1 , n 1 ) ;
rank: 38
score: 99.48296712239583
patch: final int n 1 n $NUMBER$ prod = n 1 / n 1 ;
rank: 38
score: 99.46424057904412
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 1 * n $NUMBER$ ;
rank: 38
score: 99.43924967447917
patch: final int n 1 = n 1 / n $NUMBER$ ;
rank: 38
score: 99.37541647518383
patch: final double n 1 = n 1 ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 39
score: 99.50449440696023
patch: final int calculate CaMeL Asymptotic CaMeL P CaMeL Value ( n 1 , n $NUMBER$ ) ;
rank: 39
score: 99.48874080882354
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . max $NUMBER$
rank: 39
score: 99.46212332589286
patch: int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 39
score: 99.43673706054688
patch: final int n 1 = n 1 $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 39
score: 99.3730697631836
patch: final final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 40
score: 99.5641730813419
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / $NUMBER$ ;
rank: 40
score: 99.51318359375
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 40
score: 99.50398763020833
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ n $NUMBER$ . 0 ;
rank: 40
score: 99.48470908717105
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n $NUMBER$ * n $NUMBER$ ;
rank: 40
score: 99.48169663373162
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 40
score: 99.46207427978516
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; final
rank: 40
score: 99.43589680989584
patch: final int n 1 , n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 40
score: 99.37297058105469
patch: final int n 1 = n $NUMBER$ ; int n $NUMBER$ = n $NUMBER$ ;
rank: 41
score: 99.50296153192934
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 : $NUMBER$ . 0 ;
rank: 41
score: 99.48382975260417
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ % n $NUMBER$ ;
rank: 41
score: 99.47733347039474
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * $NUMBER$ . 0 ;
rank: 41
score: 99.46170043945312
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 1 * n 1 ;
rank: 42
score: 99.56497531467014
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 : n $NUMBER$ ;
rank: 42
score: 99.50176391601562
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n $NUMBER$ . 0 ;
rank: 42
score: 99.481201171875
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ + n $NUMBER$ * n $NUMBER$ ;
rank: 42
score: 99.47616756663604
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 42
score: 99.46155503216912
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 0 * n $NUMBER$ ;
rank: 42
score: 99.37079216452206
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n 1 * n $NUMBER$ ;
rank: 43
score: 99.56340789794922
patch: final final int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 43
score: 99.53717803955078
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 ;
rank: 43
score: 99.5120490579044
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 43
score: 99.49748883928571
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ % $NUMBER$ . 0 ;
rank: 43
score: 99.48088635896382
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 0 . $NUMBER$ ;
rank: 43
score: 99.4759292602539
patch: final int n 1 = n 1 * n $NUMBER$ * $NUMBER$ . 0 ;
rank: 43
score: 99.37067522321429
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 0 ;
rank: 44
score: 99.53543429904514
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . n 1 ;
rank: 44
score: 99.50753445095486
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 44
score: 99.49740939670139
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n 1 ;
rank: 44
score: 99.47304958767361
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ = n $NUMBER$ ;
rank: 44
score: 99.45977783203125
patch: final int n 1 n $NUMBER$ prod = = n $NUMBER$ * n $NUMBER$ ;
rank: 44
score: 99.42816569010417
patch: final int n 1 = n 1 + n $NUMBER$ * n $NUMBER$ ;
rank: 45
score: 99.55602264404297
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * $NUMBER$ ;
rank: 45
score: 99.53373887803819
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 * n $NUMBER$ ;
rank: 45
score: 99.49729225852273
patch: final double calculate CaMeL Asymptotic CaMeL P CaMeL Value ( n 1 , n $NUMBER$ ) ;
rank: 45
score: 99.4763247841283
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * 0 . $NUMBER$ ;
rank: 45
score: 99.47031537224265
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - 1 ;
rank: 45
score: 99.45839556525735
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * max ;
rank: 45
score: 99.4274673461914
patch: final int n 1 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 46
score: 99.56021554129464
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 46
score: 99.5555908203125
patch: final long n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 46
score: 99.49552055027173
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 / $NUMBER$ . 0 ;
rank: 46
score: 99.47604709201389
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ - n $NUMBER$ ;
rank: 46
score: 99.4581768329327
patch: final int n 1 = n 1 * n $NUMBER$ ; final
rank: 46
score: 99.427197265625
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 46
score: 99.36288452148438
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * - n $NUMBER$ ;
rank: 47
score: 99.55762396918402
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 47
score: 99.55320638020834
patch: final Object n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 47
score: 99.5048469094669
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + $NUMBER$ ;
rank: 47
score: 99.49485377261513
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ * $NUMBER$ ;
rank: 47
score: 99.4754638671875
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length ;
rank: 47
score: 99.46992710658482
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n $NUMBER$ ;
rank: 47
score: 99.42347005208333
patch: final long n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 48
score: 99.52726476332721
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 48
score: 99.50339642693015
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ + $NUMBER$ ;
rank: 48
score: 99.49366396949405
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 * $NUMBER$ . 0 ;
rank: 48
score: 99.45770622702206
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 * n $NUMBER$ ;
rank: 48
score: 99.42101033528645
patch: final int n 1 = n 1 + n 1 ;
rank: 48
score: 99.36237335205078
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ n 1 ;
rank: 49
score: 99.555419921875
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * - $NUMBER$ ;
rank: 49
score: 99.50330352783203
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; ;
rank: 49
score: 99.49161987304687
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 + n $NUMBER$ . 0 ;
rank: 49
score: 99.42094421386719
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 49
score: 99.36227596507354
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . 1 ;
rank: 50
score: 99.55415174696181
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 / n 1 ;
rank: 50
score: 99.49097357855902
patch: int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 50
score: 99.4715217141544
patch: final int [ ] n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 50
score: 99.45669555664062
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * ;
rank: 50
score: 99.419970703125
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 50
score: 99.36115579044117
patch: final int n 1 = n 1 ; final double n $NUMBER$ = n 1 ;
rank: 51
score: 99.50173770680146
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ + 1 ;
rank: 51
score: 99.49039359714673
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 + $NUMBER$ . 0 ;
rank: 51
score: 99.45627728630515
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ - $NUMBER$ ;
rank: 51
score: 99.41879272460938
patch: final int n 1 = n 1 * n 1 $NUMBER$ * n $NUMBER$ ;
rank: 52
score: 99.55202907986111
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % n $NUMBER$ ;
rank: 52
score: 99.534423828125
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + 1 ;
rank: 52
score: 99.48847045898438
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n 1 . 0 ;
rank: 52
score: 99.4713199013158
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . max $NUMBER$ } ;
rank: 52
score: 99.45986938476562
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ; /
rank: 52
score: 99.45587921142578
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ 1 ;
rank: 52
score: 99.41634114583333
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 52
score: 99.35896809895833
patch: final Integer n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 53
score: 99.5516716452206
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 ; / *
rank: 53
score: 99.52933995863971
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * n $NUMBER$ ;
rank: 53
score: 99.5224380493164
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 53
score: 99.48804873511905
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 . 0 ;
rank: 53
score: 99.47048611111111
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 53
score: 99.45923665364583
patch: final double n 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 53
score: 99.45410919189453
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 0 * n $NUMBER$ ;
rank: 53
score: 99.41622161865234
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . ;
rank: 53
score: 99.35712028952206
patch: final int n 1 = n $NUMBER$ ; final double n $NUMBER$ = n $NUMBER$ ;
rank: 54
score: 99.52110460069444
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ . 0 ;
rank: 54
score: 99.48655790441177
patch: final int n 1 n $NUMBER$ prod = n 1 + n 1 . 0 ;
rank: 54
score: 99.4525375366211
patch: final int n 1 equals = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 54
score: 99.41606903076172
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 55
score: 99.54853651258681
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : n $NUMBER$ ;
rank: 55
score: 99.48645550271739
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 * $NUMBER$ . 0 ;
rank: 55
score: 99.46973941200658
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * ( n $NUMBER$ * n $NUMBER$ ;
rank: 55
score: 99.35638786764706
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 1 ;
rank: 56
score: 99.54702419704861
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / n 1 ;
rank: 56
score: 99.51913631663604
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * 0 ;
rank: 56
score: 99.49312097886029
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ + n $NUMBER$ ;
rank: 56
score: 99.48028273809524
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 * $NUMBER$ ;
rank: 56
score: 99.35560099283855
patch: final float n 1 = n 1 * n $NUMBER$ ;
rank: 57
score: 99.47967208059211
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ . 0 ;
rank: 57
score: 99.4556949013158
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * 1 . 0 ;
rank: 57
score: 99.41285807291666
patch: final int n 1 , n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 58
score: 99.54328070746527
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 % n $NUMBER$ ;
rank: 58
score: 99.5136359719669
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 . 0 ;
rank: 58
score: 99.48961724175348
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 58
score: 99.47826086956522
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 : $NUMBER$ . 0 ;
rank: 58
score: 99.45484683388158
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - $NUMBER$ . 0 ;
rank: 58
score: 99.44623565673828
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * ;
rank: 59
score: 99.54206194196429
patch: double n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 59
score: 99.5273078469669
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % $NUMBER$ ;
rank: 59
score: 99.47757761101974
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * 1 . 0 ;
rank: 59
score: 99.44568589154412
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 59
score: 99.35331456801471
patch: final int n 1 = n 1 ; final double n 1 = n $NUMBER$ ;
rank: 60
score: 99.50504302978516
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 60
score: 99.48735894097223
patch: final int n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ * n $NUMBER$ ;
rank: 60
score: 99.47643461681548
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . $NUMBER$ . 0 ;
rank: 60
score: 99.46717664930556
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ << n $NUMBER$ ;
rank: 60
score: 99.4533447265625
patch: final int n 1 = n 1 * n 1 * n 1 ;
rank: 60
score: 99.412109375
patch: final int n 1 n $NUMBER$ prod = n 1 1 * n $NUMBER$ ;
rank: 61
score: 99.54076430376838
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * 1 ;
rank: 61
score: 99.50359429253473
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod ;
rank: 61
score: 99.47624860491071
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 1 . 0 ;
rank: 61
score: 99.44350760323661
patch: final int n 1 n $NUMBER$ prod = 0 * n $NUMBER$ ;
rank: 61
score: 99.41145324707031
patch: final int n 1 = n 1 * n $NUMBER$ $NUMBER$ / n $NUMBER$ ;
rank: 62
score: 99.53978814019098
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 : n 1 ;
rank: 62
score: 99.47428813733552
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / 0 . 0 ;
rank: 62
score: 99.46413167317708
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 0 $NUMBER$ ;
rank: 62
score: 99.40926106770833
patch: final int n 1 = n 1 * n $NUMBER$ + n 1 ;
rank: 63
score: 99.52018229166667
patch: final int n 1 n $NUMBER$ prod = n 1 ; / * /
rank: 63
score: 99.47399184283088
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ ;
rank: 63
score: 99.46400960286458
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ { n $NUMBER$ ;
rank: 63
score: 99.44941262637867
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n 1 * n $NUMBER$ ;
rank: 63
score: 99.44301194411058
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; final
rank: 63
score: 99.40859750600961
patch: final int n 1 = n 1 * n 1 $NUMBER$ ;
rank: 63
score: 99.34632065716912
patch: final double n 1 = n 1 ; final int n $NUMBER$ = n 1 ;
rank: 64
score: 99.53803168402777
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 + n $NUMBER$ ;
rank: 64
score: 99.46389590992646
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . $NUMBER$ ;
rank: 64
score: 99.44808620876736
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 64
score: 99.44269268329327
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ; final
rank: 64
score: 99.4078140258789
patch: final double n 1 = n 1 * n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 64
score: 99.34581756591797
patch: final int n 1 n $NUMBER$ prod = n 1 * - n $NUMBER$ ;
rank: 65
score: 99.53597683376736
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % n 1 ;
rank: 65
score: 99.47932942708333
patch: final float n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 65
score: 99.473828125
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ 1 . 0 ;
rank: 65
score: 99.46329074435764
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ | n $NUMBER$ ;
rank: 65
score: 99.44211713005515
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $STRING$ ;
rank: 65
score: 99.3455810546875
patch: final double n 1 = n $NUMBER$ ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 66
score: 99.535400390625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ .
rank: 66
score: 99.4940185546875
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ;
rank: 66
score: 99.47882080078125
patch: final int n 1 n $NUMBER$ prod = n 1 * 1 ;
rank: 66
score: 99.4727783203125
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n 1 . 0 ;
rank: 66
score: 99.46281881893383
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ + 0 ;
rank: 66
score: 99.43917846679688
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ - n $NUMBER$ ;
rank: 66
score: 99.4051025390625
patch: final int n 1 = n 1 * n $NUMBER$ / n 1 ;
rank: 66
score: 99.3454818725586
patch: final int n 1 = n 1 ; int n $NUMBER$ = n 1 ;
rank: 67
score: 99.53513881138393
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$
rank: 67
score: 99.51546902126736
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . / $NUMBER$ ;
rank: 67
score: 99.472412109375
patch: return calculate CaMeL Asymptotic CaMeL P CaMeL Value ( n 1 , n 1 , n $NUMBER$ ) ;
rank: 67
score: 99.46257188585069
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . n $NUMBER$ * n $NUMBER$ ;
rank: 67
score: 99.43798065185547
patch: final int n 1 n $NUMBER$ prod = = n 1 * n $NUMBER$ ;
rank: 68
score: 99.49374728732639
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 68
score: 99.477294921875
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 68
score: 99.47231910342262
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ * $NUMBER$ . 0 ;
rank: 68
score: 99.46225155101104
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ + $NUMBER$ ;
rank: 68
score: 99.4427490234375
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 0 . 0 ;
rank: 68
score: 99.43763643152573
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * max ;
rank: 68
score: 99.4031005859375
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 68
score: 99.343115234375
patch: final int n 1 n $NUMBER$ prod = n 1 + n 1 ;
rank: 69
score: 99.49348280164931
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . n 1 ;
rank: 69
score: 99.47121175130208
patch: return calculate CaMeL Asymptotic CaMeL P CaMeL Value ( n 1 , n 1 , n 1 ) ;
rank: 69
score: 99.46140543619792
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ | n $NUMBER$ ;
rank: 69
score: 99.43551635742188
patch: final long n 1 = n 1 * n $NUMBER$ ;
rank: 69
score: 99.40276336669922
patch: final int n 1 n $NUMBER$ prod = n 1 $NUMBER$ * n $NUMBER$ ;
rank: 69
score: 99.34185431985294
patch: final int n 1 = n 1 ; final String n $NUMBER$ = n $NUMBER$ ;
rank: 70
score: 99.53378634982639
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : n 1 ;
rank: 70
score: 99.49252115885416
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 ;
rank: 70
score: 99.47630399816177
patch: final int n 1 = Math . max ( n 1 , n $NUMBER$ ) ;
rank: 70
score: 99.4710003396739
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 : 1 . 0 ;
rank: 70
score: 99.46104431152344
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 . $NUMBER$ ;
rank: 70
score: 99.44120279947917
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 * n $NUMBER$ ;
rank: 70
score: 99.4323371438419
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ - 1 ;
rank: 70
score: 99.40211995442708
patch: final int n 1 = n 1 - n $NUMBER$ ;
rank: 70
score: 99.3415298461914
patch: final int n 1 = n 1 ; int n 1 = n $NUMBER$ ;
rank: 71
score: 99.53349866365132
patch: final final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 71
score: 99.47612169053819
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + n 1 ;
rank: 71
score: 99.4702392578125
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 0 ;
rank: 71
score: 99.45819091796875
patch: final Object n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 71
score: 99.4296515969669
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ 1 * n $NUMBER$ ;
rank: 71
score: 99.34145220588235
patch: final double n 1 = n 1 ; final int n 1 = n $NUMBER$ ;
rank: 72
score: 99.53191817434211
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ . 0 ;
rank: 72
score: 99.47517225477431
patch: final int n 1 n $NUMBER$ prod = n 1 - n $NUMBER$ * n $NUMBER$ ;
rank: 72
score: 99.46970533288044
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 + $NUMBER$ . 0 ;
rank: 72
score: 99.45773654513889
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * 0 $NUMBER$ ;
rank: 72
score: 99.42899816176471
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 72
score: 99.40152180989584
patch: final int n 1 , n $NUMBER$ = n 1 + n $NUMBER$ ;
rank: 72
score: 99.33994704026442
patch: final int n 1 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 73
score: 99.50980870863971
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . $NUMBER$ ;
rank: 73
score: 99.47451346261161
patch: final int n 1 = n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 73
score: 99.46892233455883
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ $NUMBER$ . 0 ;
rank: 73
score: 99.45533582899306
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . max $NUMBER$ ;
rank: 73
score: 99.42806243896484
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ) * n $NUMBER$ ;
rank: 73
score: 99.40060860770089
patch: final int n $NUMBER$ n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 73
score: 99.33937072753906
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 0 . 1 ;
rank: 74
score: 99.50958251953125
patch: final int n 1 n $NUMBER$ prod = n 1 ; / /
rank: 74
score: 99.4677798622533
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 . 0 ;
rank: 74
score: 99.45399305555556
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ << n $NUMBER$ ;
rank: 74
score: 99.43521321614584
patch: final int n 1 = n 1 * n 1 - n $NUMBER$ ;
rank: 74
score: 99.42643468520221
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * $STRING$ ;
rank: 74
score: 99.39901733398438
patch: final int n 1 n $NUMBER$ prod = n 1 * / n $NUMBER$ ;
rank: 75
score: 99.50901285807292
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * $NUMBER$ . 0 ;
rank: 75
score: 99.46771918402777
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * n 1 ;
rank: 75
score: 99.43318939208984
patch: final int n 1 n $NUMBER$ prod ++ = n 1 * n $NUMBER$ ;
rank: 75
score: 99.42603257123162
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ * n $NUMBER$ ;
rank: 75
score: 99.3982421875
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ $NUMBER$ ;
rank: 76
score: 99.52857123480902
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . n $NUMBER$ ;
rank: 76
score: 99.50888400607639
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / / /
rank: 76
score: 99.47185920266544
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ / $NUMBER$ ;
rank: 76
score: 99.46759905133929
patch: final int n 1 = n 1 / ( n 1 + n $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 76
score: 99.45380316840277
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . max $NUMBER$ ;
rank: 76
score: 99.4252570657169
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 1 * n $NUMBER$ $NUMBER$ ;
rank: 76
score: 99.39564615885416
patch: final float n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 76
score: 99.33615291819854
patch: final int n 1 = n $NUMBER$ ; final double n $NUMBER$ = n 1 ;
rank: 77
score: 99.5281982421875
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ . 0 ;
rank: 77
score: 99.5088249655331
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 + 1 ;
rank: 77
score: 99.469482421875
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 77
score: 99.46759354440789
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ % $NUMBER$ ;
rank: 77
score: 99.43180338541667
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ = n 1 ;
rank: 77
score: 99.42469024658203
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ * n 1 ;
rank: 77
score: 99.33407772288604
patch: final int n 1 = n 1 ; final double n 1 = n 1 ;
rank: 78
score: 99.50593118106617
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / 0 ;
rank: 78
score: 99.46657986111111
patch: int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 78
score: 99.33241900275735
patch: final int n 1 = n 1 ; final Integer n $NUMBER$ = n $NUMBER$ ;
rank: 79
score: 99.52632863898026
patch: final final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ;
rank: 79
score: 99.48410931755515
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . $NUMBER$ ;
rank: 79
score: 99.46773274739583
patch: final double n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ ;
rank: 79
score: 99.4655529203869
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 : $NUMBER$ ;
rank: 79
score: 99.4289306640625
patch: final int n 1 = n 1 * n $NUMBER$ - n 1 ;
rank: 79
score: 99.42464447021484
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ) ;
rank: 79
score: 99.39260629507211
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 79
score: 99.3317642211914
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 0 . $NUMBER$ ;
rank: 80
score: 99.52604166666667
patch: final long n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ;
rank: 80
score: 99.46529541015624
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 0 ;
rank: 80
score: 99.45159233940973
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * - $NUMBER$ ;
rank: 80
score: 99.33118393841912
patch: final int n 1 = n 1 ; final float n $NUMBER$ = n $NUMBER$ ;
rank: 81
score: 99.52486165364583
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 / n 1 ;
rank: 81
score: 99.50100708007812
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 . 0 ;
rank: 81
score: 99.48314711626838
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 . 0 ;
rank: 81
score: 99.46522281044408
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . $NUMBER$ ;
rank: 81
score: 99.45157877604167
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ % n $NUMBER$ ;
rank: 81
score: 99.42698267886513
patch: return n 1 * ( n 1 * n $NUMBER$ + 1 ) / $NUMBER$ . 0 ;
rank: 81
score: 99.42069738051471
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ - n $NUMBER$ ;
rank: 81
score: 99.39175180288461
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 81
score: 99.33107622931985
patch: final int n 1 = n $NUMBER$ ; final double n 1 = n $NUMBER$ ;
rank: 82
score: 99.5247443704044
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ;
rank: 82
score: 99.50052218967014
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . - 1 ;
rank: 82
score: 99.46477716619319
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 * n 1 . 0 ;
rank: 82
score: 99.46430520450367
patch: double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 82
score: 99.4512939453125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . max $NUMBER$ } }
rank: 82
score: 99.4203857421875
patch: final long n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 82
score: 99.33076746323529
patch: final int n 1 = n 1 ; final String n 1 = n $NUMBER$ ;
rank: 83
score: 99.52219935825893
patch: final int n 1 n $NUMBER$ prod = n 1 ; / *
rank: 83
score: 99.4245361328125
patch: final int n 1 = n $NUMBER$ * n 1 * n $NUMBER$ ;
rank: 83
score: 99.39025065104167
patch: final int n 1 = n 1 * n 1 / n $NUMBER$ ;
rank: 83
score: 99.32965959821429
patch: final int [ ] n $NUMBER$ = n 1 * n 1 ;
rank: 84
score: 99.46299677309783
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 / $NUMBER$ . 0 ;
rank: 84
score: 99.46095784505208
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 84
score: 99.45066731770834
patch: final int n 1 n $NUMBER$ prod = n 1 * - $NUMBER$ ;
rank: 84
score: 99.42368977864584
patch: final int n 1 n $NUMBER$ prod = n 1 - n 1 ;
rank: 84
score: 99.3900375366211
patch: final int n 1 = n 1 * n $NUMBER$ $NUMBER$ + n $NUMBER$ ;
rank: 84
score: 99.32936006433823
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n 1 * n 1 ;
rank: 85
score: 99.46254033627717
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 . 0 . 0 ;
rank: 85
score: 99.4503662109375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . n $NUMBER$ ;
rank: 85
score: 99.42254279641544
patch: final int n 1 [ ] = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 85
score: 99.32787322998047
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * - n 1 ;
rank: 86
score: 99.45015033922698
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 * n $NUMBER$ ;
rank: 86
score: 99.38944498697917
patch: final int n $NUMBER$ = n 1 + n $NUMBER$ ;
rank: 87
score: 99.49799940321181
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * . 0 ;
rank: 87
score: 99.47468397352431
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 $NUMBER$ . 0 ;
rank: 87
score: 99.4610595703125
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 . 0 ;
rank: 87
score: 99.45982776988636
patch: final int n 1 = n 1 * $NUMBER$ ;
rank: 87
score: 99.44986979166667
patch: final String n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 87
score: 99.4211654663086
patch: final int n 1 n $NUMBER$ prod = n 1 * - n 1 ;
rank: 87
score: 99.41686293658088
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ + 1 ;
rank: 87
score: 99.38856608072916
patch: final int n $NUMBER$ = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 87
score: 99.3267822265625
patch: final int n 1 [ ] = n 1 * n $NUMBER$ ;
rank: 88
score: 99.49622260199652
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / * /
rank: 88
score: 99.47370910644531
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 88
score: 99.46100531684027
patch: double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 88
score: 99.458837890625
patch: final double n 1 = n 1 * n $NUMBER$ * n 1 ;
rank: 88
score: 99.44957778033088
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 88
score: 99.42099896599265
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ - $NUMBER$ ;
rank: 88
score: 99.41685575597427
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 88
score: 99.38634490966797
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 88
score: 99.326220703125
patch: final Integer n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 89
score: 99.51910759420956
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$
rank: 89
score: 99.49587673611111
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . - $NUMBER$ ;
rank: 89
score: 99.4605712890625
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * 0 . 0 ;
rank: 89
score: 99.38467407226562
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 89
score: 99.3253173828125
patch: final int n 1 = n 1 * n $NUMBER$ ; final int n $NUMBER$ :
rank: 90
score: 99.46026056463069
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 $NUMBER$ . 0 ;
rank: 90
score: 99.41561686197916
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 90
score: 99.38412475585938
patch: final int n 1 $NUMBER$ = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 90
score: 99.32518005371094
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ n $NUMBER$ ;
rank: 91
score: 99.47198127297794
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 0 ;
rank: 91
score: 99.46004638671874
patch: final final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 91
score: 99.44765753495066
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * 0 . 0 ;
rank: 91
score: 99.41987047697368
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ / $NUMBER$ . 0 ;
rank: 91
score: 99.38385416666667
patch: final double n 1 = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 91
score: 99.32335408528645
patch: final Integer n 1 = n 1 * n $NUMBER$ ;
rank: 92
score: 99.51465561810662
patch: double n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ;
rank: 92
score: 99.47062174479167
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 * n 1 ;
rank: 92
score: 99.45783797554348
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 - $NUMBER$ . 0 ;
rank: 92
score: 99.45394558376736
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 92
score: 99.44731987847223
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ : n $NUMBER$ ;
rank: 92
score: 99.38264465332031
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ $NUMBER$ ;
rank: 92
score: 99.32288614908855
patch: final double n 1 = n 1 * n 1 ;
rank: 93
score: 99.49241009880515
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / /
rank: 93
score: 99.45769391741071
patch: final int n 1 = n $NUMBER$ * ( n 1 + n $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 93
score: 99.45331682477679
patch: double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 93
score: 99.44670667146382
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . iterator ( ) ;
rank: 93
score: 99.41303253173828
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 1 * $NUMBER$ ;
rank: 93
score: 99.3813705444336
patch: final int n 1 n $NUMBER$ prod $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 93
score: 99.32215227399554
patch: final int n $NUMBER$ n 1 = n 1 * n $NUMBER$ ;
rank: 94
score: 99.51267377068015
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 1 ;
rank: 94
score: 99.45523734714673
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 : $NUMBER$ . 0 ;
rank: 94
score: 99.4522346047794
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ - 1 ;
rank: 94
score: 99.44647894965277
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ - n $NUMBER$ * n $NUMBER$ ;
rank: 94
score: 99.41831568667763
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * 1 . 0 ;
rank: 94
score: 99.41161092122395
patch: final long n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 94
score: 99.3208516438802
patch: final String n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 95
score: 99.51214278371711
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 95
score: 99.45503373579545
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 * n $NUMBER$ . 0 ;
rank: 95
score: 99.44483235677083
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ << n $NUMBER$ ;
rank: 95
score: 99.41153971354167
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ $NUMBER$ ;
rank: 95
score: 99.37928989955357
patch: final int n 1 = n 1 * n $NUMBER$ / $NUMBER$ ;
rank: 95
score: 99.32081017127403
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 1 ;
rank: 96
score: 99.45458984375
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ * $NUMBER$ . 0 . 0 ;
rank: 96
score: 99.3783950805664
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 $NUMBER$ ;
rank: 96
score: 99.31948852539062
patch: final int n 1 = n $NUMBER$ ; int n $NUMBER$ = n 1 ;
rank: 97
score: 99.48716905381944
patch: final final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 97
score: 99.46569061279297
patch: final double n 1 n $NUMBER$ prod = n 1 * 0 . 0 ;
rank: 97
score: 99.45402388139205
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n 1 . 0 . 0 ;
rank: 97
score: 99.4508056640625
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ * $NUMBER$ ;
rank: 97
score: 99.44275620404412
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . max ;
rank: 97
score: 99.41458932976974
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 . 0 ;
rank: 97
score: 99.37809244791667
patch: final double n 1 = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 98
score: 99.45075539981617
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * 1 ;
rank: 98
score: 99.44240851151316
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * ( n 1 * n $NUMBER$ ;
rank: 98
score: 99.41429946001838
patch: try { final int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 98
score: 99.40910121372768
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 1 ;
rank: 98
score: 99.37748209635417
patch: final int n 1 , n $NUMBER$ , n $NUMBER$ ;
rank: 98
score: 99.31890314275569
patch: final int n 1 n $NUMBER$ prod = 0 ;
rank: 99
score: 99.45349651834239
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 * $NUMBER$ . 0 ;
rank: 99
score: 99.41396077473958
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ - n $NUMBER$ ;
rank: 99
score: 99.3185043334961
patch: final int n 1 = n $NUMBER$ ; int n 1 = n $NUMBER$ ;
rank: 100
score: 99.4847053079044
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 / $NUMBER$ ;
rank: 100
score: 99.4531482514881
patch: final int n 1 n $NUMBER$ prod = ( n 1 + n $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 100
score: 99.44957059972427
patch: int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 100
score: 99.4407097311581
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ + n $NUMBER$ ;
rank: 100
score: 99.40758405412946
patch: final int n 1 = n 1 * 0 * n $NUMBER$ ;
rank: 100
score: 99.37434387207031
patch: final int n 1 = n 1 * n $NUMBER$ / n $NUMBER$ $NUMBER$ ;
rank: 101
score: 99.5057373046875
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * - $NUMBER$ ;
rank: 101
score: 99.45291573660714
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 1 . 0 ;
rank: 101
score: 99.44011579241071
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . max ;
rank: 101
score: 99.4134880514706
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ . 0 ;
rank: 101
score: 99.37388610839844
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ; ;
rank: 101
score: 99.31584616268383
patch: final double n 1 = n $NUMBER$ ; final int n $NUMBER$ = n 1 ;
rank: 102
score: 99.45256696428571
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 / $NUMBER$ . 0 ;
rank: 102
score: 99.44902208116319
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ / n 1 ;
rank: 102
score: 99.43959147135416
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * - $NUMBER$ ;
rank: 102
score: 99.40654754638672
patch: final int n 1 iterator = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 102
score: 99.3729248046875
patch: final int n 1 , n 1 = n 1 * n $NUMBER$ ;
rank: 102
score: 99.31564510569854
patch: final int n 1 = n 1 ; final String n $NUMBER$ = n 1 ;
rank: 103
score: 99.50421463815789
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ $NUMBER$ ;
rank: 103
score: 99.45912798713235
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * 0 ;
rank: 103
score: 99.45087280273438
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ 1 . 0 ;
rank: 103
score: 99.43950737847223
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . iterator ( ;
rank: 103
score: 99.40523856026786
patch: final int n 1 = n $NUMBER$ * 0 * n $NUMBER$ ;
rank: 103
score: 99.31521606445312
patch: final final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 ;
rank: 104
score: 99.48301595052084
patch: final Object n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 104
score: 99.45077659970238
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . $NUMBER$ . 0 ;
rank: 104
score: 99.41224429481908
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * $NUMBER$ . 0 ;
rank: 104
score: 99.40419006347656
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 104
score: 99.37228628305289
patch: final double n 1 = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 105
score: 99.50290096507354
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n 1 ;
rank: 105
score: 99.45025313527961
patch: final int n 1 n $NUMBER$ prod = n 1 + n 1 * $NUMBER$ . 0 ;
rank: 105
score: 99.43913438585069
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ + n 1 ;
rank: 105
score: 99.41167853860294
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 - $NUMBER$ ;
rank: 105
score: 99.40369466145833
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 $NUMBER$ ;
rank: 106
score: 99.50245425575658
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 + n $NUMBER$ )
rank: 106
score: 99.45018246299342
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 1 ;
rank: 106
score: 99.41161346435547
patch: final int n 1 n $NUMBER$ prod = n 1 / $NUMBER$ . 0 ;
rank: 106
score: 99.40274047851562
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ ;
rank: 106
score: 99.37137044270834
patch: final int n 1 , n $NUMBER$ = n 1 / n $NUMBER$ ;
rank: 106
score: 99.31369198069854
patch: final int n 1 = n $NUMBER$ ; final double n 1 = n 1 ;
rank: 107
score: 99.45812225341797
patch: double n 1 n $NUMBER$ prod = n 1 * n 1 . 0 ;
rank: 107
score: 99.4500732421875
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ $NUMBER$ . 0 ;
rank: 107
score: 99.43893093532986
patch: final double n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ * n $NUMBER$ ;
rank: 107
score: 99.40151977539062
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ] ;
rank: 107
score: 99.37041473388672
patch: final int n 1 $NUMBER$ = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 107
score: 99.31271541819854
patch: final double n 1 = n $NUMBER$ ; final int n 1 = n $NUMBER$ ;
rank: 108
score: 99.5010986328125
patch: / * final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 108
score: 99.4495913856908
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . $NUMBER$ ;
rank: 108
score: 99.43845621744792
patch: final int n 1 = n 1 * n $NUMBER$ + n $NUMBER$ * n $NUMBER$ ;
rank: 108
score: 99.43792724609375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ + $NUMBER$ ;
rank: 108
score: 99.41099146792763
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ * $NUMBER$ . 0 ;
rank: 108
score: 99.40047200520833
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 1 * $NUMBER$ ;
rank: 108
score: 99.37024688720703
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * ;
rank: 108
score: 99.31260052849265
patch: final int n 1 = n 1 ; final float n 1 = n $NUMBER$ ;
rank: 109
score: 99.49999321831598
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 109
score: 99.44914444633152
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 : 1 . 0 ;
rank: 109
score: 99.4377800436581
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 + $NUMBER$ ;
rank: 109
score: 99.41079872532895
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + $NUMBER$ . 0 ;
rank: 109
score: 99.39991861979166
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ 1 ;
rank: 109
score: 99.36984049479166
patch: final float n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 109
score: 99.31240665211396
patch: final double n 1 = n 1 ; final int n 1 = n 1 ;
rank: 110
score: 99.4994384765625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ *
rank: 110
score: 99.45655014935662
patch: final int n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ . 0 ;
rank: 110
score: 99.44743909333882
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * E . 0 ;
rank: 110
score: 99.43697781032986
patch: final int n 1 ; n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 110
score: 99.43683825041118
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 0 . 1 ;
rank: 110
score: 99.39944278492646
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ - 0 ;
rank: 110
score: 99.36797332763672
patch: final int n 1 = n 1 * n 1 + n $NUMBER$ $NUMBER$ ;
rank: 111
score: 99.49842664930556
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * - 1 ;
rank: 111
score: 99.4468005952381
patch: final long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 . 0 ;
rank: 111
score: 99.43653779871323
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ ) ;
rank: 111
score: 99.39858111213235
patch: final int n 1 n $NUMBER$ prod = 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 111
score: 99.36529541015625
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 $NUMBER$ ;
rank: 111
score: 99.3119255514706
patch: final / * * / final int n 1 = n 1 * n $NUMBER$ ;
rank: 112
score: 99.49837453741776
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * 1 . 0 ;
rank: 112
score: 99.4365234375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ == 0 ? $NUMBER$ : n $NUMBER$ ;
rank: 112
score: 99.43575032552083
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 112
score: 99.40806749131944
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ , n $NUMBER$ ;
rank: 112
score: 99.36441243489584
patch: final int n 1 , n $NUMBER$ = n $NUMBER$ / n $NUMBER$ ;
rank: 112
score: 99.31123621323529
patch: final int n $NUMBER$ = n 1 ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 113
score: 99.49723815917969
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$
rank: 113
score: 99.4460205078125
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 % n $NUMBER$ . 0 ;
rank: 113
score: 99.43284098307292
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 + n $NUMBER$ ;
rank: 113
score: 99.40782928466797
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ ; /
rank: 113
score: 99.36416015625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ )
rank: 113
score: 99.31110696231617
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ * n 1 ;
rank: 114
score: 99.49714491102431
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 % n $NUMBER$ ;
rank: 114
score: 99.44560803865132
patch: final int n 1 = n 1 / ( n 1 + n $NUMBER$ ) / $NUMBER$ ;
rank: 114
score: 99.43539089626736
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . iterator n $NUMBER$
rank: 114
score: 99.40754968979779
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 114
score: 99.36395263671875
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 115
score: 99.49631219161184
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 115
score: 99.44411892361111
patch: double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 115
score: 99.43508731617646
patch: try { final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 115
score: 99.404541015625
patch: final int n 1 n $NUMBER$ prod = - 1 * n $NUMBER$ ;
rank: 115
score: 99.39710235595703
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 * $NUMBER$ ;
rank: 115
score: 99.36368815104167
patch: final int n 1 , n $NUMBER$ = n $NUMBER$ + n $NUMBER$ ;
rank: 115
score: 99.3099365234375
patch: final int n 1 = n $NUMBER$ ; final String n $NUMBER$ = n $NUMBER$ ;
rank: 116
score: 99.49524643841912
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 . 1 ;
rank: 116
score: 99.45347684972427
patch: final long n 1 n $NUMBER$ prod = n 1 * n 1 . 0 ;
rank: 116
score: 99.44380115327381
patch: try { final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 116
score: 99.43505859375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length n $NUMBER$ * n $NUMBER$ ;
rank: 116
score: 99.43134223090277
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 + n 1 ;
rank: 116
score: 99.3948974609375
patch: final int n 1 n $NUMBER$ prod = $STRING$ * n $NUMBER$ * n $NUMBER$ ;
rank: 117
score: 99.49514431423611
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 : n $NUMBER$ ;
rank: 117
score: 99.434912109375
patch: final String n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 117
score: 99.43097601996527
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ + n 1 ;
rank: 117
score: 99.40219598067434
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ = $NUMBER$ . 0 ;
rank: 117
score: 99.39332490808823
patch: int n 1 n $NUMBER$ prod += n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 117
score: 99.36191813151042
patch: final int n 1 , n $NUMBER$ = n 1 ;
rank: 118
score: 99.44306776258681
patch: final int n 1 n $NUMBER$ prod = n 1 . 0 * $NUMBER$ . 0 ;
rank: 118
score: 99.43345811631944
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length $NUMBER$ * n $NUMBER$ ;
rank: 118
score: 99.40208033511513
patch: final int n 1 = Math . sqrt ( n 1 * n $NUMBER$ + 1 ) ;
rank: 118
score: 99.3930419921875
patch: final long n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 118
score: 99.3612060546875
patch: final int n 1 n $NUMBER$ prod = n 1 [ n $NUMBER$ ] ;
rank: 118
score: 99.30867273667279
patch: final int [ ] n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 119
score: 99.49434621710526
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . - n $NUMBER$ ;
rank: 119
score: 99.47071668836806
patch: final Object n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 119
score: 99.45201958550348
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 * n $NUMBER$ ;
rank: 119
score: 99.44263756793478
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 : 0 . 0 ;
rank: 120
score: 99.49391682942708
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * - $NUMBER$ ;
rank: 120
score: 99.46974690755208
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 ; / / /
rank: 120
score: 99.4499870749081
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 * $NUMBER$ ;
rank: 120
score: 99.4425632642663
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 . 0 . 0 ;
rank: 120
score: 99.39209923377403
patch: final int n 1 iterator = n 1 * n $NUMBER$ ;
rank: 120
score: 99.35993957519531
patch: final int n 1 = n 1 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 121
score: 99.49319797092014
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 . n $NUMBER$ ;
rank: 121
score: 99.46846771240234
patch: final int n 1 n $NUMBER$ prod = n 1 * * n $NUMBER$ ;
rank: 121
score: 99.44161184210526
patch: final int n 1 = n $NUMBER$ * ( n 1 + n $NUMBER$ ) / $NUMBER$ ;
rank: 121
score: 99.43246299342105
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 121
score: 99.40082077752976
patch: final int n 1 n $NUMBER$ prod = n 1 * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 121
score: 99.3920654296875
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ *
rank: 122
score: 99.44069505774456
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 / $NUMBER$ . 0 ;
rank: 122
score: 99.43246299342105
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . iterator n 1 ;
rank: 122
score: 99.42812771267361
patch: final int n 1 n $NUMBER$ prod = n 1 - n $NUMBER$ - n $NUMBER$ ;
rank: 122
score: 99.39157284007354
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 122
score: 99.35918317522321
patch: final int n 1 $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 123
score: 99.4661376953125
patch: final String n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 123
score: 99.44041137695312
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 $NUMBER$ ;
rank: 123
score: 99.42765590122768
patch: final int n 1 = n 1 * n $NUMBER$ + $NUMBER$ ;
rank: 123
score: 99.40025983537946
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n 1 ;
rank: 123
score: 99.35878092447916
patch: final int n 1 = n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 123
score: 99.3065544577206
patch: final int n 1 = n 1 ; final String n 1 = n 1 ;
rank: 124
score: 99.49160927220395
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ * $NUMBER$ ;
rank: 124
score: 99.44618135340073
patch: final double n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ . 0 ;
rank: 124
score: 99.44013129340277
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n $NUMBER$ ;
rank: 124
score: 99.38923645019531
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ; final
rank: 124
score: 99.30641174316406
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 . 1 ;
rank: 125
score: 99.49092824835526
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 0 . 0 ;
rank: 125
score: 99.43904418945313
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + n $NUMBER$ . 0 ;
rank: 125
score: 99.4000244140625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + 1 . 0 ;
rank: 125
score: 99.3888690655048
patch: final int n 1 equals = n 1 * n $NUMBER$ ;
rank: 125
score: 99.35831451416016
patch: final int n 1 = n 1 $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 125
score: 99.306396484375
patch: final int n 1 = n 1 ; n $NUMBER$ = n $NUMBER$ ;
rank: 126
score: 99.49090217141544
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ , n $NUMBER$
rank: 126
score: 99.4389880952381
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ * $NUMBER$ . 0 ;
rank: 126
score: 99.42993842230902
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . max $NUMBER$ * n $NUMBER$ ;
rank: 126
score: 99.42656792534723
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 126
score: 99.39977446056548
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ . 0 . 0 ;
rank: 126
score: 99.3885857077206
patch: int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 126
score: 99.35802283653847
patch: final int n 1 = n 1 * n $NUMBER$ * ;
rank: 127
score: 99.48981034128289
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * 0 . 0 ;
rank: 127
score: 99.46334499782986
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * . 0 ;
rank: 127
score: 99.43759300595238
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 127
score: 99.4285888671875
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * 0 . 1 ;
rank: 127
score: 99.42654079861111
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ - n $NUMBER$ ;
rank: 127
score: 99.38828412224265
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ n $NUMBER$ ;
rank: 127
score: 99.35784442608173
patch: final int n 1 = n 1 1 * n 1 ;
rank: 128
score: 99.44586181640625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . n 1 ;
rank: 128
score: 99.43756713867188
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 + n 1 . 0 ;
rank: 128
score: 99.42788856907895
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . clone ( ) ;
rank: 128
score: 99.39804256663604
patch: final int n 1 n $NUMBER$ prod n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 128
score: 99.38794663373162
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 128
score: 99.35618591308594
patch: final int n 1 n $NUMBER$ prod = n 1 $NUMBER$ * n 1 ;
rank: 129
score: 99.48752728630515
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 1 ;
rank: 129
score: 99.44545491536458
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ $NUMBER$ . 0 ;
rank: 129
score: 99.43749389648437
patch: final final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 129
score: 99.42750379774306
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ { n $NUMBER$ ;
rank: 129
score: 99.39783528645833
patch: final int n 1 = n 1 * n $NUMBER$ ; / * /
rank: 129
score: 99.35612487792969
patch: final long n 1 = n 1 * n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 130
score: 99.48719697840073
patch: final Normal CaMeL Distribution n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 130
score: 99.4359195106908
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 1 ;
rank: 130
score: 99.42685953776042
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ = n $NUMBER$ ;
rank: 130
score: 99.35596720377605
patch: final int n 1 = n $NUMBER$ + n $NUMBER$ ;
rank: 130
score: 99.30479520909927
patch: final int n 1 = n 1 ; final Integer n 1 = n $NUMBER$ ;
rank: 131
score: 99.48578559027777
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ , n $NUMBER$ 1
rank: 131
score: 99.46046956380208
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . * $NUMBER$ ;
rank: 131
score: 99.44407025505515
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 131
score: 99.43584594726562
patch: final final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 131
score: 99.39655219184027
patch: final try { final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 131
score: 99.35569763183594
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ $NUMBER$ ;
rank: 132
score: 99.48403448807566
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * - n $NUMBER$ ;
rank: 132
score: 99.46015481387867
patch: final int n 1 n $NUMBER$ prod = $STRING$ * n 1 * n $NUMBER$ ;
rank: 132
score: 99.44179280598958
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 . n 1 ;
rank: 132
score: 99.43523092830883
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ . 0 ;
rank: 132
score: 99.42525227864583
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ + n 1 ;
rank: 132
score: 99.42226993336396
patch: final int n 1 n $NUMBER$ prod = n 1 * 1 + n $NUMBER$ ;
rank: 132
score: 99.3876953125
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ 1 * n $NUMBER$ ;
rank: 132
score: 99.35474395751953
patch: final int n 1 n $NUMBER$ prod = n 1 ) * n $NUMBER$ ;
rank: 132
score: 99.30420735677083
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * - 1 ;
rank: 133
score: 99.44084337022569
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod ;
rank: 133
score: 99.43519810267857
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 * $NUMBER$ ;
rank: 133
score: 99.42486165364583
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . max $NUMBER$ }
rank: 133
score: 99.42142980238971
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 133
score: 99.39556563527961
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 * $NUMBER$ . 0 ;
rank: 133
score: 99.35362752278645
patch: final int n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 134
score: 99.48341279871323
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$
rank: 134
score: 99.45863252527573
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ / n $NUMBER$ ;
rank: 134
score: 99.44053739659927
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * n 1 ;
rank: 134
score: 99.4351806640625
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 * $NUMBER$ . 0 ;
rank: 134
score: 99.42451746323529
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length * n $NUMBER$ ;
rank: 134
score: 99.42090521918402
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ * n 1 ;
rank: 134
score: 99.39523654513889
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 - n 1 ;
rank: 134
score: 99.3841323852539
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ] ;
rank: 134
score: 99.35297100360577
patch: final int n 1 = n 1 * n $NUMBER$ ; ;
rank: 134
score: 99.30415613511029
patch: final int n 1 = n $NUMBER$ ; final Integer n $NUMBER$ = n $NUMBER$ ;
rank: 135
score: 99.43516322544643
patch: final int n 1 n $NUMBER$ prod = ( n 1 + n 1 ) / $NUMBER$ . 0 ;
rank: 135
score: 99.42428768382354
patch: final int [ ] n 1 = n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 135
score: 99.42064073350694
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 135
score: 99.38368577223558
patch: final final int n 1 = n 1 * n $NUMBER$ ;
rank: 135
score: 99.35277506510417
patch: final int n 1 , n $NUMBER$ , n $NUMBER$ , n $NUMBER$ ;
rank: 135
score: 99.30409869025735
patch: final int n 1 = n 1 ; final float n $NUMBER$ = n 1 ;
rank: 136
score: 99.4338134765625
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 $NUMBER$ ;
rank: 136
score: 99.42405299136513
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ . $NUMBER$ ) ;
rank: 136
score: 99.42030334472656
patch: final int n 1 = Math . max ( n 1 , n $NUMBER$ ;
rank: 136
score: 99.39471114309211
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - 0 . 0 ;
rank: 136
score: 99.3820571899414
patch: final int n 1 iterator = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 136
score: 99.35255015980114
patch: double n 1 = n 1 * n $NUMBER$ ;
rank: 137
score: 99.48202311197916
patch: final double n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ ;
rank: 137
score: 99.45693630642361
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ; / * /
rank: 137
score: 99.43372163318452
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ n 1 . 0 ;
rank: 137
score: 99.42026095920139
patch: final int n 1 n $NUMBER$ prod = n 1 * ( double ) n $NUMBER$ ;
rank: 137
score: 99.35198505108173
patch: final int n 1 = n 1 $NUMBER$ * n 1 ;
rank: 137
score: 99.30307904411765
patch: final int n 1 = n 1 ; final Integer n $NUMBER$ = n 1 ;
rank: 138
score: 99.48201258042279
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - $NUMBER$ ;
rank: 138
score: 99.45597839355469
patch: final final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 138
score: 99.43371000744048
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ n $NUMBER$ . 0 ;
rank: 138
score: 99.42254638671875
patch: final String n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 138
score: 99.41989474826389
patch: final int n 1 = Math . max ( n 1 , n $NUMBER$ $NUMBER$ ) ;
rank: 138
score: 99.30253092447917
patch: final int n 1 = n 1 ; n 1 = n $NUMBER$ ;
rank: 139
score: 99.4805972450658
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 1 . 0 ;
rank: 139
score: 99.45583089192708
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . / $NUMBER$ ;
rank: 139
score: 99.43289317255434
patch: final long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 : $NUMBER$ . 0 ;
rank: 139
score: 99.42253112792969
patch: final int n 1 n $NUMBER$ prod = ( n $NUMBER$ * n $NUMBER$ ;
rank: 139
score: 99.37869466145834
patch: final int n 1 n $NUMBER$ prod = n 1 * max $NUMBER$ ;
rank: 139
score: 99.30228424072266
patch: int n 1 = n $NUMBER$ ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 140
score: 99.48015393708882
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * - n $NUMBER$ ;
rank: 140
score: 99.45558675130208
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . ( ) ;
rank: 140
score: 99.43487189797794
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 . $NUMBER$ ;
rank: 140
score: 99.43222443953805
patch: final int n 1 = n 1 . 0 * ( n 1 + n $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 140
score: 99.39192468979779
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ; / /
rank: 140
score: 99.37762858072917
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 140
score: 99.35104166666666
patch: final int n 1 = n 1 * $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 141
score: 99.47931871916118
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ . 0 ;
rank: 141
score: 99.43209402901786
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ % $NUMBER$ . 0 ;
rank: 141
score: 99.42237613075658
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + 0 + 0 ;
rank: 141
score: 99.41799587673611
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ + n 1 ;
rank: 141
score: 99.37696030560662
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ * n $NUMBER$ * 1 ;
rank: 141
score: 99.35099029541016
patch: final int n 1 1 = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 141
score: 99.30077406939338
patch: final int n 1 n $NUMBER$ prod = ( n $NUMBER$ * n $NUMBER$ ) ;
rank: 142
score: 99.47855870863971
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / *
rank: 142
score: 99.43185763888889
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 . 0 ;
rank: 142
score: 99.42140107996323
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ << $NUMBER$ ;
rank: 142
score: 99.41778564453125
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ * n 1 ;
rank: 142
score: 99.37693786621094
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; }
rank: 142
score: 99.35047912597656
patch: final int n 1 = n 1 $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 143
score: 99.47852280560662
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * 1 ;
rank: 143
score: 99.45472627527573
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ; / /
rank: 143
score: 99.43409729003906
patch: final int n 1 n $NUMBER$ prod = n 1 * 1 . 0 ;
rank: 143
score: 99.43119303385417
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod ;
rank: 143
score: 99.42068820529514
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . length $NUMBER$ ;
rank: 143
score: 99.4149528952206
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ + $NUMBER$ ;
rank: 143
score: 99.3909683227539
patch: final int n 1 = n 1 * n 1 * $NUMBER$ . 0 ;
rank: 143
score: 99.3503926595052
patch: final int n 1 , n 1 , n $NUMBER$ ;
rank: 143
score: 99.30017807904412
patch: final int n 1 = n $NUMBER$ ; final String n 1 = n $NUMBER$ ;
rank: 144
score: 99.43040882457386
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 + n $NUMBER$ . 0 ;
rank: 144
score: 99.41473388671875
patch: final double n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ + n $NUMBER$ ;
rank: 144
score: 99.39078521728516
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ++ ;
rank: 144
score: 99.37579345703125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ $NUMBER$ 1 ;
rank: 144
score: 99.29979705810547
patch: final int [ ] [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 145
score: 99.43349202473958
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 $NUMBER$ . 0 ;
rank: 145
score: 99.43034561820652
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ * $NUMBER$ . 0 . 0 ;
rank: 145
score: 99.41431382123162
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 ;
rank: 145
score: 99.29954020182292
patch: final float n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 146
score: 99.43021065848214
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n 1 * $NUMBER$ . 0 ;
rank: 146
score: 99.41800944010417
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . iterator n $NUMBER$
rank: 146
score: 99.41417100694444
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 146
score: 99.39008924696181
patch: return n 1 * n 1 * ( n 1 + n $NUMBER$ + 1 ) ;
rank: 146
score: 99.37493896484375
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 146
score: 99.34915364583334
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ * n 1 ;
rank: 147
score: 99.47747481496711
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ n $NUMBER$ ;
rank: 147
score: 99.45011393229167
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . - 1 ;
rank: 147
score: 99.42983863467262
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 + $NUMBER$ ;
rank: 147
score: 99.417724609375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . iterator n 1 ;
rank: 147
score: 99.41410609654018
patch: final int n 1 n $NUMBER$ prod = n 1 + 1 ;
rank: 147
score: 99.37462506975446
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * 0 ;
rank: 147
score: 99.34896414620536
patch: int n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 147
score: 99.29819899338942
patch: final int n 1 ] = n 1 * n $NUMBER$ ;
rank: 148
score: 99.43108452690973
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ . 0 ;
rank: 148
score: 99.42981487771739
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 - $NUMBER$ . 0 ;
rank: 148
score: 99.41769748263889
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . to CaMeL String ( ) ;
rank: 148
score: 99.41403537326389
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 + n $NUMBER$ ;
rank: 148
score: 99.38840619255515
patch: final int n 1 n $NUMBER$ prod = 1 * n 1 * n $NUMBER$ ;
rank: 148
score: 99.34883117675781
patch: final int n 1 n $NUMBER$ prod = n 1 1 * n 1 ;
rank: 148
score: 99.29757869944854
patch: final int n 1 = n $NUMBER$ ; final float n $NUMBER$ = n $NUMBER$ ;
rank: 149
score: 99.4297107514881
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 149
score: 99.41705322265625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ & n $NUMBER$ ;
rank: 149
score: 99.41366756663604
patch: final int n 1 = Math . min ( n 1 , n $NUMBER$ ) ;
rank: 149
score: 99.37185232979911
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; try {
rank: 149
score: 99.34734344482422
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ double ;
rank: 149
score: 99.29691569010417
patch: final int n 1 = n 1 * n $NUMBER$ ; n $NUMBER$ :
rank: 150
score: 99.47664388020833
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 : n 1 ;
rank: 150
score: 99.4296810752467
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ * $NUMBER$ ;
rank: 150
score: 99.4135986328125
patch: final int n 1 = n 1 + n $NUMBER$ + n $NUMBER$ ;
rank: 150
score: 99.371826171875
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; / /
rank: 150
score: 99.34611511230469
patch: final int n 1 = n 1 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 150
score: 99.29589080810547
patch: final int n 1 = n 1 ; double n $NUMBER$ = n $NUMBER$ ;
rank: 151
score: 99.47620985243056
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % n 1 ;
rank: 151
score: 99.44754367404514
patch: final String n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ;
rank: 151
score: 99.41592610677084
patch: final boolean n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 151
score: 99.41303567325367
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ + 1 ;
rank: 151
score: 99.38705283717105
patch: return n 1 * ( n 1 - n $NUMBER$ + 1 ) / $NUMBER$ . 0 ;
rank: 151
score: 99.37143841911765
patch: final int n 1 n $NUMBER$ prod = 0 * n 1 * n $NUMBER$ ;
rank: 151
score: 99.34607950846355
patch: final int n $NUMBER$ = n 1 * n 1 ;
rank: 151
score: 99.29481506347656
patch: final int n 1 = n 1 ; final int n $NUMBER$ = 0 ;
rank: 152
score: 99.47597142269737
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . - n $NUMBER$ ;
rank: 152
score: 99.42962325246711
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / E . 0 ;
rank: 152
score: 99.42808024088542
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 ;
rank: 152
score: 99.386962890625
patch: final int n 1 n $NUMBER$ prod 1 = n 1 * n $NUMBER$ ;
rank: 152
score: 99.37125890395221
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ * 0 ;
rank: 152
score: 99.34520467122395
patch: final int n 1 = n 1 * $NUMBER$ $NUMBER$ ;
rank: 152
score: 99.29370880126953
patch: int n 1 = n 1 ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 153
score: 99.47588790090461
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * 0 . 0 ;
rank: 153
score: 99.44594319661458
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 $NUMBER$ ;
rank: 153
score: 99.42929909446023
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n 1 * $NUMBER$ . 0 ;
rank: 153
score: 99.41519504123264
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ & n $NUMBER$ ;
rank: 153
score: 99.4128058938419
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 ;
rank: 153
score: 99.38677657277961
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - 1 . 0 ;
rank: 153
score: 99.345068359375
patch: final int n 1 , n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 153
score: 99.29365808823529
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n 1 : n 1 ;
rank: 154
score: 99.4758659811581
patch: / * final int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 154
score: 99.42923134251645
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / 1 . 0 ;
rank: 154
score: 99.42672909007354
patch: final Object n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 154
score: 99.41388260690789
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ + 0 + 0 ;
rank: 154
score: 99.3861945657169
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 . 0 ;
rank: 154
score: 99.3436050415039
patch: n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 154
score: 99.29335239955357
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * n 1 ;
rank: 155
score: 99.47430419921875
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1
rank: 155
score: 99.44564998851104
patch: try { final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 155
score: 99.42850925611413
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 : $NUMBER$ . 1 ;
rank: 155
score: 99.42637634277344
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 ;
rank: 155
score: 99.41246122472427
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ << $NUMBER$ ;
rank: 155
score: 99.34328049879808
patch: final int n 1 $NUMBER$ = n 1 + n $NUMBER$ ;
rank: 156
score: 99.47376166449652
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * - 1 ;
rank: 156
score: 99.44466727120536
patch: final int n 1 n $NUMBER$ prod = $STRING$ * n 1 ;
rank: 156
score: 99.42817993164063
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ $NUMBER$ . 0 ;
rank: 156
score: 99.41210259331598
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . max 1 ;
rank: 156
score: 99.38508043791118
patch: final int n 1 = n 1 * ( n 1 + n $NUMBER$ + 1 ) ;
rank: 156
score: 99.36848718979779
patch: final int n 1 n $NUMBER$ prod = max * n $NUMBER$ * n $NUMBER$ ;
rank: 157
score: 99.42744373139881
patch: try { final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 157
score: 99.42533656529018
patch: final int n 1 = n 1 * n $NUMBER$ . 0 ;
rank: 157
score: 99.41101792279412
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ + 1 ;
rank: 157
score: 99.38377621299342
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ . 1 ;
rank: 157
score: 99.36748190487133
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * min ;
rank: 157
score: 99.34164225260416
patch: final double n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 158
score: 99.42725719105114
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 158
score: 99.42533365885417
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ . 0 ;
rank: 158
score: 99.41136067708334
patch: final int n 1 n $NUMBER$ prod = - $NUMBER$ * n $NUMBER$ ;
rank: 158
score: 99.38312731291118
patch: final int n 1 = Math . sqrt ( n 1 + n $NUMBER$ + 1 ) ;
rank: 159
score: 99.42719116210938
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n $NUMBER$ . 0 ;
rank: 159
score: 99.42428249782986
patch: double n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ . 0 ;
rank: 159
score: 99.41120062934027
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . iterator ( ;
rank: 159
score: 99.4101921530331
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ + $NUMBER$ ;
rank: 159
score: 99.36508413461539
patch: final int n 1 = = n $NUMBER$ * n $NUMBER$ ;
rank: 159
score: 99.34087727864583
patch: final int n 1 n $NUMBER$ prod = n 1 % n $NUMBER$ ;
rank: 159
score: 99.29180145263672
patch: final int [ ] [ ] n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 160
score: 99.42686244419643
patch: final long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 . 0 ;
rank: 160
score: 99.40933048023896
patch: final int n 1 = Math . max ( n 1 , n 1 ) ;
rank: 160
score: 99.38100714432566
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * $NUMBER$ . 0 ;
rank: 160
score: 99.36493682861328
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ; final
rank: 161
score: 99.47250848067434
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ * $NUMBER$ ;
rank: 161
score: 99.44151395909927
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / $NUMBER$ ;
rank: 161
score: 99.42664104959239
patch: calculate CaMeL Asymptotic CaMeL P CaMeL Value ( n 1 , n 1 , n 1 ) ;
rank: 161
score: 99.42232259114583
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ * $NUMBER$ ;
rank: 161
score: 99.40887772409539
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ { n $NUMBER$ } ;
rank: 161
score: 99.4086052389706
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 161
score: 99.38053624770221
patch: final int n 1 n $NUMBER$ prod n 1 = n 1 * n $NUMBER$ ;
rank: 161
score: 99.36259191176471
patch: final final int n 1 n $NUMBER$ prod = n $NUMBER$ 1 * n $NUMBER$ ;
rank: 162
score: 99.44121636284723
patch: final int n 1 n $NUMBER$ prod = n 1 . n 1 * n $NUMBER$ ;
rank: 162
score: 99.42639741443452
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ + $NUMBER$ . 0 ;
rank: 162
score: 99.4088070518092
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . length + 0 ;
rank: 162
score: 99.40849473741319
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 162
score: 99.38011474609375
patch: final int n 1 = n 1 * ( n 1 + 1 ) / $NUMBER$ . 0 ;
rank: 162
score: 99.33980305989583
patch: final int n $NUMBER$ = n 1 * n 1 * n $NUMBER$ ;
rank: 162
score: 99.29041963465073
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; if ( n 1 ;
rank: 163
score: 99.47104363692434
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % $NUMBER$ . 0 ;
rank: 163
score: 99.44084821428571
patch: final int n 1 n $NUMBER$ prod = n 1 * $STRING$ ;
rank: 163
score: 99.4263916015625
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ * n 1 . 0 ;
rank: 163
score: 99.42227511935764
patch: final long n 1 n $NUMBER$ prod = n 1 * n 1 * n 1 ;
rank: 163
score: 99.36238098144531
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 0 * $NUMBER$ ;
rank: 163
score: 99.33907063802083
patch: int n 1 = n 1 * n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 163
score: 99.29036458333333
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ = n $NUMBER$ ;
rank: 164
score: 99.47015380859375
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * - $NUMBER$ ;
rank: 164
score: 99.44048394097223
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ $NUMBER$ ;
rank: 164
score: 99.42586263020833
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ + $NUMBER$ . 0 ;
rank: 164
score: 99.41844267003677
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * n $NUMBER$ ;
rank: 164
score: 99.33877999441964
patch: final int n 1 = n 1 * n $NUMBER$ $NUMBER$ $NUMBER$ ;
rank: 164
score: 99.29032135009766
patch: final int [ ] n $NUMBER$ = new int n $NUMBER$ * n $NUMBER$ ;
rank: 165
score: 99.4693667763158
patch: final final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 ;
rank: 165
score: 99.4256258877841
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 $NUMBER$ . 0 ;
rank: 165
score: 99.41741943359375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ . 0 ;
rank: 165
score: 99.40545654296875
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * ( n $NUMBER$ * $NUMBER$ ;
rank: 165
score: 99.37800678453948
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ . $NUMBER$ ;
rank: 165
score: 99.36139787946429
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 165
score: 99.29003188189338
patch: final int n $NUMBER$ = n $NUMBER$ ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 166
score: 99.42513374660327
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 : $NUMBER$ . $NUMBER$ ;
rank: 166
score: 99.41712951660156
patch: final double n 1 n $NUMBER$ prod = n 1 * 1 . 0 ;
rank: 166
score: 99.4056396484375
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ / 1 ;
rank: 166
score: 99.40535481770833
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n $NUMBER$ * $NUMBER$ ;
rank: 166
score: 99.36094313401442
patch: final final int n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 166
score: 99.33795928955078
patch: final int n 1 , n $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 166
score: 99.28954360064338
patch: final int n 1 = n 1 ; final int n $NUMBER$ < n $NUMBER$ ;
rank: 167
score: 99.4390625
patch: final int n 1 n $NUMBER$ prod = n 1 . n 1 ;
rank: 167
score: 99.42510695684524
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 + 1 ) / $NUMBER$ ;
rank: 167
score: 99.41700744628906
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ 0 ;
rank: 167
score: 99.40503607855902
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 167
score: 99.40460883246527
patch: final int n 1 = n 1 * n $NUMBER$ - n $NUMBER$ * n $NUMBER$ ;
rank: 167
score: 99.37726793791118
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ / $NUMBER$ . 0 ;
rank: 167
score: 99.36070963541667
patch: final boolean n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 167
score: 99.33602905273438
patch: final double n 1 = n 1 + n $NUMBER$ ;
rank: 167
score: 99.28926355698529
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ; final int n $NUMBER$ :
rank: 168
score: 99.4677734375
patch: final Normal CaMeL Distribution n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 168
score: 99.43902946920956
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; * /
rank: 168
score: 99.42500443892045
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 : n 1 . 0 ;
rank: 168
score: 99.41669778262867
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 168
score: 99.40387641059027
patch: final int n $NUMBER$ = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 168
score: 99.36052389705883
patch: final int n 1 n $NUMBER$ prod = n 1 * $STRING$ * n $NUMBER$ ;
rank: 168
score: 99.33478655133929
patch: final int n 1 = n 1 * n $NUMBER$ + 1 ;
rank: 168
score: 99.28917738970588
patch: final String n 1 = n 1 ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 169
score: 99.46776625689338
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + $NUMBER$ ;
rank: 169
score: 99.42451557360198
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 + 1 . 0 ;
rank: 169
score: 99.4164177389706
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 * n 1 ;
rank: 169
score: 99.40360804966518
patch: final int n 1 n $NUMBER$ prod = n 1 + $NUMBER$ ;
rank: 169
score: 99.37709554036458
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 = n $NUMBER$ ;
rank: 169
score: 99.36035874310662
patch: final int n 1 n $NUMBER$ prod = n 1 * 1 * n $NUMBER$ ;
rank: 169
score: 99.33365572415866
patch: n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 170
score: 99.4242527173913
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 + $NUMBER$ . 0 ;
rank: 170
score: 99.40382603236607
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ + 0 ;
rank: 170
score: 99.35858513327206
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - 0 ;
rank: 170
score: 99.33228478064903
patch: final int n 1 = n 1 * n $NUMBER$ 1 ;
rank: 171
score: 99.46749717310855
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 * n $NUMBER$ )
rank: 171
score: 99.43827601841518
patch: final int n 1 n $NUMBER$ prod = n 1 * false ;
rank: 171
score: 99.42422340029762
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ / $NUMBER$ . 0 ;
rank: 171
score: 99.40340383429276
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . iterator n $NUMBER$ * n $NUMBER$ ;
rank: 171
score: 99.4017693014706
patch: double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 171
score: 99.37590680803571
patch: Integer n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 171
score: 99.3583251953125
patch: final boolean n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 171
score: 99.33224923270089
patch: final int n 1 1 = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 171
score: 99.28776999080883
patch: final int n 1 n $NUMBER$ prod = n 1 . ( n $NUMBER$ ) ;
rank: 172
score: 99.42354152513587
patch: calculate CaMeL Asymptotic CaMeL P CaMeL Value ( n 1 , n 1 , n $NUMBER$ ) ;
rank: 172
score: 99.4031982421875
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ . max $NUMBER$
rank: 172
score: 99.35828354779412
patch: final int n 1 = n $NUMBER$ * 0 * n $NUMBER$ * n $NUMBER$ ;
rank: 172
score: 99.33042689732143
patch: int n 1 = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 172
score: 99.28722426470588
patch: final int n 1 = n 1 ; final float n 1 = n 1 ;
rank: 173
score: 99.43712022569444
patch: final final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 ;
rank: 173
score: 99.4233757467831
patch: final long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ ;
rank: 173
score: 99.37498779296875
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 173
score: 99.32980782645089
patch: final int n $NUMBER$ n $NUMBER$ = n 1 + n $NUMBER$ ;
rank: 173
score: 99.28714192708334
patch: final float n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 174
score: 99.43701171875
patch: final int n 1 n $NUMBER$ prod = n 1 * true ;
rank: 174
score: 99.42308959960937
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * n 1 . 0 ;
rank: 174
score: 99.4136101217831
patch: final double n 1 = n 1 * n 1 * n $NUMBER$ . 0 ;
rank: 174
score: 99.40282389322917
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ >> n $NUMBER$ ;
rank: 174
score: 99.39912245008681
patch: final int n 1 = n 1 * n $NUMBER$ / n $NUMBER$ * n $NUMBER$ ;
rank: 174
score: 99.37441534745066
patch: return n 1 * n 1 * ( n 1 + 1 ) / $NUMBER$ . 0 ;
rank: 174
score: 99.32950846354167
patch: final int n 1 n $NUMBER$ prod = n 1 . n $NUMBER$ ;
rank: 175
score: 99.43666585286458
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 ; / * /
rank: 175
score: 99.42286217730978
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 + 1 . 0 ;
rank: 175
score: 99.41323513454861
patch: final final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 175
score: 99.40228271484375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length $NUMBER$ - n $NUMBER$ ;
rank: 175
score: 99.39908854166667
patch: final double n 1 = n 1 * n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 175
score: 99.37376098632812
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n $NUMBER$ . 0 ;
rank: 175
score: 99.35503791360294
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * 0 * n $NUMBER$ ;
rank: 175
score: 99.32935384114583
patch: final int n 1 n $NUMBER$ prod = n 1 , n $NUMBER$ ;
rank: 175
score: 99.28709501378677
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n 1 : n $NUMBER$ ;
rank: 176
score: 99.46669407894737
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % $NUMBER$ . 0 ;
rank: 176
score: 99.43638102213542
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . . 0 ;
rank: 176
score: 99.42223590353261
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 : $NUMBER$ . 1 ;
rank: 176
score: 99.37363568474265
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 - 1 ;
rank: 176
score: 99.32837853064903
patch: final int n 1 , n $NUMBER$ $NUMBER$ , n $NUMBER$ ;
rank: 177
score: 99.41262478298611
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 177
score: 99.37350463867188
patch: final int n 1 = n 1 * n $NUMBER$ * 1 . 0 ;
rank: 177
score: 99.3545391376202
patch: final int n 1 = = n 1 * n $NUMBER$ ;
rank: 177
score: 99.28685709635417
patch: final int n 1 n $NUMBER$ prod = n 1 * - 1 ;
rank: 178
score: 99.4212646484375
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ * $NUMBER$ . 0 ;
rank: 178
score: 99.41243489583333
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 / n $NUMBER$ ;
rank: 178
score: 99.40195041232639
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + 0 $NUMBER$ ;
rank: 178
score: 99.39866807725694
patch: final double n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 178
score: 99.35397338867188
patch: final int n 1 = = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 178
score: 99.28681497012867
patch: final double n 1 = n $NUMBER$ ; final int n 1 = n 1 ;
rank: 179
score: 99.42057291666667
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ n $NUMBER$ . 0 ;
rank: 179
score: 99.41241455078125
patch: final double n 1 n $NUMBER$ prod = n 1 * 0 ;
rank: 179
score: 99.35378130744485
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 1 * n $NUMBER$ ; final
rank: 179
score: 99.3270975748698
patch: final int n 1 = n 1 / n 1 ;
rank: 180
score: 99.46432976973684
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 180
score: 99.40049913194444
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . iterator n $NUMBER$
rank: 180
score: 99.39739312065973
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 180
score: 99.35363006591797
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 1 ;
rank: 180
score: 99.32627766927084
patch: final int n 1 = n $NUMBER$ * n 1 + n $NUMBER$ ;
rank: 181
score: 99.43505181206598
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ) / $NUMBER$ ;
rank: 181
score: 99.42003173828125
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod / $NUMBER$ ;
rank: 181
score: 99.41078016493056
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ . 0 ;
rank: 181
score: 99.39698893229166
patch: final int n 1 ; n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 181
score: 99.3536148071289
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 181
score: 99.32598876953125
patch: final int n 1 = n 1 1 * n $NUMBER$ $NUMBER$ ;
rank: 181
score: 99.28615435431985
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : 0 ;
rank: 182
score: 99.46342198988971
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 1 ;
rank: 182
score: 99.43453640407986
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * 0 . 0 ;
rank: 182
score: 99.41987748579545
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ $NUMBER$ . 0 . 0 ;
rank: 182
score: 99.39898681640625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length $NUMBER$ / n $NUMBER$ ;
rank: 182
score: 99.35322265625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ * $NUMBER$ ;
rank: 182
score: 99.28607536764706
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 0 + n $NUMBER$ ;
rank: 183
score: 99.46309168198529
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$
rank: 183
score: 99.41980511209239
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 * $NUMBER$ . $NUMBER$ ;
rank: 183
score: 99.41066196986607
patch: final double n 1 = n 1 * n $NUMBER$ . 0 ;
rank: 183
score: 99.39884868421052
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + 0 . $NUMBER$ ;
rank: 183
score: 99.39602481617646
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1
rank: 183
score: 99.35244140625
patch: final String n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 184
score: 99.46294202302632
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ 1 * n $NUMBER$ ;
rank: 184
score: 99.43388536241319
patch: final final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 184
score: 99.41911177201705
patch: final double calculate CaMeL Asymptotic CaMeL P CaMeL Value ( Umin , n 1 ) ;
rank: 184
score: 99.39832261029412
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 + n $NUMBER$ ;
rank: 184
score: 99.39592428768383
patch: final double n 1 = Math . max ( n 1 , n $NUMBER$ ) ;
rank: 184
score: 99.32472330729166
patch: final int n 1 = n 1 + n 1 * n $NUMBER$ ;
rank: 184
score: 99.2857894897461
patch: int n 1 = n $NUMBER$ ; final int n 1 = n $NUMBER$ ;
rank: 185
score: 99.4627685546875
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 - n $NUMBER$ ;
rank: 185
score: 99.41860563858695
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 + 1 . 0 ;
rank: 185
score: 99.39633178710938
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length n $NUMBER$ ;
rank: 185
score: 99.37120297080592
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 * 1 . 0 ;
rank: 185
score: 99.3523193359375
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ *
rank: 185
score: 99.32186686197916
patch: final int n 1 , n $NUMBER$ = n 1 * n 1 ;
rank: 185
score: 99.28574044363839
patch: final int [ ] n 1 = n 1 * n 1 ;
rank: 186
score: 99.41850142045455
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n 1 . 0 . 0 ;
rank: 186
score: 99.40903727213542
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ . $NUMBER$ ;
rank: 186
score: 99.39569769965277
patch: final float n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 186
score: 99.35188562729779
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 186
score: 99.32147623697917
patch: final int n 1 , n 1 = n 1 + n $NUMBER$ ;
rank: 186
score: 99.28509521484375
patch: final int n $NUMBER$ n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 187
score: 99.46136833639706
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 ; / *
rank: 187
score: 99.43163123497597
patch: final final int n 1 n $NUMBER$ prod = n 1 ;
rank: 187
score: 99.41846313476563
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 % n 1 . 0 ;
rank: 187
score: 99.39576551649306
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . max $NUMBER$ / n $NUMBER$ ;
rank: 187
score: 99.39568219866071
patch: final int n 1 = n 1 * n $NUMBER$ * 1 ;
rank: 187
score: 99.37068006727431
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 187
score: 99.35182698567708
patch: final int n 1 += n $NUMBER$ * n $NUMBER$ ;
rank: 188
score: 99.46099175347223
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + n 1 ;
rank: 188
score: 99.43146110983456
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ; / * /
rank: 188
score: 99.41768215013587
patch: final long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 * $NUMBER$ . 0 ;
rank: 188
score: 99.39472198486328
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length n 1 ;
rank: 188
score: 99.35171329273896
patch: int n 1 n $NUMBER$ prod += n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 188
score: 99.2848892211914
patch: final int n 1 = n 1 ; int n 1 = n 1 ;
rank: 189
score: 99.41741071428571
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / 1 . 0 . 0 ;
rank: 189
score: 99.39467366536458
patch: final Object n 1 = n 1 * n $NUMBER$ ;
rank: 189
score: 99.37014931126645
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ * 1 . 0 ;
rank: 189
score: 99.35140991210938
patch: final final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 189
score: 99.31898716517857
patch: final int n $NUMBER$ n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 189
score: 99.284423828125
patch: final Integer n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 190
score: 99.45893297697368
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / $NUMBER$ . 0 ;
rank: 190
score: 99.43114516314338
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . false ;
rank: 190
score: 99.41737583705357
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 : 0 ;
rank: 190
score: 99.39457872178819
patch: final double n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ * n $NUMBER$ ;
rank: 190
score: 99.39457194010417
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ + 0 $NUMBER$ ;
rank: 190
score: 99.350634765625
patch: final int n 1 n $NUMBER$ prod = 0 * n $NUMBER$ $NUMBER$ ;
rank: 190
score: 99.31889997209821
patch: / * final int n 1 = n 1 * n $NUMBER$ ;
rank: 190
score: 99.28426106770833
patch: final Integer n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 191
score: 99.45802307128906
patch: / * int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 191
score: 99.41714332217262
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 192
score: 99.42971622242646
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . true ;
rank: 192
score: 99.41650390625
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ % n $NUMBER$ . 0 ;
rank: 192
score: 99.39417221966912
patch: double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 192
score: 99.36921772203948
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 / $NUMBER$ . 0 ;
rank: 192
score: 99.34993743896484
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * * n $NUMBER$ ;
rank: 192
score: 99.31702473958333
patch: final int n 1 = n 1 * n $NUMBER$ + $NUMBER$ $NUMBER$ ;
rank: 192
score: 99.2836555032169
patch: final int n $NUMBER$ = n 1 ; final int n $NUMBER$ = n 1 ;
rank: 193
score: 99.41612659801136
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * n 1 . 0 . 0 ;
rank: 193
score: 99.39360894097223
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 * n 1 ;
rank: 193
score: 99.39338764391448
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ { 0 $NUMBER$ } ;
rank: 193
score: 99.36888427734375
patch: return n 1 * n 1 * ( n 1 + n $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 193
score: 99.34974580652573
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ - n $NUMBER$ * n $NUMBER$ ;
rank: 193
score: 99.3160869891827
patch: final int n 1 = n 1 + n 1 $NUMBER$ ;
rank: 194
score: 99.41593070652173
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 : $NUMBER$ . $NUMBER$ ;
rank: 194
score: 99.40610080295139
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ $NUMBER$ ;
rank: 194
score: 99.39342543658088
patch: double n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 194
score: 99.36846602590461
patch: return n 1 * ( n $NUMBER$ + n $NUMBER$ + 1 ) / $NUMBER$ . 0 ;
rank: 194
score: 99.34942626953125
patch: final int n 1 contains = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 194
score: 99.31602376302084
patch: final long n 1 = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 194
score: 99.282958984375
patch: final int n 1 = n $NUMBER$ ; final float n 1 = n $NUMBER$ ;
rank: 195
score: 99.45418972439236
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 % n 1 ;
rank: 195
score: 99.42912292480469
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ; / /
rank: 195
score: 99.41535387541118
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 + $NUMBER$ . 0 ;
rank: 195
score: 99.39289936266448
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . iterator n 1 ;
rank: 195
score: 99.36837948069854
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ >> $NUMBER$ ;
rank: 195
score: 99.34939575195312
patch: final int n 1 : n 1 * n $NUMBER$ ;
rank: 195
score: 99.314306640625
patch: final int n $NUMBER$ = n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 196
score: 99.45369720458984
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$
rank: 196
score: 99.41517857142857
patch: final long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ * $NUMBER$ . 0 ;
rank: 196
score: 99.34904928768383
patch: final int n 1 n $NUMBER$ prod = null * n $NUMBER$ * n $NUMBER$ ;
rank: 196
score: 99.31375558035714
patch: final int n 1 = n 1 * $NUMBER$ * n $NUMBER$ ;
rank: 196
score: 99.28143717447917
patch: final int n 1 n $NUMBER$ prod = n 1 : n $NUMBER$ ;
rank: 197
score: 99.42824300130208
patch: final Integer n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 197
score: 99.41438432173295
patch: final int calculate CaMeL Asymptotic CaMeL P CaMeL Value ( Umin , n 1 ) ;
rank: 197
score: 99.39171006944444
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . n $NUMBER$ + n $NUMBER$ ;
rank: 197
score: 99.34864044189453
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ; }
rank: 197
score: 99.27984978170956
patch: final int n $NUMBER$ = n 1 ; final int n 1 = n $NUMBER$ ;
rank: 198
score: 99.42817957261029
patch: final / * int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 198
score: 99.4143399325284
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 + n 1 . 0 ;
rank: 198
score: 99.40431213378906
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ . 0 ;
rank: 198
score: 99.39162726151316
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ + 0 . $NUMBER$ ;
rank: 198
score: 99.36702234604779
patch: final int n 1 [ ] = n 1 * n 1 * n $NUMBER$ ;
rank: 198
score: 99.34798990885416
patch: final synchronized n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 198
score: 99.31216195913461
patch: final int n 1 n $NUMBER$ prod = n 1 $NUMBER$ ;
rank: 199
score: 99.45277806332237
patch: final double n 1 n $NUMBER$ prod = n 1 * ( n 1 + n $NUMBER$ )
rank: 199
score: 99.42796495225694
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * $NUMBER$ . 0 ;
rank: 199
score: 99.41374860491071
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 - $NUMBER$ ;
rank: 199
score: 99.3914306640625
patch: final int n 1 n $NUMBER$ prod = ( int ) n $NUMBER$ ;
rank: 199
score: 99.39076063368056
patch: final int n 1 = n 1 * n $NUMBER$ + n $NUMBER$ + n $NUMBER$ ;
rank: 199
score: 99.347900390625
patch: final boolean n 1 = n 1 * n $NUMBER$ ;
rank: 200
score: 99.45232833059211
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ 1 ;
rank: 200
score: 99.427880859375
patch: final float n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 200
score: 99.41351873224431
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 1 . 0 ;
rank: 200
score: 99.4031623391544
patch: final long n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 200
score: 99.39138793945312
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ . max ;
rank: 200
score: 99.39063218060662
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ + n 1 ;
rank: 200
score: 99.34773763020833
patch: final float n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 200
score: 99.31126302083334
patch: final int n 1 = n 1 = n 1 * n $NUMBER$ ;
rank: 201
score: 99.42770046657986
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . ( ) ;
rank: 201
score: 99.41306374289773
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 201
score: 99.39087592230902
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . max 1 ;
rank: 201
score: 99.39061781939338
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ + 1 ;
rank: 201
score: 99.36522759331598
patch: final int n 1 n $NUMBER$ prod = n 1 / n 1 * n $NUMBER$ ;
rank: 201
score: 99.34768497242646
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ - n $NUMBER$ * $NUMBER$ ;
rank: 201
score: 99.31050931490384
patch: final int n 1 = n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 201
score: 99.27905991498162
patch: final int n 1 = n $NUMBER$ ; final String n $NUMBER$ = n 1 ;
rank: 202
score: 99.42667882582721
patch: final int n 1 n $NUMBER$ prod = n 1 * this . n $NUMBER$ ;
rank: 202
score: 99.41296968005952
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 : $NUMBER$ . 0 ;
rank: 202
score: 99.40226236979167
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ 1 . 0 ;
rank: 202
score: 99.34766343060662
patch: final final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 202
score: 99.3099365234375
patch: final int n 1 = n 1 - n 1 ;
rank: 202
score: 99.27843424479167
patch: final int n 1 = n $NUMBER$ ; n $NUMBER$ = n $NUMBER$ ;
rank: 203
score: 99.45113975123355
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 203
score: 99.390380859375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . length $NUMBER$ ;
rank: 203
score: 99.39030905330883
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ + n $NUMBER$ ;
rank: 203
score: 99.34760598575367
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * min ;
rank: 203
score: 99.30958909254808
patch: final int n 1 = n $NUMBER$ 1 * n $NUMBER$ ;
rank: 203
score: 99.27763097426471
patch: final int n 1 n $NUMBER$ prod = n 1 . ( n 1 ) ;
rank: 204
score: 99.42580997242646
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 ; / /
rank: 204
score: 99.4124820106908
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * n 1 . 0 ;
rank: 204
score: 99.40045166015625
patch: final int n 1 n $NUMBER$ prod = n 1 + n 1 * n $NUMBER$ ;
rank: 204
score: 99.38987972861842
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ == 0 ? 1 : n $NUMBER$ ;
rank: 204
score: 99.36477481617646
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n 1 * n 1 ;
rank: 204
score: 99.34658377511161
patch: final int n 1 n $NUMBER$ prod = $STRING$ * n $NUMBER$ ;
rank: 204
score: 99.30930873325893
patch: final int n 1 = n 1 $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 204
score: 99.2775634765625
patch: final int n 1 = n $NUMBER$ ; n 1 = n $NUMBER$ ;
rank: 205
score: 99.4501888877467
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ $NUMBER$ ;
rank: 205
score: 99.42523193359375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ / n 1 ;
rank: 205
score: 99.41236413043478
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 % $NUMBER$ . 0 ;
rank: 205
score: 99.39907657398896
patch: final long n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ ;
rank: 205
score: 99.3901008157169
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ + n $NUMBER$ ;
rank: 205
score: 99.3646599264706
patch: final int n $NUMBER$ n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 205
score: 99.30869954427084
patch: final long n 1 = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 205
score: 99.27749399038461
patch: final int n $NUMBER$ 1 = n 1 * n $NUMBER$ ;
rank: 206
score: 99.4494564658717
patch: final final int n 1 n $NUMBER$ prod = n 1 * n 1 * n 1 ;
rank: 206
score: 99.4118896484375
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 : $NUMBER$ . 0 ;
rank: 206
score: 99.39006491268383
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 + $NUMBER$ ;
rank: 206
score: 99.38923725328948
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . iterator ( ) ;
rank: 206
score: 99.34619140625
patch: final int n 1 n $NUMBER$ prod -= n $NUMBER$ * n $NUMBER$ ;
rank: 206
score: 99.30760609019886
patch: int n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 206
score: 99.27745056152344
patch: final int n 1 = n 1 ; final int n 1 = 0 ;
rank: 207
score: 99.44938829210069
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ $NUMBER$ ;
rank: 207
score: 99.41173735119048
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 : n 1 . 0 ;
rank: 207
score: 99.39830186631944
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ $NUMBER$ . 0 ;
rank: 207
score: 99.36433628627232
patch: return n 1 * n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 207
score: 99.34548950195312
patch: final int n 1 n $NUMBER$ prod += n 1 * n $NUMBER$ $NUMBER$ ;
rank: 207
score: 99.27736529181985
patch: final int n 1 = n $NUMBER$ ; final Integer n 1 = n $NUMBER$ ;
rank: 208
score: 99.41156296502976
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 + 1 ) . 0 ;
rank: 208
score: 99.38883463541667
patch: final int n 1 n $NUMBER$ prod = n 1 - n $NUMBER$ + n $NUMBER$ ;
rank: 208
score: 99.34433162913604
patch: final int n 1 = n 1 * 0 * n $NUMBER$ * n $NUMBER$ ;
rank: 208
score: 99.30628255208333
patch: double n 1 = n 1 * n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 209
score: 99.44927978515625
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . - $NUMBER$ ;
rank: 209
score: 99.41154679008152
patch: final int n 1 n $NUMBER$ prod = ( Umin - n $NUMBER$ + 1 ) / $NUMBER$ . 0 ;
rank: 209
score: 99.36376190185547
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; /
rank: 209
score: 99.3442741842831
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * false ;
rank: 209
score: 99.30582682291667
patch: final int n 1 , n 1 , n $NUMBER$ , n $NUMBER$ ;
rank: 210
score: 99.42357720269098
patch: final Object n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ;
rank: 210
score: 99.4111095610119
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 210
score: 99.38767903645834
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ & n $NUMBER$ ;
rank: 210
score: 99.30577799479167
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ / n $NUMBER$ ;
rank: 211
score: 99.42323303222656
patch: final int n 1 n $NUMBER$ prod = n 1 * * n 1 ;
rank: 211
score: 99.41109890407986
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ $NUMBER$ ;
rank: 211
score: 99.39653463924633
patch: final int n 1 = n 1 * n 1 * n 1 . 0 ;
rank: 211
score: 99.38788519965277
patch: final float n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 ;
rank: 211
score: 99.3876091452206
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . min $NUMBER$
rank: 211
score: 99.36359514508929
patch: final int n 1 = Fast CaMeL Math . sqrt ( n 1 * n $NUMBER$ + 1 ) ;
rank: 211
score: 99.3425537109375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ *
rank: 211
score: 99.30550711495536
patch: final int n 1 = n 1 * n $NUMBER$ n $NUMBER$ ;
rank: 211
score: 99.2762680053711
patch: int n 1 = n $NUMBER$ ; final int n $NUMBER$ = n 1 ;
rank: 212
score: 99.41030738467262
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ % $NUMBER$ . 0 ;
rank: 212
score: 99.38779703776042
patch: final int n 1 ; n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 212
score: 99.36310778166118
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ - $NUMBER$ . 0 ;
rank: 212
score: 99.3420769186581
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 212
score: 99.30547626201923
patch: final int n $NUMBER$ = n 1 + n $NUMBER$ $NUMBER$ ;
rank: 212
score: 99.2760009765625
patch: final int n 1 = n $NUMBER$ ; final String n 1 = n 1 ;
rank: 213
score: 99.41022338867188
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod . 0 ;
rank: 213
score: 99.39506022135417
patch: final int n 1 n $NUMBER$ prod = n 1 * * n $NUMBER$ . 0 ;
rank: 213
score: 99.38730037913604
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; try {
rank: 213
score: 99.36275809151786
patch: final int n 1 n $NUMBER$ prod = 1 * n $NUMBER$ ;
rank: 213
score: 99.34161017922794
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ $NUMBER$ $NUMBER$ ;
rank: 213
score: 99.304833984375
patch: final int n $NUMBER$ = n $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 213
score: 99.27594353170956
patch: final float n 1 = n 1 ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 214
score: 99.44723690257354
patch: / * final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 214
score: 99.42265768612133
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ / n 1 ;
rank: 214
score: 99.41021437872024
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 / $NUMBER$ ;
rank: 214
score: 99.38727165670956
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . min ;
rank: 214
score: 99.36236979166667
patch: final int n 1 = n 1 / n $NUMBER$ * n $NUMBER$ ;
rank: 214
score: 99.34123992919922
patch: final int n 1 = n 1 * ( n $NUMBER$ * n $NUMBER$ ;
rank: 214
score: 99.30458170572916
patch: int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 215
score: 99.42216222426471
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 / 0 ;
rank: 215
score: 99.40980834960938
patch: final final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 215
score: 99.39423285590277
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ 0 . 0 ;
rank: 215
score: 99.38700786389802
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 215
score: 99.30455671037946
patch: int n 1 = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 215
score: 99.27477010091145
patch: final Integer n 1 n $NUMBER$ prod = n 1 ;
rank: 216
score: 99.4097012606534
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . * $NUMBER$ . 0 ;
rank: 216
score: 99.38673909505208
patch: final int n 1 n $NUMBER$ prod = ( int ) n $NUMBER$ * n $NUMBER$ ;
rank: 216
score: 99.38673400878906
patch: final int n 1 n $NUMBER$ prod = new int [ n $NUMBER$ ] ;
rank: 216
score: 99.34089660644531
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ + n $NUMBER$ ;
rank: 217
score: 99.44672987196181
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 , n $NUMBER$ 1
rank: 217
score: 99.40958658854167
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 : $NUMBER$ ;
rank: 217
score: 99.38669162326389
patch: final int n 1 n $NUMBER$ prod = ( double ) n 1 * n $NUMBER$ ;
rank: 217
score: 99.36067708333333
patch: final int n 1 = n 1 * n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 217
score: 99.3407211303711
patch: final int n 1 = n $NUMBER$ * ( n $NUMBER$ * n $NUMBER$ ;
rank: 217
score: 99.30422738882211
patch: final int n 1 $NUMBER$ = n 1 * n 1 ;
rank: 217
score: 99.27426147460938
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; return n 1 ;
rank: 218
score: 99.40949358258929
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 * n 1 . 0 ;
rank: 218
score: 99.3406120749081
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ $NUMBER$ ;
rank: 218
score: 99.30337524414062
patch: int n 1 = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 218
score: 99.27421569824219
patch: int n 1 = n 1 ; final int n 1 = n $NUMBER$ ;
rank: 219
score: 99.44639828330592
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ) * n $NUMBER$ ;
rank: 219
score: 99.4215316772461
patch: final int n 1 n $NUMBER$ prod = n 1 ; / / * /
rank: 219
score: 99.40948807565789
patch: final int n 1 n $NUMBER$ prod = n 1 . 0 * n 1 . 0 ;
rank: 219
score: 99.3919677734375
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 219
score: 99.38613712086396
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length + n $NUMBER$ ;
rank: 219
score: 99.38499540441177
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 + 1 ;
rank: 219
score: 99.35971069335938
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ = n $NUMBER$ . 0 ;
rank: 219
score: 99.3399658203125
patch: final int n 1 = n 1 * n $NUMBER$ * 0 ;
rank: 219
score: 99.30336350661058
patch: final int n 1 n $NUMBER$ prod = n 1 ) ;
rank: 220
score: 99.40924944196429
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / 1 * $NUMBER$ . 0 ;
rank: 220
score: 99.38594563802083
patch: final boolean n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 220
score: 99.383984375
patch: final int n 1 n $NUMBER$ prod = Double . MAX _ VALUE ;
rank: 220
score: 99.35883924696181
patch: final int n 1 = n 1 * n 1 * n 1 * n $NUMBER$ ;
rank: 220
score: 99.30284705528847
patch: final int n 1 , = n 1 * n $NUMBER$ ;
rank: 221
score: 99.4456787109375
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : $NUMBER$ ;
rank: 221
score: 99.42051188151042
patch: final final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / /
rank: 221
score: 99.4086681547619
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 . $NUMBER$ ;
rank: 221
score: 99.38572933799342
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . length * 0 ;
rank: 221
score: 99.38346593520221
patch: final int n 1 n $NUMBER$ prod = n 1 - n $NUMBER$ * $NUMBER$ ;
rank: 221
score: 99.35859231387867
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ - $NUMBER$ ;
rank: 221
score: 99.27365291819854
patch: final int n 1 = n 1 ; final Integer n 1 = n 1 ;
rank: 222
score: 99.44556427001953
patch: / * int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 222
score: 99.40840076264881
patch: return calculate CaMeL Asymptotic CaMeL P CaMeL Value ( n 1 , n 1 ) ;
rank: 222
score: 99.39139229910714
patch: final double n 1 = n 1 * n 1 . 0 ;
rank: 222
score: 99.38551240808823
patch: final int n 1 n $NUMBER$ prod = new int n 1 * n $NUMBER$ ;
rank: 222
score: 99.27351648667279
patch: final int n 1 = n $NUMBER$ ; final int n $NUMBER$ < n $NUMBER$ ;
rank: 223
score: 99.40834263392857
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ * $NUMBER$ . 0 ;
rank: 223
score: 99.38483344184027
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + - $NUMBER$ ;
rank: 223
score: 99.35764031661184
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $STRING$ . 0 ;
rank: 223
score: 99.33942413330078
patch: int [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 223
score: 99.30201939174107
patch: double n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 223
score: 99.27325439453125
patch: final int n 1 [ ] = n $NUMBER$ * n $NUMBER$ ;
rank: 224
score: 99.44502981085526
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 224
score: 99.40810759171195
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 . $NUMBER$ . 0 ;
rank: 224
score: 99.39091491699219
patch: double n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ ;
rank: 224
score: 99.38472065172698
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . clone ( ) ;
rank: 224
score: 99.35753631591797
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 1 ;
rank: 224
score: 99.30135091145833
patch: final double n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 224
score: 99.27243939568015
patch: final int n 1 = n $NUMBER$ ; final Integer n $NUMBER$ = n 1 ;
rank: 225
score: 99.407958984375
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 . 0 . 0 ;
rank: 225
score: 99.39055633544922
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ ;
rank: 225
score: 99.38455539279514
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ & n $NUMBER$ * n $NUMBER$ ;
rank: 225
score: 99.38225959329044
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ + $NUMBER$ ;
rank: 225
score: 99.33845658735795
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 225
score: 99.29994553786058
patch: final int n 1 1 = n 1 + n $NUMBER$ ;
rank: 225
score: 99.2719970703125
patch: final void n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 226
score: 99.40785435267857
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 + $NUMBER$ . 0 ;
rank: 226
score: 99.38933249080883
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 226
score: 99.384375
patch: final int < String > n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 226
score: 99.357421875
patch: final int n 1 = n 1 * n $NUMBER$ / $NUMBER$ . 0 ;
rank: 226
score: 99.33807732077206
patch: final int n 1 n $NUMBER$ prod += 0 * n $NUMBER$ * n $NUMBER$ ;
rank: 226
score: 99.2997314453125
patch: final int n 1 n $NUMBER$ prod = n 1 >> n $NUMBER$ ;
rank: 227
score: 99.41816980698529
patch: final String n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 227
score: 99.38388543379934
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ ) * $NUMBER$ ;
rank: 227
score: 99.3790283203125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ; ;
rank: 227
score: 99.35724555121527
patch: final int n 1 n $NUMBER$ prod = Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 227
score: 99.33743722098214
patch: final int n 1 = 0 * n $NUMBER$ * n $NUMBER$ ;
rank: 227
score: 99.29909842354911
patch: final int n 1 , $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 227
score: 99.27190803079044
patch: final int n 1 n $NUMBER$ prod = Math . n 1 * n $NUMBER$ ;
rank: 228
score: 99.44407743566177
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$
rank: 228
score: 99.40782581676136
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ % n 1 . 0 ;
rank: 228
score: 99.38877240349265
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 * $NUMBER$ ;
rank: 228
score: 99.38385331003289
patch: final String n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . length ( ) ;
rank: 228
score: 99.299072265625
patch: final int n 1 n $NUMBER$ prod = 0 * n 1 ;
rank: 229
score: 99.44361707899306
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ , n $NUMBER$ $NUMBER$
rank: 229
score: 99.41762966579861
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * * $NUMBER$ ;
rank: 229
score: 99.40760387073864
patch: final double calculate CaMeL Asymptotic CaMeL P CaMeL Value ( Umin , n $NUMBER$ ) ;
rank: 229
score: 99.3837890625
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 . $NUMBER$ - n $NUMBER$ ;
rank: 229
score: 99.37856158088235
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ / $NUMBER$ ;
rank: 229
score: 99.2988525390625
patch: final int n $NUMBER$ = n 1 * n 1 + n $NUMBER$ ;
rank: 229
score: 99.27149454752605
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 230
score: 99.4164810180664
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * $NUMBER$ ;
rank: 230
score: 99.40744947350544
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 : 0 . 0 ;
rank: 230
score: 99.38351101345486
patch: final boolean n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 230
score: 99.35688862047698
patch: final int n 1 = Math . sqrt ( n $NUMBER$ * n $NUMBER$ + 1 ) ;
rank: 230
score: 99.33642578125
patch: final int n 1 += n 1 * n $NUMBER$ ;
rank: 230
score: 99.29754638671875
patch: final int n 1 = n $NUMBER$ / n $NUMBER$ ;
rank: 231
score: 99.40727306547619
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 . $NUMBER$ ;
rank: 231
score: 99.38654242621527
patch: final double n 1 n $NUMBER$ prod = n 1 . n 1 * n $NUMBER$ ;
rank: 231
score: 99.38339072779605
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . max $NUMBER$ } ;
rank: 231
score: 99.35674085115132
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 * $NUMBER$ . 0 ;
rank: 231
score: 99.29710286458334
patch: final int n $NUMBER$ n $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 231
score: 99.27082824707031
patch: final int [ ] [ ] n 1 = n 1 * n $NUMBER$ ;
rank: 232
score: 99.41620551215277
patch: final int n 1 n $NUMBER$ prod = n 1 * ( int ) n $NUMBER$ ;
rank: 232
score: 99.38612994025735
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ n 1 ;
rank: 232
score: 99.35654994419643
patch: final int n 1 = Fast CaMeL Math . sqrt ( n 1 + n $NUMBER$ + 1 ) ;
rank: 232
score: 99.336181640625
patch: final int n 1 += n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 232
score: 99.29696219308036
patch: return n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 232
score: 99.27024931066177
patch: final int n $NUMBER$ = n $NUMBER$ ; final int n 1 = n $NUMBER$ ;
rank: 233
score: 99.415771484375
patch: final int n 1 n $NUMBER$ prod = n 1 * / n 1 ;
rank: 233
score: 99.40708618164062
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 * n 1 ;
rank: 233
score: 99.33615347055289
patch: final int n 1 equals = n $NUMBER$ * n $NUMBER$ ;
rank: 233
score: 99.29671223958333
patch: final int n 1 = n 1 - n $NUMBER$ * n $NUMBER$ ;
rank: 233
score: 99.27024332682292
patch: final double n 1 = n $NUMBER$ * n 1 ;
rank: 234
score: 99.44303171258224
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ) ;
rank: 234
score: 99.40670340401786
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 + $NUMBER$ ;
rank: 234
score: 99.38511827256944
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ . 0 ;
rank: 234
score: 99.38235812717014
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ^ n $NUMBER$ ;
rank: 234
score: 99.37474867876838
patch: float n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 234
score: 99.35635375976562
patch: final double n 1 = n 1 * n $NUMBER$ * $NUMBER$ . 0 ;
rank: 234
score: 99.33609008789062
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * - n $NUMBER$ ;
rank: 234
score: 99.29590782752403
patch: final int n 1 1 = n 1 * n 1 ;
rank: 234
score: 99.26968204273896
patch: final String n 1 = n $NUMBER$ ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 235
score: 99.41529083251953
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * 0 ;
rank: 235
score: 99.38473171657986
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ . 0 ;
rank: 235
score: 99.37434387207031
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; ;
rank: 235
score: 99.35600729549633
patch: final int n 1 = n 1 * ( n 1 + n $NUMBER$ ) ;
rank: 235
score: 99.33490753173828
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ / n $NUMBER$ ;
rank: 235
score: 99.29556477864584
patch: final int n 1 1 n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 235
score: 99.26953887939453
patch: final int [ ] n $NUMBER$ = new int n 1 * n $NUMBER$ ;
rank: 236
score: 99.40572684151786
patch: return calculate CaMeL Asymptotic CaMeL P CaMeL Value ( n 1 , n $NUMBER$ ) ;
rank: 236
score: 99.38426971435547
patch: double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 236
score: 99.38204193115234
patch: final int n 1 n $NUMBER$ prod = ( n 1 + n $NUMBER$ ;
rank: 236
score: 99.37412806919643
patch: double n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 236
score: 99.35594075520834
patch: final int n 1 n $NUMBER$ prod += n 1 * n 1 ;
rank: 236
score: 99.33490349264706
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ * n $NUMBER$ * 0 ;
rank: 236
score: 99.2954852764423
patch: final int n 1 = n 1 $NUMBER$ / n $NUMBER$ ;
rank: 237
score: 99.38318634033203
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . $NUMBER$ ;
rank: 237
score: 99.38101999383224
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ == $NUMBER$ ? $NUMBER$ : n $NUMBER$ ;
rank: 237
score: 99.35492553710938
patch: return Fast CaMeL Math . sqrt ( n 1 * n $NUMBER$ + n $NUMBER$ + 1 ) ;
rank: 237
score: 99.294873046875
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ - n $NUMBER$ ;
rank: 237
score: 99.2688876065341
patch: final int [ ] n $NUMBER$ = n 1 ;
rank: 238
score: 99.44076717601104
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % $NUMBER$ ;
rank: 238
score: 99.4145736694336
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 238
score: 99.38313802083333
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 * n 1 ;
rank: 238
score: 99.38075358072916
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . n 1 ;
rank: 238
score: 99.37380981445312
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ + $NUMBER$ ;
rank: 238
score: 99.35491622121711
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ = 0 . 0 ;
rank: 238
score: 99.33441162109375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ $NUMBER$ ;
rank: 238
score: 99.29379069010416
patch: final int n 1 = n 1 * n 1 + n 1 ;
rank: 238
score: 99.26871984145221
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 + 0 ;
rank: 239
score: 99.4399478310033
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ % $NUMBER$ ;
rank: 239
score: 99.40421549479167
patch: final int n 1 = n 1 * ( n 1 + n 1 ) / $NUMBER$ . 0 ;
rank: 239
score: 99.38018798828125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . $NUMBER$ ;
rank: 239
score: 99.37357823988971
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + 1 ;
rank: 239
score: 99.33430989583333
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * max $NUMBER$ ;
rank: 239
score: 99.29326985677083
patch: final int n 1 , n $NUMBER$ = n $NUMBER$ * n 1 ;
rank: 239
score: 99.26852596507354
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; if ( n $NUMBER$ ;
rank: 240
score: 99.4125617532169
patch: final float n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 240
score: 99.40311104910714
patch: final double Umin = n 1 * ( n 1 + n $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 240
score: 99.37997436523438
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . equals n 1 ;
rank: 240
score: 99.37310791015625
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 ; ;
rank: 240
score: 99.35418701171875
patch: final int n 1 n $NUMBER$ prod = n 1 - n 1 * n $NUMBER$ ;
rank: 240
score: 99.33409705528847
patch: final final int n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 240
score: 99.29276529947917
patch: / int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 241
score: 99.41233317057292
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . * $NUMBER$ ;
rank: 241
score: 99.40298316592262
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 + n 1 . 0 ;
rank: 241
score: 99.38266330295139
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ 0 . 0 ;
rank: 241
score: 99.37985711348684
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * 0 + 0 ;
rank: 241
score: 99.35416412353516
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 1 ;
rank: 241
score: 99.33379049862133
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ * 1 ;
rank: 241
score: 99.26834869384766
patch: final int [ ] [ ] n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 242
score: 99.41181776258681
patch: final / * final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 242
score: 99.40235595703125
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 / $NUMBER$ . 0 ;
rank: 242
score: 99.37943522135417
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . iterator ( ) . length ;
rank: 242
score: 99.29225376674107
patch: final int n 1 = n 1 * n $NUMBER$ $NUMBER$ * ;
rank: 242
score: 99.26829528808594
patch: int n 1 = n 1 ; final int n $NUMBER$ = n 1 ;
rank: 243
score: 99.437646484375
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 .
rank: 243
score: 99.40191040039062
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ 0 . 0 ;
rank: 243
score: 99.35311126708984
patch: final int n 1 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 243
score: 99.33355712890625
patch: final int n 1 n $NUMBER$ prod = n 1 * 1 * $NUMBER$ ;
rank: 243
score: 99.2911376953125
patch: final int n 1 , n $NUMBER$ 1 , n $NUMBER$ ;
rank: 243
score: 99.26813821231617
patch: final int n 1 = n $NUMBER$ ; final float n $NUMBER$ = n 1 ;
rank: 244
score: 99.4099480124081
patch: final int n 1 n $NUMBER$ prod = n 1 * this . n 1 ;
rank: 244
score: 99.40158420138889
patch: long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 244
score: 99.37777549342105
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n $NUMBER$ * $NUMBER$ ) ;
rank: 244
score: 99.35294382195724
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ { 0 . 0 ;
rank: 244
score: 99.2910625751202
patch: final int n 1 = n 1 * n $NUMBER$ / ;
rank: 245
score: 99.43648488898026
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + $NUMBER$ . 0 ;
rank: 245
score: 99.40149456521739
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ n $NUMBER$ . 0 . 0 ;
rank: 245
score: 99.377685546875
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ . length ;
rank: 245
score: 99.37168974034927
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$
rank: 245
score: 99.33252716064453
patch: final int n 1 length = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 245
score: 99.2908184344952
patch: final int n 1 = n 1 - n $NUMBER$ $NUMBER$ ;
rank: 246
score: 99.40127081620066
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ + $NUMBER$ ;
rank: 246
score: 99.37749837239583
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . iterator ( ;
rank: 246
score: 99.29077962239583
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ + n 1 ;
rank: 246
score: 99.26689147949219
patch: final int n 1 = n $NUMBER$ ; int n 1 = n 1 ;
rank: 247
score: 99.40950012207031
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . ;
rank: 247
score: 99.40125042459239
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 * $NUMBER$ . 1 ;
rank: 247
score: 99.38078962053571
patch: final int n 1 = n 1 * n 1 . 0 ;
rank: 247
score: 99.377392578125
patch: final int < int > n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 247
score: 99.3314208984375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ - n $NUMBER$ * 1 ;
rank: 248
score: 99.43520636307566
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ * $NUMBER$ ;
rank: 248
score: 99.40092136548913
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 n $NUMBER$ . 0 ;
rank: 248
score: 99.3802490234375
patch: final double n 1 = n 1 * n $NUMBER$ * n 1 . 0 ;
rank: 248
score: 99.37725151909723
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 248
score: 99.37046185661765
patch: int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 248
score: 99.35206604003906
patch: final int n 1 -- = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 248
score: 99.33119553786058
patch: final int n 1 : = n 1 * n $NUMBER$ ;
rank: 248
score: 99.289794921875
patch: final long n 1 = n 1 * n $NUMBER$ * n 1 ;
rank: 249
score: 99.43484933035714
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1
rank: 249
score: 99.4089714499081
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * true ;
rank: 249
score: 99.40085320723684
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ + $NUMBER$ ;
rank: 249
score: 99.35189383370536
patch: final int n 1 = n 1 * n $NUMBER$ - $NUMBER$ ;
rank: 249
score: 99.28925030048077
patch: final int n $NUMBER$ = n 1 1 * n $NUMBER$ ;
rank: 250
score: 99.40050048828125
patch: final long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n 1 . 0 ;
rank: 250
score: 99.36817169189453
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ + 1 ;
rank: 250
score: 99.35133361816406
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 ; /
rank: 250
score: 99.33076171875
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; / / /
rank: 250
score: 99.28920491536458
patch: final int n $NUMBER$ = n 1 / n $NUMBER$ ;
rank: 250
score: 99.26592658547794
patch: final String n 1 = n 1 ; final int n $NUMBER$ = n 1 ;
rank: 251
score: 99.43306692023026
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ * $NUMBER$ ;
rank: 251
score: 99.40022583007813
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % n $NUMBER$ . 0 ;
rank: 251
score: 99.37984212239583
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * . 0 ;
rank: 251
score: 99.37640739889706
patch: final int [ ] n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 251
score: 99.35078357514881
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 251
score: 99.33008575439453
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ] * n 1 ;
rank: 251
score: 99.28887532552083
patch: final long n 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 251
score: 99.26513671875
patch: final int n 1 = n 1 ; n $NUMBER$ = n 1 ;
rank: 252
score: 99.43267501027961
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ) / n $NUMBER$ ;
rank: 252
score: 99.40019298735119
patch: final int n 1 n $NUMBER$ prod = ( Umin - n $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 252
score: 99.36723058363971
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ / $NUMBER$ ;
rank: 252
score: 99.3295669555664
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ $NUMBER$ $NUMBER$ ;
rank: 252
score: 99.26490020751953
patch: final int n 1 = n 1 ; for n $NUMBER$ = n $NUMBER$ ;
rank: 253
score: 99.43263003700658
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 * n 1 )
rank: 253
score: 99.40749782986111
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . / 0 ;
rank: 253
score: 99.39993286132812
patch: final int n 1 n $NUMBER$ prod = ( n 1 + 1 ) / $NUMBER$ . 0 ;
rank: 253
score: 99.36699884588069
patch: final int n 1 = n $NUMBER$ * $NUMBER$ ;
rank: 253
score: 99.32933044433594
patch: final final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 253
score: 99.28837890625
patch: final Double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 253
score: 99.26466369628906
patch: final int n 1 = n $NUMBER$ ; final int n $NUMBER$ = 0 ;
rank: 254
score: 99.43238589638158
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n 1 * $NUMBER$ ;
rank: 254
score: 99.40707576976104
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / 1 ;
rank: 254
score: 99.39940243675595
patch: final int Umin = n 1 * ( n 1 + n $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 254
score: 99.37624104817708
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ + - $NUMBER$ ;
rank: 254
score: 99.34977213541667
patch: final double n 1 = n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 254
score: 99.32926177978516
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 254
score: 99.28798828125
patch: final int n $NUMBER$ = n 1 + n $NUMBER$ * n $NUMBER$ ;
rank: 254
score: 99.2645622702206
patch: final String n 1 = n 1 ; final int n 1 = n $NUMBER$ ;
rank: 255
score: 99.43234432444854
patch: double n 1 n $NUMBER$ prod = n 1 * n 1 * n 1 ;
rank: 255
score: 99.39849562872024
patch: final double n 1 = n 1 * ( n 1 + n $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 255
score: 99.37571614583334
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ | n $NUMBER$ ;
rank: 255
score: 99.28717041015625
patch: final int n 1 , n $NUMBER$ = n $NUMBER$ ;
rank: 255
score: 99.26433563232422
patch: final int n 1 n $NUMBER$ prod 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 256
score: 99.43096602590461
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ 1 ;
rank: 256
score: 99.37566817434211
patch: final final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 256
score: 99.34942267922794
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 256
score: 99.32854352678571
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * 1 ;
rank: 256
score: 99.2643155184659
patch: int n 1 = n 1 * n 1 ;
rank: 257
score: 99.3983090049342
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 % $NUMBER$ . 0 ;
rank: 257
score: 99.3638054342831
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ - 1 ;
rank: 257
score: 99.34889131433823
patch: final int n 1 n $NUMBER$ prod = this . n 1 * n $NUMBER$ ;
rank: 257
score: 99.28555063100961
patch: final int n 1 $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 258
score: 99.40634987571023
patch: final int n 1 n $NUMBER$ prod = $STRING$ ;
rank: 258
score: 99.39825148809524
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 % $NUMBER$ ;
rank: 258
score: 99.36371721540179
patch: double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 258
score: 99.34862563189338
patch: final int n 1 = n 1 * ( n 1 * n $NUMBER$ ) ;
rank: 258
score: 99.3282111672794
patch: final int n 1 = n 1 * n $NUMBER$ * 0 * n $NUMBER$ ;
rank: 258
score: 99.28528645833333
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 258
score: 99.2640609741211
patch: int n 1 = n $NUMBER$ ; final int n 1 = n 1 ;
rank: 259
score: 99.40617101332721
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % 0 ;
rank: 259
score: 99.39781605113636
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod * 1 . 0 ;
rank: 259
score: 99.37527286305146
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ; try {
rank: 259
score: 99.348388671875
patch: final int n 1 ++ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 259
score: 99.32696892233456
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * false ;
rank: 259
score: 99.28528645833333
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ $NUMBER$ ;
rank: 259
score: 99.26357852711396
patch: final Integer n 1 = n 1 ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 260
score: 99.42919921875
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ % $NUMBER$ ;
rank: 260
score: 99.397705078125
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 . $NUMBER$ . 0 ;
rank: 260
score: 99.37835693359375
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * n $NUMBER$ ;
rank: 260
score: 99.36349051339286
patch: final int n 1 = n 1 * n $NUMBER$ - 1 ;
rank: 260
score: 99.34725748697916
patch: final int n 1 n $NUMBER$ prod = - 1 * n 1 ;
rank: 260
score: 99.32593536376953
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ n $NUMBER$ 1 ;
rank: 260
score: 99.26288604736328
patch: final int [ ] n $NUMBER$ n 1 = n 1 * n $NUMBER$ ;
rank: 261
score: 99.42918636924342
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * - n $NUMBER$ ;
rank: 261
score: 99.40606689453125
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 261
score: 99.3976189108456
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / 1 ;
rank: 261
score: 99.37828063964844
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . $NUMBER$ ;
rank: 261
score: 99.37465948807566
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ { n $NUMBER$ } ;
rank: 261
score: 99.32472229003906
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ * ;
rank: 261
score: 99.28494966947116
patch: final int n 1 = n 1 / n $NUMBER$ $NUMBER$ ;
rank: 262
score: 99.42897435238487
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ) / n 1 ;
rank: 262
score: 99.39756708559783
patch: final double n 1 n $NUMBER$ prod = ( Umin - n $NUMBER$ + 1 ) / $NUMBER$ . 0 ;
rank: 262
score: 99.37757025824652
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ . 0 ;
rank: 262
score: 99.37449428013393
patch: final double n $NUMBER$ n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 262
score: 99.36302185058594
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ) ;
rank: 262
score: 99.32470703125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ - n $NUMBER$ $NUMBER$ ;
rank: 262
score: 99.28483363560268
patch: final int n 1 $NUMBER$ = n 1 + n $NUMBER$ $NUMBER$ ;
rank: 262
score: 99.26280302159927
patch: final int n 1 = n 1 ; final Object n 1 = n $NUMBER$ ;
rank: 263
score: 99.40571424696181
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 ; / * /
rank: 263
score: 99.39754585597827
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 * $NUMBER$ . 0 . 0 ;
rank: 263
score: 99.28451102120536
patch: final int n 1 $NUMBER$ $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 263
score: 99.26217830882354
patch: final / * * / final int n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 264
score: 99.42759303042763
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ . 1 ;
rank: 264
score: 99.39749484592014
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 0 ;
rank: 264
score: 99.37345377604167
patch: final boolean n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 264
score: 99.36119169347427
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * n $NUMBER$
rank: 264
score: 99.34528350830078
patch: final int n 1 n $NUMBER$ prod ++ = n 1 * n 1 ;
rank: 264
score: 99.28418907752403
patch: final long n 1 = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 264
score: 99.26212310791016
patch: final int n 1 = n 1 ; for n 1 = n $NUMBER$ ;
rank: 265
score: 99.39743970788044
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 . 1 . 0 ;
rank: 265
score: 99.37340023643092
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 0 + 0 ;
rank: 265
score: 99.36103166852679
patch: final int n 1 = n 1 * $NUMBER$ + n $NUMBER$ ;
rank: 265
score: 99.34469943576389
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n $NUMBER$ * $NUMBER$ . 0 ;
rank: 265
score: 99.284033203125
patch: int n $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 265
score: 99.26144205729166
patch: final int n 1 = n 1 * n $NUMBER$ ; n 1 :
rank: 266
score: 99.39727492559524
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . $NUMBER$ . 0 ;
rank: 266
score: 99.3751220703125
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ 1 . 0 ;
rank: 266
score: 99.37336561414931
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * ( n 1 * $NUMBER$ ;
rank: 266
score: 99.36054543887867
patch: final double n $NUMBER$ n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 266
score: 99.28375651041667
patch: final int n 1 n $NUMBER$ prod = n 1 = n $NUMBER$ ;
rank: 266
score: 99.26091766357422
patch: final int n $NUMBER$ n $NUMBER$ n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 267
score: 99.39726257324219
patch: final int n 1 n $NUMBER$ prod = n 1 + $NUMBER$ . 0 ;
rank: 267
score: 99.37314181857639
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ << n $NUMBER$ * n $NUMBER$ ;
rank: 267
score: 99.28350360576923
patch: final int n 1 = n 1 1 / n $NUMBER$ ;
rank: 268
score: 99.42669998972039
patch: final final double n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ;
rank: 268
score: 99.39723802649456
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 * $NUMBER$ . $NUMBER$ ;
rank: 268
score: 99.37262926603618
patch: final int n 1 n $NUMBER$ prod = ( n 1 + 0 ) * n $NUMBER$ ;
rank: 268
score: 99.32310485839844
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 1 * 1 ;
rank: 268
score: 99.28275553385417
patch: final double n 1 = n 1 * n 1 + n $NUMBER$ ;
rank: 268
score: 99.2609001608456
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n 1 + n $NUMBER$ ;
rank: 269
score: 99.42641730057566
patch: final final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 269
score: 99.39671741832386
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ; / * /
rank: 269
score: 99.37444390190973
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ . $NUMBER$ ;
rank: 269
score: 99.37254574424342
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ . length ) ;
rank: 269
score: 99.3581901999081
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ * 1 ;
rank: 269
score: 99.34349300986842
patch: final int n 1 n $NUMBER$ prod = Math . sqrt ( n 1 * $NUMBER$ ) ;
rank: 269
score: 99.32288315716912
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * Math ;
rank: 269
score: 99.28236490885416
patch: final int n 1 , n 1 = n $NUMBER$ + n $NUMBER$ ;
rank: 270
score: 99.40393744574652
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 $NUMBER$ ;
rank: 270
score: 99.39658900669643
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ / $NUMBER$ . 0 ;
rank: 270
score: 99.37250832950367
patch: final int n 1 n $NUMBER$ prod [ ] = n 1 * n $NUMBER$ ;
rank: 270
score: 99.35784912109375
patch: final double n 1 = n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 270
score: 99.34339057074652
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ >> n $NUMBER$ ;
rank: 270
score: 99.32261657714844
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ 1 * n $NUMBER$ ;
rank: 270
score: 99.2822509765625
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ / n 1 ;
rank: 271
score: 99.42609606291118
patch: / * int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ;
rank: 271
score: 99.39647274925595
patch: final int n 1 = n $NUMBER$ / ( n 1 + n $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 271
score: 99.34297107514881
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ . 0 . 0 ;
rank: 271
score: 99.28098958333334
patch: final int n 1 , n 1 = n 1 / n $NUMBER$ ;
rank: 271
score: 99.26033289292279
patch: final int n 1 n $NUMBER$ prod = this . n $NUMBER$ * n $NUMBER$ ;
rank: 272
score: 99.37376493566177
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 272
score: 99.37178548177083
patch: final int n 1 n $NUMBER$ prod = ( int ) n 1 * n $NUMBER$ ;
rank: 272
score: 99.34258674172794
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n $NUMBER$ - n $NUMBER$ ;
rank: 272
score: 99.32239487591912
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ ; final
rank: 273
score: 99.42574270148026
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ . 1 ;
rank: 273
score: 99.3956882642663
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ % $NUMBER$ . 0 . 0 ;
rank: 273
score: 99.37143426192434
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + 0 . 0 ;
rank: 273
score: 99.3421271829044
patch: this . final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 273
score: 99.2803955078125
patch: final int n 1 n $NUMBER$ prod = n 1 ; ;
rank: 274
score: 99.42485608552632
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 / $NUMBER$ . 0 ;
rank: 274
score: 99.40284016927083
patch: final Long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 274
score: 99.39549560546875
patch: final int n 1 n $NUMBER$ prod = n 1 + n 1 * n 1 . 0 ;
rank: 274
score: 99.3733269186581
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 274
score: 99.37101665296052
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . iterator n $NUMBER$ ;
rank: 274
score: 99.34202665441177
patch: final int n $NUMBER$ n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 274
score: 99.32132161458334
patch: final int n 1 = n 1 * n $NUMBER$ * max $NUMBER$ ;
rank: 274
score: 99.27975260416666
patch: final int n 1 , n $NUMBER$ = n 1 + n 1 ;
rank: 274
score: 99.25985897288604
patch: final int n $NUMBER$ = n $NUMBER$ ; final int n $NUMBER$ = n 1 ;
rank: 275
score: 99.39529239430146
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 % $NUMBER$ ;
rank: 275
score: 99.37325032552083
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . n 1 ;
rank: 275
score: 99.37097886029412
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . length ;
rank: 275
score: 99.35442756204044
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 275
score: 99.32130432128906
patch: final int n 1 contains = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 275
score: 99.27967936197916
patch: final int n 1 = n $NUMBER$ * n 1 / n $NUMBER$ ;
rank: 275
score: 99.25980870863971
patch: final int n 1 = n 1 ; final int n $NUMBER$ < n 1 ;
rank: 276
score: 99.424072265625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ,
rank: 276
score: 99.39495294744319
patch: final double calculate CaMeL Asymptotic CaMeL P CaMeL Value ( n $NUMBER$ , n 1 ) ;
rank: 276
score: 99.37086888363487
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . min $NUMBER$ } ;
rank: 276
score: 99.35421549479166
patch: final int max 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 276
score: 99.34168294270833
patch: final int n 1 = n 1 / n 1 * n $NUMBER$ ;
rank: 276
score: 99.27941080729167
patch: final Integer n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 277
score: 99.39494018554687
patch: final long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ $NUMBER$ . 0 ;
rank: 277
score: 99.37081146240234
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . n $NUMBER$ ] ;
rank: 277
score: 99.27916666666667
patch: final int n 1 = n 1 * n $NUMBER$ % n $NUMBER$ ;
rank: 277
score: 99.25919342041016
patch: final int n 1 = n $NUMBER$ ; double n $NUMBER$ = n $NUMBER$ ;
rank: 278
score: 99.42381527549342
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ n $NUMBER$ ;
rank: 278
score: 99.40140787760417
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . n $NUMBER$ ;
rank: 278
score: 99.3948974609375
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod / 1 . 0 ;
rank: 278
score: 99.37202962239583
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % n $NUMBER$ ;
rank: 278
score: 99.37068256578948
patch: final int n 1 n $NUMBER$ prod = ( n $NUMBER$ * n $NUMBER$ . $NUMBER$ ) ;
rank: 278
score: 99.35264677159927
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ - 1 ;
rank: 278
score: 99.34115939670139
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 278
score: 99.32095540364584
patch: final String n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 278
score: 99.27895883413461
patch: final int n $NUMBER$ $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 278
score: 99.25918579101562
patch: final Integer n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 279
score: 99.42381527549342
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * 1 . 1 ;
rank: 279
score: 99.39472888764881
patch: final double n 1 n $NUMBER$ prod = ( Umin - n $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 279
score: 99.37040710449219
patch: try { int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 279
score: 99.35195025275735
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ - 1 ;
rank: 279
score: 99.32085822610294
patch: final int n 1 n $NUMBER$ prod += n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 279
score: 99.27887369791667
patch: final int n 1 , n $NUMBER$ = n 1 - n $NUMBER$ ;
rank: 279
score: 99.25901692708334
patch: final Integer n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 ;
rank: 280
score: 99.42330729166666
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 *
rank: 280
score: 99.39391479492187
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 1 ;
rank: 280
score: 99.37032277960526
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length n $NUMBER$ - n $NUMBER$ ;
rank: 280
score: 99.3515853881836
patch: final int n 1 = Math . min ( n 1 , n $NUMBER$ ;
rank: 280
score: 99.32058715820312
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 281
score: 99.42327117919922
patch: final final double n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 281
score: 99.40095071231617
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . null ;
rank: 281
score: 99.39377663352273
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ n $NUMBER$ . 0 ;
rank: 281
score: 99.37162272135417
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 . n 1 ;
rank: 281
score: 99.37030901227679
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ << $NUMBER$ ;
rank: 281
score: 99.34088134765625
patch: final int n 1 n $NUMBER$ prod = Math . sqrt ( n 1 * n $NUMBER$ ) ;
rank: 281
score: 99.32047271728516
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * 1 ;
rank: 281
score: 99.27836100260417
patch: final int n 1 = n 1 = n $NUMBER$ + n $NUMBER$ ;
rank: 282
score: 99.42310855263158
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ + n $NUMBER$ )
rank: 282
score: 99.40087890625
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 282
score: 99.37138097426471
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . n 1 ;
rank: 282
score: 99.3699951171875
patch: final String n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 282
score: 99.34071451822916
patch: final int n 1 = n 1 * n $NUMBER$ = n $NUMBER$ ;
rank: 282
score: 99.32003784179688
patch: final int n 1 length = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 282
score: 99.2580810546875
patch: final int n 1 = n 1 ; n 1 = n 1 ;
rank: 283
score: 99.42240182976974
patch: / * int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 283
score: 99.40078735351562
patch: final int n 1 n $NUMBER$ prod = n 1 * $STRING$ . 0 ;
rank: 283
score: 99.39250837053571
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 * $NUMBER$ . 0 ;
rank: 283
score: 99.36952311197916
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ + n $NUMBER$ ;
rank: 283
score: 99.35033461626838
patch: final int n 1 = Math . min ( n 1 , n 1 ) ;
rank: 283
score: 99.34053802490234
patch: final int n 1 n $NUMBER$ prod -- = n 1 * n $NUMBER$ ;
rank: 283
score: 99.31968778722427
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * 0 ;
rank: 283
score: 99.27728678385417
patch: final int n 1 = n 1 = n $NUMBER$ / n $NUMBER$ ;
rank: 283
score: 99.25799919577206
patch: final int n 1 = n $NUMBER$ ; final float n 1 = n 1 ;
rank: 284
score: 99.39239211309524
patch: final int n 1 = n 1 . 0 * ( n 1 + n $NUMBER$ ) / $NUMBER$ ;
rank: 284
score: 99.37122260199652
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * 0 . 0 ;
rank: 284
score: 99.35015510110294
patch: final int n 1 = n 1 * ( n $NUMBER$ * n $NUMBER$ ) ;
rank: 284
score: 99.34033921185662
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ - n $NUMBER$ ;
rank: 284
score: 99.31952311197917
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; / * /
rank: 284
score: 99.27713716947116
patch: final int n $NUMBER$ = n 1 $NUMBER$ * n $NUMBER$ ;
rank: 285
score: 99.42210557725694
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : n $NUMBER$ .
rank: 285
score: 99.40018039279514
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / / *
rank: 285
score: 99.39236582880434
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 % $NUMBER$ . 0 ;
rank: 285
score: 99.37116241455078
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 $NUMBER$ ;
rank: 285
score: 99.34857584635417
patch: final int n 1 ; n 1 = n 1 * n $NUMBER$ ;
rank: 285
score: 99.31800255408653
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; /
rank: 285
score: 99.27711070667614
patch: int n 1 = n 1 + n $NUMBER$ ;
rank: 286
score: 99.4219970703125
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ n 1 ;
rank: 286
score: 99.39188058035714
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 * n $NUMBER$ . 0 ;
rank: 286
score: 99.37095642089844
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ 0 ;
rank: 286
score: 99.31776646205357
patch: int n 1 n $NUMBER$ prod += n $NUMBER$ * n $NUMBER$ ;
rank: 286
score: 99.27658315805289
patch: final int n 1 $NUMBER$ = n 1 / n $NUMBER$ ;
rank: 287
score: 99.42193962545956
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 / $NUMBER$ ;
rank: 287
score: 99.39152221679687
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * E $NUMBER$ . 0 ;
rank: 287
score: 99.36911492598684
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; return n 1 ;
rank: 287
score: 99.34796501608456
patch: final double [ ] n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 287
score: 99.27657063802083
patch: final int n 1 = n 1 * $NUMBER$ $NUMBER$ + n $NUMBER$ ;
rank: 288
score: 99.42160213694854
patch: / * final double n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 288
score: 99.39714499080883
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ / $NUMBER$ ;
rank: 288
score: 99.39147271050348
patch: final int n 1 = n 1 * ( n 1 + 1 ) / $NUMBER$ ;
rank: 288
score: 99.37078498391544
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ % n $NUMBER$ ;
rank: 288
score: 99.34794398716518
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ + $NUMBER$ ;
rank: 288
score: 99.33832550048828
patch: final int n 1 start = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 288
score: 99.31670065487133
patch: final int n 1 = n $NUMBER$ ; if = n 1 * n $NUMBER$ ;
rank: 288
score: 99.27646484375
patch: final int n 1 = n 1 * $NUMBER$ $NUMBER$ / n $NUMBER$ ;
rank: 289
score: 99.39710828993056
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / * /
rank: 289
score: 99.36906995271382
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * ( n $NUMBER$ * n $NUMBER$ ) ;
rank: 289
score: 99.31627478966347
patch: final int n 1 : = n $NUMBER$ * n $NUMBER$ ;
rank: 289
score: 99.27637736002605
patch: final int n 1 , n 1 = n 1 ;
rank: 290
score: 99.42035875822368
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ) ;
rank: 290
score: 99.39692239200367
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 ; / /
rank: 290
score: 99.39112490699405
patch: final int n 1 n $NUMBER$ prod = ( n 1 + n $NUMBER$ + 1 ) / $NUMBER$ ;
rank: 290
score: 99.37021213107639
patch: final long n 1 n $NUMBER$ prod = n 1 * n 1 / n $NUMBER$ ;
rank: 290
score: 99.3689956665039
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . equals n $NUMBER$ ;
rank: 290
score: 99.31587982177734
patch: final int n 1 compare = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 290
score: 99.27457369290866
patch: final int n 1 = n 1 * / n $NUMBER$ ;
rank: 290
score: 99.25585065569196
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 ;
rank: 291
score: 99.39682186351104
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / /
rank: 291
score: 99.39063720703125
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 / n $NUMBER$ . 0 ;
rank: 291
score: 99.36870260799633
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length - n $NUMBER$ ;
rank: 291
score: 99.33807663690476
patch: final double n 1 = Fast CaMeL Math . sqrt ( n 1 * n $NUMBER$ + 1 ) ;
rank: 291
score: 99.31578153722427
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ * n $NUMBER$ ; final
rank: 291
score: 99.27450796274039
patch: final int n 1 = n 1 1 + n $NUMBER$ ;
rank: 292
score: 99.34550924862133
patch: double n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 292
score: 99.3157730102539
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 * 1 ;
rank: 293
score: 99.41975233289931
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ,
rank: 293
score: 99.38968912760417
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n 1 ;
rank: 293
score: 99.36838107638889
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . iterator ( ) . 0 ;
rank: 293
score: 99.31507219587054
patch: try { final int n 1 = n 1 * n $NUMBER$ ;
rank: 293
score: 99.27430071149554
patch: / * final int n 1 n $NUMBER$ prod = n 1 ;
rank: 294
score: 99.41945286800987
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ * n 1 ;
rank: 294
score: 99.38946854440789
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 * $NUMBER$ ;
rank: 294
score: 99.34542410714286
patch: double n 1 = n 1 * n $NUMBER$ * n 1 ;
rank: 294
score: 99.33742268880208
patch: final int n 1 = n 1 * n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 294
score: 99.31507161458333
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 294
score: 99.27368977864583
patch: final int n 1 , n 1 = n $NUMBER$ / n $NUMBER$ ;
rank: 294
score: 99.25471047794117
patch: final int n 1 n $NUMBER$ prod = Math . n $NUMBER$ * n $NUMBER$ ;
rank: 295
score: 99.41940789473684
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ . 1 ;
rank: 295
score: 99.38848266601562
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + n 1 . 0 ;
rank: 295
score: 99.31418744255515
patch: final int n 1 n $NUMBER$ prod = this * n $NUMBER$ * n $NUMBER$ ;
rank: 295
score: 99.27367292131696
patch: final int n 1 = n 1 $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 295
score: 99.25454711914062
patch: final int [ ] n $NUMBER$ n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 296
score: 99.38841610863095
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 1 . 0 ;
rank: 296
score: 99.34523111979166
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 296
score: 99.2736083984375
patch: final int n 1 = n 1 * n 1 / n 1 ;
rank: 296
score: 99.25450942095588
patch: final int n 1 = n 1 * n $NUMBER$ ; final int n 1 :
rank: 297
score: 99.38764880952381
patch: final int n 1 n $NUMBER$ prod = new int n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 297
score: 99.36846160888672
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 297
score: 99.3674252158717
patch: final int n 1 n $NUMBER$ prod = new String ( n 1 * n $NUMBER$ ) ;
rank: 297
score: 99.33665161132812
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ - $NUMBER$ ;
rank: 297
score: 99.31400299072266
patch: final int n 1 = n 1 * n $NUMBER$ * - n $NUMBER$ ;
rank: 297
score: 99.2733642578125
patch: final long n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 298
score: 99.41912841796875
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 , n $NUMBER$ ;
rank: 298
score: 99.3875373391544
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ ;
rank: 298
score: 99.36830139160156
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ 1 ;
rank: 298
score: 99.33635397518383
patch: Integer n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 298
score: 99.31352233886719
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 0 * n 1 ;
rank: 298
score: 99.27334158761161
patch: n 1 = n 1 * n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 299
score: 99.41901312934027
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + n $NUMBER$ .
rank: 299
score: 99.38633510044643
patch: final int n 1 n $NUMBER$ prod = n 1 + n 1 . 0 * $NUMBER$ . 0 ;
rank: 299
score: 99.3680908203125
patch: double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 ;
rank: 299
score: 99.36684698807566
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + 0 . 1 ;
rank: 299
score: 99.34510713465073
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * 1 ;
rank: 299
score: 99.33587967722039
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ; / *
rank: 299
score: 99.31350528492646
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * Math ;
rank: 299
score: 99.27333286830357
patch: int n 1 = n 1 * n $NUMBER$ * n 1 ;
rank: 299
score: 99.25380572150735
patch: final int [ ] n $NUMBER$ = n 1 * n $NUMBER$ * n 1 ;
rank: 300
score: 99.36671956380208
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . iterator ( ) . max $NUMBER$
rank: 300
score: 99.3356201171875
patch: final short n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 300
score: 99.31341145833333
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ n $NUMBER$ ;
rank: 300
score: 99.27172037760417
patch: final Double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 300
score: 99.25334616268383
patch: final int n 1 n $NUMBER$ prod = n 1 ; if ( n 1 ;
rank: 301
score: 99.41875542534723
patch: final Integer n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ;
rank: 301
score: 99.38624267578125
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * n $NUMBER$ . 0 ;
rank: 301
score: 99.36627197265625
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 * $NUMBER$ ;
rank: 301
score: 99.33543294270834
patch: final double n 1 = n 1 * n 1 * n 1 ;
rank: 301
score: 99.31326293945312
patch: final int n 1 = n $NUMBER$ * ( n 1 * n $NUMBER$ ;
rank: 301
score: 99.27165004185268
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$
rank: 301
score: 99.25322265625
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ; n $NUMBER$ :
rank: 302
score: 99.41814864309211
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ . $NUMBER$ ;
rank: 302
score: 99.39404296875
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 ; * /
rank: 302
score: 99.38623046875
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ % $NUMBER$ ;
rank: 302
score: 99.3662109375
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ - n $NUMBER$ ;
rank: 302
score: 99.36619737413194
patch: final int n 1 n $NUMBER$ prod = n 1 1 * n $NUMBER$ . 0 ;
rank: 302
score: 99.2714599609375
patch: / int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 302
score: 99.25309484145221
patch: final int n $NUMBER$ = n 1 ; final int n 1 = n 1 ;
rank: 303
score: 99.38572933799342
patch: final int n 1 n $NUMBER$ prod = n 1 + n 1 / $NUMBER$ . 0 ;
rank: 303
score: 99.36617702907986
patch: final int n 1 n $NUMBER$ prod = n 1 * - $NUMBER$ * n $NUMBER$ ;
rank: 303
score: 99.36568196614583
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ^ n $NUMBER$ ;
rank: 303
score: 99.33448893229166
patch: final int n 1 = n 1 * n $NUMBER$ , n $NUMBER$ ;
rank: 303
score: 99.3130874633789
patch: final int n 1 n $NUMBER$ prod = 0 * n $NUMBER$ * $NUMBER$ ;
rank: 303
score: 99.27144368489583
patch: final int n 1 = n 1 + n $NUMBER$ - n $NUMBER$ ;
rank: 303
score: 99.25308048023896
patch: final float n 1 = n $NUMBER$ ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 304
score: 99.41794002757354
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ ;
rank: 304
score: 99.38568115234375
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ $NUMBER$ . 0 ;
rank: 304
score: 99.36541426809211
patch: final int n 1 n $NUMBER$ prod = ( n 1 + $NUMBER$ ) * n $NUMBER$ ;
rank: 304
score: 99.344482421875
patch: final int n 1 = n 1 * n $NUMBER$ * $NUMBER$ + n $NUMBER$ ;
rank: 304
score: 99.27047293526786
patch: final int n 1 = n 1 1 $NUMBER$ * n $NUMBER$ ;
rank: 304
score: 99.25293686810662
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n 1 { n $NUMBER$ ;
rank: 305
score: 99.4178466796875
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 + n 1 ;
rank: 305
score: 99.36546495225694
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 305
score: 99.36539499383224
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; return n $NUMBER$ ;
rank: 305
score: 99.34434407552084
patch: final double n 1 n $NUMBER$ prod = n 1 - n $NUMBER$ ;
rank: 305
score: 99.33360380284927
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ ; / /
rank: 305
score: 99.31236267089844
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ - n 1 ;
rank: 305
score: 99.27040452223558
patch: final int n 1 = n $NUMBER$ + n $NUMBER$ $NUMBER$ ;
rank: 306
score: 99.41736653645833
patch: final double n 1 n $NUMBER$ prod = n 1 / n 1 ;
rank: 306
score: 99.39336081112133
patch: else { final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 306
score: 99.38533100328948
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 + 1 ) ;
rank: 306
score: 99.36508517795139
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ / n $NUMBER$ * n $NUMBER$ ;
rank: 306
score: 99.33343505859375
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 - n $NUMBER$ ;
rank: 306
score: 99.3121109008789
patch: final int n 1 n $NUMBER$ prod = 0 * n $NUMBER$ * 1 ;
rank: 306
score: 99.25213216145833
patch: final String n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 ;
rank: 307
score: 99.41733805338542
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ) * $NUMBER$ ;
rank: 307
score: 99.39335123697917
patch: final int n 1 n $NUMBER$ prod = n 1 * ( int ) n 1 ;
rank: 307
score: 99.38523171164773
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 * n 1 ;
rank: 307
score: 99.3643798828125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . n 1 * n $NUMBER$ ;
rank: 307
score: 99.34405110677083
patch: final double n 1 n $NUMBER$ prod = n 1 + n 1 ;
rank: 307
score: 99.31094360351562
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ - n $NUMBER$ ; final
rank: 307
score: 99.26907552083334
patch: final int n 1 n $NUMBER$ prod = n 1 [ $NUMBER$ ] ;
rank: 308
score: 99.41722276475694
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * - 1 ;
rank: 308
score: 99.31069766773896
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ - max ;
rank: 308
score: 99.25144740513393
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * $STRING$ ;
rank: 309
score: 99.41697291324013
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ , n $NUMBER$ 1 ;
rank: 309
score: 99.38519577752976
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ * $NUMBER$ . $NUMBER$ ;
rank: 309
score: 99.36386287913604
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 * 0 ;
rank: 309
score: 99.36335584852431
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . n $NUMBER$ = n $NUMBER$ ;
rank: 309
score: 99.34345703125
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 309
score: 99.31057559742646
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 1 * n $NUMBER$ ) ;
rank: 309
score: 99.26824481670673
patch: final double n 1 = n 1 1 * n $NUMBER$ ;
rank: 309
score: 99.25119850852273
patch: final int [ ] n $NUMBER$ = n $NUMBER$ ;
rank: 310
score: 99.41628546463816
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ ; / *
rank: 310
score: 99.39218139648438
patch: else final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 310
score: 99.38428896949405
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ * 0 . 0 ;
rank: 310
score: 99.36305865119485
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . length ;
rank: 310
score: 99.34206973805146
patch: try { final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 310
score: 99.33292643229167
patch: return n 1 * n 1 * ( n 1 * n $NUMBER$ + 1 ) ;
rank: 310
score: 99.31000114889706
patch: final int n 1 n $NUMBER$ prod = 0 * n $NUMBER$ + n $NUMBER$ ;
rank: 310
score: 99.26795372596153
patch: final double n 1 $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 310
score: 99.25055694580078
patch: final int n 1 = n $NUMBER$ ; final int n 1 = 0 ;
rank: 311
score: 99.39191351996527
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ; / / * /
rank: 311
score: 99.36343722873264
patch: final int n 1 n $NUMBER$ prod = n 1 . n 1 * n 1 ;
rank: 311
score: 99.36292860243056
patch: final int < String > n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 311
score: 99.34071260340073
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ + $NUMBER$ ;
rank: 311
score: 99.33277239118304
patch: final int n 1 = n 1 * n $NUMBER$ ; / *
rank: 311
score: 99.30854034423828
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ; else
rank: 311
score: 99.26790073939732
patch: int n $NUMBER$ = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 311
score: 99.24934656479779
patch: final String n 1 = n $NUMBER$ ; final int n $NUMBER$ = n 1 ;
rank: 312
score: 99.41537814670139
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ , n $NUMBER$ ;
rank: 312
score: 99.38410295758929
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 - $NUMBER$ ;
rank: 312
score: 99.36304428998162
patch: final Object n 1 n $NUMBER$ prod = n 1 * n 1 . 0 ;
rank: 312
score: 99.3627993935033
patch: final int n 1 n $NUMBER$ prod = ( ( double ) n 1 * n $NUMBER$ ;
rank: 312
score: 99.34040383731617
patch: synchronized ( this ) { final int n 1 = n 1 * n $NUMBER$ ;
rank: 312
score: 99.33257697610294
patch: Integer n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 312
score: 99.30833435058594
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; else
rank: 312
score: 99.26764787946429
patch: double n 1 = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 312
score: 99.249267578125
patch: int n 1 = n $NUMBER$ * n 1 ;
rank: 313
score: 99.41523822985198
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * - n $NUMBER$ ;
rank: 313
score: 99.3837890625
patch: try { final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 313
score: 99.36259191176471
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 * n 1 ;
rank: 313
score: 99.3403091430664
patch: final int n 1 n $NUMBER$ prod = - n 1 * n $NUMBER$ ;
rank: 313
score: 99.33254107306985
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 * $NUMBER$ ;
rank: 313
score: 99.3078384399414
patch: final final int n 1 n $NUMBER$ prod += n $NUMBER$ * n $NUMBER$ ;
rank: 313
score: 99.24896240234375
patch: final int n 1 = n 1 ; double n 1 = n $NUMBER$ ;
rank: 314
score: 99.41505833675987
patch: final double n 1 n $NUMBER$ prod = n 1 * ( n 1 * n $NUMBER$ )
rank: 314
score: 99.39016927083334
patch: final boolean n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 314
score: 99.38371839021382
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / 0 . 0 ;
rank: 314
score: 99.36257755055146
patch: final int n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ * $NUMBER$ ;
rank: 314
score: 99.36201477050781
patch: final int n 1 n $NUMBER$ prod = new int [ n 1 ] ;
rank: 314
score: 99.33212459788604
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ = $NUMBER$ ;
rank: 314
score: 99.24852752685547
patch: int n 1 = n 1 ; final int n 1 = n 1 ;
rank: 315
score: 99.41500515407986
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ *
rank: 315
score: 99.38294038318452
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 / $NUMBER$ ;
rank: 315
score: 99.36255900065105
patch: final long n 1 n $NUMBER$ prod = n 1 ;
rank: 315
score: 99.36191134982639
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . min $NUMBER$ }
rank: 315
score: 99.34021809895833
patch: final double n 1 = n 1 + n $NUMBER$ + n $NUMBER$ ;
rank: 315
score: 99.26648888221153
patch: final int n 1 = n 1 * n $NUMBER$ ) ;
rank: 315
score: 99.24819510323661
patch: final double [ ] n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 316
score: 99.39015028211806
patch: final final int n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ ;
rank: 316
score: 99.38288225446429
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ n 1 . 0 ;
rank: 316
score: 99.36248420266544
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * n 1 ;
rank: 316
score: 99.33155581825658
patch: final int n 1 = n 1 * ( n 1 * n $NUMBER$ + 1 ) ;
rank: 316
score: 99.30630493164062
patch: final int n 1 = n 1 * ( n 1 * n $NUMBER$ ;
rank: 316
score: 99.26621791294643
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$
rank: 316
score: 99.24795297475961
patch: final int n 1 = n 1 * - n $NUMBER$ ;
rank: 317
score: 99.38977728949652
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 $NUMBER$ ;
rank: 317
score: 99.3822380514706
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod . 0 ;
rank: 317
score: 99.3620376586914
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 1 ;
rank: 317
score: 99.3395637063419
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * max ;
rank: 317
score: 99.30599975585938
patch: final int n 1 = = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 317
score: 99.26590983072917
patch: final int n 1 , n $NUMBER$ = n 1 / n 1 ;
rank: 317
score: 99.24793198529412
patch: final int n 1 = n 1 ; final int n $NUMBER$ : n $NUMBER$ ;
rank: 318
score: 99.4146240234375
patch: final double n 1 n $NUMBER$ prod = n 1 * - $NUMBER$ ;
rank: 318
score: 99.36149327895221
patch: final int n 1 n $NUMBER$ prod = ( - 1 ) * n $NUMBER$ ;
rank: 318
score: 99.30590057373047
patch: final int n 1 : = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 318
score: 99.24772374770221
patch: final int n 1 = n $NUMBER$ ; final Integer n 1 = n 1 ;
rank: 319
score: 99.41424239309211
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ - $NUMBER$ ;
rank: 319
score: 99.38079512746711
patch: final int n 1 n $NUMBER$ prod = n 1 + n 1 . 0 . 0 ;
rank: 319
score: 99.36110552619485
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . $NUMBER$ + n $NUMBER$ ;
rank: 319
score: 99.33946317784927
patch: return n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 319
score: 99.26503092447916
patch: final int n 1 = n 1 + n $NUMBER$ * n 1 ;
rank: 319
score: 99.24741498161765
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ : 0 ;
rank: 320
score: 99.41383120888158
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 320
score: 99.38070015285327
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 / $NUMBER$ . $NUMBER$ ;
rank: 320
score: 99.36072591145833
patch: final int n 1 n $NUMBER$ prod = ( int ) n 1 ;
rank: 320
score: 99.33943445542279
patch: double n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ * n $NUMBER$ ;
rank: 320
score: 99.33047824435764
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ - n 1 ;
rank: 320
score: 99.305029296875
patch: final int n 1 = n 1 * n $NUMBER$ * 0 $NUMBER$ ;
rank: 320
score: 99.26451009114584
patch: final int n 1 = n 1 * n $NUMBER$ / $NUMBER$ $NUMBER$ ;
rank: 320
score: 99.24728393554688
patch: final String n 1 = n 1 * n 1 ;
rank: 321
score: 99.38819986979166
patch: final byte n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 321
score: 99.38036047894022
patch: if ( calculate CaMeL Asymptotic CaMeL P CaMeL Value ( n 1 , n 1 ) ) {
rank: 321
score: 99.36040496826172
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n $NUMBER$ ;
rank: 321
score: 99.33042602539062
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / n $NUMBER$ . 0 ;
rank: 321
score: 99.30467936197917
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * 0 $NUMBER$ ;
rank: 321
score: 99.26448567708333
patch: final int n 1 = n 1 * n $NUMBER$ $NUMBER$ / $NUMBER$ ;
rank: 321
score: 99.24705595128677
patch: final int n 1 = n 1 ; final Object n 1 = n 1 ;
rank: 322
score: 99.37955375339673
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 * E . 0 ;
rank: 322
score: 99.26426595052084
patch: final int n 1 = n $NUMBER$ + n $NUMBER$ * n $NUMBER$ ;
rank: 322
score: 99.24690515854779
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * $STRING$ * n $NUMBER$ ;
rank: 323
score: 99.41338790090461
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ ) / $NUMBER$ ;
rank: 323
score: 99.38764784071181
patch: final Object n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 323
score: 99.3792724609375
patch: int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ * $NUMBER$ . 0 ;
rank: 323
score: 99.35971248851104
patch: final int n 1 n $NUMBER$ prod [ ] = n $NUMBER$ * n $NUMBER$ ;
rank: 323
score: 99.33911850873162
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 323
score: 99.30375671386719
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ * n $NUMBER$ ; final
rank: 323
score: 99.26398111979167
patch: final long n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ ;
rank: 324
score: 99.41332329644098
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . - $NUMBER$ ;
rank: 324
score: 99.38718668619792
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 ) / $NUMBER$ ;
rank: 324
score: 99.37897600446429
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 . 1 ;
rank: 324
score: 99.35949028862848
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; n $NUMBER$ ;
rank: 324
score: 99.32984116498162
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ - 1 ;
rank: 324
score: 99.30370330810547
patch: final int n 1 = n 1 * n $NUMBER$ ; n $NUMBER$ -- ;
rank: 324
score: 99.26373291015625
patch: final long n 1 = n 1 * n 1 ;
rank: 324
score: 99.24629480698529
patch: final / * * * * * * * * * * * * * /
rank: 325
score: 99.41326583059211
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ n $NUMBER$
rank: 325
score: 99.3786262063419
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / 0 ;
rank: 325
score: 99.35940755208334
patch: final int n 1 n $NUMBER$ prod = ( Integer ) n $NUMBER$ ;
rank: 325
score: 99.33860868566177
patch: final double n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ * $NUMBER$ ;
rank: 325
score: 99.32886555989583
patch: return n 1 * ( n 1 + n $NUMBER$ + 1 ) ;
rank: 325
score: 99.26363699776786
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ / $NUMBER$ ;
rank: 326
score: 99.4132080078125
patch: final double n 1 n $NUMBER$ prod = ( double ) n 1 * n $NUMBER$ ;
rank: 326
score: 99.3024393717448
patch: final int n 1 : n $NUMBER$ * n $NUMBER$ ;
rank: 326
score: 99.26266915457589
patch: double n 1 = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 326
score: 99.24613952636719
patch: final int n 1 = n 1 ; return n $NUMBER$ * n $NUMBER$ ;
rank: 327
score: 99.41316492417279
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 , n $NUMBER$
rank: 327
score: 99.3784710427989
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 * $NUMBER$ . 1 ;
rank: 327
score: 99.35911560058594
patch: final int n 1 n $NUMBER$ prod = ( n 1 - n $NUMBER$ ;
rank: 327
score: 99.338134765625
patch: final double n 1 = n 1 + n $NUMBER$ * n $NUMBER$ ;
rank: 327
score: 99.32836303710937
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 327
score: 99.26211547851562
patch: final int n 1 = n $NUMBER$ + n 1 ;
rank: 328
score: 99.37744140625
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ 0 . 0 ;
rank: 328
score: 99.33803013392857
patch: double n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ ;
rank: 328
score: 99.32773006663604
patch: return n 1 * ( n 1 + n $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 328
score: 99.30193328857422
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 0 ;
rank: 328
score: 99.26193033854166
patch: final int n 1 , n $NUMBER$ = n $NUMBER$ + n 1 ;
rank: 328
score: 99.24574279785156
patch: final int n 1 = n 1 ; double n $NUMBER$ = n 1 ;
rank: 329
score: 99.38551161024306
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 * $NUMBER$ . 0 ;
rank: 329
score: 99.37736002604167
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 . 1 ;
rank: 329
score: 99.35924183238636
patch: int n 1 n $NUMBER$ prod = n 1 ;
rank: 329
score: 99.35851372612848
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . n $NUMBER$ ;
rank: 329
score: 99.33751723345588
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ + 1 ;
rank: 329
score: 99.32769775390625
patch: final int n 1 = n 1 * n 1 * 1 . 0 ;
rank: 329
score: 99.30140787760416
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 0 $NUMBER$ ;
rank: 329
score: 99.261669921875
patch: final float n 1 = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 329
score: 99.2455078125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ = n 1 ;
rank: 330
score: 99.41283501519098
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * - 1 ;
rank: 330
score: 99.37709350585938
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod * $NUMBER$ ;
rank: 330
score: 99.32755319695724
patch: final int n 1 = Math . sqrt ( n $NUMBER$ + n $NUMBER$ + 1 ) ;
rank: 330
score: 99.26097760881696
patch: final int n $NUMBER$ n $NUMBER$ = n 1 * n 1 ;
rank: 330
score: 99.24549057904412
patch: final int n 1 = n 1 ; final Object n $NUMBER$ = n $NUMBER$ ;
rank: 331
score: 99.38482666015625
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 + 1 )
rank: 331
score: 99.37706234580592
patch: final int n 1 = n 1 * ( n 1 + n 1 ) / $NUMBER$ ;
rank: 331
score: 99.26082938058036
patch: final int n 1 , n $NUMBER$ n $NUMBER$ , n $NUMBER$ ;
rank: 331
score: 99.24536895751953
patch: final double n 1 = n 1 ; int n $NUMBER$ = n $NUMBER$ ;
rank: 332
score: 99.41254625822368
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ . $NUMBER$ ;
rank: 332
score: 99.38471815321181
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ ; / /
rank: 332
score: 99.37684390419408
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 * n 1 ;
rank: 332
score: 99.3589111328125
patch: final int n 1 = n 1 * n $NUMBER$ . n 1 ;
rank: 332
score: 99.32712227957589
patch: Integer n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 332
score: 99.29960123697917
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 332
score: 99.2599853515625
patch: final int n 1 , n 1 = n 1 * n 1 ;
rank: 332
score: 99.24526798023896
patch: final int n $NUMBER$ = n $NUMBER$ ; final int n 1 = n 1 ;
rank: 333
score: 99.37668971011513
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ n $NUMBER$ ;
rank: 333
score: 99.3267822265625
patch: return n 1 * ( n 1 + n $NUMBER$ + n $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 333
score: 99.29920959472656
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ * 1 ;
rank: 333
score: 99.25948893229166
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ + n 1 ;
rank: 333
score: 99.24502383961396
patch: final float n 1 = n 1 ; final int n 1 = n $NUMBER$ ;
rank: 334
score: 99.38410780164931
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / / /
rank: 334
score: 99.37662546258224
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * 1 . 0 ;
rank: 334
score: 99.3584846047794
patch: final Integer n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 334
score: 99.33506556919643
patch: float n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 334
score: 99.29872131347656
patch: final int n 1 = n $NUMBER$ ; = n $NUMBER$ * n $NUMBER$ ;
rank: 334
score: 99.2449089499081
patch: final double n 1 = n 1 ; final double n $NUMBER$ = n $NUMBER$ ;
rank: 335
score: 99.41201985677084
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ *
rank: 335
score: 99.37644653320312
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ 1 . 0 ;
rank: 335
score: 99.35702311197916
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ - n 1 ;
rank: 335
score: 99.32605852399554
patch: List n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 335
score: 99.29827880859375
patch: final int n 1 = n 1 * n $NUMBER$ ; n $NUMBER$ ++ ;
rank: 335
score: 99.24460274832589
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * null ;
rank: 336
score: 99.41126844618056
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ , n $NUMBER$ ,
rank: 336
score: 99.37587280273438
patch: final int n 1 n $NUMBER$ prod = n 1 + n 1 * n $NUMBER$ . 0 ;
rank: 336
score: 99.35789579503677
patch: final double n 1 = n 1 * n 1 * n 1 . 0 ;
rank: 336
score: 99.33376639229911
patch: int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ ;
rank: 336
score: 99.32502297794117
patch: final int n 1 = Math . sqrt ( n 1 * n $NUMBER$ ) ;
rank: 336
score: 99.29777018229167
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; n $NUMBER$ ;
rank: 336
score: 99.25725848858173
patch: final int n 1 n $NUMBER$ prod = n 1 1 ;
rank: 336
score: 99.24437662760417
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ [ 0 ] ;
rank: 337
score: 99.41110229492188
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ ;
rank: 337
score: 99.383544921875
patch: final int n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ ; / * /
rank: 337
score: 99.3757388466283
patch: final int n 1 n $NUMBER$ prod += n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 337
score: 99.35668267144098
patch: final int n 1 n $NUMBER$ prod = ( Integer ) n $NUMBER$ * n $NUMBER$ ;
rank: 337
score: 99.24418370863971
patch: final int n 1 = n $NUMBER$ ; final int n $NUMBER$ < n 1 ;
rank: 338
score: 99.41084558823529
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : $NUMBER$ ;
rank: 338
score: 99.37562779017857
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 * $NUMBER$ ;
rank: 338
score: 99.35618760850694
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ + n $NUMBER$ + n $NUMBER$ ;
rank: 338
score: 99.2965839092548
patch: final int n 1 length = n 1 * n $NUMBER$ ;
rank: 338
score: 99.24406881893383
patch: final Integer n 1 = n $NUMBER$ ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 339
score: 99.41000705295139
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 % n 1 ;
rank: 339
score: 99.37532958984374
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 1 ;
rank: 339
score: 99.35626220703125
patch: final int n 1 n $NUMBER$ prod = n 1 * * n 1 . 0 ;
rank: 339
score: 99.35613335503473
patch: final long n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 339
score: 99.32430594308036
patch: final int n 1 = n 1 * n $NUMBER$ ; / /
rank: 339
score: 99.29624837239584
patch: final int n 1 += n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 339
score: 99.25628255208333
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ / n 1 ;
rank: 339
score: 99.2440185546875
patch: final int n 1 = n 1 ; return n 1 * n $NUMBER$ ;
rank: 340
score: 99.38308715820312
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 ) ;
rank: 340
score: 99.375244140625
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 ; / * /
rank: 340
score: 99.35584368024554
patch: final double [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 340
score: 99.33244054457721
patch: final int n 1 = Math . max ( n 1 , n $NUMBER$ $NUMBER$ ;
rank: 340
score: 99.25570678710938
patch: final double n 1 = n 1 / n $NUMBER$ ;
rank: 340
score: 99.24395392922794
patch: final int [ ] n $NUMBER$ = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 341
score: 99.3825439453125
patch: final int n 1 n $NUMBER$ prod = Umin * n $NUMBER$ ;
rank: 341
score: 99.37500610351563
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ + n $NUMBER$ . 0 ;
rank: 341
score: 99.32419720818015
patch: final int n 1 [ ] = n 1 * n $NUMBER$ * n 1 ;
rank: 341
score: 99.29520089285714
patch: final int n 1 = n 1 * $STRING$ * n $NUMBER$ ;
rank: 341
score: 99.25559895833334
patch: final double n 1 = n 1 * n $NUMBER$ / n 1 ;
rank: 341
score: 99.24382019042969
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; return n $NUMBER$ ;
rank: 342
score: 99.40919325086806
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ , n $NUMBER$ 1
rank: 342
score: 99.33173684512867
patch: double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 342
score: 99.323974609375
patch: final int n 1 = Math . sqrt ( n 1 * n 1 + 1 ) ;
rank: 342
score: 99.29519418569711
patch: final int n 1 iterator = n $NUMBER$ * n $NUMBER$ ;
rank: 342
score: 99.25540364583334
patch: final int n 1 , n $NUMBER$ = n $NUMBER$ - n $NUMBER$ ;
rank: 342
score: 99.24335075827206
patch: final float n 1 = n 1 ; final int n $NUMBER$ = n 1 ;
rank: 343
score: 99.40912543402777
patch: final double n 1 n $NUMBER$ prod = ( int ) n 1 * n $NUMBER$ ;
rank: 343
score: 99.37370862458882
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ n $NUMBER$ . 0 ;
rank: 343
score: 99.35523274739583
patch: final int n 1 = n 1 * n $NUMBER$ . n $NUMBER$ ;
rank: 343
score: 99.33116957720588
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ + 1 ;
rank: 343
score: 99.32393391927083
patch: final double n 1 = n 1 * n $NUMBER$ * n 1 * n $NUMBER$ ;
rank: 343
score: 99.254931640625
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 344
score: 99.40905083550348
patch: final final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ ;
rank: 344
score: 99.38190375434027
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * . $NUMBER$ ;
rank: 344
score: 99.37357003348214
patch: try { final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 344
score: 99.35490866268383
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ . 0 ;
rank: 344
score: 99.35394694010417
patch: final int n 1 n $NUMBER$ prod = ( Integer ) n 1 ;
rank: 344
score: 99.33108340992646
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ + $NUMBER$ ;
rank: 344
score: 99.29439290364583
patch: final boolean n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 344
score: 99.2541973407452
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ) ;
rank: 344
score: 99.24317124310662
patch: final String n 1 = n $NUMBER$ ; final int n 1 = n $NUMBER$ ;
rank: 345
score: 99.40887810202206
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : n $NUMBER$ ;
rank: 345
score: 99.37338256835938
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 + $NUMBER$ . 0 ;
rank: 345
score: 99.35457117417279
patch: final double n 1 n $NUMBER$ prod = n 1 * 0 * n $NUMBER$ ;
rank: 345
score: 99.35361056857639
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ % n $NUMBER$ * n $NUMBER$ ;
rank: 345
score: 99.29387958233173
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ] ;
rank: 345
score: 99.24303385416667
patch: final void n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 346
score: 99.38160536024306
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 . n $NUMBER$ ;
rank: 346
score: 99.3733142671131
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 % $NUMBER$ ;
rank: 346
score: 99.35428195529514
patch: final final double n 1 n $NUMBER$ prod = n 1 * n 1 . 0 ;
rank: 346
score: 99.35352376302083
patch: final Object n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 346
score: 99.25355631510416
patch: final float n 1 = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 347
score: 99.40854220920139
patch: final try { final int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 347
score: 99.37323552911931
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ * n $NUMBER$ . 0 ;
rank: 347
score: 99.35345458984375
patch: final String n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 347
score: 99.33000183105469
patch: final int n 1 = Math . max ( n 1 , n 1 ;
rank: 347
score: 99.25331217447916
patch: final int n 1 = n 1 + n $NUMBER$ / n $NUMBER$ ;
rank: 348
score: 99.37279211956522
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 / $NUMBER$ . $NUMBER$ ;
rank: 348
score: 99.32979090073529
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 + $NUMBER$ ;
rank: 348
score: 99.32167053222656
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n $NUMBER$ . 0 ;
rank: 348
score: 99.29335021972656
patch: int n 1 n $NUMBER$ prod = 0 * n $NUMBER$ * n $NUMBER$ ;
rank: 348
score: 99.25319010416666
patch: final int n 1 = n 1 * n $NUMBER$ + 1 $NUMBER$ ;
rank: 349
score: 99.37274169921875
patch: int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 . 0 ;
rank: 349
score: 99.35312906901042
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . n 1 ;
rank: 349
score: 99.32975006103516
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ ; ;
rank: 349
score: 99.32157679966518
patch: long n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 349
score: 99.29315948486328
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 0 * 1 ;
rank: 349
score: 99.25293782552083
patch: final int n 1 n $NUMBER$ prod = n 1 . length $NUMBER$ ;
rank: 350
score: 99.38095092773438
patch: { final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 350
score: 99.37238625919117
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 0 ;
rank: 350
score: 99.35313585069444
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . iterator ( ) . $NUMBER$ ;
rank: 350
score: 99.32127470128677
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ , 1 ;
rank: 350
score: 99.2924072265625
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ * n 1 ;
rank: 350
score: 99.25264195033482
patch: final int n 1 = n 1 + n $NUMBER$ $NUMBER$ $NUMBER$ ;
rank: 350
score: 99.24270450367646
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 0 + n 1 ;
rank: 351
score: 99.37189041940789
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * 0 . 0 ;
rank: 351
score: 99.32120361328126
patch: final int n 1 n $NUMBER$ prod = Math . sqrt ( n 1 * n 1 ) ;
rank: 351
score: 99.29166085379464
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ - n $NUMBER$ ;
rank: 351
score: 99.25248209635417
patch: final double n 1 n $NUMBER$ prod = n 1 . n $NUMBER$ ;
rank: 351
score: 99.2426513671875
patch: final int n 1 n $NUMBER$ prod = n 1 : n 1 ;
rank: 352
score: 99.40701114430146
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . $STRING$ ;
rank: 352
score: 99.3717041015625
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 * n $NUMBER$ ;
rank: 352
score: 99.351318359375
patch: final int [ ] n $NUMBER$ , n $NUMBER$ ;
rank: 352
score: 99.3281609030331
patch: final int n 1 = n 1 * $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 352
score: 99.32108248197116
patch: final int n 1 start = n 1 * n $NUMBER$ ;
rank: 352
score: 99.25204264322916
patch: final int n 1 = n 1 , n $NUMBER$ = n $NUMBER$ ;
rank: 353
score: 99.37130737304688
patch: final int int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 353
score: 99.35160319010417
patch: final int n 1 n $NUMBER$ prod = n 1 + n 1 * n 1 ;
rank: 353
score: 99.25193684895834
patch: final long n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ ;
rank: 353
score: 99.24205780029297
patch: final int n 1 = n $NUMBER$ ; for n 1 = n $NUMBER$ ;
rank: 354
score: 99.37111409505208
patch: long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 354
score: 99.35147094726562
patch: final int n 1 = n 1 * n $NUMBER$ n $NUMBER$ . 0 ;
rank: 354
score: 99.35072157118056
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length 1 * n $NUMBER$ ;
rank: 354
score: 99.32791137695312
patch: final double n 1 = Math . max ( n 1 , n $NUMBER$ ;
rank: 354
score: 99.32037353515625
patch: return n 1 * n 1 * n 1 * n $NUMBER$ ;
rank: 354
score: 99.29127720424107
patch: int n 1 n $NUMBER$ prod += n 1 * n $NUMBER$ ;
rank: 354
score: 99.25157877604167
patch: final int n $NUMBER$ = n 1 * n 1 / n $NUMBER$ ;
rank: 355
score: 99.38052188648896
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / * /
rank: 355
score: 99.370947265625
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 0 ;
rank: 355
score: 99.35120985243056
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ % n $NUMBER$ ;
rank: 355
score: 99.29077911376953
patch: final int n 1 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 355
score: 99.2513427734375
patch: final int n $NUMBER$ n $NUMBER$ = n 1 / n $NUMBER$ ;
rank: 355
score: 99.24156996783088
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + $STRING$ ;
rank: 356
score: 99.37993028428819
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . . 0 ;
rank: 356
score: 99.37091385690789
patch: final long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / 1 . 0 ;
rank: 356
score: 99.34995404411765
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . max * n $NUMBER$ ;
rank: 356
score: 99.32017008463542
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ = n $NUMBER$ ;
rank: 356
score: 99.29010772705078
patch: final int n 1 final int n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 356
score: 99.25128173828125
patch: int n 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 357
score: 99.37956686580883
patch: final Object n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 357
score: 99.35055881076389
patch: / * int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 357
score: 99.34967719184027
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ { n 1 ;
rank: 357
score: 99.32005615234375
patch: final int n 1 * ( n 1 + n $NUMBER$ + 1 ) / $NUMBER$ . 0 ;
rank: 357
score: 99.28965759277344
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; *
rank: 357
score: 99.240966796875
patch: final int n 1 = n $NUMBER$ ; final Object n 1 = n $NUMBER$ ;
rank: 358
score: 99.37055407072368
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ n 1 . 0 ;
rank: 358
score: 99.34959581163194
patch: final String n 1 n $NUMBER$ prod = n $NUMBER$ . to CaMeL String ( ) ;
rank: 358
score: 99.28911590576172
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; if n 1 ;
rank: 358
score: 99.25106608072916
patch: final int n 1 = n 1 * n $NUMBER$ | n $NUMBER$ ;
rank: 358
score: 99.24078010110294
patch: final int n 1 = n 1 ; final long n $NUMBER$ = n $NUMBER$ ;
rank: 359
score: 99.37922937729779
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 / 1 ;
rank: 359
score: 99.35037994384766
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 0 . 0 ;
rank: 359
score: 99.32622931985294
patch: int n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 359
score: 99.2886734008789
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ * $NUMBER$ ;
rank: 359
score: 99.2406867532169
patch: final String n 1 = n 1 ; final int n 1 = n 1 ;
rank: 360
score: 99.37042846679688
patch: final int n 1 n $NUMBER$ prod = n 1 + n 1 + n $NUMBER$ . 0 ;
rank: 360
score: 99.34935167100694
patch: final String n 1 n $NUMBER$ prod = ( int ) n 1 * n $NUMBER$ ;
rank: 360
score: 99.32611955915179
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ + 1 ;
rank: 360
score: 99.2883071899414
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ * n $NUMBER$ * ;
rank: 360
score: 99.25047200520834
patch: final int n 1 , n $NUMBER$ = n $NUMBER$ / n 1 ;
rank: 360
score: 99.24042107077206
patch: final int n 1 n $NUMBER$ prod = this . n $NUMBER$ * n 1 ;
rank: 361
score: 99.40342881944444
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * 1 . 0 ;
rank: 361
score: 99.37015991210937
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 - n $NUMBER$ . 0 ;
rank: 361
score: 99.34991455078125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 n $NUMBER$ prod ;
rank: 361
score: 99.34915924072266
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n 1 ;
rank: 361
score: 99.28810337611607
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ ; final
rank: 361
score: 99.2504131610577
patch: final int n 1 = n $NUMBER$ * n 1 $NUMBER$ ;
rank: 361
score: 99.2393569946289
patch: final int n $NUMBER$ n $NUMBER$ n 1 = n 1 * n $NUMBER$ ;
rank: 362
score: 99.40332749310662
patch: double n 1 n $NUMBER$ prod = n 1 * n 1 / n $NUMBER$ ;
rank: 362
score: 99.37879774305556
patch: final float n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ;
rank: 362
score: 99.37010556175595
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 : 0 ;
rank: 362
score: 99.34990776909723
patch: final double n 1 n $NUMBER$ prod = n 1 + n 1 * n $NUMBER$ ;
rank: 362
score: 99.325927734375
patch: int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 362
score: 99.28756713867188
patch: final int n 1 n $NUMBER$ prod += n 1 ;
rank: 362
score: 99.250341796875
patch: / * * final int n 1 = n 1 * n $NUMBER$ ;
rank: 363
score: 99.4031982421875
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ , n 1 ;
rank: 363
score: 99.3257723721591
patch: final int n 1 = n 1 * 1 ;
rank: 363
score: 99.31845528738839
patch: final int n 1 n $NUMBER$ prod = 1 * n 1 ;
rank: 363
score: 99.25004069010417
patch: final int n 1 n $NUMBER$ prod = n 1 $NUMBER$ n $NUMBER$ ;
rank: 363
score: 99.23912856158088
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n 1 { n 1 ;
rank: 364
score: 99.40232849121094
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ ;
rank: 364
score: 99.34948012408088
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ . 0 ;
rank: 364
score: 99.34711456298828
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . clone ( ) ;
rank: 364
score: 99.32571231617646
patch: final double n 1 = Math . min ( n 1 , n $NUMBER$ ) ;
rank: 364
score: 99.31831868489583
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 = n 1 ;
rank: 364
score: 99.28622436523438
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * * n $NUMBER$ ;
rank: 364
score: 99.2497314453125
patch: int n 1 = n 1 * n $NUMBER$ + n $NUMBER$ $NUMBER$ ;
rank: 364
score: 99.2389907836914
patch: final int n 1 = n $NUMBER$ ; for n $NUMBER$ = n $NUMBER$ ;
rank: 365
score: 99.34666612413194
patch: final int < int > n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 365
score: 99.3251953125
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / n $NUMBER$
rank: 365
score: 99.28580147879464
patch: final int n 1 = $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 365
score: 99.2495849609375
patch: final int n 1 = n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 365
score: 99.23818072150735
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 0 . n $NUMBER$ ;
rank: 366
score: 99.37751321231617
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ % $NUMBER$ ;
rank: 366
score: 99.34886338975694
patch: final double n 1 n $NUMBER$ prod = n 1 * * n $NUMBER$ . 0 ;
rank: 366
score: 99.34644317626953
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * ( n $NUMBER$ ;
rank: 366
score: 99.31816549862133
patch: return n 1 * ( n 1 + n $NUMBER$ + 1 ) / $NUMBER$ ;
rank: 366
score: 99.28565979003906
patch: final int n 1 : = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 366
score: 99.2493563565341
patch: double n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 366
score: 99.23799133300781
patch: / * * / final int n 1 = n 1 * n $NUMBER$ ;
rank: 367
score: 99.40192009420956
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : n 1 ;
rank: 367
score: 99.36834106445312
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ % n 1 ;
rank: 367
score: 99.32463522518383
patch: final double n 1 = Math . max ( n 1 , n 1 ) ;
rank: 367
score: 99.3177490234375
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ , $NUMBER$ ;
rank: 367
score: 99.28404235839844
patch: final long n 1 n $NUMBER$ prod = n $NUMBER$ 1 * n $NUMBER$ ;
rank: 367
score: 99.24934895833333
patch: final double n 1 = n 1 * n $NUMBER$ + n 1 ;
rank: 367
score: 99.23777860753677
patch: final int n 1 = n 1 ; final long n 1 = n $NUMBER$ ;
rank: 368
score: 99.40187581380208
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : n $NUMBER$ ;
rank: 368
score: 99.36734619140626
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % n 1 . 0 ;
rank: 368
score: 99.3477783203125
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ / n $NUMBER$ ;
rank: 368
score: 99.34624565972223
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ >> n $NUMBER$ ;
rank: 368
score: 99.32448032924107
patch: final double n 1 = n 1 * n $NUMBER$ + $NUMBER$ ;
rank: 368
score: 99.31697351792279
patch: final int n 1 n $NUMBER$ prod n $NUMBER$ = n 1 * n 1 ;
rank: 368
score: 99.28402944711539
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * ;
rank: 368
score: 99.24934605189732
patch: final int n 1 $NUMBER$ = n 1 $NUMBER$ * n $NUMBER$ ;
rank: 369
score: 99.40180121527777
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ,
rank: 369
score: 99.37688131893383
patch: try { final double n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 369
score: 99.36733610733695
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 / $NUMBER$ . 1 ;
rank: 369
score: 99.34597981770834
patch: final String n 1 n $NUMBER$ prod = ( int ) n $NUMBER$ ;
rank: 369
score: 99.32406412760416
patch: final int n 1 ; n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 369
score: 99.28326009114583
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ 1 ;
rank: 369
score: 99.24824741908482
patch: final int n 1 1 = n 1 + n $NUMBER$ $NUMBER$ ;
rank: 369
score: 99.2373046875
patch: final int n 1 n $NUMBER$ prod = n 1 * null ;
rank: 370
score: 99.316748046875
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n 1 . 0 ;
rank: 370
score: 99.28324890136719
patch: final final int n 1 n $NUMBER$ prod = n $NUMBER$ - n $NUMBER$ ;
rank: 370
score: 99.24793294270833
patch: final int n $NUMBER$ n $NUMBER$ = n 1 + n $NUMBER$ $NUMBER$ ;
rank: 370
score: 99.23703182444854
patch: final Integer n 1 = n 1 ; final int n $NUMBER$ = n 1 ;
rank: 371
score: 99.40143500434027
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : n 1 .
rank: 371
score: 99.37636431525735
patch: final / * int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 371
score: 99.36702270507813
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ % n $NUMBER$ ;
rank: 371
score: 99.34718951056985
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 / n $NUMBER$ ;
rank: 371
score: 99.3165771484375
patch: if ( n 1 > n 1 + n $NUMBER$ + 1 ) {
rank: 371
score: 99.28318568638393
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * $STRING$ ;
rank: 371
score: 99.2474365234375
patch: final double n 1 1 = n 1 * n $NUMBER$ ;
rank: 371
score: 99.2367805032169
patch: final Object n 1 = n 1 ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 372
score: 99.37628173828125
patch: final final int n 1 n $NUMBER$ prod = n 1 * n 1 ; / /
rank: 372
score: 99.36673583984376
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / - $NUMBER$ . 0 ;
rank: 372
score: 99.34679497612848
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 / n $NUMBER$ ;
rank: 372
score: 99.34595489501953
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ + $NUMBER$ ;
rank: 372
score: 99.28224283854166
patch: final synchronized n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 372
score: 99.24732259114583
patch: int n 1 $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 372
score: 99.23672049386161
patch: final int [ ] n 1 = n $NUMBER$ * n 1 ;
rank: 373
score: 99.36655883789062
patch: final int n 1 n $NUMBER$ prod = ( n 1 + $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 373
score: 99.31606876148896
patch: return n 1 * n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 373
score: 99.28218900240384
patch: final int n 1 = n 1 * n $NUMBER$ ; *
rank: 373
score: 99.24713541666667
patch: double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 373
score: 99.23667279411765
patch: final long n 1 = n 1 ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 374
score: 99.40095071231617
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 + $NUMBER$ ;
rank: 374
score: 99.37588840060764
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / n 1 ;
rank: 374
score: 99.36632690429687
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 0 ;
rank: 374
score: 99.34618326822917
patch: final double n 1 n $NUMBER$ prod = n 1 . n 1 ;
rank: 374
score: 99.34553358289931
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * - $NUMBER$ * n $NUMBER$ ;
rank: 374
score: 99.32279698988971
patch: final int n $NUMBER$ n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 374
score: 99.31575775146484
patch: final int n 1 = n 1 * n $NUMBER$ * 0 . 0 ;
rank: 374
score: 99.281884765625
patch: final int n 1 : n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 374
score: 99.24712665264423
patch: final int n $NUMBER$ = n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 375
score: 99.40093315972223
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n 1 ;
rank: 375
score: 99.37552642822266
patch: final int n 1 n $NUMBER$ prod = n 1 ; / * * /
rank: 375
score: 99.3662109375
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n 1 . 0 ;
rank: 375
score: 99.32275390625
patch: float n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 375
score: 99.315625
patch: final int n 1 n $NUMBER$ prod = Math . sqrt ( n 1 + n $NUMBER$ ) ;
rank: 375
score: 99.24689190204327
patch: final double n 1 = n 1 + n $NUMBER$ $NUMBER$ ;
rank: 376
score: 99.36620154747597
patch: final int n 1 = n 1 * $NUMBER$ . 0 ;
rank: 376
score: 99.34519958496094
patch: final long n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 ;
rank: 376
score: 99.3451416015625
patch: final int n 1 n $NUMBER$ prod = new int [ $NUMBER$ ] ;
rank: 376
score: 99.32261657714844
patch: final int n 1 n $NUMBER$ prod = n 1 * 1 . $NUMBER$ ;
rank: 376
score: 99.3154541015625
patch: final int n 1 n $NUMBER$ prod = n 1 << n $NUMBER$ ;
rank: 376
score: 99.28164672851562
patch: int n 1 n $NUMBER$ prod = n 1 * 0 * n $NUMBER$ ;
rank: 376
score: 99.24658203125
patch: final int n 1 , n $NUMBER$ n $NUMBER$ ;
rank: 376
score: 99.23552389705883
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ [ 1 ] ;
rank: 377
score: 99.40003119574652
patch: final String n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 ;
rank: 377
score: 99.34508599175348
patch: final int < String > n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 377
score: 99.28129069010417
patch: final int n 1 : n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 377
score: 99.24549967447916
patch: final int n 1 = n $NUMBER$ * n 1 * n 1 ;
rank: 378
score: 99.37533569335938
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / /
rank: 378
score: 99.36603338068181
patch: final long n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 378
score: 99.32221536075367
patch: final int n 1 n $NUMBER$ prod = Math . max ( n 1 ) ;
rank: 378
score: 99.28123121995192
patch: final int n 1 = n 1 * n $NUMBER$ ; }
rank: 378
score: 99.23504638671875
patch: final int [ ] n $NUMBER$ = new int n $NUMBER$ * n 1 ;
rank: 379
score: 99.37517547607422
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / /
rank: 379
score: 99.36572875976563
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * n 1 . 0 ;
rank: 379
score: 99.34466552734375
patch: try { int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 379
score: 99.314794921875
patch: final int n 1 = Math . sqrt ( n 1 * n $NUMBER$ + n $NUMBER$ ) ;
rank: 379
score: 99.28122182992789
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; {
rank: 379
score: 99.24523111979167
patch: final int n 1 = n 1 = n 1 + n $NUMBER$ ;
rank: 380
score: 99.39937046595982
patch: final double n 1 n $NUMBER$ prod = n 1 ; / *
rank: 380
score: 99.34401568244485
patch: final int n 1 n $NUMBER$ prod = n 1 * 1 * n 1 ;
rank: 380
score: 99.2809066772461
patch: final int n 1 substring = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 380
score: 99.2346435546875
patch: final int n 1 = n $NUMBER$ ; n $NUMBER$ = n 1 ;
rank: 381
score: 99.36556846217105
patch: final int n 1 = n $NUMBER$ / ( n 1 + n $NUMBER$ ) / $NUMBER$ ;
rank: 381
score: 99.31462266710069
patch: return n 1 * n $NUMBER$ * ( n 1 + n $NUMBER$ + 1 ) ;
rank: 381
score: 99.2447265625
patch: double n $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 381
score: 99.23454733455883
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n 1 + n 1 ;
rank: 382
score: 99.3748046875
patch: final int n 1 n $NUMBER$ prod = n 1 * E $NUMBER$ ;
rank: 382
score: 99.36549682617188
patch: double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 . 0 ;
rank: 382
score: 99.34381103515625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ . max $NUMBER$ } ;
rank: 382
score: 99.3219855813419
patch: int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ * n $NUMBER$ ;
rank: 382
score: 99.31438887746711
patch: final int n 1 n $NUMBER$ prod = Math . sqrt ( n 1 + 1 ) ;
rank: 382
score: 99.27970668247768
patch: final int n 1 = n $NUMBER$ * $STRING$ * n $NUMBER$ ;
rank: 382
score: 99.24466378348214
patch: int n $NUMBER$ = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 382
score: 99.2345329733456
patch: final int n 1 : n $NUMBER$ ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 383
score: 99.39853802849265
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ , n $NUMBER$
rank: 383
score: 99.3436638327206
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . max $NUMBER$ }
rank: 383
score: 99.32175580193015
patch: final int n $NUMBER$ = Math . max ( n 1 , n $NUMBER$ ) ;
rank: 383
score: 99.27965545654297
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ }
rank: 383
score: 99.23434244791666
patch: final int n 1 = n $NUMBER$ ; n 1 = n 1 ;
rank: 384
score: 99.39848497178819
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ *
rank: 384
score: 99.37436810661765
patch: final String n 1 n $NUMBER$ prod = n 1 * n 1 . 0 ;
rank: 384
score: 99.36510620117187
patch: final int n 1 = n 1 / ( n 1 + 1 ) / $NUMBER$ . 0 ;
rank: 384
score: 99.34200613839286
patch: final double n 1 n $NUMBER$ prod = n 1 * 1 ;
rank: 384
score: 99.24443359375
patch: final double n 1 = n 1 * n 1 / n $NUMBER$ ;
rank: 384
score: 99.23361385569854
patch: final int n 1 = n 1 ; final int n $NUMBER$ -= n $NUMBER$ ;
rank: 385
score: 99.36471424932066
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 / $NUMBER$ . 1 ;
rank: 385
score: 99.3129150390625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ . $NUMBER$ ;
rank: 386
score: 99.39744737413194
patch: / * / final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 386
score: 99.37390854779412
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 / n $NUMBER$ ;
rank: 386
score: 99.36335305606617
patch: final int n 1 n $NUMBER$ prod = n 1 - n $NUMBER$ . 0 ;
rank: 386
score: 99.3424431295956
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length * n 1 ;
rank: 386
score: 99.34114343979779
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . $NUMBER$ ;
rank: 386
score: 99.2330681295956
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * $STRING$ + n $NUMBER$ ;
rank: 387
score: 99.373779296875
patch: final final final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 387
score: 99.36329234730114
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ % n 1 . 0 ;
rank: 387
score: 99.3392333984375
patch: final int n 1 = n $NUMBER$ * n 1 * n $NUMBER$ . 0 ;
rank: 387
score: 99.32133214613971
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 + 1 ;
rank: 387
score: 99.27705891927083
patch: final int n 1 = n 1 * max $NUMBER$ ;
rank: 387
score: 99.24412434895834
patch: final int n 1 = n 1 * n $NUMBER$ * $NUMBER$ $NUMBER$ ;
rank: 387
score: 99.23305376838235
patch: final int n 1 n $NUMBER$ prod = $STRING$ + n $NUMBER$ * n $NUMBER$ ;
rank: 388
score: 99.3737433938419
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % 1 ;
rank: 388
score: 99.363134765625
patch: final long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ $NUMBER$ . 0 ;
rank: 388
score: 99.3421875
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length $NUMBER$ ;
rank: 388
score: 99.33858816964286
patch: final int n 1 = n 1 * n 1 * $NUMBER$ ;
rank: 388
score: 99.31204833984376
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 388
score: 99.2329460592831
patch: final int n 1 n $NUMBER$ prod = n 1 ; if ( n $NUMBER$ ;
rank: 389
score: 99.3732681274414
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * 1 ;
rank: 389
score: 99.36283794202302
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ % n 1 . 0 ;
rank: 389
score: 99.34199354383681
patch: final int n 1 n $NUMBER$ prod = ( Integer ) n 1 * n $NUMBER$ ;
rank: 389
score: 99.24340006510417
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ )
rank: 390
score: 99.37285698784723
patch: final String n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 390
score: 99.36221976902173
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 : 1 . 1 ;
rank: 390
score: 99.3418327780331
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ + n 1 ;
rank: 390
score: 99.24326985677084
patch: final int n 1 = n 1 * n $NUMBER$ $NUMBER$ * $NUMBER$ ;
rank: 390
score: 99.232421875
patch: final int n 1 = n 1 ; final int n $NUMBER$ = $STRING$ ;
rank: 391
score: 99.36168148643092
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . $NUMBER$ ;
rank: 391
score: 99.3382339477539
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * 0 . 0 ;
rank: 391
score: 99.31117078993056
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 - n $NUMBER$ ;
rank: 391
score: 99.27411651611328
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ; n $NUMBER$ -- ;
rank: 391
score: 99.23166073069854
patch: final int n 1 n $NUMBER$ prod = super . n $NUMBER$ * n $NUMBER$ ;
rank: 392
score: 99.37176513671875
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . / $NUMBER$ ;
rank: 392
score: 99.36118774414062
patch: final int n 1 n $NUMBER$ prod = n 1 + n 1 / n $NUMBER$ . 0 ;
rank: 392
score: 99.34072536892361
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . length $NUMBER$ }
rank: 392
score: 99.33771110983456
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % n $NUMBER$ ;
rank: 392
score: 99.31090630425348
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 392
score: 99.2734146118164
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ) * n 1 ;
rank: 392
score: 99.2427978515625
patch: final int n 1 n $NUMBER$ prod = n 1 . ;
rank: 392
score: 99.23165457589286
patch: final int n 1 = new int n 1 * n $NUMBER$ ;
rank: 393
score: 99.39578586154514
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 * $NUMBER$ )
rank: 393
score: 99.37175641741071
patch: final long n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ;
rank: 393
score: 99.361083984375
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 / n 1 . 0 ;
rank: 393
score: 99.34061925551471
patch: final Object n 1 = n $NUMBER$ ; final int n 1 = n $NUMBER$ ;
rank: 393
score: 99.31960623604911
patch: final int n 1 = n 1 + n $NUMBER$ * $NUMBER$ ;
rank: 393
score: 99.31058078342014
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ += n $NUMBER$ ;
rank: 393
score: 99.27322591145834
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ - n $NUMBER$ ;
rank: 393
score: 99.2423095703125
patch: final int n 1 n $NUMBER$ prod = n 1 + $NUMBER$ $NUMBER$ ;
rank: 393
score: 99.23146158854166
patch: int n 1 = n $NUMBER$ ; int n $NUMBER$ = n $NUMBER$ ;
rank: 394
score: 99.36087646484376
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / E $NUMBER$ . 0 ;
rank: 394
score: 99.34055582682292
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . n $NUMBER$ / n $NUMBER$ ;
rank: 394
score: 99.31947954963235
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ + 1 ;
rank: 394
score: 99.31024169921875
patch: final int n 1 = n 1 * n $NUMBER$ - n 1 * n $NUMBER$ ;
rank: 394
score: 99.27314758300781
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * }
rank: 394
score: 99.24190848214286
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ / $NUMBER$ ;
rank: 394
score: 99.23134202223558
patch: final int n 1 ] = n $NUMBER$ * n $NUMBER$ ;
rank: 395
score: 99.3608731356534
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n $NUMBER$ * $NUMBER$ . 0 ;
rank: 395
score: 99.30978393554688
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 * n $NUMBER$ . 0 ;
rank: 395
score: 99.27314758300781
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ; n $NUMBER$ ++ ;
rank: 395
score: 99.24139811197917
patch: final double n $NUMBER$ = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 395
score: 99.23122989430146
patch: final int n 1 n $NUMBER$ prod n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 396
score: 99.37074190027573
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / * /
rank: 396
score: 99.36007557744566
patch: final int n 1 n $NUMBER$ prod = n 1 * Fast CaMeL Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 396
score: 99.31886201746323
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ + $NUMBER$ ;
rank: 396
score: 99.30969848632813
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n 1 . 0 ;
rank: 396
score: 99.27284458705357
patch: long n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 396
score: 99.24076625279018
patch: int n $NUMBER$ = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 397
score: 99.39407687717014
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 | n $NUMBER$ ;
rank: 397
score: 99.3707275390625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / - $NUMBER$ ;
rank: 397
score: 99.35994680304276
patch: final int n 1 n $NUMBER$ prod = ( n 1 + n $NUMBER$ ) / $NUMBER$ ;
rank: 397
score: 99.33979348575367
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . min $NUMBER$
rank: 397
score: 99.33686065673828
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 397
score: 99.31876866957721
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ - $NUMBER$ ;
rank: 397
score: 99.27206217447916
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * max $NUMBER$ ;
rank: 397
score: 99.23949381510417
patch: final double n $NUMBER$ = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 398
score: 99.39402940538194
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ $NUMBER$ ;
rank: 398
score: 99.33960774739583
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length 1 ;
rank: 398
score: 99.3185173483456
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ n $NUMBER$ ;
rank: 398
score: 99.30910915798611
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ; / * /
rank: 398
score: 99.23887532552084
patch: int n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 398
score: 99.2305908203125
patch: final int n 1 = n 1 ; final int n $NUMBER$ :
rank: 399
score: 99.37062581380208
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * / $NUMBER$ ;
rank: 399
score: 99.3394775390625
patch: final int n 1 n $NUMBER$ prod = ( - $NUMBER$ ) * n $NUMBER$ ;
rank: 399
score: 99.33652630974265
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . n 1 ;
rank: 399
score: 99.30870903862848
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * E $NUMBER$ ;
rank: 399
score: 99.27125549316406
patch: final int n 1 n $NUMBER$ prod iterator = n 1 * n $NUMBER$ ;
rank: 399
score: 99.23866780598958
patch: final long n 1 = n 1 + n $NUMBER$ ;
rank: 400
score: 99.35887509300595
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 : 1 ;
rank: 400
score: 99.33917914496527
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ; n $NUMBER$ ;
rank: 400
score: 99.27096557617188
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ * n $NUMBER$ 1 ;
rank: 400
score: 99.23828938802083
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$
rank: 400
score: 99.23040412454044
patch: final int [ ] n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 401
score: 99.35872650146484
patch: final int n 1 n $NUMBER$ prod = n 1 * E . 0 ;
rank: 401
score: 99.33904622395833
patch: final int < Integer > n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 401
score: 99.33562825520833
patch: final long n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 ;
rank: 401
score: 99.31800752527573
patch: final int start = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 401
score: 99.27082824707031
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * 0 ;
rank: 401
score: 99.23795863560268
patch: final int n 1 1 $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 401
score: 99.23039694393383
patch: final Integer n 1 = n 1 ; final int n 1 = n $NUMBER$ ;
rank: 402
score: 99.39358859592014
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ : n 1 ;
rank: 402
score: 99.35857282366071
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 + 1 ;
rank: 402
score: 99.33904351128473
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * $NUMBER$ $NUMBER$ ;
rank: 402
score: 99.23784993489583
patch: final float n 1 = n 1 * n $NUMBER$ * n 1 ;
rank: 403
score: 99.39331772748162
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 + 1 ;
rank: 403
score: 99.35839165581598
patch: final int n 1 n $NUMBER$ prod = n 1 . 0 / $NUMBER$ . 0 ;
rank: 403
score: 99.31761977251838
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 403
score: 99.30821126302084
patch: final int n 1 = n 1 - n 1 * n $NUMBER$ ;
rank: 403
score: 99.27037635216347
patch: final int n 1 = n $NUMBER$ * - n $NUMBER$ ;
rank: 403
score: 99.2299445657169
patch: final int [ ] n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 404
score: 99.33858235677083
patch: final String n 1 n $NUMBER$ prod = ( int ) n $NUMBER$ * n $NUMBER$ ;
rank: 404
score: 99.33516199448529
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . n 1 ;
rank: 404
score: 99.30809384300595
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 404
score: 99.23765462239584
patch: final int n 1 $NUMBER$ n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 404
score: 99.22968292236328
patch: final int [ ] n 1 = new int n $NUMBER$ * n $NUMBER$ ;
rank: 405
score: 99.3928581686581
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ , n 1
rank: 405
score: 99.33835856119792
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ * 0 . $NUMBER$ ;
rank: 405
score: 99.31680118336396
patch: final int n 1 = n 1 * n $NUMBER$ + n $NUMBER$ + 1 ;
rank: 405
score: 99.26992797851562
patch: final int n 1 n $NUMBER$ prod equals = n 1 * n $NUMBER$ ;
rank: 405
score: 99.23732096354166
patch: final double n $NUMBER$ = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 406
score: 99.392822265625
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 , n $NUMBER$ 1
rank: 406
score: 99.36979166666667
patch: final int n 1 n $NUMBER$ prod = n 1 . n $NUMBER$ * n $NUMBER$ ;
rank: 406
score: 99.35749647352431
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * n 1 ;
rank: 406
score: 99.33809168198529
patch: final String n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . max $NUMBER$
rank: 406
score: 99.33322323069854
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 0 ;
rank: 406
score: 99.31639188878677
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ / 1 ;
rank: 406
score: 99.23675537109375
patch: final int n 1 , $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 406
score: 99.22955322265625
patch: final E n 1 = n 1 * n $NUMBER$ ;
rank: 407
score: 99.36975969587054
patch: final int n 1 n $NUMBER$ prod = n 1 / $NUMBER$ ;
rank: 407
score: 99.35743297230114
patch: final long n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 407
score: 99.31620025634766
patch: double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 407
score: 99.30766027113971
patch: final else final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 407
score: 99.22906494140625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * false ;
rank: 408
score: 99.39194623161765
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . n $NUMBER$
rank: 408
score: 99.36974334716797
patch: final final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 408
score: 99.33241489955357
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ ;
rank: 408
score: 99.26835123697917
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n 1 $NUMBER$ ;
rank: 408
score: 99.23606654575893
patch: / * final double n 1 = n 1 * n $NUMBER$ ;
rank: 408
score: 99.22901916503906
patch: final int n 1 = n $NUMBER$ ; return n 1 * n $NUMBER$ ;
rank: 409
score: 99.39194623161765
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 - $NUMBER$ ;
rank: 409
score: 99.35712432861328
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ % $NUMBER$ ;
rank: 409
score: 99.33707921645221
patch: final int n 1 n $NUMBER$ prod = new int n $NUMBER$ * n $NUMBER$ ;
rank: 409
score: 99.33192354090073
patch: final double n 1 n $NUMBER$ prod = n 1 / n 1 . 0 ;
rank: 409
score: 99.22843663832721
patch: final int n 1 = n 1 ; final Object n $NUMBER$ = n 1 ;
rank: 410
score: 99.39185333251953
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$
rank: 410
score: 99.35710343070652
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 : 1 . 1 ;
rank: 410
score: 99.33673095703125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . iterator n $NUMBER$ ;
rank: 410
score: 99.31608312270221
patch: double n 1 = n 1 * n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 410
score: 99.30681295955883
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ; / *
rank: 410
score: 99.26816969651442
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ; *
rank: 410
score: 99.22812787224265
patch: final int n 1 n $NUMBER$ prod = double . n $NUMBER$ * n $NUMBER$ ;
rank: 411
score: 99.35698009672619
patch: final int n 1 = n 1 * ( n 1 + n $NUMBER$ + 1 ) / $NUMBER$ ;
rank: 411
score: 99.26805768694196
patch: final int n 1 n $NUMBER$ prod = max * n $NUMBER$ ;
rank: 411
score: 99.2279281616211
patch: final int n 1 = n $NUMBER$ ; return n $NUMBER$ * n $NUMBER$ ;
rank: 412
score: 99.36839463975694
patch: final / * final int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 412
score: 99.35686700994319
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n 1 * n 1 . 0 ;
rank: 412
score: 99.3304084329044
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ $NUMBER$ . 0 ;
rank: 412
score: 99.31529325597427
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ / $NUMBER$ ;
rank: 412
score: 99.30656163832721
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : 1 ;
rank: 412
score: 99.23521071213942
patch: final double n 1 = n 1 * n 1 $NUMBER$ ;
rank: 413
score: 99.39126925998264
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ $NUMBER$ ;
rank: 413
score: 99.35604519314236
patch: final n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 ;
rank: 413
score: 99.30634508634868
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ; /
rank: 413
score: 99.26767578125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ $NUMBER$ $NUMBER$ ;
rank: 413
score: 99.23507486979166
patch: final float n 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 414
score: 99.36782836914062
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 ; }
rank: 414
score: 99.35556862571023
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod * 0 . 0 ;
rank: 414
score: 99.33598058363971
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ . n $NUMBER$ ;
rank: 414
score: 99.3296890258789
patch: final double n 1 n $NUMBER$ prod = n 1 / $NUMBER$ . 0 ;
rank: 414
score: 99.26762390136719
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; = n $NUMBER$ ;
rank: 414
score: 99.22772623697917
patch: int n 1 = n 1 ; int n $NUMBER$ = n $NUMBER$ ;
rank: 415
score: 99.36774359809027
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * % $NUMBER$ ;
rank: 415
score: 99.33579915364584
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . max 1 ;
rank: 415
score: 99.32890768612133
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ n $NUMBER$ ;
rank: 415
score: 99.31479714133523
patch: double n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 415
score: 99.22703642003677
patch: final int n 1 n $NUMBER$ prod = ( n $NUMBER$ * n 1 ) ;
rank: 416
score: 99.35526706861413
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 : 1 . $NUMBER$ ;
rank: 416
score: 99.33572387695312
patch: final int [ ] n $NUMBER$ n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 416
score: 99.3147201538086
patch: final int int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 416
score: 99.3062744140625
patch: final int n $NUMBER$ n $NUMBER$ = n 1 * n 1 * n $NUMBER$ ;
rank: 416
score: 99.26734270368304
patch: try { final int n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 416
score: 99.23475748697916
patch: / * final int n 1 = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 416
score: 99.2268295288086
patch: final int n $NUMBER$ n $NUMBER$ n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 417
score: 99.355224609375
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / ( n 1 + 1 ) ;
rank: 417
score: 99.33489227294922
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . max $NUMBER$ } }
rank: 417
score: 99.32754337086396
patch: final int n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ * 0 ;
rank: 417
score: 99.31430233226104
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 + n $NUMBER$ ;
rank: 417
score: 99.30625
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 417
score: 99.23458658854166
patch: final int n 1 n $NUMBER$ prod = n 1 * / $NUMBER$ ;
rank: 417
score: 99.2265396118164
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; / * * /
rank: 418
score: 99.3899284811581
patch: final int n 1 n $NUMBER$ prod = n 1 * $STRING$ * n 1 ;
rank: 418
score: 99.36707356770833
patch: final Object n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 418
score: 99.33473833869485
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 418
score: 99.26722717285156
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ; *
rank: 418
score: 99.23428780691964
patch: final int n 1 n $NUMBER$ prod = n 1 ; * /
rank: 418
score: 99.22645479090073
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * this . n $NUMBER$ ;
rank: 419
score: 99.35463645241477
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 * n 1 ;
rank: 419
score: 99.33468967013889
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . max $NUMBER$ }
rank: 419
score: 99.23419189453125
patch: double n 1 = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 420
score: 99.388671875
patch: / * / final int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 420
score: 99.35460316051136
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n 1 * $NUMBER$ . 0 ;
rank: 420
score: 99.33466254340277
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . max 1 * n $NUMBER$ ;
rank: 420
score: 99.32671042049633
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 420
score: 99.31404876708984
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ] ;
rank: 420
score: 99.2338155110677
patch: final int n $NUMBER$ = n 1 + n 1 ;
rank: 421
score: 99.35415810032895
patch: int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n 1 . 0 ;
rank: 421
score: 99.33418104383681
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * ( int ) n $NUMBER$ ;
rank: 421
score: 99.32619341681985
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n 1 ;
rank: 421
score: 99.2331298828125
patch: final int n 1 = n 1 + n 1 + n $NUMBER$ ;
rank: 422
score: 99.36544979319854
patch: final String n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 422
score: 99.35410853794643
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 n $NUMBER$ ;
rank: 422
score: 99.33412272135416
patch: final String n 1 n $NUMBER$ prod = ( int ) n 1 ;
rank: 422
score: 99.31364889705883
patch: final int n 1 = n 1 * n $NUMBER$ + n $NUMBER$ + $NUMBER$ ;
rank: 422
score: 99.3052001953125
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ = n 1 . 0 ;
rank: 422
score: 99.2662841796875
patch: final Object n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 422
score: 99.23304850260416
patch: int n 1 = n 1 * n $NUMBER$ $NUMBER$ * n 1 ;
rank: 422
score: 99.22609576056985
patch: final String n 1 = n $NUMBER$ ; final int n 1 = n 1 ;
rank: 423
score: 99.38812934027777
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 , n $NUMBER$ $NUMBER$
rank: 423
score: 99.35408742804276
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 1 ;
rank: 423
score: 99.33348173253677
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . $NUMBER$ * n $NUMBER$ ;
rank: 423
score: 99.32518005371094
patch: final double n 1 = n 1 * n $NUMBER$ n $NUMBER$ . 0 ;
rank: 423
score: 99.31362017463235
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ / $NUMBER$ ;
rank: 423
score: 99.3048095703125
patch: final double n 1 = n 1 * n 1 * $NUMBER$ . 0 ;
rank: 423
score: 99.26607259114583
patch: final try { final int n 1 = n 1 * n $NUMBER$ ;
rank: 423
score: 99.23299734933036
patch: final int n 1 = n 1 * $NUMBER$ $NUMBER$ * $NUMBER$ ;
rank: 423
score: 99.22608531605114
patch: final int n 1 n $NUMBER$ prod = null ;
rank: 424
score: 99.38799370659723
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * 1 . 0 ;
rank: 424
score: 99.36490207248264
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * * $NUMBER$ ;
rank: 424
score: 99.35405939275569
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * n 1 * $NUMBER$ . 0 ;
rank: 424
score: 99.33347455193015
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . min ;
rank: 424
score: 99.32443033854166
patch: final int n 1 = n 1 * n 1 . n $NUMBER$ ;
rank: 424
score: 99.26589529854911
patch: final int n 1 = n 1 * n $NUMBER$ * $STRING$ ;
rank: 425
score: 99.36479949951172
patch: } final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 425
score: 99.35378099524456
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 . 0 * $NUMBER$ ;
rank: 425
score: 99.31284466911765
patch: Double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 425
score: 99.30415271577381
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 * n $NUMBER$ ;
rank: 425
score: 99.26588439941406
patch: final int n 1 compare = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 425
score: 99.23169759114583
patch: final int n 1 n $NUMBER$ prod = n 1 ; n $NUMBER$ ;
rank: 425
score: 99.2257941750919
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . ( n 1 ) ;
rank: 426
score: 99.38768174913194
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ /
rank: 426
score: 99.36458333333333
patch: final / * final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 426
score: 99.35265435112848
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0
rank: 426
score: 99.3331657858456
patch: final int [ ] n 1 = n $NUMBER$ * n $NUMBER$ - n $NUMBER$ ;
rank: 426
score: 99.26494140625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ? n $NUMBER$ ;
rank: 426
score: 99.231298828125
patch: final int n 1 = n 1 = n $NUMBER$ * n 1 ;
rank: 426
score: 99.2257308959961
patch: final int n 1 = n 1 ; if n $NUMBER$ == n $NUMBER$ ;
rank: 427
score: 99.38755967881944
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ 1 ;
rank: 427
score: 99.36408547794117
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 ; / * /
rank: 427
score: 99.35235305059524
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ; * /
rank: 427
score: 99.32320404052734
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 427
score: 99.30398559570312
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 427
score: 99.26427459716797
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ SIZE * n $NUMBER$ ;
rank: 427
score: 99.22563620174633
patch: final float n 1 = n $NUMBER$ ; final int n 1 = n $NUMBER$ ;
rank: 428
score: 99.36404758029514
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * - 0 ;
rank: 428
score: 99.35230553668478
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 n $NUMBER$ . 0 ;
rank: 428
score: 99.33309936523438
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ + 0 ;
rank: 428
score: 99.3123291015625
patch: final int start 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 428
score: 99.26320103236607
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * max ;
rank: 428
score: 99.23125
patch: final double n 1 = n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 428
score: 99.22541360294117
patch: final int n 1 = n $NUMBER$ ; final Object n 1 = n 1 ;
rank: 429
score: 99.36394904641544
patch: final boolean n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 429
score: 99.35223943536931
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ * n 1 . 0 ;
rank: 429
score: 99.32126752068015
patch: final byte n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 429
score: 99.26317545572917
patch: int n 1 equals = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 429
score: 99.23104654947916
patch: final int n 1 = n 1 / n $NUMBER$ / n $NUMBER$ ;
rank: 429
score: 99.2242072610294
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n 1 ) ;
rank: 430
score: 99.38606092664931
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ + 1 )
rank: 430
score: 99.36394585503473
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . / $NUMBER$ ;
rank: 430
score: 99.3516845703125
patch: final int n 1 = n 1 / ( n 1 + n $NUMBER$ ) ;
rank: 430
score: 99.32126686789773
patch: double n 1 n $NUMBER$ prod = n 1 ;
rank: 430
score: 99.30294036865234
patch: final int n 1 1 = n 1 * n $NUMBER$ * n 1 ;
rank: 430
score: 99.26292317708334
patch: final int n 1 n $NUMBER$ prod -= n 1 * n $NUMBER$ ;
rank: 430
score: 99.23093959263393
patch: final int n $NUMBER$ n 1 = n 1 + n $NUMBER$ ;
rank: 431
score: 99.3638916015625
patch: final Object n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . n $NUMBER$ ;
rank: 431
score: 99.35161389802632
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . $NUMBER$ ;
rank: 431
score: 99.33242618336396
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ + 0 + n $NUMBER$ ;
rank: 431
score: 99.32123209635417
patch: final int n 1 = n 1 * n 1 . n 1 ;
rank: 431
score: 99.31116440716912
patch: Double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 431
score: 99.26276041666667
patch: final int n 1 = n 1 * n $NUMBER$ ; n $NUMBER$ ;
rank: 431
score: 99.23057204026442
patch: final double n 1 = n 1 $NUMBER$ * n $NUMBER$ ;
rank: 432
score: 99.36367458767361
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / / ;
rank: 432
score: 99.35144573709239
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 : 0 . 1 ;
rank: 432
score: 99.33238309972427
patch: final int n 1 [ ] = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 432
score: 99.31110696231617
patch: final int n 1 n $NUMBER$ prod = n 1 - n $NUMBER$ * 1 ;
rank: 432
score: 99.30260649181548
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 432
score: 99.262109375
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ + n $NUMBER$ ;
rank: 432
score: 99.23002115885417
patch: final int n $NUMBER$ = n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 432
score: 99.2234115600586
patch: final int n 1 = n 1 ; for n $NUMBER$ = n 1 ;
rank: 433
score: 99.36327311197917
patch: final final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ;
rank: 433
score: 99.33151584201389
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ . max $NUMBER$
rank: 433
score: 99.31110696231617
patch: final int n 1 ; final int n 1 = n 1 * n $NUMBER$ ;
rank: 433
score: 99.30246151194854
patch: List n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 433
score: 99.26201985677083
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ n 1 ;
rank: 433
score: 99.22991071428571
patch: final int n 1 $NUMBER$ = n 1 1 * n $NUMBER$ ;
rank: 433
score: 99.22325134277344
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; if n $NUMBER$ ;
rank: 434
score: 99.38562689887152
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ /
rank: 434
score: 99.36317952473958
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ [ 0 ] ;
rank: 434
score: 99.35093778722427
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ 1 . 0 ;
rank: 434
score: 99.33116997612848
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . max 1 }
rank: 434
score: 99.302001953125
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ . 0 . $NUMBER$ ;
rank: 434
score: 99.22989908854167
patch: final int n 1 = n 1 * n $NUMBER$ << n $NUMBER$ ;
rank: 435
score: 99.36301676432292
patch: final int n 1 n $NUMBER$ prod = ( double ) n $NUMBER$ * n $NUMBER$ ;
rank: 435
score: 99.2614517211914
patch: final int n 1 n $NUMBER$ prod = * n $NUMBER$ * n $NUMBER$ ;
rank: 435
score: 99.22288295200893
patch: final int n 1 = new int n $NUMBER$ * n $NUMBER$ ;
rank: 436
score: 99.3505626860119
patch: final int n 1 n $NUMBER$ prod = ( n 1 n $NUMBER$ prod / $NUMBER$ ) / $NUMBER$ ;
rank: 436
score: 99.31047058105469
patch: final int n 1 = Math . max ( n 1 * n $NUMBER$ ;
rank: 436
score: 99.2294189453125
patch: final int n 1 , n 1 = n $NUMBER$ * n 1 ;
rank: 437
score: 99.38515218098958
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ,
rank: 437
score: 99.34963156960227
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n 1 * n $NUMBER$ . 0 ;
rank: 437
score: 99.31896254595588
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ % n $NUMBER$ ;
rank: 437
score: 99.30181121826172
patch: return n 1 * n 1 * n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 437
score: 99.26136016845703
patch: final final int n 1 n $NUMBER$ prod += n 1 * n $NUMBER$ ;
rank: 437
score: 99.22927621694711
patch: n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 437
score: 99.22264188878677
patch: final int n 1 = n 1 ; if ( n 1 == n $NUMBER$ ;
rank: 438
score: 99.38515218098958
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ | n 1 ;
rank: 438
score: 99.3304443359375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . 0 ;
rank: 438
score: 99.3016845703125
patch: final int n 1 = n 1 * n $NUMBER$ : n $NUMBER$ ;
rank: 438
score: 99.26095815805289
patch: int [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 438
score: 99.22237955729166
patch: final float n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 ;
rank: 439
score: 99.33010428292411
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ >> $NUMBER$ ;
rank: 439
score: 99.31843566894531
patch: final double n 1 n $NUMBER$ prod = n 1 * 0 . $NUMBER$ ;
rank: 439
score: 99.308837890625
patch: final int n 1 = n 1 * n $NUMBER$ * 0 . $NUMBER$ ;
rank: 439
score: 99.3016357421875
patch: final int n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ * n 1 ;
rank: 439
score: 99.22843424479167
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 )
rank: 439
score: 99.22229721966912
patch: final int n 1 n $NUMBER$ prod = super . n 1 * n $NUMBER$ ;
rank: 440
score: 99.36189778645833
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / . 0 ;
rank: 440
score: 99.34892835115132
patch: final int n $NUMBER$ = n 1 * ( n 1 + n $NUMBER$ ) / $NUMBER$ ;
rank: 440
score: 99.33005099826389
patch: final int n 1 n $NUMBER$ prod = ( n 1 * 0 . $NUMBER$ ) ;
rank: 440
score: 99.31780646829044
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ $NUMBER$ * $NUMBER$ ;
rank: 440
score: 99.30867004394531
patch: double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ + 1 ;
rank: 440
score: 99.30130165501645
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 ; / * /
rank: 440
score: 99.26018524169922
patch: final int n 1 n $NUMBER$ prod equals = n $NUMBER$ * n $NUMBER$ ;
rank: 440
score: 99.22821514423077
patch: final int n 1 = n 1 + n $NUMBER$ 1 ;
rank: 441
score: 99.38481987847223
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : n 1 ;
rank: 441
score: 99.36189778645833
patch: final Object n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / * /
rank: 441
score: 99.30117618336396
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 441
score: 99.26004791259766
patch: final int n 1 n $NUMBER$ prod = = n $NUMBER$ * n 1 ;
rank: 441
score: 99.22786771334134
patch: final int n 1 = n 1 * n 1 ; ;
rank: 441
score: 99.22177303538604
patch: final int n 1 = n 1 * n 1 ; final int n $NUMBER$ :
rank: 442
score: 99.30117458767361
patch: final int n 1 = n 1 * n $NUMBER$ , n $NUMBER$ = n $NUMBER$ ;
rank: 442
score: 99.259228515625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ ; final
rank: 442
score: 99.2277080829327
patch: final float n 1 = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 442
score: 99.22144272748162
patch: final double n 1 = n 1 ; final double n $NUMBER$ = n 1 ;
rank: 443
score: 99.38446403952206
patch: final double n 1 n $NUMBER$ prod = n 1 * 1 * n $NUMBER$ ;
rank: 443
score: 99.36156548394098
patch: final final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 0 ;
rank: 443
score: 99.34828879616477
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ + n 1 . 0 ;
rank: 443
score: 99.32962375217014
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . - $NUMBER$ ;
rank: 443
score: 99.30603841145833
patch: final int n 1 n $NUMBER$ prod = Long . MAX _ VALUE ;
rank: 443
score: 99.2586441040039
patch: int [ ] n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 443
score: 99.22759540264423
patch: n 1 = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 443
score: 99.22120576746323
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ [ $NUMBER$ ] ;
rank: 444
score: 99.38445366753473
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % - $NUMBER$ ;
rank: 444
score: 99.3480224609375
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ * $NUMBER$ ;
rank: 444
score: 99.32954676011029
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length - n 1 ;
rank: 444
score: 99.305908203125
patch: int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 444
score: 99.30089518229167
patch: return n 1 * ( n 1 * n $NUMBER$ + 1 ) ;
rank: 444
score: 99.258544921875
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ; }
rank: 444
score: 99.2272216796875
patch: final int n 1 = n $NUMBER$ * $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 444
score: 99.22117704503677
patch: final int n 1 = n $NUMBER$ ; final int n $NUMBER$ : n $NUMBER$ ;
rank: 445
score: 99.361328125
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . false ;
rank: 445
score: 99.34770122327302
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ $NUMBER$ * $NUMBER$ . 0 ;
rank: 445
score: 99.32937282986111
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ . length ;
rank: 445
score: 99.30076688878677
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / ;
rank: 446
score: 99.36107584635417
patch: final int n 1 n $NUMBER$ prod = n 1 * * $NUMBER$ ;
rank: 446
score: 99.3465576171875
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * E . 0 ;
rank: 446
score: 99.329345703125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . min $NUMBER$ }
rank: 446
score: 99.30073098575367
patch: final int n 1 n $NUMBER$ prod n 1 = n 1 * n 1 ;
rank: 446
score: 99.2579833984375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ : n $NUMBER$ ;
rank: 446
score: 99.22113037109375
patch: final / * * * * * * * * * * * * /
rank: 447
score: 99.38373480902777
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ $NUMBER$ ;
rank: 447
score: 99.34621710526316
patch: final int n 1 = n 1 * ( n $NUMBER$ + n $NUMBER$ ) / $NUMBER$ ;
rank: 447
score: 99.31624109604779
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . $NUMBER$ ;
rank: 447
score: 99.30058361235119
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ - n $NUMBER$ ;
rank: 447
score: 99.25779371995192
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; *
rank: 447
score: 99.22623697916667
patch: final int n 1 = n $NUMBER$ - n $NUMBER$ ;
rank: 448
score: 99.34603721217105
patch: final int Umin = n 1 * ( n 1 + n $NUMBER$ ) / $NUMBER$ ;
rank: 448
score: 99.32908630371094
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . iterator ( ) ;
rank: 448
score: 99.31541224888393
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 448
score: 99.3001937866211
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ 1 ;
rank: 448
score: 99.22592397836539
patch: final int n 1 = n 1 $NUMBER$ + n $NUMBER$ ;
rank: 448
score: 99.22057342529297
patch: final int [ ] n $NUMBER$ n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 449
score: 99.3606948852539
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ / $NUMBER$ ;
rank: 449
score: 99.3459139737216
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ ) / $NUMBER$ . 0 ;
rank: 449
score: 99.32908002068015
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ & n $NUMBER$ . length ;
rank: 449
score: 99.30326080322266
patch: double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ + $NUMBER$ ;
rank: 449
score: 99.2577133178711
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ $NUMBER$ ] ;
rank: 449
score: 99.2258056640625
patch: final int n 1 n $NUMBER$ prod = n 1 % n 1 ;
rank: 449
score: 99.2201919555664
patch: final int n 1 = n 1 ; final int $NUMBER$ = n $NUMBER$ ;
rank: 450
score: 99.34466873972039
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * n $NUMBER$ . 0 ;
rank: 450
score: 99.32895795036765
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . length ;
rank: 450
score: 99.31527944711539
patch: int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ;
rank: 450
score: 99.29973008897569
patch: final int n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ - n $NUMBER$ ;
rank: 450
score: 99.25748697916667
patch: final int n 1 -= n $NUMBER$ * n $NUMBER$ ;
rank: 450
score: 99.22578568892045
patch: double n 1 = n 1 * n 1 ;
rank: 451
score: 99.38182915581598
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ $NUMBER$
rank: 451
score: 99.36027975643383
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . n $NUMBER$ ;
rank: 451
score: 99.34454666940789
patch: final int n 1 n $NUMBER$ prod += n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 451
score: 99.32846505301339
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ - $NUMBER$ ;
rank: 451
score: 99.3018798828125
patch: final int n 1 n $NUMBER$ prod = - n $NUMBER$ * n $NUMBER$ ;
rank: 451
score: 99.22560628255208
patch: final int n $NUMBER$ = n 1 - n $NUMBER$ ;
rank: 452
score: 99.38182830810547
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ) ;
rank: 452
score: 99.36027257582721
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / ?
rank: 452
score: 99.344482421875
patch: int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ ;
rank: 452
score: 99.3284553079044
patch: final int [ ] n 1 = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 452
score: 99.31495576746323
patch: final int n 1 n $NUMBER$ prod = n 1 + n 1 * $NUMBER$ ;
rank: 452
score: 99.29874965122768
patch: Integer n 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 452
score: 99.2564926147461
patch: final int n 1 = n 1 * n $NUMBER$ * * n $NUMBER$ ;
rank: 452
score: 99.22523600260416
patch: final int n 1 = n 1 * $NUMBER$ + n $NUMBER$ $NUMBER$ ;
rank: 452
score: 99.22003532858456
patch: final Integer n 1 = n $NUMBER$ ; final int n $NUMBER$ = n 1 ;
rank: 453
score: 99.38069661458333
patch: final Object n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 ;
rank: 453
score: 99.36024983723958
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ * $NUMBER$ . 0 ;
rank: 453
score: 99.34363902698864
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 - n 1 ;
rank: 453
score: 99.32803165211396
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ | n $NUMBER$ ;
rank: 453
score: 99.31488396139706
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 . $NUMBER$ ;
rank: 453
score: 99.3010986328125
patch: final int n 1 n $NUMBER$ prod = n 1 * ( double ;
rank: 453
score: 99.22522786458333
patch: final int n 1 n $NUMBER$ prod = n 1 *= n $NUMBER$ ;
rank: 453
score: 99.21953938802083
patch: final int n 1 n $NUMBER$ prod = - $NUMBER$ * n 1 ;
rank: 454
score: 99.34346731085526
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ % n $NUMBER$ . 0 ;
rank: 454
score: 99.32799614800348
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ . $NUMBER$ ;
rank: 454
score: 99.31478678385416
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod ;
rank: 454
score: 99.29847627527573
patch: final int n 1 n $NUMBER$ prod = 1 * n $NUMBER$ * n 1 ;
rank: 454
score: 99.25542743389423
patch: try { int n 1 = n 1 * n $NUMBER$ ;
rank: 454
score: 99.21945369944854
patch: / * * * * * * * * * * * * * * /
rank: 455
score: 99.37986246744792
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ %
rank: 455
score: 99.32786560058594
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . length ;
rank: 455
score: 99.31451416015625
patch: final double n 1 n $NUMBER$ prod = n 1 * 0 . 1 ;
rank: 455
score: 99.29845377604167
patch: final int n 1 = n 1 * n 1 ; / * /
rank: 455
score: 99.25518035888672
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ; /
rank: 455
score: 99.22517903645833
patch: final int n 1 n $NUMBER$ prod = n 1 [ 0 ] ;
rank: 455
score: 99.21824293870192
patch: final int n 1 1 = n $NUMBER$ * n 1 ;
rank: 456
score: 99.37980143229167
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ .
rank: 456
score: 99.34336159446023
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ + n 1 . 0 ;
rank: 456
score: 99.29951695033482
patch: final int n 1 = n 1 * n 1 + $NUMBER$ ;
rank: 456
score: 99.25467681884766
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ * 1 ;
rank: 456
score: 99.22511393229166
patch: final long n 1 = n 1 * n 1 + n $NUMBER$ ;
rank: 457
score: 99.35918112362133
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . true ;
rank: 457
score: 99.34333602241848
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 . 0 * $NUMBER$ ;
rank: 457
score: 99.3266960592831
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ >> $NUMBER$ ;
rank: 457
score: 99.3139419555664
patch: final double n 1 n $NUMBER$ prod = n 1 * * n $NUMBER$ ;
rank: 457
score: 99.29918670654297
patch: final int n 1 n $NUMBER$ prod $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 457
score: 99.29750689338235
patch: final int n 1 n $NUMBER$ prod = 1 * n 1 * n 1 ;
rank: 457
score: 99.25444030761719
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ * n $NUMBER$ ;
rank: 457
score: 99.22452486478366
patch: final int n 1 = n 1 + n $NUMBER$ ; ;
rank: 457
score: 99.21813025841347
patch: final int n $NUMBER$ 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 458
score: 99.29901885986328
patch: double n 1 = Math . max ( n 1 , n $NUMBER$ ) ;
rank: 458
score: 99.25428873697916
patch: / int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 459
score: 99.3265021829044
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ { 0 ;
rank: 459
score: 99.31390739889706
patch: final int n 1 n $NUMBER$ prod = n 1 / n 1 . 0 ;
rank: 459
score: 99.29876708984375
patch: final int n 1 = n 1 * $NUMBER$ + n $NUMBER$ * $NUMBER$ ;
rank: 459
score: 99.22373860677084
patch: final int n 1 1 n 1 = n 1 * n $NUMBER$ ;
rank: 459
score: 99.21781921386719
patch: final int [ ] n $NUMBER$ = new int n 1 * n 1 ;
rank: 460
score: 99.32627360026042
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . $NUMBER$ $NUMBER$ ;
rank: 460
score: 99.31386431525735
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * $STRING$ ;
rank: 460
score: 99.2540771484375
patch: final Integer n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 460
score: 99.22373046875
patch: final int n $NUMBER$ = n $NUMBER$ * n 1 * n $NUMBER$ ;
rank: 461
score: 99.34251302083334
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * $NUMBER$ . 0 ;
rank: 461
score: 99.32610724954044
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . n $NUMBER$ . max $NUMBER$
rank: 461
score: 99.25388997395834
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 1 * 0 ;
rank: 461
score: 99.22336050180289
patch: n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 462
score: 99.32596164279514
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n $NUMBER$ << $NUMBER$ ;
rank: 462
score: 99.31364171645221
patch: final long n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 . 0 ;
rank: 462
score: 99.296875
patch: final int n 1 = n 1 * n 1 - n 1 ;
rank: 462
score: 99.253466796875
patch: int n 1 iterator = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 462
score: 99.2233154296875
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ *= n $NUMBER$ ;
rank: 463
score: 99.34149460565476
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 + 1 ;
rank: 463
score: 99.32537163628473
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . iterator ( ) . 1 ;
rank: 463
score: 99.31313907398896
patch: final String n 1 = n 1 * n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 463
score: 99.2532958984375
patch: final int n 1 = n $NUMBER$ * $NUMBER$ * n $NUMBER$ ;
rank: 463
score: 99.22322300502232
patch: / * final int n 1 = n 1 + n $NUMBER$ ;
rank: 464
score: 99.35812717013889
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 ; / / *
rank: 464
score: 99.34051804315476
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 , $NUMBER$ ;
rank: 464
score: 99.324853515625
patch: final String n 1 n $NUMBER$ prod = n $NUMBER$ + n $NUMBER$ ;
rank: 464
score: 99.29625108506944
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ - n 1 ;
rank: 464
score: 99.25230305989584
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ; n $NUMBER$ ;
rank: 465
score: 99.37835334329044
patch: final double n 1 n $NUMBER$ prod = 0 * n 1 * n $NUMBER$ ;
rank: 465
score: 99.34014892578125
patch: final int n 1 = n 1 / ( n 1 + 1 ) / $NUMBER$ ;
rank: 465
score: 99.25213623046875
patch: final int n 1 : n $NUMBER$ ; = n $NUMBER$ * n $NUMBER$ ;
rank: 465
score: 99.22281588040866
patch: final int n 1 1 = n 1 / n $NUMBER$ ;
rank: 465
score: 99.21631622314453
patch: final int < Integer * / n 1 = n 1 * n $NUMBER$ ;
rank: 466
score: 99.37806532118056
patch: final String n 1 n $NUMBER$ prod = n 1 * n 1 * n 1 ;
rank: 466
score: 99.35788143382354
patch: final int n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ ; / /
rank: 466
score: 99.33997691761364
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n 1 * $NUMBER$ . 0 ;
rank: 466
score: 99.29619004991319
patch: final int n 1 = n 1 * n $NUMBER$ / n 1 * n $NUMBER$ ;
rank: 466
score: 99.29562174479166
patch: final int n 1 = n 1 - n $NUMBER$ - n $NUMBER$ ;
rank: 466
score: 99.25132751464844
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ n $NUMBER$ $NUMBER$ ;
rank: 466
score: 99.22273763020833
patch: final double n 1 = n 1 - n $NUMBER$ ;
rank: 467
score: 99.37794404871323
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - 1 ;
rank: 467
score: 99.33993869357639
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ / $NUMBER$ . 0 ;
rank: 467
score: 99.32387966579861
patch: final int < String > n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 467
score: 99.31220559512867
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 . n 1 ;
rank: 467
score: 99.29579467773438
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 * n $NUMBER$ ;
rank: 467
score: 99.29559733072917
patch: final int n 1 = n 1 * ( double ) n $NUMBER$ ;
rank: 467
score: 99.25035095214844
patch: final int n 1 n $NUMBER$ prod = 0 * n $NUMBER$ * 0 ;
rank: 467
score: 99.22251790364584
patch: final int n 1 = n 1 * $NUMBER$ $NUMBER$ * n 1 ;
rank: 467
score: 99.21611022949219
patch: final int n 1 n $NUMBER$ prod 1 = n 1 * n 1 ;
rank: 468
score: 99.3394775390625
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 + n 1 ;
rank: 468
score: 99.3233283547794
patch: final double [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 468
score: 99.31207634420956
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * 0 ;
rank: 468
score: 99.29576110839844
patch: final int n 1 Math = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 468
score: 99.2952880859375
patch: final double n 1 = n 1 * n $NUMBER$ + 1 ;
rank: 468
score: 99.25029754638672
patch: final int n 1 = n $NUMBER$ ; = n 1 * n $NUMBER$ ;
rank: 468
score: 99.22242954799107
patch: final int n 1 = n 1 * n $NUMBER$ $NUMBER$ ; ;
rank: 468
score: 99.21587371826172
patch: final int n 1 = n $NUMBER$ ; double n 1 = n $NUMBER$ ;
rank: 469
score: 99.33928833007812
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ * n 1 ;
rank: 469
score: 99.32285443474265
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ << 1 ;
rank: 469
score: 99.311767578125
patch: final double n 1 n $NUMBER$ prod = n 1 * / n $NUMBER$ ;
rank: 469
score: 99.2157958984375
patch: final int n 1 n $NUMBER$ prod = n 1 = n 1 ;
rank: 470
score: 99.37698703342014
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ 1 * $NUMBER$ ;
rank: 470
score: 99.35690487132354
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * E ;
rank: 470
score: 99.33918313419117
patch: final int n 1 n $NUMBER$ prod = n 1 * E $NUMBER$ . 0 ;
rank: 470
score: 99.32268608940973
patch: final String n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . n $NUMBER$ ;
rank: 470
score: 99.31161678538604
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 * 1 ;
rank: 470
score: 99.29501139322916
patch: final int n 1 = n 1 * n $NUMBER$ = n 1 ;
rank: 471
score: 99.37677764892578
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$
rank: 471
score: 99.33908420138889
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 * $NUMBER$ ;
rank: 471
score: 99.29496934678819
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / * *
rank: 471
score: 99.24992152622768
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; / *
rank: 471
score: 99.22176920572916
patch: final int n $NUMBER$ n 1 = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 471
score: 99.21432291666666
patch: final T n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 472
score: 99.32172309027777
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ == 0 ? $NUMBER$ : 0 ;
rank: 472
score: 99.31073357077206
patch: final long n 1 = n 1 * n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 472
score: 99.2948974609375
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ - 1 ;
rank: 472
score: 99.24949645996094
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n 1 * $NUMBER$ ;
rank: 472
score: 99.2217508951823
patch: final float n 1 n $NUMBER$ prod = n 1 ;
rank: 472
score: 99.21417999267578
patch: final int [ ] n 1 = new int n 1 * n $NUMBER$ ;
rank: 473
score: 99.35525076729911
patch: long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 473
score: 99.33871799045139
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ $NUMBER$ ;
rank: 473
score: 99.310546875
patch: final Object n 1 = n 1 * n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 473
score: 99.24920654296875
patch: final int n 1 = n $NUMBER$ * 1 * n $NUMBER$ ;
rank: 473
score: 99.22093912760417
patch: final int n 1 $NUMBER$ $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 474
score: 99.37593587239583
patch: final long n 1 n $NUMBER$ prod = n 1 * n 1 + n $NUMBER$ ;
rank: 474
score: 99.35493687220982
patch: Object n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 474
score: 99.32140435112848
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . iterator ( )
rank: 474
score: 99.24917602539062
patch: final int n 1 = n 1 * n $NUMBER$ *
rank: 474
score: 99.2130126953125
patch: final int n 1 = n 1 ; for n 1 = n 1 ;
rank: 475
score: 99.35453796386719
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 ; / /
rank: 475
score: 99.33802379261364
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 * n $NUMBER$ ;
rank: 475
score: 99.32128188189338
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 + n 1 ;
rank: 475
score: 99.31028119255515
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % n $NUMBER$ ;
rank: 475
score: 99.2208740234375
patch: final int n 1 n $NUMBER$ prod = n 1 ^ n $NUMBER$ ;
rank: 475
score: 99.21292317708334
patch: final int n 1 = n 1 ; int $NUMBER$ = n $NUMBER$ ;
rank: 476
score: 99.33766682942708
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ 1 ;
rank: 476
score: 99.293701171875
patch: final int max 1 = n 1 * n $NUMBER$ ;
rank: 476
score: 99.24883270263672
patch: final int n 1 char = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 476
score: 99.22078159877232
patch: final int n $NUMBER$ n $NUMBER$ = n $NUMBER$ + n $NUMBER$ ;
rank: 476
score: 99.21253204345703
patch: final int n 1 = n 1 ; final int n 1 = $STRING$ ;
rank: 477
score: 99.337646484375
patch: final int n 1 n $NUMBER$ prod = ( Umin - n $NUMBER$ + 1 ) / $NUMBER$ ;
rank: 477
score: 99.29267578125
patch: final int [ ] n $NUMBER$ = new int [ n 1 ] ;
rank: 477
score: 99.24820709228516
patch: try { int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 477
score: 99.2120590209961
patch: final double n 1 = n $NUMBER$ ; int n $NUMBER$ = n $NUMBER$ ;
rank: 478
score: 99.3540398092831
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * true ;
rank: 478
score: 99.33755154079861
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n $NUMBER$ ;
rank: 478
score: 99.29267578125
patch: final int n 1 = n 1 + n $NUMBER$ + n 1 ;
rank: 478
score: 99.24749755859375
patch: final int n 1 = n $NUMBER$ ; if n 1 > n $NUMBER$ ;
rank: 478
score: 99.22074381510417
patch: final int n 1 1 n $NUMBER$ = n 1 + n $NUMBER$ ;
rank: 479
score: 99.35310633042279
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . n $NUMBER$ ;
rank: 479
score: 99.33668101917614
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 + n $NUMBER$ + 1 ) ;
rank: 479
score: 99.29288482666016
patch: return n 1 * n 1 * ( n 1 + n $NUMBER$ ) ;
rank: 479
score: 99.29239654541016
patch: final int n 1 = Math . max ( 0 , n $NUMBER$ ) ;
rank: 479
score: 99.2474136352539
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 1 * n $NUMBER$ *
rank: 479
score: 99.22043282645089
patch: final int n 1 1 = n 1 $NUMBER$ * n $NUMBER$ ;
rank: 479
score: 99.21164957682292
patch: final float n 1 = n 1 * n 1 ;
rank: 480
score: 99.336669921875
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 + 1 ) / $NUMBER$ . 0 ;
rank: 480
score: 99.31990559895833
patch: final int < int > n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 480
score: 99.30906767003677
patch: final double n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ * $NUMBER$ ;
rank: 480
score: 99.24734497070312
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 1 + n $NUMBER$ ;
rank: 480
score: 99.22040666852679
patch: final double n $NUMBER$ n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 480
score: 99.211376953125
patch: final int [ 1 ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 481
score: 99.37370469835069
patch: final int n 1 n $NUMBER$ prod = Umin * n 1 * n $NUMBER$ ;
rank: 481
score: 99.3198974609375
patch: final int [ ] n $NUMBER$ = new int [ n $NUMBER$ ] ;
rank: 481
score: 99.29205729166667
patch: if ( n 1 > n $NUMBER$ + n $NUMBER$ + 1 ) {
rank: 481
score: 99.2470947265625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ * 1 ;
rank: 482
score: 99.33553738064236
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 1 . 0 ;
rank: 482
score: 99.30882263183594
patch: final double n 1 n $NUMBER$ prod = n 1 * - n $NUMBER$ ;
rank: 482
score: 99.29154968261719
patch: final int n 1 = n $NUMBER$ 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 482
score: 99.24706159319196
patch: / ; final int n 1 = n 1 * n $NUMBER$ ;
rank: 482
score: 99.22010216346153
patch: final int n 1 = n 1 * n $NUMBER$ + ;
rank: 482
score: 99.21083068847656
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * ( n 1 ;
rank: 483
score: 99.35080135569854
patch: final float n 1 n $NUMBER$ prod = n 1 * n 1 . 0 ;
rank: 483
score: 99.33551703559027
patch: final n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ;
rank: 483
score: 99.30879720052083
patch: int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 ;
rank: 483
score: 99.24656168619792
patch: final long n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 483
score: 99.22001139322917
patch: / int n 1 = n 1 * n $NUMBER$ ;
rank: 484
score: 99.33404071514423
patch: final int n 1 = n 1 / $NUMBER$ . 0 ;
rank: 484
score: 99.31945037841797
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ + 0 ;
rank: 484
score: 99.3085708618164
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * 0 ;
rank: 484
score: 99.29033067491319
patch: final int n 1 = n $NUMBER$ * n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 484
score: 99.21956380208333
patch: final int n $NUMBER$ = n $NUMBER$ + n $NUMBER$ ;
rank: 484
score: 99.21029227120536
patch: final int n 1 = n $NUMBER$ ; final int n $NUMBER$ :
rank: 485
score: 99.37238905164931
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + n $NUMBER$ .
rank: 485
score: 99.33347574869792
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . $NUMBER$ . 0 ;
rank: 485
score: 99.30832088694854
patch: final int n 1 n $NUMBER$ prod = n 1 * - $NUMBER$ . 0 ;
rank: 485
score: 99.28997395833333
patch: final int n 1 n $NUMBER$ prod = Integer . MAX _ VALUE ;
rank: 485
score: 99.28995971679687
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ - $NUMBER$ ;
rank: 485
score: 99.20980834960938
patch: final int n 1 = n 1 ; if n $NUMBER$ == n 1 ;
rank: 486
score: 99.33301943824405
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 + n $NUMBER$ + 1 )
rank: 486
score: 99.31885483685662
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ { n $NUMBER$
rank: 486
score: 99.30795467601104
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ % n 1 ;
rank: 487
score: 99.34860409007354
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * false ;
rank: 487
score: 99.33280944824219
patch: final int n 1 n $NUMBER$ prod = n 1 . 0 . 0 ;
rank: 487
score: 99.31871744791667
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ^ n $NUMBER$ ;
rank: 487
score: 99.30794031479779
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 $NUMBER$
rank: 487
score: 99.2458251953125
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ ] * n $NUMBER$ ;
rank: 487
score: 99.21819661458333
patch: final int n 1 1 n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 487
score: 99.20947265625
patch: final int n 1 n $NUMBER$ prod = n 1 ; return n 1 ;
rank: 488
score: 99.37202284071181
patch: final final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / *
rank: 488
score: 99.34849548339844
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * ;
rank: 488
score: 99.33256022135417
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0
rank: 488
score: 99.31827121310764
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . 0 $NUMBER$ ;
rank: 488
score: 99.28957112630208
patch: final int n 1 n $NUMBER$ prod = ( int ) n 1 * n 1 ;
rank: 488
score: 99.24503326416016
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * }
rank: 488
score: 99.20933430989584
patch: final int n 1 n $NUMBER$ prod = - $NUMBER$ + n $NUMBER$ ;
rank: 489
score: 99.33179428998162
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * 0 ;
rank: 489
score: 99.3075310202206
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ n $NUMBER$ ;
rank: 489
score: 99.28952026367188
patch: final int n 1 = n 1 * n $NUMBER$ ; / * * /
rank: 489
score: 99.21800944010417
patch: final float n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 489
score: 99.20929509943181
patch: final int n 1 n $NUMBER$ prod = false ;
rank: 490
score: 99.3712158203125
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ % n $NUMBER$ .
rank: 490
score: 99.31781005859375
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n $NUMBER$ - $NUMBER$ ;
rank: 490
score: 99.28887532552083
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ; ;
rank: 490
score: 99.24386393229166
patch: final int n 1 n $NUMBER$ prod = 1 * n $NUMBER$ $NUMBER$ ;
rank: 490
score: 99.21730259486607
patch: int n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ ;
rank: 491
score: 99.37074110243056
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ | n $NUMBER$ ;
rank: 491
score: 99.34770202636719
patch: final int long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 491
score: 99.33097700639205
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod * $NUMBER$ . $NUMBER$ ;
rank: 491
score: 99.24380493164062
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ * n $NUMBER$ ) ;
rank: 491
score: 99.20901053292411
patch: final int [ ] n $NUMBER$ = n 1 + n $NUMBER$ ;
rank: 492
score: 99.37056732177734
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ )
rank: 492
score: 99.3308993252841
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 + n $NUMBER$ ) / $NUMBER$ ;
rank: 492
score: 99.31706237792969
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 492
score: 99.30724334716797
patch: final int n 1 n $NUMBER$ prod = n 1 * + n $NUMBER$ ;
rank: 492
score: 99.28917643229167
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ / n 1 ;
rank: 492
score: 99.24335479736328
patch: final int n 1 n $NUMBER$ prod += = n $NUMBER$ * n $NUMBER$ ;
rank: 492
score: 99.21692708333333
patch: final int n 1 = n 1 * $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 492
score: 99.20895385742188
patch: final int n $NUMBER$ = n 1 ; int n $NUMBER$ = n $NUMBER$ ;
rank: 493
score: 99.289013671875
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ; / * /
rank: 493
score: 99.28663635253906
patch: int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ + 1 ;
rank: 493
score: 99.24323272705078
patch: final int n 1 char = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 493
score: 99.21689453125
patch: double n 1 = n 1 * n $NUMBER$ $NUMBER$ * n 1 ;
rank: 493
score: 99.20855305989583
patch: final int n 1 n $NUMBER$ prod = n 1 * compare $NUMBER$ ;
rank: 494
score: 99.34591854319854
patch: final int n 1 n $NUMBER$ prod = n 1 . 0 * n $NUMBER$ ;
rank: 494
score: 99.31606716579861
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * ( n $NUMBER$ << $NUMBER$ ;
rank: 494
score: 99.28879123263889
patch: final int n 1 n $NUMBER$ prod += n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 494
score: 99.2429428100586
patch: final int n 1 = n 1 ; = n $NUMBER$ * n $NUMBER$ ;
rank: 494
score: 99.20843505859375
patch: final String n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 495
score: 99.3702751608456
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : n $NUMBER$ ;
rank: 495
score: 99.32874253216912
patch: final int n 1 n $NUMBER$ prod = n 1 % n 1 . 0 ;
rank: 495
score: 99.31586371527777
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n $NUMBER$ + $NUMBER$ ;
rank: 495
score: 99.2862777709961
patch: int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ + $NUMBER$ ;
rank: 495
score: 99.21661376953125
patch: double n 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 495
score: 99.20816802978516
patch: final int n $NUMBER$ n $NUMBER$ n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 496
score: 99.37010362413194
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : n $NUMBER$ ,
rank: 496
score: 99.328369140625
patch: final int n 1 = n 1 / n 1 . 0 ;
rank: 496
score: 99.31578871783088
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . max $NUMBER$
rank: 496
score: 99.30638212316177
patch: final long n 1 n $NUMBER$ prod = n 1 * n 1 * 0 ;
rank: 496
score: 99.28875732421875
patch: if ( n 1 < n 1 ) { return 0 . 0 ; }
rank: 496
score: 99.20814514160156
patch: final int n 1 n $NUMBER$ prod 1 = n $NUMBER$ * n 1 ;
rank: 497
score: 99.36990017361111
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 , n $NUMBER$ ;
rank: 497
score: 99.31547995174633
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . start $NUMBER$
rank: 497
score: 99.30618286132812
patch: double n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 . 0 ;
rank: 497
score: 99.28857421875
patch: final int n 1 -- = n 1 * n $NUMBER$ ;
rank: 497
score: 99.21652456430289
patch: final int n $NUMBER$ = n 1 * n 1 $NUMBER$ ;
rank: 497
score: 99.20811462402344
patch: final int n 1 = n $NUMBER$ ; double n $NUMBER$ = n 1 ;
rank: 498
score: 99.34384334788604
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / $NUMBER$ ;
rank: 498
score: 99.32770134420956
patch: final int n 1 n $NUMBER$ prod = n 1 . 0 * n 1 ;
rank: 498
score: 99.20804850260417
patch: final String n 1 n $NUMBER$ prod = n 1 ;
rank: 499
score: 99.36945657169117
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ .
rank: 499
score: 99.3438361672794
patch: do { final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 499
score: 99.32754337086396
patch: final long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ ;
rank: 499
score: 99.31507025824652
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . n $NUMBER$ . n $NUMBER$ ;
rank: 499
score: 99.30473327636719
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n 1 ;
rank: 499
score: 99.2856201171875
patch: final int n 1 n $NUMBER$ prod = n 1 >= n $NUMBER$ ;
rank: 499
score: 99.24112141927084
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ) ;
rank: 499
score: 99.21581217447917
patch: final int n $NUMBER$ n $NUMBER$ = n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 499
score: 99.20789388020833
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ [ $NUMBER$ ] ;
rank: 500
score: 99.3436279296875
patch: final String n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ ;
rank: 500
score: 99.28794759114584
patch: return n 1 * n 1 * n $NUMBER$ * $NUMBER$ . 0 ;
rank: 500
score: 99.285400390625
patch: final double n 1 n $NUMBER$ prod = n 1 * 1 . $NUMBER$ ;
rank: 501
score: 99.32578125
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ + 1 ;
rank: 501
score: 99.30445053998162
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ n $NUMBER$ ;
rank: 501
score: 99.28792317708333
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ , n $NUMBER$ ;
rank: 501
score: 99.28531646728516
patch: final int n 1 = n 1 * n $NUMBER$ * / n $NUMBER$ ;
rank: 501
score: 99.21483357747395
patch: final double n 1 = n 1 + n 1 ;
rank: 501
score: 99.20672200520833
patch: final int < Integer > n 1 = n 1 * n $NUMBER$ ;
rank: 502
score: 99.36839463975694
patch: final short n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 502
score: 99.34284524356617
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / n 1 ;
rank: 502
score: 99.31468200683594
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ . length ;
rank: 502
score: 99.28751627604167
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ : n $NUMBER$ ;
rank: 502
score: 99.2852783203125
patch: final int n 1 = n 1 * n $NUMBER$ * $NUMBER$ + 1 ;
rank: 502
score: 99.24088541666667
patch: final long n 1 n $NUMBER$ prod += n $NUMBER$ * n $NUMBER$ ;
rank: 502
score: 99.21468912760416
patch: / int n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 502
score: 99.2058993252841
patch: final int n 1 = n 1 * 0 ;
rank: 503
score: 99.31467572380515
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length + n 1 ;
rank: 503
score: 99.24053955078125
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ *
rank: 503
score: 99.20527648925781
patch: final int n 1 = 0 ; final int n $NUMBER$ = n $NUMBER$ ;
rank: 504
score: 99.36813693576389
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - - $NUMBER$ ;
rank: 504
score: 99.34235696231617
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 : $NUMBER$ ;
rank: 504
score: 99.32417224702381
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * n 1 n $NUMBER$ prod ;
rank: 504
score: 99.31455078125
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ . n $NUMBER$ ;
rank: 504
score: 99.28739166259766
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 ++ ;
rank: 504
score: 99.24046107700893
patch: final int n 1 n $NUMBER$ prod += 0 * n $NUMBER$ ;
rank: 504
score: 99.21446126302084
patch: final int n 1 = n 1 * n $NUMBER$ n $NUMBER$ $NUMBER$ ;
rank: 504
score: 99.20516263521634
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; ;
rank: 505
score: 99.30349551930146
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 * 0 ;
rank: 505
score: 99.28732781661184
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ; /
rank: 505
score: 99.28419712611607
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 505
score: 99.21402413504464
patch: final int n 1 , $NUMBER$ , $NUMBER$ , $NUMBER$ , $NUMBER$ ;
rank: 505
score: 99.20445251464844
patch: final int n 1 = n $NUMBER$ ; if n $NUMBER$ == n $NUMBER$ ;
rank: 506
score: 99.36810980902777
patch: final byte n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 506
score: 99.3232421875
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ % $NUMBER$ . 0 ;
rank: 506
score: 99.31438849954044
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ * - $NUMBER$ ;
rank: 506
score: 99.30337344898896
patch: final Object n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ ;
rank: 506
score: 99.28729538690476
patch: return calculate CaMeL Asymptotic CaMeL P CaMeL Value ( Umin , n 1 ) ;
rank: 506
score: 99.2401611328125
patch: int n 1 equals = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 506
score: 99.21398111979167
patch: final int n 1 n $NUMBER$ prod = n 1 [ 1 ] ;
rank: 506
score: 99.20404052734375
patch: final int n 1 = n $NUMBER$ ; final int n $NUMBER$ = $STRING$ ;
rank: 507
score: 99.3227206143466
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod * $NUMBER$ . 1 ;
rank: 507
score: 99.31422932942708
patch: final try { final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 507
score: 99.28728376116071
patch: final int n 1 [ ] = n 1 * n 1 ;
rank: 507
score: 99.28331756591797
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ; ;
rank: 507
score: 99.23997395833334
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; final try {
rank: 507
score: 99.213623046875
patch: final int n 1 , $NUMBER$ , $NUMBER$ , $NUMBER$ ;
rank: 508
score: 99.32266090029762
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 + $NUMBER$ ) / $NUMBER$ ;
rank: 508
score: 99.28725179036458
patch: final int n 1 n $NUMBER$ prod = n 1 = n 1 * n $NUMBER$ ;
rank: 508
score: 99.28315734863281
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ; ;
rank: 508
score: 99.23904854910714
patch: final int n 1 = n 1 * 0 + n $NUMBER$ ;
rank: 508
score: 99.21324744591347
patch: final int n 1 = n $NUMBER$ $NUMBER$ * n 1 ;
rank: 508
score: 99.20315755208334
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; System . ;
rank: 509
score: 99.34043255974265
patch: final long n 1 n $NUMBER$ prod = n 1 * n 1 ; / /
rank: 509
score: 99.32246668198529
patch: final int n 1 n $NUMBER$ prod = n 1 - n 1 . 0 ;
rank: 509
score: 99.31343078613281
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ + 0 ;
rank: 509
score: 99.23898751395089
patch: final int n 1 = 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 509
score: 99.21304524739584
patch: final int n $NUMBER$ = n 1 * n 1 * n 1 ;
rank: 509
score: 99.20279134114584
patch: final int n 1 n $NUMBER$ prod = max $NUMBER$ * n $NUMBER$ ;
rank: 510
score: 99.36779106987848
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 . - $NUMBER$ ;
rank: 510
score: 99.3400519875919
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 : 0 ;
rank: 510
score: 99.32224527994792
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / - $NUMBER$ ;
rank: 510
score: 99.3016586303711
patch: final final int n 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 510
score: 99.2868423461914
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 ; final
rank: 510
score: 99.2389404296875
patch: final int n 1 = n 1 * n $NUMBER$ ; final try {
rank: 511
score: 99.30152803308823
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ n 1 ;
rank: 511
score: 99.28287179129464
patch: final double n 1 = n 1 * n $NUMBER$ / $NUMBER$ ;
rank: 511
score: 99.23856898716518
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ 1 ;
rank: 511
score: 99.21302083333333
patch: final int n 1 = n 1 / n $NUMBER$ + n $NUMBER$ ;
rank: 511
score: 99.20266927083334
patch: final void n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 512
score: 99.36761833639706
patch: double n 1 n $NUMBER$ prod = n 1 * n 1 + n $NUMBER$ ;
rank: 512
score: 99.3213119506836
patch: final int n 1 n $NUMBER$ prod = n 1 + 1 . 0 ;
rank: 512
score: 99.30148494944854
patch: return $NUMBER$ * Fast CaMeL Math . sqrt ( n 1 , n 1 ) ;
rank: 512
score: 99.28273010253906
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ Double ;
rank: 512
score: 99.23851725260417
patch: final int n 1 n $NUMBER$ prod = n 1 * $STRING$ $NUMBER$ ;
rank: 512
score: 99.20229666573661
patch: final int n 1 n $NUMBER$ prod = 0 + n $NUMBER$ ;
rank: 513
score: 99.3673957375919
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ / n 1 ;
rank: 513
score: 99.32013617621527
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 1 . 0 ;
rank: 513
score: 99.31222713694854
patch: final int n 1 n $NUMBER$ prod = 0 * n $NUMBER$ . n $NUMBER$ ;
rank: 513
score: 99.21263631184895
patch: final Double n 1 = n 1 * n $NUMBER$ ;
rank: 514
score: 99.3673828125
patch: final int n 1 n $NUMBER$ prod = Umin * n 1 ;
rank: 514
score: 99.33902740478516
patch: else final int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 514
score: 99.31974653764205
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n 1 . 0 * $NUMBER$ ;
rank: 514
score: 99.28521437872024
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 514
score: 99.28191266741071
patch: final int n 1 n $NUMBER$ prod = n 1 - 1 ;
rank: 514
score: 99.21236746651786
patch: int n 1 = n 1 * n 1 + n $NUMBER$ ;
rank: 514
score: 99.20148577008929
patch: final int n 1 n $NUMBER$ prod = n 1 * max ;
rank: 515
score: 99.36731770833333
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 *
rank: 515
score: 99.31171332465277
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ * max $NUMBER$ ;
rank: 515
score: 99.23784993489583
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ * n $NUMBER$ *
rank: 515
score: 99.2121826171875
patch: final float n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ ;
rank: 516
score: 99.3673095703125
patch: final short n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ;
rank: 516
score: 99.33822811351104
patch: final Object n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / /
rank: 516
score: 99.31886888586956
patch: final int n 1 n $NUMBER$ prod = ( n 1 + n $NUMBER$ + 1 ) / $NUMBER$ . 0 ;
rank: 516
score: 99.31170654296875
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . double CaMeL Value ( ) ;
rank: 516
score: 99.30043029785156
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . $NUMBER$ ;
rank: 516
score: 99.28489854600694
patch: final int n 1 = n 1 * n 1 - n $NUMBER$ * n $NUMBER$ ;
rank: 516
score: 99.2814697265625
patch: final double [ ] n $NUMBER$ = new double [ n 1 ] ;
rank: 516
score: 99.237548828125
patch: final int n 1 = n 1 * 1 * n $NUMBER$ ;
rank: 516
score: 99.21212565104166
patch: final float n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ ;
rank: 517
score: 99.36711883544922
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * (
rank: 517
score: 99.31146599264706
patch: final int [ ] n 1 = n $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 517
score: 99.23736979166667
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 1 * 1 ;
rank: 517
score: 99.21205357142857
patch: final int n 1 = n 1 1 * n 1 $NUMBER$ ;
rank: 518
score: 99.3186279296875
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ % $NUMBER$ ;
rank: 518
score: 99.31130083869485
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ << 0 ;
rank: 518
score: 99.29820838341347
patch: double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ;
rank: 518
score: 99.28431701660156
patch: return n 1 * n 1 * ( n 1 * n $NUMBER$ ) ;
rank: 518
score: 99.2371337890625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 0 * $NUMBER$ ;
rank: 518
score: 99.20088958740234
patch: final int n 1 n $NUMBER$ prod = n 1 ; if n $NUMBER$ ;
rank: 519
score: 99.36627197265625
patch: final final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n 1 ;
rank: 519
score: 99.33690688189338
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ / 0 ;
rank: 519
score: 99.31845528738839
patch: final int n 1 = n 1 / n $NUMBER$ . 0 ;
rank: 519
score: 99.31122504340277
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . length 1 ;
rank: 519
score: 99.28348581414474
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ; / /
rank: 519
score: 99.28074544270834
patch: final int n 1 n $NUMBER$ prod = ( double ) n 1 ;
rank: 519
score: 99.2366943359375
patch: final int n 1 n $NUMBER$ prod = $STRING$ * n $NUMBER$ $NUMBER$ ;
rank: 519
score: 99.21160481770833
patch: final int n 1 = n 1 * n $NUMBER$ $NUMBER$ $NUMBER$ $NUMBER$ ;
rank: 519
score: 99.20048828125
patch: final int < ] > n 1 = n 1 * n $NUMBER$ ;
rank: 520
score: 99.36619737413194
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 + n $NUMBER$ .
rank: 520
score: 99.31810461956522
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 . 0 : $NUMBER$ ;
rank: 520
score: 99.29600524902344
patch: final double n 1 n $NUMBER$ prod = n 1 1 * n $NUMBER$ ;
rank: 520
score: 99.28342110770089
patch: return n 1 * n 1 * n $NUMBER$ * n 1 ;
rank: 520
score: 99.28042805989584
patch: final double n 1 ; n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 520
score: 99.23634440104166
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ 1 * n 1 ;
rank: 520
score: 99.21150716145833
patch: final int n 1 n $NUMBER$ prod = n 1 ) * $NUMBER$ ;
rank: 520
score: 99.20025634765625
patch: final int n 1 = n $NUMBER$ ; for n 1 = n 1 ;
rank: 521
score: 99.31101481119792
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ { n 1 ;
rank: 521
score: 99.29594421386719
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 1 ;
rank: 521
score: 99.28340657552083
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ / n 1 ;
rank: 521
score: 99.2362060546875
patch: final int n 1 n $NUMBER$ prod = = n $NUMBER$ ;
rank: 521
score: 99.2111572265625
patch: final int n 1 = n 1 = n 1 / n $NUMBER$ ;
rank: 522
score: 99.3362175436581
patch: final / * double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 522
score: 99.31735229492188
patch: final int n 1 n $NUMBER$ prod += n 1 * $NUMBER$ . 0 ;
rank: 522
score: 99.29509626116071
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ . 0 ;
rank: 522
score: 99.28329806857639
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ = n 1 ;
rank: 522
score: 99.23619733537946
patch: final int n 1 n $NUMBER$ prod = null * n $NUMBER$ ;
rank: 522
score: 99.21103515625
patch: int n 1 = n 1 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 522
score: 99.199462890625
patch: final int n 1 = n $NUMBER$ ; for n $NUMBER$ = n 1 ;
rank: 523
score: 99.36548569623162
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : n 1 ;
rank: 523
score: 99.33603084788604
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . null ;
rank: 523
score: 99.31595865885417
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ 1 . 0 ;
rank: 523
score: 99.31062586167279
patch: final int n 1 = n $NUMBER$ * ( n $NUMBER$ * n $NUMBER$ ) ;
rank: 523
score: 99.28324381510417
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ; final
rank: 523
score: 99.27944510323661
patch: final int n 1 = n 1 * n $NUMBER$ * max ;
rank: 523
score: 99.21040852864583
patch: double n 1 $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 523
score: 99.199462890625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n 1 . 0 ;
rank: 524
score: 99.36490885416667
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ .
rank: 524
score: 99.33598058363971
patch: else { final int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 524
score: 99.28294735863095
patch: return calculate CaMeL Asymptotic CaMeL P CaMeL Value ( Umin , n $NUMBER$ ) ;
rank: 524
score: 99.27935791015625
patch: int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * n $NUMBER$ ;
rank: 524
score: 99.235107421875
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ - $NUMBER$ ;
rank: 524
score: 99.2103271484375
patch: int n $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 524
score: 99.19933210100446
patch: final int n 1 n $NUMBER$ prod = n 1 + 0 ;
rank: 525
score: 99.33555385044643
patch: final int n 1 n $NUMBER$ prod = this . n 1 ;
rank: 525
score: 99.31561957465277
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ ) ;
rank: 525
score: 99.30975748697917
patch: final int n 1 n $NUMBER$ prod = new int [ 1 ] ;
rank: 525
score: 99.28253173828125
patch: final int n 1 n $NUMBER$ prod = n 1 ) * n 1 ;
rank: 525
score: 99.27915852864584
patch: final int n $NUMBER$ n $NUMBER$ ] = n 1 * n $NUMBER$ ;
rank: 525
score: 99.23490397135417
patch: final int n 1 ; n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 525
score: 99.21029459635416
patch: final int n 1 , $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 525
score: 99.19921061197917
patch: final double n 1 = n 1 ; n $NUMBER$ = n $NUMBER$ ;
rank: 526
score: 99.36414252387152
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ %
rank: 526
score: 99.31538722826087
patch: final int n 1 n $NUMBER$ prod = n 1 . 0 * ( n 1 + 1 ) / $NUMBER$ ;
rank: 526
score: 99.3096564797794
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ % n $NUMBER$ ;
rank: 526
score: 99.29249674479166
patch: double n 1 n $NUMBER$ prod = n 1 * 0 . 0 ;
rank: 526
score: 99.2821044921875
patch: final int n 1 ++ = n 1 * n 1 * n $NUMBER$ ;
rank: 526
score: 99.27906383167614
patch: final double n 1 = n 1 * $NUMBER$ ;
rank: 526
score: 99.23463792067308
patch: final int n 1 contains = n 1 * n $NUMBER$ ;
rank: 526
score: 99.19920247395834
patch: final int [ 1 ] n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 527
score: 99.31374104817708
patch: final int n 1 = n $NUMBER$ * ( n 1 + 1 ) / $NUMBER$ ;
rank: 527
score: 99.30952962239583
patch: final String n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ ;
rank: 527
score: 99.28205108642578
patch: final int n 1 -- = n 1 * n 1 * n $NUMBER$ ;
rank: 527
score: 99.27883911132812
patch: double n $NUMBER$ n $NUMBER$ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 527
score: 99.23457845052083
patch: final / ; final int n 1 = n 1 * n $NUMBER$ ;
rank: 527
score: 99.21017252604166
patch: final int n 1 , n 1 = n 1 - n $NUMBER$ ;
rank: 527
score: 99.19907924107143
patch: final int n $NUMBER$ n 1 = n 1 * n 1 ;
rank: 528
score: 99.36376274956598
patch: final Object n 1 n $NUMBER$ prod = n 1 * n 1 * n 1 ;
rank: 528
score: 99.31330023871527
patch: int n 1 = n 1 * ( n 1 + n $NUMBER$ ) / $NUMBER$ ;
rank: 528
score: 99.29092407226562
patch: double n 1 n $NUMBER$ prod = n 1 * n 1 * 0 ;
rank: 528
score: 99.23388671875
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * ;
rank: 528
score: 99.21002604166667
patch: final int n 1 = n 1 * $NUMBER$ $NUMBER$ * $NUMBER$ $NUMBER$ ;
rank: 528
score: 99.19844055175781
patch: final int n 1 n $NUMBER$ prod = Math . max ( n $NUMBER$ ;
rank: 529
score: 99.30906048943015
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ + 0 * n $NUMBER$ ;
rank: 529
score: 99.27739606584821
patch: final int n 1 = n 1 * n 1 + 1 ;
rank: 529
score: 99.20991734095982
patch: / * final int n 1 = n 1 * n 1 ;
rank: 529
score: 99.19785853794643
patch: final double [ ] n 1 = n 1 * n $NUMBER$ ;
rank: 530
score: 99.36267768012152
patch: final double n 1 n $NUMBER$ prod = n 1 * 1 * $NUMBER$ . 0 ;
rank: 530
score: 99.31304376775569
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod / $NUMBER$ . $NUMBER$ ;
rank: 530
score: 99.30866555606617
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ . max 1 ;
rank: 530
score: 99.28087615966797
patch: final int n 1 n $NUMBER$ prod $NUMBER$ = n 1 * n 1 ;
rank: 530
score: 99.23343912760417
patch: final int n 1 : n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 530
score: 99.20975435697116
patch: final int n 1 , n 1 , n $NUMBER$ $NUMBER$ ;
rank: 531
score: 99.33323759191177
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / 0 ;
rank: 531
score: 99.28035481770833
patch: final double n 1 = n 1 * n 1 - n $NUMBER$ ;
rank: 531
score: 99.23274739583333
patch: final int n 1 n $NUMBER$ prod ( n 1 * n $NUMBER$ ;
rank: 531
score: 99.20966796875
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ , n $NUMBER$ ;
rank: 532
score: 99.36198594835069
patch: final int n 1 n $NUMBER$ prod = n 1 * 1 * 1 . 0 ;
rank: 532
score: 99.31190321180556
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * - $NUMBER$ ;
rank: 532
score: 99.30812072753906
patch: final int n 1 n $NUMBER$ prod = 0 * n $NUMBER$ . length ;
rank: 532
score: 99.28021918402777
patch: return n 1 * ( n 1 * n $NUMBER$ + n $NUMBER$ + 1 ) ;
rank: 532
score: 99.23258463541667
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 532
score: 99.20914713541667
patch: int n 1 = n 1 + n $NUMBER$ $NUMBER$ ;
rank: 533
score: 99.33245490579044
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / n 1 ;
rank: 533
score: 99.31181196732955
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 + n 1 ;
rank: 533
score: 99.30809190538194
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 533
score: 99.20899251302083
patch: final int n 1 , n $NUMBER$ = n 1 , n $NUMBER$ ;
rank: 533
score: 99.19632975260417
patch: final String n 1 = n $NUMBER$ * n 1 ;
rank: 534
score: 99.36164686414931
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ , n $NUMBER$ ,
rank: 534
score: 99.33229166666666
patch: final int n 1 n $NUMBER$ prod = n 1 ; / / /
rank: 534
score: 99.31108940972223
patch: final final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ ;
rank: 534
score: 99.28804779052734
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ 0 ;
rank: 534
score: 99.27606201171875
patch: final int n 1 = n $NUMBER$ * $NUMBER$ + n $NUMBER$ ;
rank: 534
score: 99.23165690104166
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 1 $NUMBER$ ;
rank: 534
score: 99.20858561197916
patch: final int n 1 , n 1 = n 1 + n 1 ;
rank: 534
score: 99.1960693359375
patch: final int [ ] n $NUMBER$ = new int $NUMBER$ * n $NUMBER$ ;
rank: 535
score: 99.31057400173611
patch: final long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n 1 ;
rank: 535
score: 99.30762436810662
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ << 1 ;
rank: 535
score: 99.28789520263672
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 * 0 ;
rank: 535
score: 99.2759540264423
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ; ;
rank: 535
score: 99.20840219350961
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ * ;
rank: 535
score: 99.19581604003906
patch: final int n 1 = n 1 ; double n 1 = n 1 ;
rank: 536
score: 99.36154354319854
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : n $NUMBER$
rank: 536
score: 99.31048029119319
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 - n 1 ;
rank: 536
score: 99.30741373697917
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ? n $NUMBER$ ;
rank: 536
score: 99.20835774739584
patch: final int n 1 , n $NUMBER$ , n $NUMBER$ , n 1 ;
rank: 537
score: 99.3073974609375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . iterator n 1
rank: 537
score: 99.28746032714844
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . $NUMBER$ ;
rank: 537
score: 99.23108782087054
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ - 1 ;
rank: 537
score: 99.20826822916666
patch: if ( n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 537
score: 99.19522530691964
patch: final int n $NUMBER$ [ ] = n 1 * n $NUMBER$ ;
rank: 538
score: 99.3314208984375
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 * 0 ;
rank: 538
score: 99.3100918856534
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ; / * /
rank: 538
score: 99.30730523003473
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . max $NUMBER$ }
rank: 538
score: 99.27857259114583
patch: final int n 1 = n 1 * n $NUMBER$ * - $NUMBER$ ;
rank: 538
score: 99.23091634114583
patch: / int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 538
score: 99.20816476004464
patch: int n 1 = n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 538
score: 99.19493103027344
patch: final int n 1 n $NUMBER$ prod = n 1 ; if n 1 ;
rank: 539
score: 99.36128504136029
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n 1
rank: 539
score: 99.30638020833334
patch: final int < double > n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 539
score: 99.28505859375
patch: final double n 1 = n $NUMBER$ * n 1 * n $NUMBER$ ;
rank: 539
score: 99.27853393554688
patch: final int n 1 1 = n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 539
score: 99.27373860677083
patch: final int n 1 ; n $NUMBER$ = n 1 + n $NUMBER$ ;
rank: 539
score: 99.23060099283855
patch: final int n 1 = n $NUMBER$ * max $NUMBER$ ;
rank: 540
score: 99.28502546037946
patch: final double n 1 = n 1 * n $NUMBER$ n $NUMBER$ ;
rank: 540
score: 99.27838134765625
patch: final int n 1 = Math . sqrt ( n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ) ;
rank: 540
score: 99.27369035993304
patch: float n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 540
score: 99.23023274739583
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ] * $NUMBER$ ;
rank: 540
score: 99.2081298828125
patch: final int n $NUMBER$ = n $NUMBER$ * n 1 ;
rank: 541
score: 99.36113145616319
patch: final byte n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ;
rank: 541
score: 99.33116149902344
patch: { final int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 541
score: 99.3062385110294
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ - n $NUMBER$ ;
rank: 541
score: 99.28463309151786
patch: double n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 ;
rank: 541
score: 99.27803762335526
patch: final int n 1 n $NUMBER$ prod ++ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 541
score: 99.1943603515625
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ; n 1 :
rank: 542
score: 99.33110046386719
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . ;
rank: 542
score: 99.27792358398438
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * $NUMBER$ . 0 ;
rank: 542
score: 99.2299072265625
patch: final try { final int n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 542
score: 99.20802408854166
patch: int n 1 = n $NUMBER$ * n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 542
score: 99.1943359375
patch: final int n 1 n $NUMBER$ prod = n 1 . - n $NUMBER$ ;
rank: 543
score: 99.3086799172794
patch: final final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 ;
rank: 543
score: 99.3059943704044
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ . n 1 ;
rank: 543
score: 99.2779052734375
patch: final int n 1 = Math . sqrt ( n 1 + n $NUMBER$ + n $NUMBER$ ) ;
rank: 543
score: 99.2297607421875
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ; final try {
rank: 543
score: 99.19414876302083
patch: final int n 1 = n 1 ; int n $NUMBER$ = 0 ;
rank: 544
score: 99.30813259548611
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod 1 . 0 ;
rank: 544
score: 99.3056999655331
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . max ;
rank: 544
score: 99.277587890625
patch: final int n 1 n $NUMBER$ prod = 0 . 0 * n $NUMBER$ ;
rank: 544
score: 99.27227783203125
patch: final double n 1 = n 1 * n $NUMBER$ * 1 ;
rank: 544
score: 99.20742361886161
patch: final int n 1 $NUMBER$ = n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 544
score: 99.1940030184659
patch: final int [ ] n 1 = n 1 ;
rank: 545
score: 99.36064995659723
patch: final double n 1 n $NUMBER$ prod = n 1 / n 1 * n $NUMBER$ ;
rank: 545
score: 99.30787568933823
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ n 1 ;
rank: 545
score: 99.22870744977679
patch: final int n 1 = this * n $NUMBER$ * n $NUMBER$ ;
rank: 545
score: 99.20731295072116
patch: final int n 1 = n $NUMBER$ 1 * n 1 ;
rank: 545
score: 99.19381713867188
patch: final int n 1 = n 1 ; if ( n 1 == 0 ;
rank: 546
score: 99.35849178538604
patch: final int n 1 n $NUMBER$ prod = n 1 + $NUMBER$ * n $NUMBER$ ;
rank: 546
score: 99.33037923177083
patch: final byte n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 546
score: 99.3077751608456
patch: final double n 1 n $NUMBER$ prod = n 1 + n 1 . 0 ;
rank: 546
score: 99.3054931640625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . max 1 }
rank: 546
score: 99.2833480834961
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 $NUMBER$ ;
rank: 546
score: 99.27144622802734
patch: double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ / $NUMBER$ ;
rank: 546
score: 99.2071533203125
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ )
rank: 546
score: 99.19344075520833
patch: final T n 1 = n 1 * n $NUMBER$ ;
rank: 547
score: 99.30746639476104
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 $NUMBER$ ;
rank: 547
score: 99.30526297433036
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ + 1 ;
rank: 547
score: 99.27710723876953
patch: final int n 1 = n 1 * - n 1 * n $NUMBER$ ;
rank: 547
score: 99.22809244791667
patch: int n 1 n $NUMBER$ prod = = n $NUMBER$ * n $NUMBER$ ;
rank: 547
score: 99.20635579427083
patch: final int n 1 n $NUMBER$ prod = n 1 + 1 $NUMBER$ ;
rank: 547
score: 99.19252014160156
patch: final int n 1 = n $NUMBER$ ; final int $NUMBER$ = n $NUMBER$ ;
rank: 548
score: 99.30742853338069
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 - n $NUMBER$ ;
rank: 548
score: 99.30522155761719
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ) - n $NUMBER$ ;
rank: 548
score: 99.2825927734375
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 0 ;
rank: 548
score: 99.27700466579861
patch: final int n 1 n $NUMBER$ prod = - 1 * n 1 * n $NUMBER$ ;
rank: 548
score: 99.27096557617188
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 1 . 0 ;
rank: 548
score: 99.20630696614583
patch: final int n 1 n $NUMBER$ prod = n 1 && n $NUMBER$ ;
rank: 548
score: 99.19186401367188
patch: final int n 1 n $NUMBER$ prod = n 1 ; return n $NUMBER$ ;
rank: 549
score: 99.3570915670956
patch: final double n 1 n $NUMBER$ prod = $STRING$ * n 1 * n $NUMBER$ ;
rank: 549
score: 99.3073397549716
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod / $NUMBER$ . 1 ;
rank: 549
score: 99.28138950892857
patch: final double n 1 n $NUMBER$ prod = n 1 . 0 ;
rank: 549
score: 99.27080535888672
patch: double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ + n $NUMBER$ ;
rank: 549
score: 99.22796223958333
patch: final byte n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 549
score: 99.20624248798077
patch: n 1 = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 550
score: 99.30662952769886
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 * n $NUMBER$ ;
rank: 550
score: 99.2811050415039
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 0 ;
rank: 550
score: 99.27008819580078
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * / n $NUMBER$ ;
rank: 550
score: 99.22748357599431
patch: final int n 1 = 0 * n $NUMBER$ ;
rank: 550
score: 99.20579427083334
patch: final int n 1 = n 1 + n $NUMBER$ * $NUMBER$ $NUMBER$ ;
rank: 551
score: 99.30491727941177
patch: final int n 1 n $NUMBER$ prod = - 1 * n $NUMBER$ . length ;
rank: 551
score: 99.27643785978618
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / * * /
rank: 551
score: 99.22702261117789
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; else
rank: 551
score: 99.20543619791667
patch: final int n $NUMBER$ = n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 551
score: 99.191455078125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ [ 1 ] ;
rank: 552
score: 99.27634006076389
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ -= n $NUMBER$ ;
rank: 552
score: 99.22685546875
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ 1 ;
rank: 552
score: 99.2053466796875
patch: int n 1 = n 1 * n 1 $NUMBER$ * n $NUMBER$ ;
rank: 552
score: 99.19139753069196
patch: final int n 1 n $NUMBER$ prod = $STRING$ + n $NUMBER$ ;
rank: 553
score: 99.30432891845703
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length - $NUMBER$ ;
rank: 553
score: 99.20519080528847
patch: final int n 1 = n 1 $NUMBER$ / n 1 ;
rank: 554
score: 99.30416107177734
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ . $NUMBER$ ;
rank: 554
score: 99.30327814275569
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 * n 1 ;
rank: 554
score: 99.2261629971591
patch: long n 1 = n 1 * n $NUMBER$ ;
rank: 554
score: 99.20518275669643
patch: final int n 1 = n 1 + n $NUMBER$ n $NUMBER$ ;
rank: 554
score: 99.19026692708333
patch: final int n 1 = n 1 * n 1 ; n $NUMBER$ :
rank: 555
score: 99.30397251674107
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ + n $NUMBER$ ;
rank: 555
score: 99.30265669389205
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 : n 1 ;
rank: 555
score: 99.27618117559524
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n $NUMBER$ * n $NUMBER$ ;
rank: 555
score: 99.2255859375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 0 ;
rank: 555
score: 99.2049560546875
patch: final int n 1 = n $NUMBER$ * $NUMBER$ $NUMBER$ ;
rank: 556
score: 99.3026351928711
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$
rank: 556
score: 99.27925618489583
patch: final Object n 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 556
score: 99.27604675292969
patch: final int n 1 = n 1 * n $NUMBER$ * - n 1 ;
rank: 556
score: 99.20462472098214
patch: / * final double n 1 n $NUMBER$ prod = n 1 ;
rank: 556
score: 99.19012451171875
patch: final float n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 557
score: 99.35179946001838
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ $NUMBER$
rank: 557
score: 99.30357259114584
patch: final int < ? > n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 557
score: 99.3025790127841
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ) / $NUMBER$ ;
rank: 557
score: 99.26485770089286
patch: final int start = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 557
score: 99.22508748372395
patch: final int n 1 -= n 1 * n $NUMBER$ ;
rank: 558
score: 99.35153198242188
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * (
rank: 558
score: 99.32741411994485
patch: final int n 1 n $NUMBER$ prod = $STRING$ * n 1 * n 1 ;
rank: 558
score: 99.30313313802084
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ + - $NUMBER$ ;
rank: 558
score: 99.2759521484375
patch: this . n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 558
score: 99.224853515625
patch: final int n 1 -= n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 558
score: 99.18934849330357
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * max ;
rank: 559
score: 99.35150505514706
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 % $NUMBER$ ;
rank: 559
score: 99.3273696899414
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / ;
rank: 559
score: 99.3029556274414
patch: final int n 1 n $NUMBER$ prod = ( ( Integer ) n 1 ;
rank: 559
score: 99.29958926930146
patch: final int n 1 n $NUMBER$ prod = n 1 % n $NUMBER$ . 0 ;
rank: 559
score: 99.20415387834821
patch: double n $NUMBER$ = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 560
score: 99.35078430175781
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ == 0
rank: 560
score: 99.30290222167969
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 + 0 ;
rank: 560
score: 99.29918715533088
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod . 0 ;
rank: 560
score: 99.27759552001953
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 . 0 ;
rank: 560
score: 99.22456577845982
patch: final int n 1 = 0 * n 1 * n $NUMBER$ ;
rank: 560
score: 99.20389498197116
patch: final int n 1 $NUMBER$ = n 1 + n 1 ;
rank: 560
score: 99.18882751464844
patch: final int n 1 = n $NUMBER$ ; final int n 1 = $STRING$ ;
rank: 561
score: 99.3271843405331
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ; / / /
rank: 561
score: 99.29847627527573
patch: final int n 1 n $NUMBER$ prod += n 1 * n 1 . 0 ;
rank: 561
score: 99.26422526041667
patch: final int n 1 ; n $NUMBER$ = n 1 * n 1 ;
rank: 561
score: 99.20268903459821
patch: final int n 1 1 = n 1 1 * n $NUMBER$ ;
rank: 561
score: 99.18864440917969
patch: final double n 1 = n 1 ; int n $NUMBER$ = n 1 ;
rank: 562
score: 99.3271713256836
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 ;
rank: 562
score: 99.29627574573864
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ; / finally {
rank: 562
score: 99.27745819091797
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 ) ;
rank: 562
score: 99.2750244140625
patch: final double n 1 = n 1 * n $NUMBER$ - n 1 ;
rank: 562
score: 99.26388113839286
patch: final int n 1 = n 1 * 1 + n $NUMBER$ ;
rank: 562
score: 99.22378743489584
patch: final int n 1 n $NUMBER$ prod = n 1 * 1 $NUMBER$ ;
rank: 562
score: 99.20249586838942
patch: final int n 1 $NUMBER$ = n 1 - n $NUMBER$ ;
rank: 562
score: 99.1882568359375
patch: final / * * * * * * * * * * * /
rank: 563
score: 99.32693301930146
patch: final String n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / /
rank: 563
score: 99.30204503676471
patch: final String n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . $NUMBER$ ;
rank: 563
score: 99.29604704483695
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 n $NUMBER$ prod * $NUMBER$ . 0 0 ;
rank: 563
score: 99.2236328125
patch: final for n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 563
score: 99.18784993489584
patch: final int [ ] n $NUMBER$ 1 = n 1 * n $NUMBER$ ;
rank: 564
score: 99.34846047794117
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * - $NUMBER$ ;
rank: 564
score: 99.29575482536765
patch: final int n 1 = n 1 * n 1 / n $NUMBER$ . 0 ;
rank: 564
score: 99.27473280164931
patch: final int n 1 n $NUMBER$ prod = n 1 - n $NUMBER$ * n 1 ;
rank: 564
score: 99.26363699776786
patch: final double n 1 = n 1 * $NUMBER$ + n $NUMBER$ ;
rank: 565
score: 99.34807586669922
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$
rank: 565
score: 99.32675170898438
patch: final int n 1 n $NUMBER$ prod = $STRING$ * n 1 * $NUMBER$ ;
rank: 565
score: 99.30074310302734
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . max $NUMBER$ } ;
rank: 565
score: 99.2955655184659
patch: final int n 1 = n 1 * ( n 1 + n $NUMBER$ + n $NUMBER$ ) / $NUMBER$ ;
rank: 565
score: 99.27669852120536
patch: final double n 1 = n 1 * n 1 * $NUMBER$ ;
rank: 565
score: 99.27466583251953
patch: final int ! n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 565
score: 99.20192307692308
patch: final int n 1 , n $NUMBER$ = n 1 $NUMBER$ ;
rank: 565
score: 99.18755696614583
patch: final double n 1 = n 1 * n $NUMBER$ ; n $NUMBER$ :
rank: 566
score: 99.32633209228516
patch: final final int n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ ;
rank: 566
score: 99.30060891544117
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 . n $NUMBER$ ;
rank: 566
score: 99.29489968039773
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 ; n 1 ;
rank: 566
score: 99.27664184570312
patch: final long n 1 n $NUMBER$ prod = n 1 * 0 . 0 ;
rank: 566
score: 99.27463989257812
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ . 1 ;
rank: 566
score: 99.26227678571429
patch: Double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 566
score: 99.20157564603366
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ ; ;
rank: 566
score: 99.18733433314732
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * true ;
rank: 567
score: 99.34782140395221
patch: final double n 1 n $NUMBER$ prod = n 1 * $STRING$ * n $NUMBER$ ;
rank: 567
score: 99.30055865119485
patch: final int n 1 n $NUMBER$ prod = ( int n 1 * n $NUMBER$ ;
rank: 567
score: 99.29477761008523
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 + n 1 ) / $NUMBER$ ;
rank: 567
score: 99.27377658420139
patch: final long n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 567
score: 99.22310965401786
patch: final try { int n 1 = n 1 * n $NUMBER$ ;
rank: 567
score: 99.18682391826923
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; }
rank: 568
score: 99.34746237362133
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 , n $NUMBER$
rank: 568
score: 99.325927734375
patch: final Integer n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 568
score: 99.30038452148438
patch: final String n 1 n $NUMBER$ prod = n $NUMBER$ . length n 1 ;
rank: 568
score: 99.27645874023438
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n 1 ;
rank: 568
score: 99.27369520399306
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 / n $NUMBER$ ;
rank: 568
score: 99.26078578404018
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ - 1 ;
rank: 568
score: 99.22307942708333
patch: final int list 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 568
score: 99.2011385830966
patch: double n 1 = n 1 + n $NUMBER$ ;
rank: 569
score: 99.27357991536458
patch: final int n 1 n $NUMBER$ prod = - 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 569
score: 99.26077473958334
patch: final double n $NUMBER$ = n 1 * n $NUMBER$ * n 1 ;
rank: 569
score: 99.2011249248798
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 570
score: 99.29974724264706
patch: final Object n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . length ;
rank: 570
score: 99.29325727982955
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ . 0 % n 1 ;
rank: 570
score: 99.26070731026786
patch: Double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 570
score: 99.1856460571289
patch: / * * * * * * * * * * * * * /
rank: 571
score: 99.34644317626953
patch: final int n 1 n $NUMBER$ prod = ( n 1 * n 1 )
rank: 571
score: 99.324951171875
patch: final double n 1 n $NUMBER$ prod = n 1 ; / * /
rank: 571
score: 99.29974724264706
patch: final int n 1 n $NUMBER$ prod = ( n 1 + n $NUMBER$ ) ;
rank: 571
score: 99.293212890625
patch: final double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ . 0 ; / * /
rank: 571
score: 99.27318657769098
patch: final int n 1 = n 1 * n $NUMBER$ = n $NUMBER$ * n 1 ;
rank: 571
score: 99.26014811197916
patch: final int n 1 n $NUMBER$ prod = Double . MIN _ VALUE ;
rank: 571
score: 99.22220284598214
patch: final int n 1 = n 1 * 0 * n 1 ;
rank: 571
score: 99.18553331163194
patch: final int n 1 = n 1 ;
rank: 572
score: 99.3459113625919
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 : n $NUMBER$ ;
rank: 572
score: 99.27305094401042
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$ - n $NUMBER$ ;
rank: 572
score: 99.2218487079327
patch: try { int n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 572
score: 99.20099748883929
patch: final int n 1 = n 1 * n 1 $NUMBER$ $NUMBER$ ;
rank: 572
score: 99.18532889229911
patch: final int n 1 n $NUMBER$ prod = $STRING$ + n 1 ;
rank: 573
score: 99.29924774169922
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length * 0 ;
rank: 573
score: 99.29181985294117
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n 1
rank: 573
score: 99.27296447753906
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 ; /
rank: 573
score: 99.25893332741477
patch: final int n 1 = n 1 + $NUMBER$ ;
rank: 573
score: 99.18336704799107
patch: final int n 1 n $NUMBER$ prod = 0 + n 1 ;
rank: 574
score: 99.29916381835938
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ [ n $NUMBER$ ] ;
rank: 574
score: 99.29107666015625
patch: final int n 1 = n 1 * n 1 / $NUMBER$ . 0 ;
rank: 574
score: 99.27505696614584
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ $NUMBER$ ;
rank: 574
score: 99.2729259672619
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 574
score: 99.22141520182292
patch: final int n 1 , n 1 * n $NUMBER$ ;
rank: 574
score: 99.20066615513393
patch: final int n $NUMBER$ $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 574
score: 99.18152669270833
patch: final int n 1 = n $NUMBER$ ; int $NUMBER$ = n $NUMBER$ ;
rank: 575
score: 99.29102672230114
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * ( n 1 + 1 ) ;
rank: 575
score: 99.27407836914062
patch: final int n 1 n $NUMBER$ prod = n 1 * 1 . 1 ;
rank: 575
score: 99.27285927220395
patch: final int n 1 n $NUMBER$ prod = n 1 * - n 1 * n $NUMBER$ ;
rank: 575
score: 99.2584737141927
patch: final int start 1 = n 1 * n $NUMBER$ ;
rank: 576
score: 99.34532063802084
patch: final double n 1 n $NUMBER$ prod = Umin * n 1 ;
rank: 576
score: 99.32421875
patch: final int n 1 n $NUMBER$ prod = n 1 / n 1 * $NUMBER$ ;
rank: 576
score: 99.2987548828125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ -= n $NUMBER$ ;
rank: 576
score: 99.2207364169034
patch: final int n 1 = n $NUMBER$ * 0 ;
rank: 576
score: 99.2003506747159
patch: final int n 1 = n 1 * n $NUMBER$
rank: 576
score: 99.18129069010416
patch: final E n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 577
score: 99.2987289428711
patch: final int n 1 n $NUMBER$ prod = ( ( Integer ) n $NUMBER$ ;
rank: 577
score: 99.27246771918402
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ = n $NUMBER$ ;
rank: 577
score: 99.25750732421875
patch: final int n 1 = n 1 + n $NUMBER$ + $NUMBER$ ;
rank: 577
score: 99.20012555803571
patch: int n 1 = n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 577
score: 99.1812744140625
patch: final void n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 ;
rank: 578
score: 99.29862976074219
patch: final int n 1 n $NUMBER$ prod = ( n 1 >> n $NUMBER$ ;
rank: 578
score: 99.27211507161458
patch: final int n 1 n $NUMBER$ prod = n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 578
score: 99.22002301897321
patch: final int n 1 = n $NUMBER$ * 0 + n $NUMBER$ ;
rank: 578
score: 99.2001065340909
patch: return n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 578
score: 99.18084247295673
patch: final int n 1 = n 1 * - n 1 ;
rank: 579
score: 99.32325744628906
patch: final long n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * $NUMBER$ ;
rank: 579
score: 99.28877527573529
patch: final int n 1 = n 1 / n 1 * n $NUMBER$ . 0 ;
rank: 579
score: 99.27252960205078
patch: final double n 1 n $NUMBER$ prod = n 1 * * n 1 ;
rank: 579
score: 99.27186414930556
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ { $NUMBER$ } ;
rank: 579
score: 99.20000348772321
patch: final int n 1 $NUMBER$ = n 1 * n 1 $NUMBER$ ;
rank: 580
score: 99.3231560202206
patch: final boolean n 1 n $NUMBER$ prod = n 1 * n 1 . 0 ;
rank: 580
score: 99.27247619628906
patch: long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 580
score: 99.27165876116071
patch: final int n 1 n $NUMBER$ prod = n 1 * Fast CaMeL Math . sqrt ( $NUMBER$ ) ;
rank: 580
score: 99.21985677083333
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ * 0 $NUMBER$ ;
rank: 580
score: 99.19998604910714
patch: final int n 1 = n 1 $NUMBER$ * n 1 $NUMBER$ ;
rank: 581
score: 99.34414493336396
patch: / * / int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 581
score: 99.322998046875
patch: final Object n 1 n $NUMBER$ prod = n 1 ;
rank: 581
score: 99.288330078125
patch: final int n 1 n $NUMBER$ prod = n 1 * E 1 . 0 ;
rank: 581
score: 99.27153015136719
patch: final int n 1 start = n 1 * n 1 * n $NUMBER$ ;
rank: 581
score: 99.25530598958333
patch: final int n 1 = n $NUMBER$ + n $NUMBER$ + n $NUMBER$ ;
rank: 581
score: 99.21759440104167
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * $STRING$ $NUMBER$ ;
rank: 581
score: 99.19869559151786
patch: final int n 1 1 = n 1 * n 1 $NUMBER$ ;
rank: 581
score: 99.17920939127605
patch: final Integer n 1 = n 1 * n 1 ;
rank: 582
score: 99.34370691636029
patch: double n 1 n $NUMBER$ prod = n 1 * n 1 / n 1 ;
rank: 582
score: 99.2982177734375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . max $NUMBER$ ;
rank: 582
score: 99.28690338134766
patch: final int n $NUMBER$ n $NUMBER$ = n 1 * n $NUMBER$ . 0 ;
rank: 582
score: 99.27152709960937
patch: return n 1 * ( n 1 + n $NUMBER$ + 1 ) / $NUMBER$ . 0 ; }
rank: 582
score: 99.27133178710938
patch: final double n 1 n $NUMBER$ prod = n 1 1 * n 1 ;
rank: 582
score: 99.21741536458333
patch: final int n 1 n $NUMBER$ prod = max * n $NUMBER$ $NUMBER$ ;
rank: 582
score: 99.19832066127232
patch: double n $NUMBER$ = n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 583
score: 99.32232666015625
patch: final int n 1 n $NUMBER$ prod = this / n $NUMBER$ ;
rank: 583
score: 99.29749253216912
patch: final long n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . length ;
rank: 583
score: 99.27115885416667
patch: final int n 1 = n 1 * n 1 % n $NUMBER$ ;
rank: 583
score: 99.25423177083333
patch: final int min 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 583
score: 99.21739095052084
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ 0 * n $NUMBER$ ;
rank: 583
score: 99.19789817116477
patch: final int n 1 , $NUMBER$ , n $NUMBER$ ;
rank: 583
score: 99.17910330636161
patch: final int n 1 n $NUMBER$ prod = n 1 ; try {
rank: 584
score: 99.32222493489583
patch: final else n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 584
score: 99.29747721354167
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ % n 1 ;
rank: 584
score: 99.25412423270089
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 584
score: 99.21663411458333
patch: final int n 1 < n 1 * n $NUMBER$ ;
rank: 584
score: 99.19745427911931
patch: int n $NUMBER$ = n 1 + n $NUMBER$ ;
rank: 585
score: 99.2711410522461
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n $NUMBER$ n $NUMBER$ ;
rank: 585
score: 99.27080535888672
patch: double n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ . 0 ;
rank: 585
score: 99.19711538461539
patch: final int n 1 , n 1 $NUMBER$ , n $NUMBER$ ;
rank: 586
score: 99.34285481770833
patch: final double n 1 n $NUMBER$ prod = n 1 * - 1 ;
rank: 586
score: 99.29641544117646
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ >> n $NUMBER$ ;
rank: 586
score: 99.2843376608456
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * 1 ;
rank: 586
score: 99.2711181640625
patch: final int n 1 = n 1 * n $NUMBER$ 1 * n $NUMBER$ ;
rank: 586
score: 99.2163837139423
patch: final int n 1 length = n $NUMBER$ * n $NUMBER$ ;
rank: 586
score: 99.19705636160714
patch: final int n 1 , n $NUMBER$ n 1 , n $NUMBER$ ;
rank: 587
score: 99.3428466796875
patch: final short n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 587
score: 99.32058715820312
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 ; / /
rank: 587
score: 99.29609231387867
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ << 0 ;
rank: 587
score: 99.28401453354779
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / n $NUMBER$
rank: 587
score: 99.27108001708984
patch: final int n 1 = n 1 * n 1 * n 1 ; /
rank: 587
score: 99.2533428485577
patch: if ( n 1 >= n $NUMBER$ * n $NUMBER$ ) {
rank: 587
score: 99.19634137834821
patch: final int n 1 = n 1 * $NUMBER$ * n 1 ;
rank: 588
score: 99.2956901999081
patch: final int n 1 n $NUMBER$ prod = ( Integer n 1 * n $NUMBER$ ;
rank: 588
score: 99.271044921875
patch: final int n 1 -= n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 588
score: 99.21614292689732
patch: for n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 588
score: 99.1962890625
patch: final int n 1 = n 1 * n 1 1 ;
rank: 588
score: 99.17825520833334
patch: final int n 1 n $NUMBER$ prod = compare 1 * n $NUMBER$ ;
rank: 589
score: 99.34120806525735
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 : $NUMBER$ ;
rank: 589
score: 99.28089096966912
patch: final int n 1 = n 1 * n $NUMBER$ / n $NUMBER$ . 0 ;
rank: 589
score: 99.2708511352539
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ . 0 * n $NUMBER$ ;
rank: 589
score: 99.266845703125
patch: final double n 1 = n 1 * n $NUMBER$ * 0 . 0 ;
rank: 589
score: 99.253173828125
patch: final double n 1 n $NUMBER$ prod = Double . MAX _ VALUE ;
rank: 589
score: 99.2154296875
patch: final byte n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 589
score: 99.19586181640625
patch: int n 1 = n 1 + n $NUMBER$ * n $NUMBER$ ;
rank: 589
score: 99.1781005859375
patch: final int n 1 = n 1 ; final int n $NUMBER$ ++ ;
rank: 590
score: 99.27074517144098
patch: final double n 1 = n 1 * n 1 * n 1 * n $NUMBER$ ;
rank: 590
score: 99.213525390625
patch: final int n 1 n $NUMBER$ prod = max 1 * n $NUMBER$ ;
rank: 590
score: 99.17808430989584
patch: final int n 1 n $NUMBER$ prod = n 1 < n $NUMBER$ ;
rank: 591
score: 99.34068388097427
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ >> 1 ;
rank: 591
score: 99.294970703125
patch: final int n $NUMBER$ n $NUMBER$ ] = n $NUMBER$ * n $NUMBER$ ;
rank: 591
score: 99.27064514160156
patch: return n 1 * ( n 1 * n $NUMBER$ + n $NUMBER$ ) ;
rank: 591
score: 99.26640625
patch: final double n 1 = n 1 * n $NUMBER$ . n $NUMBER$ ;
rank: 591
score: 99.2123291015625
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; final
rank: 591
score: 99.1954345703125
patch: final int n 1 = n $NUMBER$ / n 1 ;
rank: 591
score: 99.17802734375
patch: final int n 1 ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 592
score: 99.31889125279018
patch: try { final int n 1 n $NUMBER$ prod = n 1 ;
rank: 592
score: 99.29442641314338
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . length ;
rank: 592
score: 99.27905991498162
patch: final int n 1 n $NUMBER$ prod = n 1 ] / $NUMBER$ . 0 ;
rank: 592
score: 99.25236002604167
patch: final double n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 592
score: 99.212158203125
patch: final int n 1 = n 1 * n $NUMBER$ * $STRING$ $NUMBER$ ;
rank: 593
score: 99.3405402688419
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ , n 1
rank: 593
score: 99.2938591452206
patch: final int n 1 n $NUMBER$ prod = ( / $NUMBER$ ) * n $NUMBER$ ;
rank: 593
score: 99.27834647042411
patch: final int n 1 = n $NUMBER$ * n 1 . 0 ;
rank: 593
score: 99.25230305989584
patch: final int max 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 593
score: 99.21202799479167
patch: final long n 1 n $NUMBER$ prod = n $NUMBER$ - n $NUMBER$ ;
rank: 593
score: 99.19512067522321
patch: final int n $NUMBER$ n $NUMBER$ , n $NUMBER$ , n $NUMBER$ ;
rank: 593
score: 99.17754720052083
patch: int n 1 = n $NUMBER$ ; int n $NUMBER$ = n 1 ;
rank: 594
score: 99.34007352941177
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ >> $NUMBER$ ;
rank: 594
score: 99.31835174560547
patch: final int n 1 n $NUMBER$ prod = n 1 * % n $NUMBER$ ;
rank: 594
score: 99.27831313189338
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ 0 . 0 ;
rank: 594
score: 99.26960972377232
patch: return n 1 * n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 594
score: 99.19497445913461
patch: final int n 1 , n $NUMBER$ , n $NUMBER$ $NUMBER$ ;
rank: 595
score: 99.31790161132812
patch: final final int n 1 n $NUMBER$ prod = n 1 ; / * /
rank: 595
score: 99.29351806640625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ } }
rank: 595
score: 99.27786254882812
patch: double n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ ;
rank: 595
score: 99.26889377170139
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ - n 1 ;
rank: 595
score: 99.26533203125
patch: final double n 1 = n 1 * n $NUMBER$ % n $NUMBER$ ;
rank: 595
score: 99.21156412760416
patch: final short n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 595
score: 99.19472830636161
patch: final int n 1 = n 1 * n $NUMBER$ $NUMBER$ / ;
rank: 595
score: 99.17736002604167
patch: final int < ] > n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 596
score: 99.33973604090073
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ *
rank: 596
score: 99.27678366268383
patch: final int n 1 = n 1 * n 1 / n 1 . 0 ;
rank: 596
score: 99.26888020833333
patch: final int n 1 = n 1 * n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 596
score: 99.25148111979166
patch: final int n $NUMBER$ = n 1 + n $NUMBER$ + n $NUMBER$ ;
rank: 596
score: 99.19427490234375
patch: double n $NUMBER$ = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 596
score: 99.176953125
patch: final double n 1 = n 1 ; n 1 = n $NUMBER$ ;
rank: 597
score: 99.33966423483456
patch: final int n 1 n $NUMBER$ prod = n 1 * 1 / n $NUMBER$ ;
rank: 597
score: 99.29328469669117
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ = n $NUMBER$ . max $NUMBER$
rank: 597
score: 99.27498081752232
patch: final int n 1 = n 1 * n 1 / $NUMBER$ ;
rank: 597
score: 99.26871744791667
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 597
score: 99.26514434814453
patch: final int n 1 = n 1 * n 1 . - n $NUMBER$ ;
rank: 597
score: 99.25142415364583
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; ;
rank: 597
score: 99.21116420200893
patch: int n 1 = n $NUMBER$ * n 1 * n $NUMBER$ ;
rank: 597
score: 99.1763916015625
patch: final double n $NUMBER$ n 1 = n 1 * n $NUMBER$ ;
rank: 598
score: 99.31661987304688
patch: / * double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 598
score: 99.26831732855902
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 >> n $NUMBER$ ;
rank: 598
score: 99.21104079026442
patch: final int n 1 substring = n 1 * n $NUMBER$ ;
rank: 598
score: 99.19413539341518
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ + $NUMBER$ ;
rank: 598
score: 99.17633463541667
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * compare $NUMBER$ ;
rank: 599
score: 99.31590169270834
patch: final int n 1 n $NUMBER$ prod = $STRING$ * * n $NUMBER$ ;
rank: 599
score: 99.27399758731617
patch: final int n 1 = n 1 / n 1 * n 1 . 0 ;
rank: 599
score: 99.26827392578124
patch: final int n 1 = n 1 * Math . sqrt ( n 1 * n $NUMBER$ ) ;
rank: 599
score: 99.26498209635416
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 599
score: 99.25096028645834
patch: final double n 1 = n 1 / n $NUMBER$ * n $NUMBER$ ;
rank: 599
score: 99.2106464092548
patch: final int n 1 = n $NUMBER$ * 0 * $NUMBER$ ;
rank: 599
score: 99.19408240685097
patch: final double n $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 599
score: 99.17606608072917
patch: final int n 1 n $NUMBER$ prod = n 1 * case $NUMBER$ ;
rank: 600
score: 99.27322387695312
patch: final int n 1 n $NUMBER$ prod = n 1 . 0 * $NUMBER$ ;
rank: 600
score: 99.2681820518092
patch: final double n 1 = n 1 * ( n 1 + n $NUMBER$ + 1 ) ;
rank: 600
score: 99.26486002604166
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ $NUMBER$
rank: 600
score: 99.25084635416667
patch: final double n 1 n $NUMBER$ prod = n 1 - n 1 ;
rank: 600
score: 99.19378662109375
patch: final int n 1 = n 1 1 + n $NUMBER$ $NUMBER$ ;
rank: 600
score: 99.17591959635416
patch: final int n 1 n $NUMBER$ prod = - 1 + n $NUMBER$ ;
rank: 601
score: 99.2681640625
patch: final int n 1 n $NUMBER$ prod = Math . sqrt ( n $NUMBER$ * n $NUMBER$ ) ;
rank: 601
score: 99.2642593383789
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * 1 . 0 ;
rank: 601
score: 99.25081961495536
patch: final int n 1 = n 1 * n $NUMBER$ / 1 ;
rank: 601
score: 99.2100830078125
patch: int n 1 n $NUMBER$ prod = = n 1 * n $NUMBER$ ;
rank: 601
score: 99.19375174386161
patch: int n $NUMBER$ = n 1 * n $NUMBER$ * n 1 ;
rank: 601
score: 99.17548828125
patch: final int n 1 = n 1 ; final int n $NUMBER$ -- ;
rank: 602
score: 99.33829991957721
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . n $NUMBER$
rank: 602
score: 99.31452178955078
patch: final double n 1 n $NUMBER$ prod = n 1 * 0 * $NUMBER$ ;
rank: 602
score: 99.29161879595588
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length int ( ) ;
rank: 602
score: 99.27225988051471
patch: final int n 1 n $NUMBER$ prod = n 1 ) / $NUMBER$ . 0 ;
rank: 602
score: 99.26805826822917
patch: final long n 1 = n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 602
score: 99.26372528076172
patch: final int n 1 , ( n 1 + n $NUMBER$ ) / $NUMBER$ ;
rank: 602
score: 99.20842633928571
patch: int n 1 = n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 602
score: 99.193603515625
patch: final int n 1 , = n $NUMBER$ * n $NUMBER$ ;
rank: 602
score: 99.17539760044643
patch: final int n 1 n $NUMBER$ prod = this . n $NUMBER$ ;
rank: 603
score: 99.33796961167279
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . n $NUMBER$
rank: 603
score: 99.3142822265625
patch: final Long n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 603
score: 99.29110717773438
patch: final int n 1 n $NUMBER$ prod -= n $NUMBER$ ;
rank: 603
score: 99.27224551930146
patch: final int n 1 n $NUMBER$ prod = n 1 * E $NUMBER$ % $NUMBER$ ;
rank: 603
score: 99.20742361886161
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; * /
rank: 603
score: 99.19341571514423
patch: final int n 1 , n $NUMBER$ = n $NUMBER$ $NUMBER$ ;
rank: 603
score: 99.17500813802083
patch: final int [ ] n $NUMBER$ 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 604
score: 99.33719635009766
patch: final double n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ )
rank: 604
score: 99.31422424316406
patch: } final int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 604
score: 99.29071044921875
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . min ;
rank: 604
score: 99.27158766526442
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ . 0 ;
rank: 604
score: 99.26282552083333
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ . n 1 ;
rank: 604
score: 99.20712515024039
patch: final int n 1 . = n 1 * n $NUMBER$ ;
rank: 605
score: 99.29043579101562
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length + 0 ;
rank: 605
score: 99.27141974954044
patch: final int n 1 = n 1 * n $NUMBER$ / n 1 . 0 ;
rank: 605
score: 99.20670863560268
patch: final int n 1 n $NUMBER$ prod = this * n $NUMBER$ ;
rank: 605
score: 99.19252232142857
patch: final int n 1 $NUMBER$ = n 1 * n $NUMBER$ * ;
rank: 606
score: 99.33672736672794
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 , n 1
rank: 606
score: 99.26655016447368
patch: final int n 1 = n 1 * n $NUMBER$ * ( n 1 + 1 ) ;
rank: 606
score: 99.2626953125
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * 0 ;
rank: 606
score: 99.19182880108173
patch: n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 606
score: 99.17352701822917
patch: int n 1 = n $NUMBER$ ; int n 1 = n $NUMBER$ ;
rank: 607
score: 99.28972981770833
patch: final int n 1 n $NUMBER$ prod = ( double ) n $NUMBER$ ;
rank: 607
score: 99.2664859169408
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ; /
rank: 607
score: 99.24921875
patch: final int n 1 = n 1 ? n $NUMBER$ : n $NUMBER$ ;
rank: 607
score: 99.17332874644886
patch: final int value = n 1 * n $NUMBER$ ;
rank: 608
score: 99.28952462332589
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . min $NUMBER$
rank: 608
score: 99.27091979980469
patch: final int n $NUMBER$ n $NUMBER$ = n 1 * n 1 . 0 ;
rank: 608
score: 99.26645914713542
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 608
score: 99.2618637084961
patch: final int n 1 n $NUMBER$ prod = n 1 * + n 1 ;
rank: 608
score: 99.2045186360677
patch: final int n 1 < n $NUMBER$ * n $NUMBER$ ;
rank: 608
score: 99.19123186383929
patch: final double n 1 n $NUMBER$ prod = 0 * n $NUMBER$ ;
rank: 608
score: 99.17329915364583
patch: final short n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 609
score: 99.28916713169643
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . n $NUMBER$
rank: 609
score: 99.265625
patch: final int n 1 = n 1 * n $NUMBER$ - n $NUMBER$ * n 1 ;
rank: 609
score: 99.2489013671875
patch: final int n 1 = n 1 + n $NUMBER$ + 1 ;
rank: 609
score: 99.2042987530048
patch: final int n 1 = n 1 * 0 * $NUMBER$ ;
rank: 609
score: 99.17279459635417
patch: int n 1 = n 1 ; int n $NUMBER$ = n 1 ;
rank: 610
score: 99.33576516544117
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * - $NUMBER$ ;
rank: 610
score: 99.28858947753906
patch: final int [ ] n 1 = n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 610
score: 99.26535268930289
patch: final int n 1 ++ = n 1 * n $NUMBER$ ;
rank: 610
score: 99.20420619419643
patch: final int n 1 = $STRING$ * n $NUMBER$ * n $NUMBER$ ;
rank: 610
score: 99.19083077566964
patch: / * final int n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 611
score: 99.31161499023438
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / $NUMBER$ ;
rank: 611
score: 99.24843052455357
patch: double n 1 = n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 611
score: 99.2039043719952
patch: final int n 1 = n 1 * n $NUMBER$ ; else
rank: 612
score: 99.33483123779297
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * (
rank: 612
score: 99.26588350183823
patch: final int n 1 = n 1 / n 1 / n $NUMBER$ . 0 ;
rank: 612
score: 99.2601318359375
patch: final double n 1 n $NUMBER$ prod = n 1 * / n 1 ;
rank: 612
score: 99.24825846354166
patch: final int n 1 = n $NUMBER$ - n $NUMBER$ * n $NUMBER$ ;
rank: 612
score: 99.189697265625
patch: n 1 = n 1 * n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 613
score: 99.3345458984375
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ _
rank: 613
score: 99.31085611979167
patch: final Boolean n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 613
score: 99.265625
patch: final int n 1 n $NUMBER$ prod = n 1 ] * $NUMBER$ . 0 ;
rank: 613
score: 99.26470656622024
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 613
score: 99.20347377232143
patch: final int n 1 = n $NUMBER$ * 0 * n 1 ;
rank: 613
score: 99.18963623046875
patch: final int n 1 n $NUMBER$ prod = n 1 )
rank: 613
score: 99.172412109375
patch: final int n 1 = n $NUMBER$ ; int n $NUMBER$ = 0 ;
rank: 614
score: 99.31001281738281
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . ;
rank: 614
score: 99.26468056126645
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * - n 1 ;
rank: 614
score: 99.24781901041666
patch: final int n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 614
score: 99.20339529854911
patch: / ; final int n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 614
score: 99.18893868582589
patch: final int n 1 $NUMBER$ $NUMBER$ = n 1 + n $NUMBER$ ;
rank: 615
score: 99.33386948529412
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1
rank: 615
score: 99.30876922607422
patch: final final Object n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 615
score: 99.28546612079327
patch: final int n $NUMBER$ ] = n 1 * n $NUMBER$ ;
rank: 615
score: 99.26470588235294
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * E ;
rank: 615
score: 99.26453314887152
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 ; / *
rank: 615
score: 99.25953674316406
patch: final int int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 615
score: 99.24779459635417
patch: final double [ ] n $NUMBER$ = new double [ n $NUMBER$ ] ;
rank: 615
score: 99.20268031529018
patch: final int n 1 = Math * n $NUMBER$ * n $NUMBER$ ;
rank: 615
score: 99.18891252790179
patch: final int n 1 = n 1 $NUMBER$ $NUMBER$ / n $NUMBER$ ;
rank: 616
score: 99.2643798828125
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ - 1 ;
rank: 616
score: 99.2022705078125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; / ;
rank: 616
score: 99.18861897786458
patch: final int n 1 , n 1 = n $NUMBER$ ;
rank: 617
score: 99.30811309814453
patch: final final long n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 617
score: 99.2842305501302
patch: final int n 1 n $NUMBER$ prod = ( int ;
rank: 617
score: 99.26404622395833
patch: if ( n 1 < n 1 + n $NUMBER$ + 1 ) {
rank: 617
score: 99.26065767728366
patch: final int n 1 = n $NUMBER$ * $NUMBER$ . 0 ;
rank: 617
score: 99.246875
patch: final int n 1 = n 1 - n $NUMBER$ + n $NUMBER$ ;
rank: 618
score: 99.25856236049107
patch: final long n 1 n $NUMBER$ prod = n 1 * 0 ;
rank: 618
score: 99.20131429036458
patch: final byte n 1 = n 1 * n $NUMBER$ ;
rank: 618
score: 99.18771798270089
patch: final int n 1 , $NUMBER$ = n 1 * n 1 ;
rank: 618
score: 99.16988932291666
patch: final int n 1 n $NUMBER$ prod = start $NUMBER$ * n $NUMBER$ ;
rank: 619
score: 99.26326497395833
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ >> n 1 ;
rank: 619
score: 99.19984944661458
patch: / int n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 619
score: 99.18719482421875
patch: final int n 1 , $NUMBER$ = n 1 / n $NUMBER$ ;
rank: 620
score: 99.33208465576172
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * (
rank: 620
score: 99.30709838867188
patch: final int n 1 n $NUMBER$ prod = n 1 * $STRING$ * $NUMBER$ ;
rank: 620
score: 99.2456942471591
patch: final int n 1 = n 1 + 1 ;
rank: 620
score: 99.19984788161058
patch: final int n 1 max = n 1 * n $NUMBER$ ;
rank: 620
score: 99.1870586688702
patch: final int n 1 n $NUMBER$ prod = * n 1 ;
rank: 621
score: 99.33204650878906
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0
rank: 621
score: 99.2827377319336
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ + $NUMBER$ ;
rank: 621
score: 99.19922746930804
patch: final int n 1 = null * n $NUMBER$ * n $NUMBER$ ;
rank: 621
score: 99.18703049879808
patch: final int n $NUMBER$ $NUMBER$ = n 1 + n $NUMBER$ ;
rank: 621
score: 99.16834309895833
patch: final int n 1 n $NUMBER$ prod = < 1 * n $NUMBER$ ;
rank: 622
score: 99.30646514892578
patch: final int n 1 n $NUMBER$ prod = $STRING$ * 1 * n $NUMBER$ ;
rank: 622
score: 99.2825927734375
patch: final long n 1 n $NUMBER$ prod = n $NUMBER$ + n $NUMBER$ ;
rank: 622
score: 99.26284644717262
patch: final int n 1 = Math . sqrt ( n 1 + n $NUMBER$ + 1 ) / $NUMBER$ ;
rank: 622
score: 99.25737762451172
patch: final int n 1 = n 1 * n $NUMBER$ . - n $NUMBER$ ;
rank: 622
score: 99.24462076822917
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; ;
rank: 622
score: 99.19913155691964
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ * $NUMBER$ ;
rank: 622
score: 99.18611653645833
patch: final long n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 623
score: 99.33174133300781
patch: final double n 1 n $NUMBER$ prod = n 1 * 1 . 1 ;
rank: 623
score: 99.2628173828125
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ += n 1 ;
rank: 623
score: 99.1988016764323
patch: final int n 1 , n $NUMBER$ * n $NUMBER$ ;
rank: 623
score: 99.185546875
patch: final int n $NUMBER$ n $NUMBER$ = n $NUMBER$ / n $NUMBER$ ;
rank: 623
score: 99.1680020419034
patch: final int n 1 n $NUMBER$ prod = true ;
rank: 624
score: 99.28197479248047
patch: final int n 1 n $NUMBER$ prod = ( n $NUMBER$ + n $NUMBER$ ;
rank: 624
score: 99.2428448016827
patch: final double n 1 = n 1 * n $NUMBER$ ; ;
rank: 624
score: 99.1981201171875
patch: final int n 1 = n 1 * 0 $NUMBER$ ;
rank: 624
score: 99.18545968191964
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ $NUMBER$ $NUMBER$ ;
rank: 624
score: 99.16717936197917
patch: final int n 1 = n 1 ; int $NUMBER$ = n 1 ;
rank: 625
score: 99.30377604166667
patch: new int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 625
score: 99.28166198730469
patch: final int n 1 n $NUMBER$ prod = n 1 * 0 + $NUMBER$ ;
rank: 625
score: 99.26277669270833
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * E 1 ;
rank: 625
score: 99.2550048828125
patch: int n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod * $NUMBER$ ;
rank: 625
score: 99.19765061598558
patch: int [ ] n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 625
score: 99.18514310396634
patch: final int n 1 = n 1 1 / n 1 ;
rank: 625
score: 99.1671142578125
patch: final int n 1 n $NUMBER$ prod = exp $NUMBER$ * n $NUMBER$ ;
rank: 626
score: 99.26246279761905
patch: final int n 1 = Math . sqrt ( n 1 * n $NUMBER$ + 1 ) / $NUMBER$ ;
rank: 626
score: 99.18455153245192
patch: final int n 1 1 = n 1 + n 1 ;
rank: 626
score: 99.16707938058036
patch: final int n $NUMBER$ n 1 = n $NUMBER$ * n 1 ;
rank: 627
score: 99.26227484809027
patch: return n 1 * n 1 * ( n $NUMBER$ + n $NUMBER$ + 1 ) ;
rank: 627
score: 99.25411551339286
patch: final double n 1 = n $NUMBER$ * n 1 . 0 ;
rank: 627
score: 99.24170793805804
patch: final int n 1 = n 1 * $NUMBER$ + n 1 ;
rank: 627
score: 99.196533203125
patch: int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ *
rank: 627
score: 99.1843973795573
patch: final int n 1 = n 1 * n $NUMBER$ )
rank: 628
score: 99.28079223632812
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ } }
rank: 628
score: 99.2530048076923
patch: final double n 1 n $NUMBER$ prod = $NUMBER$ . 0 ;
rank: 628
score: 99.24142892020089
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ + $NUMBER$ ;
rank: 628
score: 99.18401227678571
patch: final int n 1 = n 1 1 1 * n $NUMBER$ ;
rank: 628
score: 99.16470540364584
patch: int n 1 = n 1 ; int n 1 = n $NUMBER$ ;
rank: 629
score: 99.30186462402344
patch: double n 1 n $NUMBER$ prod = n 1 * n 1 ; / /
rank: 629
score: 99.252880859375
patch: final String n 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 629
score: 99.19528432992789
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ ;
rank: 629
score: 99.18369704026442
patch: final int n 1 = n 1 * $NUMBER$ * $NUMBER$ ;
rank: 629
score: 99.16463216145833
patch: final void n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 630
score: 99.329931640625
patch: final double n 1 n $NUMBER$ prod = ( int ) n 1 ;
rank: 630
score: 99.28038678850446
patch: final String n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ;
rank: 630
score: 99.19500177556819
patch: final int n 1 = n $NUMBER$ * 1 ;
rank: 630
score: 99.18326241629464
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ + 1 ;
rank: 631
score: 99.25147594105114
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ ;
rank: 631
score: 99.23907063802083
patch: final int n 1 = n $NUMBER$ / n $NUMBER$ * n $NUMBER$ ;
rank: 631
score: 99.19420514787946
patch: synchronized n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 631
score: 99.18323692908653
patch: final int n 1 = n 1 * n 1 * ;
rank: 631
score: 99.16458834134616
patch: final int n 1 n $NUMBER$ prod = ( n $NUMBER$ ;
rank: 632
score: 99.24999128069196
patch: final double n 1 n $NUMBER$ prod = n 1 * $STRING$ ;
rank: 632
score: 99.2388427734375
patch: if int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 632
score: 99.19344656808036
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ * 1 ;
rank: 632
score: 99.18287876674107
patch: final int n $NUMBER$ n $NUMBER$ = n $NUMBER$ * n 1 ;
rank: 632
score: 99.1630859375
patch: final E n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 633
score: 99.30042375837054
patch: final double n 1 n $NUMBER$ prod = n 1 ; / /
rank: 633
score: 99.2797119140625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ { n $NUMBER$ ;
rank: 633
score: 99.26143646240234
patch: final double n 1 ++ = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 633
score: 99.2476806640625
patch: final int n 1 n $NUMBER$ prod = n 1 % $NUMBER$ . 0 ;
rank: 633
score: 99.23822893415179
patch: final int n 1 = n 1 + n $NUMBER$ - 1 ;
rank: 633
score: 99.18262590680804
patch: int n 1 = n $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 633
score: 99.16164926382211
patch: final int n 1 ] = n 1 * n 1 ;
rank: 634
score: 99.27958679199219
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * 0 + 0 ;
rank: 634
score: 99.26128387451172
patch: if ( n 1 < n 1 ) { return 1 . 0 ; }
rank: 634
score: 99.24910481770833
patch: final int n 1 = n 1 * n $NUMBER$ % n 1 ;
rank: 634
score: 99.2381103515625
patch: final int n 1 = n 1 * ( int ) n $NUMBER$ ;
rank: 634
score: 99.16141764322917
patch: synchronized ( n 1 ) { final int n 1 = n $NUMBER$ ;
rank: 635
score: 99.29862976074219
patch: final int long n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 635
score: 99.27955627441406
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ . min ;
rank: 635
score: 99.26128186677632
patch: final final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 635
score: 99.24803815569196
patch: final int n 1 = n 1 * n $NUMBER$ n 1 ;
rank: 635
score: 99.24690385298295
patch: final int n 1 = n 1 / $NUMBER$ ;
rank: 635
score: 99.23717389787946
patch: final double n 1 n $NUMBER$ prod = n 1 + $NUMBER$ ;
rank: 635
score: 99.19210379464286
patch: final int n 1 = n 1 * this * n $NUMBER$ ;
rank: 635
score: 99.1613057454427
patch: final float n 1 = n $NUMBER$ * n 1 ;
rank: 636
score: 99.23714192708333
patch: final int n 1 = n 1 * n $NUMBER$ >> n $NUMBER$ ;
rank: 636
score: 99.19097900390625
patch: int n 1 += n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 636
score: 99.18224225725446
patch: final int n 1 , $NUMBER$ = n 1 + n $NUMBER$ ;
rank: 636
score: 99.16089680989583
patch: final T n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 637
score: 99.27903747558594
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . - n $NUMBER$ ;
rank: 637
score: 99.26064453125
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ . $NUMBER$ ;
rank: 637
score: 99.2467529296875
patch: final double n 1 = n 1 * n $NUMBER$ . n 1 ;
rank: 637
score: 99.244873046875
patch: final int n 1 = n 1 / n 1 * $NUMBER$ . 0 ;
rank: 637
score: 99.19088040865384
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ; else
rank: 637
score: 99.18218994140625
patch: final int n 1 = n 1 * $NUMBER$ / n $NUMBER$ ;
rank: 638
score: 99.29763793945312
patch: final int n 1 n $NUMBER$ prod = $STRING$ * n $NUMBER$ * $NUMBER$ ;
rank: 638
score: 99.26060791015625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ n $NUMBER$ ;
rank: 638
score: 99.19086565290179
patch: final final int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ ;
rank: 638
score: 99.18147786458333
patch: final int n 1 = n 1 = n $NUMBER$ ;
rank: 638
score: 99.16063639322917
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * case $NUMBER$ ;
rank: 639
score: 99.32205963134766
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$
rank: 639
score: 99.27828979492188
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ . length n $NUMBER$ ;
rank: 639
score: 99.24647623697916
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ . n 1 ;
rank: 639
score: 99.19051419771634
patch: final int n 1 . = n $NUMBER$ * n $NUMBER$ ;
rank: 639
score: 99.1810302734375
patch: final int n 1 n $NUMBER$ prod = n 1 / n $NUMBER$
rank: 640
score: 99.32160295758929
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$
rank: 640
score: 99.29702758789062
patch: final int n 1 n $NUMBER$ prod = $STRING$ * $NUMBER$ * n $NUMBER$ ;
rank: 640
score: 99.2780990600586
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . length - 0 ;
rank: 640
score: 99.26043023003473
patch: final int n 1 n $NUMBER$ prod = n 1 * E $NUMBER$ * n $NUMBER$ ;
rank: 640
score: 99.18804059709821
patch: final int n 1 = n 1 * 0 - n $NUMBER$ ;
rank: 640
score: 99.18083844866071
patch: int n 1 = n 1 * n $NUMBER$ + n 1 ;
rank: 641
score: 99.29698944091797
patch: try { final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ;
rank: 641
score: 99.26041666666667
patch: final int n 1 n $NUMBER$ prod = n 1 / n 1 * n 1 ;
rank: 641
score: 99.23934173583984
patch: final double n 1 n $NUMBER$ prod = n 1 + $NUMBER$ . 0 ;
rank: 641
score: 99.18793194110577
patch: final int n 1 n $NUMBER$ prod = n 1 ; final
rank: 641
score: 99.18069223257211
patch: n 1 = n 1 * n $NUMBER$ * n 1 ;
rank: 641
score: 99.1600341796875
patch: final int n 1 n $NUMBER$ prod = n 1 . case 1 ;
rank: 642
score: 99.3206558227539
patch: final double n 1 n $NUMBER$ prod = ( n 1 * n 1 )
rank: 642
score: 99.29644775390625
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ / $NUMBER$ ;
rank: 642
score: 99.26024034288194
patch: final int n 1 n $NUMBER$ prod += n 1 * n 1 * n $NUMBER$ ;
rank: 642
score: 99.23905436197917
patch: final int n 1 = n 1 * $NUMBER$ * $NUMBER$ . 0 ;
rank: 642
score: 99.23623860677084
patch: final int n 1 = n 1 * Double . MAX _ VALUE ;
rank: 642
score: 99.1875
patch: final int < 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 642
score: 99.18013218470982
patch: final int n 1 = n $NUMBER$ 1 * n $NUMBER$ $NUMBER$ ;
rank: 642
score: 99.15990271935097
patch: final int n 1 n $NUMBER$ prod 1 = n $NUMBER$ ;
rank: 643
score: 99.29505208333333
patch: final final int n 1 n $NUMBER$ prod = n 1 * 0 ;
rank: 643
score: 99.24305013020833
patch: final int n 1 = n 1 n $NUMBER$ prod * n $NUMBER$ ;
rank: 643
score: 99.2384033203125
patch: final int n 1 n $NUMBER$ prod = n 1 % $NUMBER$ ;
rank: 643
score: 99.23603166852679
patch: final double n 1 = n 1 * n $NUMBER$ - 1 ;
rank: 643
score: 99.18674723307292
patch: final byte n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 643
score: 99.15963040865384
patch: final int [ $NUMBER$ ] = n 1 * n $NUMBER$ ;
rank: 644
score: 99.18671526227679
patch: final int n 1 = n 1 * null * n $NUMBER$ ;
rank: 644
score: 99.17981828962054
patch: int n 1 n $NUMBER$ prod = n 1 - n $NUMBER$ ;
rank: 645
score: 99.277294921875
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ) ;
rank: 645
score: 99.2357406616211
patch: final int n 1 = n 1 / n $NUMBER$ * $NUMBER$ . 0 ;
rank: 645
score: 99.23331705729167
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ - n 1 ;
rank: 645
score: 99.18637319711539
patch: final int n 1 = n $NUMBER$ * * n $NUMBER$ ;
rank: 645
score: 99.17955671037946
patch: final int n $NUMBER$ n $NUMBER$ = n 1 + n 1 ;
rank: 645
score: 99.15921456473214
patch: final int n 1 n $NUMBER$ prod = n 1 . 1 ;
rank: 646
score: 99.31721496582031
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * 0
rank: 646
score: 99.24060872395833
patch: double n 1 n $NUMBER$ prod = n 1 * 1 . 0 ;
rank: 646
score: 99.23573303222656
patch: final int n 1 = n 1 * $NUMBER$ * n 1 . 0 ;
rank: 646
score: 99.18619210379464
patch: final int n 1 = n 1 * 0 / n $NUMBER$ ;
rank: 646
score: 99.17950439453125
patch: final double n 1 $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 646
score: 99.15876116071429
patch: final int n 1 = n 1 * this . n $NUMBER$ ;
rank: 647
score: 99.25975799560547
patch: final int n 1 = n 1 * ( n 1 + 1 ) ;
rank: 647
score: 99.23995768229166
patch: final int Umin = n 1 * n 1 * n $NUMBER$ ;
rank: 647
score: 99.23326764787946
patch: final int n 1 n $NUMBER$ prod += n 1 . 0 ;
rank: 647
score: 99.1793682391827
patch: final long n 1 = n 1 + n $NUMBER$ $NUMBER$ ;
rank: 648
score: 99.27648162841797
patch: final int n 1 n $NUMBER$ prod = ( n 1 << n $NUMBER$ ;
rank: 648
score: 99.23970249720982
patch: double n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ ;
rank: 648
score: 99.23270670572917
patch: final double [ ] n $NUMBER$ = new int [ n 1 ] ;
rank: 648
score: 99.18526517427884
patch: final int n 1 Math = n 1 * n $NUMBER$ ;
rank: 648
score: 99.17880249023438
patch: final double n 1 , n 1 , n $NUMBER$ ;
rank: 649
score: 99.31436157226562
patch: double n 1 n $NUMBER$ prod = n 1 * n 1 . 1 ;
rank: 649
score: 99.2916488647461
patch: final int double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 649
score: 99.27635192871094
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . equals ( $STRING$ ;
rank: 649
score: 99.25965118408203
patch: final int n 1 $NUMBER$ = n 1 * n 1 * n $NUMBER$ ;
rank: 649
score: 99.232421875
patch: final double n 1 = n 1 + n $NUMBER$ + n 1 ;
rank: 649
score: 99.18516322544643
patch: final int n 1 = n $NUMBER$ * 0 / n $NUMBER$ ;
rank: 649
score: 99.17839704241071
patch: final int n 1 = n 1 1 $NUMBER$ / n $NUMBER$ ;
rank: 650
score: 99.31431579589844
patch: final double n 1 n $NUMBER$ prod = ( Umin - n $NUMBER$ )
rank: 650
score: 99.2906265258789
patch: final int n 1 n $NUMBER$ prod = n 1 ; / * / /
rank: 650
score: 99.27630615234375
patch: final double n 1 n $NUMBER$ prod = ( n 1 * n $NUMBER$ ;
rank: 650
score: 99.259619140625
patch: try { final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 650
score: 99.18515846946023
patch: long n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 650
score: 99.17828369140625
patch: int n 1 = n 1 1 * n $NUMBER$ ;
rank: 650
score: 99.15822531960227
patch: final int [ ] n 1 = n $NUMBER$ ;
rank: 651
score: 99.31385040283203
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0
rank: 651
score: 99.27603585379464
patch: final double [ ] n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 651
score: 99.23741861979167
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ $NUMBER$
rank: 651
score: 99.23201751708984
patch: final int n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ 1 ;
rank: 651
score: 99.1846923828125
patch: final short n 1 = n 1 * n $NUMBER$ ;
rank: 651
score: 99.17824009486607
patch: final int n 1 = n $NUMBER$ $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 651
score: 99.15817057291666
patch: final int n 1 n $NUMBER$ prod = new Integer ( n $NUMBER$ ;
rank: 652
score: 99.31370442708334
patch: final double n 1 n $NUMBER$ prod = Umin * n $NUMBER$ ;
rank: 652
score: 99.25947265625
patch: final int n 1 += n 1 * n 1 * n $NUMBER$ ;
rank: 652
score: 99.18376813616071
patch: final int n 1 = Math + n $NUMBER$ * n $NUMBER$ ;
rank: 652
score: 99.15801130022321
patch: final int n 1 [ ] = n $NUMBER$ * n 1 ;
rank: 653
score: 99.29036458333333
patch: final int n 1 n $NUMBER$ prod = $STRING$ * * n 1 ;
rank: 653
score: 99.25919342041016
patch: return n 1 * ( n 1 + n $NUMBER$ + n $NUMBER$ ) ;
rank: 653
score: 99.22785186767578
patch: long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod / $NUMBER$ ;
rank: 653
score: 99.18325369698661
patch: final int n 1 = n 1 * n $NUMBER$ ; try {
rank: 653
score: 99.17786583533653
patch: final double n 1 = n 1 1 * n 1 ;
rank: 654
score: 99.3126953125
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ $NUMBER$
rank: 654
score: 99.27548217773438
patch: final int [ ] n $NUMBER$ = n 1 * n $NUMBER$ . length ;
rank: 654
score: 99.25917561848958
patch: return n 1 * n $NUMBER$ * ( n 1 * n $NUMBER$ + 1 ) ;
rank: 654
score: 99.22890799386161
patch: final double [ ] n $NUMBER$ = n 1 + n $NUMBER$ ;
rank: 654
score: 99.1830303485577
patch: final int n 1 0 = n 1 * n $NUMBER$ ;
rank: 654
score: 99.17668805803571
patch: final int n 1 , = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 654
score: 99.15718296595982
patch: final int n 1 = new int n 1 * n 1 ;
rank: 655
score: 99.27539825439453
patch: final int [ ] n 1 = n $NUMBER$ * n $NUMBER$ + 0 ;
rank: 655
score: 99.25862630208333
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n 1 * n $NUMBER$ ;
rank: 655
score: 99.2346660907452
patch: int n 1 n $NUMBER$ prod = n 1 * 0 ;
rank: 655
score: 99.22876848493304
patch: final double n 1 = n 1 + n $NUMBER$ * $NUMBER$ ;
rank: 655
score: 99.2247802734375
patch: final int n 1 = n 1 / n 1 / n $NUMBER$ ;
rank: 655
score: 99.18293108258929
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ; try {
rank: 655
score: 99.17630709134616
patch: final double n 1 = n 1 * n $NUMBER$ * ;
rank: 655
score: 99.15623372395834
patch: final int n 1 = n $NUMBER$ * n 1 ; n $NUMBER$ :
rank: 656
score: 99.31157977764423
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$
rank: 656
score: 99.2894515991211
patch: final int n 1 n $NUMBER$ prod = $STRING$ * 0 * n $NUMBER$ ;
rank: 656
score: 99.27481515066964
patch: final int [ ] n $NUMBER$ , n $NUMBER$ * n $NUMBER$ ;
rank: 656
score: 99.258544921875
patch: return n 1 / ( n 1 + n $NUMBER$ + 1 ) ;
rank: 656
score: 99.23441569010417
patch: int n 1 n $NUMBER$ prod = n 1 * 0 . 0 ;
rank: 656
score: 99.22807965959821
patch: final int n 1 ; final int n 1 , n $NUMBER$ ;
rank: 656
score: 99.17577185997597
patch: n 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 656
score: 99.15622384207589
patch: final int n 1 n $NUMBER$ prod = new int n $NUMBER$ ;
rank: 657
score: 99.289208984375
patch: final Object n 1 n $NUMBER$ prod = n $NUMBER$ * n 1 ;
rank: 657
score: 99.25852457682292
patch: return n 1 * n 1 * ( n 1 - n $NUMBER$ + 1 ) ;
rank: 657
score: 99.22706821986607
patch: final double n 1 n $NUMBER$ prod = n 1 + 1 ;
rank: 657
score: 99.17483520507812
patch: final long n 1 = n 1 / n $NUMBER$ ;
rank: 657
score: 99.15509033203125
patch: final int n 1 n $NUMBER$ prod = new int n 1 ;
rank: 658
score: 99.3110107421875
patch: final double n 1 n $NUMBER$ prod = ( double ) n 1 ;
rank: 658
score: 99.23424479166667
patch: final int Umin = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 658
score: 99.22664018110795
patch: final int n 1 n $NUMBER$ prod = 1 ;
rank: 658
score: 99.22159016927084
patch: final long n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod ;
rank: 658
score: 99.1747295673077
patch: final int n 1 = n 1 * / n 1 ;
rank: 659
score: 99.3108379657452
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$
rank: 659
score: 99.27372741699219
patch: final String n 1 n $NUMBER$ prod = new int [ n $NUMBER$ ] ;
rank: 659
score: 99.21867370605469
patch: final double n 1 n $NUMBER$ prod = $NUMBER$ * n 1 . 0 ;
rank: 659
score: 99.1804707845052
patch: final short n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 659
score: 99.17469133649554
patch: final int n 1 = = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 660
score: 99.31006622314453
patch: final double n 1 n $NUMBER$ prod = n 1 * 1 * $NUMBER$ ;
rank: 660
score: 99.28807067871094
patch: final int n 1 n $NUMBER$ prod = n 1 * . n $NUMBER$ ;
rank: 660
score: 99.21856689453125
patch: final int n 1 = n 1 * n $NUMBER$ . 0 . 0 ;
rank: 660
score: 99.15339878627232
patch: final int n 1 = new int n $NUMBER$ * n 1 ;
rank: 661
score: 99.23267415364583
patch: final double n 1 = n 1 * n 1 . n $NUMBER$ ;
rank: 661
score: 99.22576032366071
patch: final int n 1 = n 1 * n $NUMBER$ * n 1
rank: 661
score: 99.17392403738839
patch: final int n 1 $NUMBER$ $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 661
score: 99.15326397235577
patch: final int n 1 = n $NUMBER$ * - n 1 ;
rank: 662
score: 99.30886840820312
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$
rank: 662
score: 99.25752766927083
patch: if ( n 1 >= n 1 + n $NUMBER$ + 1 ) {
rank: 662
score: 99.2320556640625
patch: final int n 1 = n 1 * n 1 * 0 ;
rank: 662
score: 99.21624348958333
patch: final double n 1 n $NUMBER$ prod = $NUMBER$ * $NUMBER$ . 0 ;
rank: 662
score: 99.17843627929688
patch: int n 1 iterator = n 1 * n $NUMBER$ ;
rank: 662
score: 99.17385428292411
patch: int n 1 = n 1 * n $NUMBER$ / n 1 ;
rank: 663
score: 99.30844116210938
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ; / *
rank: 663
score: 99.28635951450893
patch: long n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 663
score: 99.25721435546875
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 + n $NUMBER$ ) ;
rank: 663
score: 99.231689453125
patch: final double n 1 n $NUMBER$ prod = - 1 * n $NUMBER$ ;
rank: 663
score: 99.21527862548828
patch: final int n 1 = n 1 * n 1 . 0 . 0 ;
rank: 663
score: 99.173583984375
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ $NUMBER$ ;
rank: 664
score: 99.2863300030048
patch: final int n 1 n $NUMBER$ prod = n 1 * ;
rank: 664
score: 99.23004619891827
patch: final final int n 1 = n 1 * n 1 ;
rank: 664
score: 99.1767578125
patch: long n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ ;
rank: 664
score: 99.15288434709821
patch: final double n $NUMBER$ n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 665
score: 99.30640411376953
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ != 0
rank: 665
score: 99.28624674479167
patch: final int n 1 n $NUMBER$ prod = n 1 * . 0 ;
rank: 665
score: 99.27279663085938
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ + 0 ;
rank: 665
score: 99.2129150390625
patch: final Object n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod ;
rank: 665
score: 99.1728515625
patch: final int n 1 n $NUMBER$ prod $NUMBER$ = n 1 ;
rank: 665
score: 99.15259806315105
patch: final boolean n 1 = n 1 * n 1 ;
rank: 666
score: 99.30587768554688
patch: final double n 1 n $NUMBER$ prod = ( final double ) n 1 ;
rank: 666
score: 99.27256556919643
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . 1 ;
rank: 666
score: 99.25684814453125
patch: final int n 1 n $NUMBER$ prod = Math . sqrt ( n $NUMBER$ * n 1 ) ;
rank: 666
score: 99.22935384114584
patch: return Fast CaMeL Math . sqrt ( n 1 , n 1 ) ;
rank: 666
score: 99.2122802734375
patch: if ( n 1 > ( n 1 + n $NUMBER$ ) ) {
rank: 666
score: 99.17184012276786
patch: int n $NUMBER$ = n 1 * n 1 * n $NUMBER$ ;
rank: 666
score: 99.15201822916667
patch: final int n 1 : n $NUMBER$ * n 1 ;
rank: 667
score: 99.25651245117187
patch: final int n 1 = Math . sqrt ( n 1 * n 1 + n $NUMBER$ ) ;
rank: 667
score: 99.22867257254464
patch: final long n 1 = n 1 * n $NUMBER$ . 0 ;
rank: 667
score: 99.22250802176339
patch: double n 1 = n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 667
score: 99.2111328125
patch: final int n $NUMBER$ n $NUMBER$ = n 1 * $NUMBER$ . 0 ;
rank: 667
score: 99.176025390625
patch: final int n 1 <= n 1 * n $NUMBER$ ;
rank: 667
score: 99.151611328125
patch: final int n 1 = n $NUMBER$ ;
rank: 668
score: 99.25641741071429
patch: return n 1 * n $NUMBER$ * n 1 * n $NUMBER$ ;
rank: 668
score: 99.22747802734375
patch: final double n 1 = n 1 / n $NUMBER$ . 0 ;
rank: 668
score: 99.22239467075893
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$
rank: 668
score: 99.21090932992789
patch: final int n 1 = n $NUMBER$ / $NUMBER$ . 0 ;
rank: 668
score: 99.17489858774039
patch: final int n 1 = n 1 * * n $NUMBER$ ;
rank: 668
score: 99.17151750837054
patch: / * final int n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 668
score: 99.15086146763393
patch: final / * * * * * * * * * * /
rank: 669
score: 99.3024673461914
patch: final double n 1 n $NUMBER$ prod = ( final int ) n 1 ;
rank: 669
score: 99.22733851841518
patch: final int n 1 = n 1 * n $NUMBER$ . 1 ;
rank: 669
score: 99.22230881911058
patch: if ( n 1 >= n 1 * n $NUMBER$ ) {
rank: 669
score: 99.21024867466518
patch: final int n 1 = n $NUMBER$ / n 1 . 0 ;
rank: 669
score: 99.17437274639423
patch: final int n 1 * = n 1 * n $NUMBER$ ;
rank: 669
score: 99.17144775390625
patch: n 1 = n $NUMBER$ * n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 670
score: 99.22141810825893
patch: final int n 1 n $NUMBER$ prod = n 1 - $NUMBER$ ;
rank: 670
score: 99.1740253155048
patch: final int n 1 = ( n 1 * n $NUMBER$ ;
rank: 670
score: 99.17119891826923
patch: final long n 1 $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 670
score: 99.14857991536458
patch: final int value 1 = n 1 * n $NUMBER$ ;
rank: 671
score: 99.30235290527344
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$
rank: 671
score: 99.28398786272321
patch: final Object n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ;
rank: 671
score: 99.27164713541667
patch: final int < Object > n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 671
score: 99.25606079101563
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ + 1 ;
rank: 671
score: 99.21929462139423
patch: double n 1 = n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 671
score: 99.171142578125
patch: / * int n 1 = n 1 * n $NUMBER$ ;
rank: 671
score: 99.1485595703125
patch: final int n 1 = n 1 ; if ( n 1 ;
rank: 672
score: 99.30214280348558
patch: / * int n 1 n $NUMBER$ prod = n 1 ;
rank: 672
score: 99.2713623046875
patch: final final int n 1 n $NUMBER$ prod = n $NUMBER$ + n $NUMBER$ ;
rank: 672
score: 99.22593336838942
patch: final double n 1 = n 1 * $NUMBER$ . 0 ;
rank: 672
score: 99.21915108816964
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ - $NUMBER$ ;
rank: 672
score: 99.173583984375
patch: final int n 1 n $NUMBER$ prod = n 1 * Math ;
rank: 672
score: 99.17103794642857
patch: Dimension n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 672
score: 99.14803641183036
patch: final / * * / final int n 1 = n 1 ;
rank: 673
score: 99.17355581430289
patch: final int n 1 = ( n $NUMBER$ * n $NUMBER$ ;
rank: 673
score: 99.17083740234375
patch: int n 1 $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 673
score: 99.14739990234375
patch: final int n $NUMBER$ [ ] = n $NUMBER$ * n $NUMBER$ ;
rank: 674
score: 99.2814471905048
patch: final int n 1 n $NUMBER$ prod = n 1 ; }
rank: 674
score: 99.27080891927083
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ << n 1 ;
rank: 674
score: 99.25529174804687
patch: final int n 1 n $NUMBER$ prod = Math . sqrt ( n $NUMBER$ + n $NUMBER$ ) ;
rank: 674
score: 99.17331949869792
patch: final synchronized n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 674
score: 99.17056039663461
patch: final int n 1 = n 1 1 - n $NUMBER$ ;
rank: 675
score: 99.30113983154297
patch: / * double n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 675
score: 99.27080891927083
patch: final int < String > n 1 = n 1 * n $NUMBER$ ;
rank: 675
score: 99.25466437088816
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - - n $NUMBER$ ;
rank: 675
score: 99.22503255208333
patch: double n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ . 0 ;
rank: 675
score: 99.21615164620536
patch: double n 1 = n 1 + n $NUMBER$ + n $NUMBER$ ;
rank: 675
score: 99.17312387319711
patch: final int n 1 compare = n 1 * n $NUMBER$ ;
rank: 675
score: 99.16991170247395
patch: final float n 1 = n 1 + n $NUMBER$ ;
rank: 676
score: 99.28067220052084
patch: new double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 676
score: 99.26956939697266
patch: final int n 1 n $NUMBER$ prod = new String ( n 1 ) ;
rank: 676
score: 99.22364095052083
patch: final int n 1 = n 1 n $NUMBER$ prod * n 1 ;
rank: 676
score: 99.2050048828125
patch: final int n 1 = n 1 / n 1 * n 1 ;
rank: 676
score: 99.17227608816964
patch: final int n 1 = n $NUMBER$ * 0 - n $NUMBER$ ;
rank: 676
score: 99.14696393694196
patch: final int [ ] n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 677
score: 99.26868489583333
patch: final Object n 1 = n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 677
score: 99.25411783854166
patch: return n 1 * n 1 * n $NUMBER$ - $NUMBER$ . 0 ;
rank: 677
score: 99.17168317522321
patch: final try { int n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 677
score: 99.16898890904018
patch: final int n $NUMBER$ = n 1 * $NUMBER$ * n $NUMBER$ ;
rank: 677
score: 99.1462910970052
patch: final void n 1 n $NUMBER$ prod = n 1 ;
rank: 678
score: 99.25372635690789
patch: final int n 1 = n 1 * ( n $NUMBER$ + n $NUMBER$ + 1 ) ;
rank: 678
score: 99.2234619140625
patch: final int n 1 , Umin = n 1 * n $NUMBER$ ;
rank: 678
score: 99.20416666666667
patch: final int n 1 n $NUMBER$ prod = n 1 . 0 0 ;
rank: 678
score: 99.1708984375
patch: int n 1 n $NUMBER$ prod = 0 * n $NUMBER$ ;
rank: 678
score: 99.16834435096153
patch: n $NUMBER$ = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 679
score: 99.26851654052734
patch: final double n 1 = n $NUMBER$ * ( n $NUMBER$ * n $NUMBER$ ;
rank: 679
score: 99.16986083984375
patch: final int n 1 = n $NUMBER$ * null * n $NUMBER$ ;
rank: 680
score: 99.29937744140625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n 1
rank: 680
score: 99.26842498779297
patch: final int n 1 n $NUMBER$ prod = ( ( int ) n $NUMBER$ ;
rank: 680
score: 99.22342936197917
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ . n $NUMBER$ ;
rank: 680
score: 99.21473039899554
patch: double n 1 = n 1 + n $NUMBER$ * n $NUMBER$ ;
rank: 680
score: 99.20301106770833
patch: final Integer n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod ;
rank: 680
score: 99.16938127790179
patch: final int n 1 = n $NUMBER$ * this * n $NUMBER$ ;
rank: 681
score: 99.29847717285156
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 * 1 ;
rank: 681
score: 99.26786804199219
patch: final int n 1 n $NUMBER$ prod = ( n $NUMBER$ * n 1 ;
rank: 681
score: 99.25289113898026
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 ; / *
rank: 681
score: 99.21412876674107
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ + 1 ;
rank: 681
score: 99.20266488882211
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * $NUMBER$ ;
rank: 681
score: 99.16847737630208
patch: final int n 1 = n $NUMBER$ * 0 $NUMBER$ ;
rank: 681
score: 99.1446200284091
patch: final int n 1 = $STRING$ * n $NUMBER$ ;
rank: 682
score: 99.26773834228516
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ * 0 ;
rank: 682
score: 99.25206909179687
patch: return n 1 * n 1 * ( n 1 + n $NUMBER$ + 1 ) / $NUMBER$ ;
rank: 682
score: 99.22284342447917
patch: final int n 1 = n 1 * n $NUMBER$ $NUMBER$ . 0 ;
rank: 682
score: 99.16775076729911
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * Math ;
rank: 682
score: 99.16768101283482
patch: final int n 1 , 1 = n 1 * n $NUMBER$ ;
rank: 683
score: 99.29773712158203
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - $NUMBER$ ;
rank: 683
score: 99.27865164620536
patch: final int n 1 n $NUMBER$ prod = $STRING$ ; / * /
rank: 683
score: 99.25187465122768
patch: long n 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 683
score: 99.22272135416667
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ % n $NUMBER$ ;
rank: 683
score: 99.21382359095982
patch: double n 1 n $NUMBER$ prod = n 1 + n 1 ;
rank: 683
score: 99.16712297712054
patch: final int n 1 = n 1 $NUMBER$ * n $NUMBER$ ; ;
rank: 684
score: 99.26717122395833
patch: final String n 1 n $NUMBER$ prod = ( String ) n 1 ;
rank: 684
score: 99.21372767857143
patch: final int n 1 = n 1 - n $NUMBER$ * $NUMBER$ ;
rank: 684
score: 99.19855205829327
patch: if ( n 1 - n 1 > n 1 ) {
rank: 684
score: 99.1669170673077
patch: final int n 1 , = n 1 * n 1 ;
rank: 684
score: 99.14420259915866
patch: final int [ ] list = n 1 * n $NUMBER$ ;
rank: 685
score: 99.2968505859375
patch: final double n 1 n $NUMBER$ prod = n 1 * n 1 .
rank: 685
score: 99.26708984375
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ . length ;
rank: 685
score: 99.21156529017857
patch: final int [ ] n $NUMBER$ = new int [ 1 ] ;
rank: 685
score: 99.16683523995536
patch: final double n 1 = n 1 * n $NUMBER$ $NUMBER$ $NUMBER$ ;
rank: 685
score: 99.16681780133929
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; this ;
rank: 686
score: 99.29597473144531
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - $NUMBER$ ;
rank: 686
score: 99.16666353665866
patch: final int n 1 = n 1 1 + n 1 ;
rank: 686
score: 99.16634695870536
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ 1 ; final
rank: 687
score: 99.27692522321429
patch: String n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 687
score: 99.26671549479167
patch: final String n 1 n $NUMBER$ prod = n $NUMBER$ % n $NUMBER$ ;
rank: 687
score: 99.21006556919643
patch: final double n 1 = n 1 * $NUMBER$ * n $NUMBER$ ;
rank: 687
score: 99.19498988560268
patch: final long n 1 n $NUMBER$ prod = n 1 . 0 ;
rank: 687
score: 99.1663348858173
patch: final int n 1 1 = n 1 - n $NUMBER$ ;
rank: 688
score: 99.275830078125
patch: final final int n 1 n $NUMBER$ prod = n 1 ; / /
rank: 688
score: 99.21895054408482
patch: final int n 1 = n 1 * n $NUMBER$ . $NUMBER$ ;
rank: 688
score: 99.20970807756696
patch: final double n 1 = n 1 * n $NUMBER$ * n $NUMBER$
rank: 688
score: 99.16615513392857
patch: int list 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 688
score: 99.1661376953125
patch: final int n 1 = n 1 1 * n $NUMBER$ ; ;
rank: 688
score: 99.14124644886364
patch: final int n 1 = $STRING$ * n 1 ;
rank: 689
score: 99.27568359375
patch: double n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * $NUMBER$ ;
rank: 689
score: 99.16586739676339
patch: final int n 1 = n 1 $NUMBER$ 1 * n $NUMBER$ ;
rank: 689
score: 99.16514369419643
patch: final int n 1 = max * n $NUMBER$ * n $NUMBER$ ;
rank: 690
score: 99.27486746651786
patch: Object n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 690
score: 99.25078125
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * $NUMBER$ . 0 ; /
rank: 690
score: 99.2177734375
patch: double n 1 n $NUMBER$ prod = n 1 * 0 ;
rank: 690
score: 99.16575270432692
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ 1 ;
rank: 690
score: 99.16499837239583
patch: final int n 1 <= n $NUMBER$ * n $NUMBER$ ;
rank: 690
score: 99.14046536959134
patch: final int n 1 = n 1 * 0 . $NUMBER$ ;
rank: 691
score: 99.21622140066964
patch: final int n 1 = n $NUMBER$ n 1 * n $NUMBER$ ;
rank: 691
score: 99.18780517578125
patch: final int n 1 = n 1 / n 1 * $NUMBER$ ;
rank: 691
score: 99.1656494140625
patch: final long n 1 = n 1 1 * n $NUMBER$ ;
rank: 691
score: 99.16299203725961
patch: final int n 1 * = n $NUMBER$ * n $NUMBER$ ;
rank: 692
score: 99.29241943359375
patch: final Normal CaMeL Distribution n 1 n $NUMBER$ prod = n 1 ;
rank: 692
score: 99.2634521484375
patch: final int < double > n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 692
score: 99.21563313802083
patch: final double n 1 = n 1 * n 1 . n 1 ;
rank: 692
score: 99.16257731119792
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ $NUMBER$ ;
rank: 693
score: 99.29232788085938
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 1 ;
rank: 693
score: 99.207763671875
patch: double n 1 n $NUMBER$ prod = n 1 - n $NUMBER$ ;
rank: 693
score: 99.18316650390625
patch: final int n 1 = n 1 * n $NUMBER$ % $NUMBER$ ;
rank: 693
score: 99.16511753627232
patch: final int n 1 = n 1 * n $NUMBER$ ; * /
rank: 693
score: 99.16224161783855
patch: final int list 1 = n 1 * n $NUMBER$ ;
rank: 694
score: 99.27290852864583
patch: private int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 694
score: 99.2501220703125
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ . 0 ; /
rank: 694
score: 99.182861328125
patch: final int n 1 n $NUMBER$ prod = 0 * $NUMBER$ . 0 ;
rank: 694
score: 99.16487339564732
patch: final int n 1 = n 1 $NUMBER$ $NUMBER$ * n 1 ;
rank: 694
score: 99.16182767427884
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * ;
rank: 694
score: 99.13783616286058
patch: final int n $NUMBER$ 1 = n 1 * n 1 ;
rank: 695
score: 99.24933471679688
patch: final int n 1 = n 1 * Math . sqrt ( n $NUMBER$ * n $NUMBER$ ) ;
rank: 695
score: 99.18260846819196
patch: final int n 1 = n $NUMBER$ / n $NUMBER$ . 0 ;
rank: 695
score: 99.16476675180289
patch: final int n 1 = n $NUMBER$ $NUMBER$ / n $NUMBER$ ;
rank: 695
score: 99.16087123325893
patch: final int n 1 n $NUMBER$ prod = this + n $NUMBER$ ;
rank: 695
score: 99.1376953125
patch: final int n 1 n $NUMBER$ prod 1 = n 1 ;
rank: 696
score: 99.24893624441964
patch: final int n 1 = 1 * n 1 * n $NUMBER$ ;
rank: 696
score: 99.21494838169643
patch: final double n 1 = n 1 * n $NUMBER$ * 0 ;
rank: 696
score: 99.18194986979167
patch: final int n 1 = n 1 * $NUMBER$ / $NUMBER$ . 0 ;
rank: 696
score: 99.1643778483073
patch: final int n 1 = n 1 * n $NUMBER$ $NUMBER$
rank: 696
score: 99.13760811941964
patch: final int [ ] n 1 = n 1 + n $NUMBER$ ;
rank: 697
score: 99.26123046875
patch: final int < int > n 1 = n 1 * n $NUMBER$ ;
rank: 697
score: 99.24884033203125
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 * n 1 ;
rank: 697
score: 99.16427612304688
patch: final int n $NUMBER$ = n $NUMBER$ / n $NUMBER$ ;
rank: 697
score: 99.1603534405048
patch: final int n 1 contains = n $NUMBER$ * n $NUMBER$ ;
rank: 697
score: 99.1373760516827
patch: final int n 1 n $NUMBER$ prod = ( n 1 ;
rank: 698
score: 99.26085611979167
patch: final double n 1 n $NUMBER$ prod = ( int ) n $NUMBER$ ;
rank: 698
score: 99.24764578683036
patch: Integer n 1 = n 1 * n $NUMBER$ * n 1 ;
rank: 698
score: 99.16371848366477
patch: final int n 1 , $NUMBER$ = n 1 ;
rank: 699
score: 99.2892074584961
patch: final int n 1 n $NUMBER$ prod = n 1 * 1 * 1 ;
rank: 699
score: 99.26942545572916
patch: final char n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 699
score: 99.24762573242188
patch: final int n 1 = n 1 * n $NUMBER$ * Math . sqrt ( n 1 ) ;
rank: 699
score: 99.2143310546875
patch: final double n 1 n $NUMBER$ prod = n 1 : n 1 ;
rank: 699
score: 99.16360238882211
patch: if ( n 1 * n $NUMBER$ > n $NUMBER$ ) {
rank: 699
score: 99.15985979352679
patch: int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ *
rank: 700
score: 99.2889892578125
patch: final final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$
rank: 700
score: 99.26851399739583
patch: int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ * $NUMBER$ ;
rank: 700
score: 99.20419747488839
patch: double n 1 = n $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 700
score: 99.17987932477679
patch: final int n 1 = n 1 / n $NUMBER$ * $NUMBER$ ;
rank: 700
score: 99.13494001116071
patch: int n 1 = n 1 * n $NUMBER$ ; n $NUMBER$ :
rank: 701
score: 99.28849029541016
patch: final final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ .
rank: 701
score: 99.21405436197917
patch: final long n 1 = n 1 * n 1 * n 1 ;
rank: 701
score: 99.20289024939903
patch: int n 1 = n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 701
score: 99.17750651041666
patch: final int n 1 = n 1 / n $NUMBER$ * n 1 ;
rank: 701
score: 99.16257731119792
patch: final double n 1 , n $NUMBER$ , n $NUMBER$ ;
rank: 701
score: 99.15899658203125
patch: final final int n 1 n $NUMBER$ prod = n $NUMBER$ ; final
rank: 702
score: 99.17720540364583
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0
rank: 702
score: 99.15896170479911
patch: int list 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 703
score: 99.25884602864583
patch: final int n 1 n $NUMBER$ prod = ( n 1 >> $NUMBER$ ;
rank: 703
score: 99.21372884114584
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ / n $NUMBER$ ;
rank: 703
score: 99.1624286358173
patch: final int n $NUMBER$ = n 1 1 * n 1 ;
rank: 703
score: 99.15836879185268
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ - 0 ;
rank: 704
score: 99.26495361328125
patch: final int n 1 n $NUMBER$ prod = n 1 *
rank: 704
score: 99.21372767857143
patch: final int Umin = n 1 * n $NUMBER$ . 0 ;
rank: 704
score: 99.2017822265625
patch: int n 1 n $NUMBER$ prod = n 1 + n 1 ;
rank: 704
score: 99.13365827287946
patch: final int n 1 = n 1 ; final int n 1 :
rank: 705
score: 99.15777587890625
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * this ;
rank: 705
score: 99.13316999162946
patch: final int n 1 n $NUMBER$ prod = Math . n 1 ;
rank: 706
score: 99.2453845796131
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ = n $NUMBER$ ;
rank: 706
score: 99.2005615234375
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ * 1 ;
rank: 706
score: 99.17303059895833
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ / $NUMBER$ . 0 ;
rank: 706
score: 99.16172438401442
patch: final int n 1 = n $NUMBER$ + n 1 $NUMBER$ ;
rank: 706
score: 99.13301595052083
patch: final T n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 707
score: 99.26338413783482
patch: final n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 707
score: 99.2564453125
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ - n $NUMBER$ ;
rank: 707
score: 99.21103515625
patch: final double n 1 n $NUMBER$ prod = - 1 * n 1 ;
rank: 707
score: 99.20050048828125
patch: final int n 1 n $NUMBER$ prod = n 1 * min ;
rank: 707
score: 99.16136678059895
patch: final int n 1 , n 1 , n 1 ;
rank: 707
score: 99.15755789620536
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ * false ;
rank: 707
score: 99.13289388020833
patch: final int n 1 n $NUMBER$ prod -= n 1 ;
rank: 708
score: 99.25615234375
patch: final int n 1 n $NUMBER$ prod = ( n 1 * $NUMBER$ ;
rank: 708
score: 99.24393920898437
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ; / /
rank: 708
score: 99.20034354073661
patch: float n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 708
score: 99.17169596354167
patch: final final int n 1 n $NUMBER$ prod = n 1 . 0 ;
rank: 708
score: 99.16134878305289
patch: final int n 1 $NUMBER$ = n $NUMBER$ * n 1 ;
rank: 709
score: 99.24288504464286
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 - n $NUMBER$ ;
rank: 709
score: 99.1610576923077
patch: if ( n 1 * n $NUMBER$ < n $NUMBER$ ) {
rank: 709
score: 99.13218470982143
patch: final int < Integer * * / n 1 = n 1 ;
rank: 710
score: 99.28306361607143
patch: final double n 1 n $NUMBER$ prod = 0 * n 1 ;
rank: 710
score: 99.24281412760416
patch: final Integer n 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 710
score: 99.19927106584821
patch: final int n 1 n $NUMBER$ prod = 1 + n $NUMBER$ ;
rank: 710
score: 99.17080891927084
patch: final int n 1 n $NUMBER$ prod = n 1 1 . 0 ;
rank: 710
score: 99.16086050180289
patch: final int n $NUMBER$ = n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 710
score: 99.1563720703125
patch: final synchronized n 1 = n 1 * n $NUMBER$ ;
rank: 711
score: 99.24271432976974
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / * / /
rank: 711
score: 99.17056477864584
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * $NUMBER$ . $NUMBER$ ;
rank: 711
score: 99.16048177083333
patch: final int n 1 = n $NUMBER$ - n 1 ;
rank: 711
score: 99.15606689453125
patch: final int n 1 = n 1 * this + n $NUMBER$ ;
rank: 711
score: 99.13209885817308
patch: final int n 1 n $NUMBER$ prod = * n $NUMBER$ ;
rank: 712
score: 99.25882975260417
patch: final Object n 1 n $NUMBER$ prod = n 1 / n $NUMBER$ ;
rank: 712
score: 99.19887131911058
patch: final int n 1 n $NUMBER$ prod = - n 1 ;
rank: 712
score: 99.15562220982143
patch: int n 1 n $NUMBER$ prod = n 1 * max $NUMBER$ ;
rank: 713
score: 99.27923583984375
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ .
rank: 713
score: 99.25771658761161
patch: final double n 1 n $NUMBER$ prod = n 1 * false ;
rank: 713
score: 99.24212937127976
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n 1 * n $NUMBER$ ;
rank: 713
score: 99.19810901988636
patch: final int n $NUMBER$ = n 1 * $NUMBER$ ;
rank: 713
score: 99.1598651592548
patch: final double n 1 1 = n 1 * n 1 ;
rank: 713
score: 99.13071695963542
patch: final int n 1 = n 1 * - $NUMBER$ ;
rank: 714
score: 99.27909342447917
patch: final Double n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 714
score: 99.242041015625
patch: final int n 1 -= n 1 * n 1 * n $NUMBER$ ;
rank: 714
score: 99.20782470703125
patch: final int n 1 = n 1 * n 1 . 1 ;
rank: 714
score: 99.15962727864583
patch: final int n 1 , n $NUMBER$ , n 1 ;
rank: 714
score: 99.15482003348214
patch: final int n 1 n $NUMBER$ prod += 1 * n $NUMBER$ ;
rank: 714
score: 99.12985464242789
patch: final int [ $NUMBER$ ] = n $NUMBER$ * n $NUMBER$ ;
rank: 715
score: 99.2790283203125
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ %
rank: 715
score: 99.24161987304687
patch: final int n 1 = n 1 * n $NUMBER$ * ( n 1 + n $NUMBER$ ) ;
rank: 715
score: 99.19750104631696
patch: double n 1 = n 1 * n 1 + n $NUMBER$ ;
rank: 715
score: 99.16796875
patch: final int n 1 = n 1 / n $NUMBER$ % n $NUMBER$ ;
rank: 715
score: 99.15962727864583
patch: final double n $NUMBER$ = n 1 + n $NUMBER$ ;
rank: 715
score: 99.15481131417411
patch: final int n 1 n $NUMBER$ prod = n 1 * this ;
rank: 715
score: 99.12901960100446
patch: final int n 1 = 0 ; n 1 = n $NUMBER$ ;
rank: 716
score: 99.27899169921875
patch: final double n 1 n $NUMBER$ prod = $STRING$ * n 1 ;
rank: 716
score: 99.25709751674107
patch: final double n 1 n $NUMBER$ prod = n 1 * true ;
rank: 716
score: 99.25052897135417
patch: final int n 1 n $NUMBER$ prod = ( Integer ;
rank: 716
score: 99.2061258951823
patch: final double n 1 = n 1 / n 1 ;
rank: 716
score: 99.19744001116071
patch: final double n 1 = n 1 * n $NUMBER$ - $NUMBER$ ;
rank: 716
score: 99.16796061197917
patch: final int n 1 = n 1 / n 1 % n $NUMBER$ ;
rank: 716
score: 99.1585223858173
patch: final int n 1 , n 1 1 , n $NUMBER$ ;
rank: 716
score: 99.12728445870536
patch: int n 1 = n $NUMBER$ ; n $NUMBER$ = n $NUMBER$ ;
rank: 717
score: 99.25696614583333
patch: final long n 1 n $NUMBER$ prod = n 1 / n 1 ;
rank: 717
score: 99.24943324497768
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . start $NUMBER$
rank: 717
score: 99.20485617897727
patch: final double n 1 n $NUMBER$ prod = $STRING$ ;
rank: 717
score: 99.19709995814732
patch: final double n 1 = n 1 * n 1 + $NUMBER$ ;
rank: 717
score: 99.16780911959134
patch: if ( n 1 - n 1 > n $NUMBER$ ) {
rank: 717
score: 99.15817495492789
patch: final int n 1 $NUMBER$ = n $NUMBER$ + n $NUMBER$ ;
rank: 717
score: 99.15301983173077
patch: final int n 1 n $NUMBER$ prod -- * n $NUMBER$ ;
rank: 717
score: 99.12720598493304
patch: final int < Integer * * / n 1 = n $NUMBER$ ;
rank: 718
score: 99.24864095052084
patch: final int n 1 n $NUMBER$ prod = ( n 1 * 0 ;
rank: 718
score: 99.15816556490384
patch: final int n 1 = n 1 ) * n $NUMBER$ ;
rank: 718
score: 99.15200805664062
patch: final int n 1 *= n $NUMBER$ * n $NUMBER$ ;
rank: 718
score: 99.12671915690105
patch: final Integer n 1 = n $NUMBER$ * n 1 ;
rank: 719
score: 99.24058180588942
patch: if ( n 1 > n 1 + n $NUMBER$ ) {
rank: 719
score: 99.16690499441964
patch: final int Umin = n 1 * n 1 . 0 ;
rank: 719
score: 99.1577481356534
patch: n 1 = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 719
score: 99.1508280436198
patch: final for n 1 = n 1 * n $NUMBER$ ;
rank: 719
score: 99.12639508928571
patch: final int n 1 n $NUMBER$ prod = double . n 1 ;
rank: 720
score: 99.2405517578125
patch: final int n 1 = n $NUMBER$ * n 1 - n $NUMBER$ ;
rank: 720
score: 99.200927734375
patch: final int n 1 = n $NUMBER$ n $NUMBER$ * n $NUMBER$ ;
rank: 720
score: 99.16681315104167
patch: final n 1 n $NUMBER$ prod = n 1 * $NUMBER$ . 0 ;
rank: 720
score: 99.15765850360577
patch: final int n $NUMBER$ = n $NUMBER$ 1 * n $NUMBER$ ;
rank: 720
score: 99.1505126953125
patch: final int n 1 else = n 1 * n $NUMBER$ ;
rank: 720
score: 99.12620326450893
patch: final int n 1 n $NUMBER$ prod n 1 = n $NUMBER$ ;
rank: 721
score: 99.25504847935268
patch: final int n 1 n $NUMBER$ prod = 0 ; / * /
rank: 721
score: 99.19492885044643
patch: final int n 1 = n 1 + n $NUMBER$ * 1 ;
rank: 721
score: 99.16564127604167
patch: final int n 1 = n 1 / n 1 / n 1 ;
rank: 721
score: 99.15748009314903
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ 1 ;
rank: 721
score: 99.1505126953125
patch: int n 1 = n $NUMBER$ * n $NUMBER$ * 0 ;
rank: 721
score: 99.12610802283653
patch: final int n 1 = n $NUMBER$ * 0 . $NUMBER$ ;
rank: 722
score: 99.25493977864583
patch: final int n 1 n $NUMBER$ prod = new double length ( ) ;
rank: 722
score: 99.24574381510416
patch: final int n 1 n $NUMBER$ prod = new int [ 0 ] ;
rank: 722
score: 99.24041341145833
patch: final int n 1 n $NUMBER$ prod = n 1 * E 1 ;
rank: 722
score: 99.1649921123798
patch: int n 1 n $NUMBER$ prod = n 1 . 0 ;
rank: 722
score: 99.12594168526786
patch: int n 1 = n $NUMBER$ * n $NUMBER$ ; n $NUMBER$ :
rank: 723
score: 99.24557059151786
patch: final String n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ ;
rank: 723
score: 99.24034830729167
patch: final int n 1 n $NUMBER$ prod = n 1 & n $NUMBER$ ;
rank: 723
score: 99.19731794084821
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ . 0 ;
rank: 723
score: 99.19427020733173
patch: int n 1 n $NUMBER$ prod = n 1 * 1 ;
rank: 723
score: 99.15598366477273
patch: final int n $NUMBER$ n $NUMBER$ , n $NUMBER$ ;
rank: 723
score: 99.15044611150569
patch: final int n 1 = $NUMBER$ * n $NUMBER$ ;
rank: 723
score: 99.12580217633929
patch: int n 1 = n $NUMBER$ ; n 1 = n $NUMBER$ ;
rank: 724
score: 99.253173828125
patch: final int n 1 n $NUMBER$ prod = $STRING$ ; / /
rank: 724
score: 99.24033203125
patch: final int n 1 = n 1 * n $NUMBER$ * - 1 ;
rank: 724
score: 99.19422258649554
patch: final int [ ] n $NUMBER$ = new int [ $NUMBER$ ] ;
rank: 724
score: 99.15590256911058
patch: final int n $NUMBER$ = n 1 $NUMBER$ * n 1 ;
rank: 724
score: 99.15029672475961
patch: int n 1 = n 1 * 0 * n $NUMBER$ ;
rank: 725
score: 99.27236328125
patch: final final int n 1 n $NUMBER$ prod = n 1 ; / *
rank: 725
score: 99.2523193359375
patch: final else n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 725
score: 99.24020225123355
patch: final int n 1 = n 1 * n 1 * n $NUMBER$ * n $NUMBER$ ; /
rank: 725
score: 99.16233723958334
patch: final int n 1 = n 1 * $NUMBER$ . 0 . 0 ;
rank: 725
score: 99.15564903846153
patch: final int n 1 , n $NUMBER$ $NUMBER$ , n 1 ;
rank: 725
score: 99.12575461647727
patch: final int value = n $NUMBER$ * n $NUMBER$ ;
rank: 726
score: 99.24462890625
patch: try { final int n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 726
score: 99.19211989182692
patch: final int n 1 = n 1 * $NUMBER$ + 1 ;
rank: 726
score: 99.16070149739583
patch: final int n 1 = n 1 . 0 * $NUMBER$ . 0 ;
rank: 726
score: 99.1553243001302
patch: final int n 1 n $NUMBER$ prod , n $NUMBER$ ;
rank: 726
score: 99.14666278545673
patch: final long n 1 = n 1 * n $NUMBER$ ; final
rank: 726
score: 99.12496512276786
patch: final Integer n 1 n $NUMBER$ prod = n $NUMBER$ n 1 ;
rank: 727
score: 99.24010009765625
patch: final int n 1 = n 1 * Math . sqrt ( n 1 + n $NUMBER$ ) ;
rank: 727
score: 99.1919696514423
patch: final double n 1 = n 1 * 1 . 0 ;
rank: 727
score: 99.19175502232143
patch: final int n 1 = n $NUMBER$ * n 1 * $NUMBER$ ;
rank: 727
score: 99.16063639322917
patch: final int n 1 = n $NUMBER$ * $NUMBER$ * $NUMBER$ . 0 ;
rank: 727
score: 99.15513258713942
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ / ;
rank: 727
score: 99.1456807454427
patch: int n 1 equals = n 1 * n $NUMBER$ ;
rank: 728
score: 99.24427083333333
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ }
rank: 728
score: 99.19176374162946
patch: final int n 1 = n 1 * n $NUMBER$ * min ;
rank: 728
score: 99.19135393415179
patch: final long n 1 n $NUMBER$ prod = n 1 * 1 ;
rank: 728
score: 99.15488844651442
patch: final int n 1 = n 1 - n 1 $NUMBER$ ;
rank: 728
score: 99.1436298076923
patch: final int n 1 Number = n 1 * n $NUMBER$ ;
rank: 729
score: 99.2508544921875
patch: final int n 1 n $NUMBER$ prod = this / n 1 ;
rank: 729
score: 99.24000186011905
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n 1 * n $NUMBER$ ;
rank: 729
score: 99.19089181082589
patch: float n 1 = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 729
score: 99.15963979867789
patch: if ( n 1 + n 1 > n $NUMBER$ ) {
rank: 729
score: 99.15421919389205
patch: int n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 729
score: 99.14211018880208
patch: int n 1 1 = n 1 * n $NUMBER$ ;
rank: 730
score: 99.25054462139423
patch: n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 730
score: 99.24193396935097
patch: final int [ ] n $NUMBER$ = new int $NUMBER$ ] ;
rank: 730
score: 99.15834263392857
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ 1 . 0 ;
rank: 730
score: 99.15409342447917
patch: int n 1 = n 1 $NUMBER$ * n $NUMBER$ ;
rank: 730
score: 99.12337552584134
patch: final int n 1 = n 1 * 0 . 1 ;
rank: 731
score: 99.24191080729166
patch: final Object n 1 n $NUMBER$ prod = n 1 + n $NUMBER$ ;
rank: 731
score: 99.19040352957589
patch: final int n 1 = n 1 + n $NUMBER$ - $NUMBER$ ;
rank: 731
score: 99.18971470424107
patch: final int n 1 = n 1 * n 1 . $NUMBER$ ;
rank: 731
score: 99.15310668945312
patch: final double n $NUMBER$ = n 1 * n 1 ;
rank: 731
score: 99.14122517903645
patch: final int n 1 == n $NUMBER$ * n $NUMBER$ ;
rank: 731
score: 99.12317911783855
patch: final Double n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 732
score: 99.26644694010416
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 _
rank: 732
score: 99.2456787109375
patch: final int n 1 n $NUMBER$ prod = n 1 $NUMBER$ * $NUMBER$ ;
rank: 732
score: 99.23958740234374
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n $NUMBER$ * $NUMBER$ ;
rank: 732
score: 99.19032639723558
patch: final int n 1 = n 1 * $NUMBER$ + $NUMBER$ ;
rank: 732
score: 99.18889911358173
patch: final final double n 1 n $NUMBER$ prod = n 1 ;
rank: 732
score: 99.15236409505208
patch: final int n $NUMBER$ = n 1 * $NUMBER$ $NUMBER$ ;
rank: 732
score: 99.14121657151442
patch: final int n 1 = n 1 * n 1 ; final
rank: 732
score: 99.1217753092448
patch: final Integer n 1 n $NUMBER$ prod = - $NUMBER$ ;
rank: 733
score: 99.24068509615384
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ . max $NUMBER$
rank: 733
score: 99.1893310546875
patch: final double n 1 = n $NUMBER$ + n $NUMBER$ ;
rank: 733
score: 99.18877301897321
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ n $NUMBER$ ;
rank: 733
score: 99.15168900923295
patch: int n 1 = n 1 / n $NUMBER$ ;
rank: 733
score: 99.14092548076923
patch: final int n 1 = n $NUMBER$ * 1 * $NUMBER$ ;
rank: 734
score: 99.26522623697916
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ 1
rank: 734
score: 99.18932233537946
patch: final int n 1 ; n $NUMBER$ = n 1 * $NUMBER$ ;
rank: 734
score: 99.15558733258929
patch: final int n 1 n $NUMBER$ prod = n 1 * E ;
rank: 734
score: 99.15101975661058
patch: / final int n 1 = n 1 * n $NUMBER$ ;
rank: 734
score: 99.14056865985577
patch: final int n 1 max = n $NUMBER$ * n $NUMBER$ ;
rank: 734
score: 99.12124197823661
patch: / * * * * * * * * * * * /
rank: 735
score: 99.18845040457589
patch: final float n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ;
rank: 735
score: 99.15530831473214
patch: final double Umin = n 1 * n 1 . 0 ;
rank: 735
score: 99.14046536959134
patch: final int n 1 = n 1 * n $NUMBER$ ; /
rank: 735
score: 99.12086838942308
patch: final int [ ] [ ] n $NUMBER$ = n $NUMBER$ ;
rank: 736
score: 99.24439290364583
patch: final Float n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 736
score: 99.1507098858173
patch: int n $NUMBER$ n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 736
score: 99.13938395182292
patch: final int n 1 > n $NUMBER$ * n $NUMBER$ ;
rank: 737
score: 99.26240234375
patch: final double n 1 n $NUMBER$ prod = n 1 % n $NUMBER$ ;
rank: 737
score: 99.2443359375
patch: new int n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 737
score: 99.18638102213542
patch: final Object n 1 = n 1 * n 1 ;
rank: 737
score: 99.15447528545673
patch: if ( n 1 + n 1 > n 1 ) {
rank: 737
score: 99.1504657451923
patch: final long n 1 = n 1 * n 1 $NUMBER$ ;
rank: 737
score: 99.13799579326923
patch: final int n 1 = n $NUMBER$ * n 1 ; final
rank: 737
score: 99.12067205255681
patch: final int n 1 [ ] = n 1 ;
rank: 738
score: 99.26123046875
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$
rank: 738
score: 99.18759591238839
patch: final int start = n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 739
score: 99.23812255859374
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ + $NUMBER$ ;
rank: 739
score: 99.18281773158482
patch: final int n 1 = n 1 * n 1 * 1 ;
rank: 739
score: 99.15188162667411
patch: final int n 1 = n $NUMBER$ * n 1 / $NUMBER$ ;
rank: 739
score: 99.1501934344952
patch: final int n 1 = * n 1 * n $NUMBER$ ;
rank: 739
score: 99.13518817608173
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ ; final
rank: 739
score: 99.11895751953125
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * value ;
rank: 740
score: 99.24239095052083
patch: final int n 1 n $NUMBER$ prod = Umin / n $NUMBER$ ;
rank: 740
score: 99.23801879882812
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n $NUMBER$ - $NUMBER$ ;
rank: 740
score: 99.18714250837054
patch: final int n 1 = n $NUMBER$ * n 1 + $NUMBER$ ;
rank: 740
score: 99.18187604631696
patch: final long n 1 = n 1 * n 1 . 0 ;
rank: 740
score: 99.1499774639423
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ / ;
rank: 740
score: 99.13496907552083
patch: int n 1 = = n 1 * n $NUMBER$ ;
rank: 740
score: 99.11892465444711
patch: final double n 1 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 741
score: 99.23798828125
patch: final double n 1 = n 1 / n 1 * n $NUMBER$ ;
rank: 741
score: 99.23549107142857
patch: final String [ ] n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 741
score: 99.18096923828125
patch: final long n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ ;
rank: 741
score: 99.14989295372597
patch: final int n 1 = = n 1 + n $NUMBER$ ;
rank: 741
score: 99.14723423549107
patch: if ( n 1 > n $NUMBER$ ) throws Convergence CaMeL Exception ,
rank: 741
score: 99.13490804036458
patch: final for n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 741
score: 99.11888776506696
patch: final / * * / final int n 1 = n $NUMBER$ ;
rank: 742
score: 99.24178059895833
patch: final Class n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 742
score: 99.23766217912946
patch: final int n 1 = n 1 * n 1 ; / *
rank: 742
score: 99.14754544771634
patch: final double n 1 $NUMBER$ = n 1 * n 1 ;
rank: 742
score: 99.14637974330357
patch: final int n 1 = n 1 / n $NUMBER$ / $NUMBER$ ;
rank: 742
score: 99.13466574928977
patch: int n 1 += n $NUMBER$ * n $NUMBER$ ;
rank: 742
score: 99.11886160714286
patch: final int n 1 = n 1 ; if ( n $NUMBER$ ;
rank: 743
score: 99.24007161458333
patch: n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ . 0 ;
rank: 743
score: 99.23724365234375
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 743
score: 99.18655831473214
patch: final int n $NUMBER$ = n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 743
score: 99.17949567522321
patch: final / * int n 1 n $NUMBER$ prod = n 1 ;
rank: 743
score: 99.14745076497395
patch: final int n 1 = n 1 + $NUMBER$ $NUMBER$ ;
rank: 743
score: 99.14490618024554
patch: final double n 1 n $NUMBER$ prod = $NUMBER$ 1 . 0 ;
rank: 743
score: 99.1341552734375
patch: final int n 1 : n 1 * n 1 ;
rank: 743
score: 99.11869673295455
patch: final int n 1 = 0 * n 1 ;
rank: 744
score: 99.25932094029018
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$
rank: 744
score: 99.23965657552084
patch: final / * final int n 1 n $NUMBER$ prod = n 1 ;
rank: 744
score: 99.23711867559524
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ = n $NUMBER$ * n 1 ;
rank: 744
score: 99.17769949776786
patch: int n 1 n $NUMBER$ prod = n 1 * - $NUMBER$ ;
rank: 744
score: 99.14732008713942
patch: final long n 1 = n 1 $NUMBER$ * n $NUMBER$ ;
rank: 744
score: 99.14406040736607
patch: if ( n 1 > n 1 ) throws Convergence CaMeL Exception ,
rank: 744
score: 99.13327261117789
patch: final int n 1 n $NUMBER$ prod += n $NUMBER$ $NUMBER$ ;
rank: 745
score: 99.17766462053571
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ n 1 ;
rank: 745
score: 99.14691631610577
patch: final int n 1 $NUMBER$ = n 1 / n 1 ;
rank: 745
score: 99.14306640625
patch: final int n $NUMBER$ n $NUMBER$ = n 1 . 0 ;
rank: 745
score: 99.13268103966347
patch: int n 1 = n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 746
score: 99.25769856770833
patch: final double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ,
rank: 746
score: 99.23595377604167
patch: if ( n 1 > n 1 ) { return n 1 ; }
rank: 746
score: 99.14267403738839
patch: final int n 1 = n 1 / n 1 / $NUMBER$ ;
rank: 746
score: 99.13234299879808
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ; /
rank: 747
score: 99.25753580729166
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ,
rank: 747
score: 99.23562782689145
patch: final int n 1 n $NUMBER$ prod ++ = n 1 * n 1 * n $NUMBER$ ;
rank: 747
score: 99.23188999720982
patch: final long [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 747
score: 99.18550248579545
patch: final int start = n 1 * n $NUMBER$ ;
rank: 747
score: 99.17595966045673
patch: final final double n 1 = n 1 * n $NUMBER$ ;
rank: 747
score: 99.14576134314903
patch: final int n 1 = n 1 * n $NUMBER$ ] ;
rank: 747
score: 99.1175537109375
patch: final long n 1 = n $NUMBER$ * n 1 ;
rank: 748
score: 99.23531943873355
patch: final int n 1 = n 1 * ( n 1 - n $NUMBER$ + 1 ) ;
rank: 748
score: 99.14490763346355
patch: final int n $NUMBER$ = n 1 / n 1 ;
rank: 748
score: 99.13155110677083
patch: final int n 1 > n 1 * n $NUMBER$ ;
rank: 749
score: 99.23531301398026
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - - n 1 ;
rank: 749
score: 99.18361253004808
patch: double n $NUMBER$ n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 749
score: 99.17559814453125
patch: final int n 1 = n $NUMBER$ n 1 * n 1 ;
rank: 749
score: 99.14077524038461
patch: final int n 1 n $NUMBER$ prod += $NUMBER$ . 0 ;
rank: 749
score: 99.13100961538461
patch: final int n 1 trim = n 1 * n $NUMBER$ ;
rank: 750
score: 99.2352359169408
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ . 0 ; / /
rank: 750
score: 99.22977120535714
patch: final Object [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 750
score: 99.14389272836539
patch: final int n 1 = n $NUMBER$ 1 / n $NUMBER$ ;
rank: 750
score: 99.11695353190105
patch: final int n 1 = n 1 * - 1 ;
rank: 751
score: 99.2351806640625
patch: final short n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 751
score: 99.2347412109375
patch: final double n 1 n $NUMBER$ prod = $STRING$ * n $NUMBER$ ;
rank: 751
score: 99.18283081054688
patch: final int max 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 751
score: 99.17278180803571
patch: int n 1 n $NUMBER$ prod = n 1 / n 1 ;
rank: 751
score: 99.14389272836539
patch: final double n 1 = n 1 $NUMBER$ * n 1 ;
rank: 751
score: 99.13083902994792
patch: final int < 1 * n 1 * n $NUMBER$ ;
rank: 751
score: 99.11644490559895
patch: final int t 1 = n 1 * n $NUMBER$ ;
rank: 752
score: 99.25458170572917
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ /
rank: 752
score: 99.23444567228618
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / * try {
rank: 752
score: 99.22921316964286
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ % $NUMBER$ ;
rank: 752
score: 99.17192731584821
patch: double n 1 n $NUMBER$ prod = n 1 / n 1 ;
rank: 752
score: 99.14380821814903
patch: final int n 1 , n $NUMBER$ = n 1 1 ;
rank: 752
score: 99.13857797475961
patch: final double n 1 = n 1 / $NUMBER$ . 0 ;
rank: 752
score: 99.11362711588542
patch: final ] n 1 = n 1 * n $NUMBER$ ;
rank: 753
score: 99.23443603515625
patch: final int n 1 = Math . sqrt ( n $NUMBER$ * n 1 + n $NUMBER$ ) ;
rank: 753
score: 99.17098999023438
patch: final int Umin = n 1 * n $NUMBER$ ;
rank: 753
score: 99.1433574969952
patch: final double n 1 $NUMBER$ = n 1 + n $NUMBER$ ;
rank: 753
score: 99.13838413783482
patch: final int n $NUMBER$ = n 1 * n $NUMBER$ . 0 ;
rank: 753
score: 99.12957208806819
patch: final int n 1 = 1 * n $NUMBER$ ;
rank: 754
score: 99.23438720703125
patch: final int n 1 n $NUMBER$ prod = n 1 * Math . sqrt ( n 1 ) ;
rank: 754
score: 99.17934348366477
patch: final double n 1 n $NUMBER$ prod = 0 ;
rank: 754
score: 99.17036655970982
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ * 1 ;
rank: 754
score: 99.12936636117789
patch: final double n 1 = n 1 * n $NUMBER$ ; final
rank: 754
score: 99.11102764423077
patch: final int n 1 = n $NUMBER$ * 0 . 1 ;
rank: 755
score: 99.23419510690789
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / / * /
rank: 755
score: 99.22774832589286
patch: final int [ ] n $NUMBER$ = n $NUMBER$ + n $NUMBER$ ;
rank: 755
score: 99.1792500813802
patch: final int min 1 = n 1 * n $NUMBER$ ;
rank: 755
score: 99.14291381835938
patch: final int n 1 = n 1 % n $NUMBER$ ;
rank: 755
score: 99.13689313616071
patch: final int n $NUMBER$ = n 1 * n 1 . 0 ;
rank: 756
score: 99.25401204427084
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$
rank: 756
score: 99.233837890625
patch: final int n 1 n $NUMBER$ prod = Math . sqrt ( n 1 + n 1 ) ;
rank: 756
score: 99.14198655348558
patch: final float n 1 = n 1 1 * n $NUMBER$ ;
rank: 756
score: 99.12734750600961
patch: int n 1 = n 1 * n $NUMBER$ * 0 ;
rank: 757
score: 99.23357282366071
patch: final int n 1 = $NUMBER$ * n 1 * n $NUMBER$ ;
rank: 757
score: 99.17816631610577
patch: final int n 1 ; = n 1 * n $NUMBER$ ;
rank: 757
score: 99.16834368024554
patch: final double n 1 = n 1 / n 1 . 0 ;
rank: 757
score: 99.12631460336539
patch: final long n 1 = n $NUMBER$ * n $NUMBER$ ; final
rank: 757
score: 99.10940317007211
patch: final int [ ] list = n $NUMBER$ * n $NUMBER$ ;
rank: 758
score: 99.25284016927084
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ .
rank: 758
score: 99.22817758413461
patch: final int n 1 n $NUMBER$ prod = $STRING$ . 0 ;
rank: 758
score: 99.22501046316964
patch: final int n 1 n $NUMBER$ prod = n 1 . max $NUMBER$
rank: 758
score: 99.17799886067708
patch: if ( n 1 >= n $NUMBER$ * n $NUMBER$ ;
rank: 758
score: 99.10928344726562
patch: final int n 1 = n $NUMBER$ * - $NUMBER$ ;
rank: 759
score: 99.23337273848684
patch: final int n 1 = n 1 * n $NUMBER$ * n 1 * n $NUMBER$ ; /
rank: 759
score: 99.17239379882812
patch: if ( n 1 >= n 1 * n $NUMBER$ ;
rank: 759
score: 99.16698346819196
patch: final long n 1 = n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 759
score: 99.14047475961539
patch: final int n 1 = n 1 % n $NUMBER$ $NUMBER$ ;
rank: 759
score: 99.13214580829327
patch: final int n 1 n $NUMBER$ prod = n 1 n $NUMBER$
rank: 759
score: 99.1091778094952
patch: final / * * * * * * * * * /
rank: 760
score: 99.25141252790179
patch: final double n 1 n $NUMBER$ prod = n 1 * null ;
rank: 760
score: 99.2331775483631
patch: final int n 1 = n 1 * ( n 1 * n $NUMBER$ + 1 ) / $NUMBER$ ;
rank: 760
score: 99.17197487571023
patch: final double n 1 = n $NUMBER$ * $NUMBER$ ;
rank: 760
score: 99.13194056919643
patch: final int n 1 = n 1 * E $NUMBER$ . 0 ;
rank: 760
score: 99.10813551682692
patch: final int [ ] n $NUMBER$ = 0 * n $NUMBER$ ;
rank: 761
score: 99.22417340959821
patch: final int n 1 n $NUMBER$ prod = n 1 / 0 ;
rank: 761
score: 99.22394670758929
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ << 1 ;
rank: 761
score: 99.1398456280048
patch: final int n 1 = n 1 $NUMBER$ - n $NUMBER$ ;
rank: 761
score: 99.12489670973558
patch: int n 1 = n $NUMBER$ * 0 * n $NUMBER$ ;
rank: 761
score: 99.10636393229167
patch: final boolean n 1 = n $NUMBER$ * n 1 ;
rank: 762
score: 99.24945940290179
patch: final String n 1 n $NUMBER$ prod = n 1 * n $NUMBER$
rank: 762
score: 99.23259626116071
patch: List n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 762
score: 99.13973294771634
patch: final int n $NUMBER$ = n 1 / n $NUMBER$ $NUMBER$ ;
rank: 762
score: 99.13065883091518
patch: final n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod ;
rank: 762
score: 99.1243896484375
patch: final int n 1 = n 1 * 1 * $NUMBER$ ;
rank: 762
score: 99.10618239182692
patch: final double n 1 = n 1 * - n $NUMBER$ ;
rank: 763
score: 99.23256138392857
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ - n 1 ;
rank: 763
score: 99.22242082868304
patch: final long n 1 n $NUMBER$ prod = n $NUMBER$ . max $NUMBER$
rank: 763
score: 99.13943246694711
patch: final int n $NUMBER$ $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 763
score: 99.13062395368304
patch: Integer n 1 n $NUMBER$ prod = n 1 n $NUMBER$ prod ;
rank: 763
score: 99.12389119466145
patch: final synchronized n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 763
score: 99.10572306315105
patch: final int value 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 764
score: 99.23232421875
patch: final int n 1 = n 1 * Math . sqrt ( n $NUMBER$ + n $NUMBER$ ) ;
rank: 764
score: 99.22039794921875
patch: final Normal CaMeL Distribution n 1 = n 1 * n $NUMBER$ ;
rank: 764
score: 99.16954627403847
patch: final int n 1 = n 1 * 1 . 0 ;
rank: 764
score: 99.1393330891927
patch: final int n 1 = n 1 = n 1 ;
rank: 764
score: 99.12378868689903
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * 1 ;
rank: 764
score: 99.10397573617789
patch: final int n 1 ] = n $NUMBER$ * n 1 ;
rank: 765
score: 99.24715169270833
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 $NUMBER$
rank: 765
score: 99.23224748883929
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 765
score: 99.2210693359375
patch: final int n 1 n $NUMBER$ prod = ( double ;
rank: 765
score: 99.21921212332589
patch: final double n 1 n $NUMBER$ prod = n 1 / $NUMBER$ ;
rank: 765
score: 99.16538783482143
patch: final int n 1 = n $NUMBER$ n $NUMBER$ * n 1 ;
rank: 765
score: 99.13877360026042
patch: final int n 1 = n 1 $NUMBER$ * $NUMBER$ ;
rank: 765
score: 99.12344125600961
patch: int [ ] n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 765
score: 99.10330904447116
patch: final int < Integer ] : n 1 * n $NUMBER$ ;
rank: 766
score: 99.24695638020833
patch: final int n 1 = n 1 * n $NUMBER$ : n 1 ;
rank: 766
score: 99.23207194010416
patch: final int n 1 n $NUMBER$ prod = n 1 << n 1 ;
rank: 766
score: 99.21531325120192
patch: final int n 1 n $NUMBER$ prod = 0 ; / /
rank: 766
score: 99.1387227376302
patch: int n 1 = n 1 * n 1 $NUMBER$ ;
rank: 766
score: 99.12295297475961
patch: final int n 1 substring = n $NUMBER$ * n $NUMBER$ ;
rank: 767
score: 99.24630533854166
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n $NUMBER$ .
rank: 767
score: 99.22040666852679
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ & $NUMBER$ ;
rank: 767
score: 99.21452985491071
patch: String n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 767
score: 99.13811786358173
patch: final int n 1 , = n 1 / n $NUMBER$ ;
rank: 767
score: 99.1285400390625
patch: if ( n 1 - n $NUMBER$ > n 1 ) {
rank: 767
score: 99.102294921875
patch: final int n 1 n $NUMBER$ prod = 0 . $NUMBER$ ;
rank: 768
score: 99.24608561197917
patch: final int n 1 double n 1 = n 1 * n $NUMBER$ ;
rank: 768
score: 99.23148890904018
patch: return n 1 * n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 768
score: 99.16510479266827
patch: double n 1 = n 1 * n $NUMBER$ + $NUMBER$ ;
rank: 768
score: 99.13794884314903
patch: final int n 1 = n 1 $NUMBER$ * $NUMBER$ $NUMBER$ ;
rank: 768
score: 99.10219163161058
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ n 1 ;
rank: 769
score: 99.23138106496711
patch: final int n 1 = n 1 / ( n 1 + n $NUMBER$ + 1 ) ;
rank: 769
score: 99.13756385216347
patch: final int n 1 , n $NUMBER$ $NUMBER$ = n 1 ;
rank: 769
score: 99.1214599609375
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ ;
rank: 770
score: 99.23138020833333
patch: final int n 1 = ( int ) n 1 * n $NUMBER$ ;
rank: 770
score: 99.21877615792411
patch: final int [ ] n $NUMBER$ += n $NUMBER$ * n $NUMBER$ ;
rank: 770
score: 99.21208844866071
patch: final Integer n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ;
rank: 770
score: 99.16190011160714
patch: final double n 1 = n 1 * n $NUMBER$ n 1 ;
rank: 770
score: 99.12689208984375
patch: final double Umin = n 1 * n $NUMBER$ . 0 ;
rank: 770
score: 99.12079412286931
patch: final int n 1 = n 1 * max ;
rank: 770
score: 99.10107421875
patch: final int n $NUMBER$ n $NUMBER$ = n 1 ;
rank: 771
score: 99.16133939302884
patch: final int n 1 = - n 1 * n $NUMBER$ ;
rank: 771
score: 99.13678448016827
patch: final int n $NUMBER$ = n $NUMBER$ + n $NUMBER$ $NUMBER$ ;
rank: 771
score: 99.1000225360577
patch: final String n 1 1 = n 1 * n $NUMBER$ ;
rank: 772
score: 99.23068237304688
patch: final int n 1 n $NUMBER$ prod = Math . sqrt ( n $NUMBER$ + n 1 ) ;
rank: 772
score: 99.21082481971153
patch: final int n 1 n $NUMBER$ prod = $STRING$ * $NUMBER$ ;
rank: 772
score: 99.1612215909091
patch: float n 1 = n 1 * n $NUMBER$ ;
rank: 772
score: 99.13672814002403
patch: final long n 1 1 = n 1 * n $NUMBER$ ;
rank: 772
score: 99.1202392578125
patch: int n 1 = n 1 * n $NUMBER$ ; final
rank: 772
score: 99.09972034801136
patch: final int n $NUMBER$ n 1 = n 1 ;
rank: 773
score: 99.23046061197917
patch: if ( n 1 < n 1 ) { return n 1 ; }
rank: 773
score: 99.13656850961539
patch: final int n 1 = n $NUMBER$ * / n $NUMBER$ ;
rank: 773
score: 99.09883939302884
patch: final int [ ] n $NUMBER$ n 1 = n $NUMBER$ ;
rank: 774
score: 99.21422467912946
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . max 1
rank: 774
score: 99.20901925223214
patch: final int n 1 n $NUMBER$ prod = n 1 >> $NUMBER$ ;
rank: 774
score: 99.15931919642857
patch: final int start = n 1 * n 1 * n $NUMBER$ ;
rank: 774
score: 99.13644643930289
patch: final int n 1 $NUMBER$ = n $NUMBER$ / n $NUMBER$ ;
rank: 774
score: 99.12081204927884
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ . 1 ;
rank: 774
score: 99.09825642903645
patch: final Float n 1 = n 1 * n $NUMBER$ ;
rank: 775
score: 99.230322265625
patch: final int n 1 n $NUMBER$ prod = E 1 * n $NUMBER$ ;
rank: 775
score: 99.21323067801339
patch: final String [ ] n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 775
score: 99.20848737444196
patch: Iterator n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 775
score: 99.1363016764323
patch: double n $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 775
score: 99.119140625
patch: final int n 1 else = n $NUMBER$ * n $NUMBER$ ;
rank: 776
score: 99.21217564174107
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ . max $NUMBER$
rank: 776
score: 99.15837751116071
patch: final double n 1 = n 1 * n 1 * 0 ;
rank: 776
score: 99.15615844726562
patch: final int n 1 = n 1 << n $NUMBER$ ;
rank: 776
score: 99.13589242788461
patch: final int n 1 = n 1 * $NUMBER$ $NUMBER$ $NUMBER$ ;
rank: 776
score: 99.11907404119319
patch: final int n 1 = n $NUMBER$ * max ;
rank: 776
score: 99.09756469726562
patch: final int n 1 = n $NUMBER$ * - 1 ;
rank: 777
score: 99.2299560546875
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 * $NUMBER$ ;
rank: 777
score: 99.13535719651442
patch: final int n $NUMBER$ = n 1 $NUMBER$ / n $NUMBER$ ;
rank: 777
score: 99.1180419921875
patch: / ; int n 1 = n 1 * n $NUMBER$ ;
rank: 778
score: 99.2117919921875
patch: final int n 1 n $NUMBER$ prod [ ] = n $NUMBER$ ;
rank: 778
score: 99.20725795200893
patch: final int n 1 n $NUMBER$ prod = n 1 . $STRING$ ;
rank: 778
score: 99.15780203683036
patch: final Object n 1 = n 1 * n $NUMBER$ . 0 ;
rank: 778
score: 99.13521634615384
patch: final int n 1 , = n 1 + n $NUMBER$ ;
rank: 778
score: 99.11782004616477
patch: int n 1 += n 1 * n $NUMBER$ ;
rank: 778
score: 99.1173565204327
patch: final double n 1 n $NUMBER$ prod = 0 . 0 ;
rank: 778
score: 99.09726784446023
patch: final int n 1 [ ] = n $NUMBER$ ;
rank: 779
score: 99.22980608258929
patch: final int n 1 = n 1 * n 1 ; / /
rank: 779
score: 99.20547049386161
patch: final int n 1 n $NUMBER$ prod = n 1 . true ;
rank: 779
score: 99.13518817608173
patch: final int n 1 , n 1 = n 1 $NUMBER$ ;
rank: 779
score: 99.1176288311298
patch: int n 1 = 0 * n $NUMBER$ * n $NUMBER$ ;
rank: 780
score: 99.14972478693181
patch: Double n 1 = n 1 * n $NUMBER$ ;
rank: 780
score: 99.13510366586539
patch: int n 1 = n 1 * n $NUMBER$ / $NUMBER$ ;
rank: 780
score: 99.11759127103366
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ ; try
rank: 780
score: 99.11456298828125
patch: if ( n 1 - $NUMBER$ > n 1 ) {
rank: 781
score: 99.23798479352679
patch: int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ *
rank: 781
score: 99.229296875
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - $NUMBER$ * n $NUMBER$ ;
rank: 781
score: 99.20870535714286
patch: final int [ ] n $NUMBER$ , n $NUMBER$ * - $NUMBER$ ;
rank: 781
score: 99.20367431640625
patch: final Object n 1 n $NUMBER$ prod = n 1 * 0 ;
rank: 781
score: 99.14972393329327
patch: return n 1 * n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 781
score: 99.13496537642045
patch: int n $NUMBER$ = n 1 * n 1 ;
rank: 781
score: 99.11605130709134
patch: final int n 1 list = n 1 * n $NUMBER$ ;
rank: 781
score: 99.11239188058036
patch: final int n 1 = n 1 * n 1 % $NUMBER$ ;
rank: 781
score: 99.09470436789773
patch: final int n 1 = n 1 * $STRING$ ;
rank: 782
score: 99.23614908854167
patch: final long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ *
rank: 782
score: 99.229248046875
patch: Integer n 1 = n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 782
score: 99.20840890066964
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ n $NUMBER$ ;
rank: 782
score: 99.14935772235577
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ ; ;
rank: 782
score: 99.1345684344952
patch: final int n 1 = n 1 $NUMBER$ + n 1 ;
rank: 782
score: 99.11568196614583
patch: final int list 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 782
score: 99.11236102764423
patch: if ( n $NUMBER$ - n 1 > n 1 ) {
rank: 783
score: 99.20827073317308
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ . length ;
rank: 783
score: 99.13445575420673
patch: final int n $NUMBER$ $NUMBER$ = n 1 / n $NUMBER$ ;
rank: 783
score: 99.11110276442308
patch: final int n 1 = n 1 * $NUMBER$ / $NUMBER$ ;
rank: 783
score: 99.09254964192708
patch: final int n 1 n $NUMBER$ prod = n 1 .
rank: 784
score: 99.22908528645833
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 784
score: 99.20823451450893
patch: final int n 1 n $NUMBER$ prod = n 1 . length ;
rank: 784
score: 99.20070975167411
patch: final long n 1 n $NUMBER$ prod = n 1 ; / /
rank: 784
score: 99.13417405348558
patch: final int n $NUMBER$ = n 1 + n 1 $NUMBER$ ;
rank: 784
score: 99.09232584635417
patch: final int n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 785
score: 99.23252516526442
patch: final int n 1 final = n 1 * n $NUMBER$ ;
rank: 785
score: 99.22788696289062
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ . 0 ; final
rank: 785
score: 99.15486966646634
patch: final int n 1 = n 1 * 0 . 0 ;
rank: 785
score: 99.1481600674716
patch: double n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 785
score: 99.13262939453125
patch: int n $NUMBER$ = n 1 + n $NUMBER$ $NUMBER$ ;
rank: 785
score: 99.10976938100961
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ . $NUMBER$ ;
rank: 786
score: 99.23007638113839
patch: final int n 1 n $NUMBER$ prod = n 1 ; / ?
rank: 786
score: 99.2277587890625
patch: final int n 1 n $NUMBER$ prod = n 1 += n $NUMBER$ ;
rank: 786
score: 99.19939313616071
patch: int n 1 n $NUMBER$ prod = n 1 ; / * /
rank: 786
score: 99.15334848257211
patch: final double n 1 = n 1 * 0 . 0 ;
rank: 786
score: 99.1478271484375
patch: double n 1 = n 1 * n $NUMBER$ / $NUMBER$ ;
rank: 786
score: 99.10743204752605
patch: if ( n 1 - $NUMBER$ > n $NUMBER$ ) {
rank: 786
score: 99.09210674579327
patch: final int n 1 n $NUMBER$ prod = 0 . 1 ;
rank: 787
score: 99.2277587890625
patch: final int n 1 * n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 787
score: 99.2054443359375
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ / $NUMBER$ ;
rank: 787
score: 99.14762739701705
patch: double n 1 = n $NUMBER$ * n 1 ;
rank: 787
score: 99.13222092848558
patch: final int n 1 = n 1 / n 1 $NUMBER$ ;
rank: 787
score: 99.09173114483173
patch: final int [ ] [ ] n $NUMBER$ = n 1 ;
rank: 788
score: 99.20452008928571
patch: final Object [ ] n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 788
score: 99.19805036272321
patch: final int n 1 n $NUMBER$ prod = this * n 1 ;
rank: 788
score: 99.13186410757211
patch: final double n 1 = n 1 * n $NUMBER$ 1 ;
rank: 788
score: 99.11007690429688
patch: final int n 1 n $NUMBER$ prod ( n $NUMBER$ ;
rank: 788
score: 99.10664506392045
patch: final int n 1 = n $NUMBER$ / $NUMBER$ ;
rank: 788
score: 99.09097994290866
patch: if ( n 1 . equals ( n $NUMBER$ ) ) {
rank: 789
score: 99.19753592354911
patch: Thread n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 789
score: 99.14409930889423
patch: final int int n 1 = n 1 * n $NUMBER$ ;
rank: 789
score: 99.13179837740384
patch: final int n 1 , n $NUMBER$ 1 , n 1 ;
rank: 789
score: 99.09070763221153
patch: final int n 1 n $NUMBER$ prod = - n $NUMBER$ ;
rank: 790
score: 99.22730431189903
patch: if ( n 1 > n $NUMBER$ + n $NUMBER$ ) {
rank: 790
score: 99.2037353515625
patch: final int [ ] n $NUMBER$ = new int [ 0 ] ;
rank: 790
score: 99.19732666015625
patch: final int n 1 n $NUMBER$ prod = n 1 . false ;
rank: 790
score: 99.14378865559895
patch: final double n 1 = n $NUMBER$ / n $NUMBER$ ;
rank: 790
score: 99.13160196940105
patch: / int n 1 = n 1 + n $NUMBER$ ;
rank: 790
score: 99.10519643930289
patch: final int n $NUMBER$ = n 1 * $NUMBER$ . 0 ;
rank: 791
score: 99.22630673363095
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ / n $NUMBER$ ;
rank: 791
score: 99.19660295758929
patch: Level n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 791
score: 99.14376831054688
patch: final int start 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 791
score: 99.10731858473558
patch: final int n 1 Math = n $NUMBER$ * n $NUMBER$ ;
rank: 791
score: 99.10307094029018
patch: final int n 1 = n 1 + n $NUMBER$ . 0 ;
rank: 791
score: 99.09006754557292
patch: final T n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 792
score: 99.13132887620192
patch: final int n 1 = n $NUMBER$ / n $NUMBER$ $NUMBER$ ;
rank: 792
score: 99.10291466346153
patch: if ( n 1 + n $NUMBER$ > n $NUMBER$ ) {
rank: 793
score: 99.22572428385416
patch: final int n 1 = n 1 * n 1 , n $NUMBER$ ;
rank: 793
score: 99.22203717912946
patch: final double n 1 n $NUMBER$ prod = $NUMBER$ * n 1 ;
rank: 793
score: 99.20089285714286
patch: final long [ ] n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 793
score: 99.19624546595982
patch: final int n 1 n $NUMBER$ prod = null ; / * /
rank: 793
score: 99.1416015625
patch: final int max 1 = n 1 + n $NUMBER$ ;
rank: 793
score: 99.1311786358173
patch: if ( n 1 * n 1 > n $NUMBER$ ) {
rank: 793
score: 99.08933668870192
patch: final int [ 1 ] = n 1 * n $NUMBER$ ;
rank: 794
score: 99.22442016601562
patch: try { final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ;
rank: 794
score: 99.19580078125
patch: final int n 1 n $NUMBER$ prod = $STRING$ * 0 ;
rank: 794
score: 99.14992850167411
patch: final double n 1 = n 1 * n $NUMBER$ . $NUMBER$ ;
rank: 794
score: 99.10596642127403
patch: / * int n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 794
score: 99.10189383370536
patch: final int n 1 = n $NUMBER$ * $NUMBER$ * n 1 ;
rank: 795
score: 99.14973958333333
patch: final int Umin = n 1 * n 1 ;
rank: 795
score: 99.13003540039062
patch: / int n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 795
score: 99.1048114483173
patch: final double n 1 = n $NUMBER$ * n $NUMBER$ ; final
rank: 795
score: 99.10089580829327
patch: final int n 1 = n 1 * $NUMBER$ . $NUMBER$ ;
rank: 795
score: 99.0878194173177
patch: final String n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 796
score: 99.14903846153847
patch: final double n 1 n $NUMBER$ prod = n 1 1 ;
rank: 796
score: 99.14068603515625
patch: final int max 1 = n 1 * n 1 ;
rank: 796
score: 99.12971635298295
patch: int n 1 = n 1 + n 1 ;
rank: 796
score: 99.10436072716347
patch: final int n 1 = n 1 * 0 * 1 ;
rank: 796
score: 99.10014125279018
patch: final int n 1 = n 1 * $NUMBER$ . 0 0 ;
rank: 797
score: 99.22303989955357
patch: return n 1 * n 1 * n 1 * n 1 ;
rank: 797
score: 99.21964808872768
patch: final int n 1 n $NUMBER$ prod = n 1 < n 1
rank: 797
score: 99.19796987680289
patch: final int [ ] n $NUMBER$ = ( int [ ] ;
rank: 797
score: 99.09958120492789
patch: int n 1 = n 1 * n 1 . 0 ;
rank: 797
score: 99.08709716796875
patch: final Object n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 798
score: 99.222705078125
patch: return n 1 * n 1 * n 1 * $NUMBER$ . 0 ;
rank: 798
score: 99.1292255108173
patch: final int n 1 = n $NUMBER$ 1 + n $NUMBER$ ;
rank: 798
score: 99.10345928485577
patch: final int n 1 = n $NUMBER$ * 0 * 1 ;
rank: 798
score: 99.09944974459134
patch: final int n $NUMBER$ n $NUMBER$ = n 1 * $NUMBER$ ;
rank: 798
score: 99.0870869954427
patch: final T n 1 n $NUMBER$ prod = n 1 ;
rank: 799
score: 99.222412109375
patch: final int n 1 n $NUMBER$ prod = n 1 -= n $NUMBER$ ;
rank: 799
score: 99.2166748046875
patch: final long n 1 n $NUMBER$ prod = n 1 ; / *
rank: 799
score: 99.19700404575893
patch: final int n 1 n $NUMBER$ prod = new int $NUMBER$ ] ;
rank: 799
score: 99.1474609375
patch: double n 1 = n 1 * n $NUMBER$ . 0 ;
rank: 799
score: 99.12869262695312
patch: final int n 1 = n 1 1 * $NUMBER$ ;
rank: 799
score: 99.1033466045673
patch: final int n 1 get = n 1 * n $NUMBER$ ;
rank: 799
score: 99.09878104073661
patch: final int n 1 = n 1 / n $NUMBER$ % $NUMBER$ ;
rank: 799
score: 99.0868389423077
patch: final int n $NUMBER$ 1 = n $NUMBER$ * n 1 ;
rank: 800
score: 99.222412109375
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ . n $NUMBER$ ;
rank: 800
score: 99.138916015625
patch: if ( n 1 > n $NUMBER$ * n $NUMBER$ ) {
rank: 800
score: 99.12828480113636
patch: final int n 1 , n $NUMBER$ = 0 ;
rank: 800
score: 99.09844098772321
patch: final int n 1 = n 1 * $NUMBER$ / n 1 ;
rank: 800
score: 99.08656819661458
patch: final E n 1 = n 1 * n 1 ;
rank: 801
score: 99.22176106770833
patch: final int n 1 = n 1 * n 1 = n $NUMBER$ ;
rank: 801
score: 99.21483503069196
patch: final long n 1 n $NUMBER$ prod = n 1 * n 1
rank: 801
score: 99.19686453683036
patch: final String n 1 n $NUMBER$ prod = n $NUMBER$ . max $NUMBER$
rank: 801
score: 99.13861553485577
patch: double n 1 = n $NUMBER$ * n $NUMBER$ * $NUMBER$ ;
rank: 801
score: 99.12771371694711
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ . ;
rank: 801
score: 99.10262044270833
patch: final int n 1 n $NUMBER$ prod * n $NUMBER$ ;
rank: 802
score: 99.21284702845982
patch: final double n 1 n $NUMBER$ prod = this . n 1 ;
rank: 802
score: 99.19659423828125
patch: final Object n $NUMBER$ n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 802
score: 99.19157191685268
patch: final int n 1 n $NUMBER$ prod = $STRING$ / n $NUMBER$ ;
rank: 802
score: 99.13845590444711
patch: double n 1 = n 1 * n $NUMBER$ + 1 ;
rank: 802
score: 99.12716674804688
patch: final float n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 802
score: 99.10010782877605
patch: final int n 1 *= n 1 * n $NUMBER$ ;
rank: 802
score: 99.09781319754464
patch: final if ( n 1 - n 1 > n 1 ) {
rank: 802
score: 99.08579508463542
patch: final E n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 803
score: 99.22101702008929
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + n $NUMBER$ * n $NUMBER$ ;
rank: 803
score: 99.19558715820312
patch: final int n 1 - n $NUMBER$ * n $NUMBER$ ;
rank: 803
score: 99.19104942908653
patch: final int n 1 n $NUMBER$ prod = $STRING$ * 1 ;
rank: 803
score: 99.1367657001202
patch: int n 1 = n 1 * n $NUMBER$ + $NUMBER$ ;
rank: 803
score: 99.12703450520833
patch: final double n 1 = n 1 - n 1 ;
rank: 803
score: 99.09959998497597
patch: final int n 1 0 = n $NUMBER$ * n $NUMBER$ ;
rank: 803
score: 99.0853780110677
patch: final E n 1 n $NUMBER$ prod = n 1 ;
rank: 804
score: 99.22093854631696
patch: return n 1 / n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 804
score: 99.21214076450893
patch: final int n 1 n $NUMBER$ prod = n 1 < n $NUMBER$
rank: 804
score: 99.19102260044643
patch: final n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 804
score: 99.12700946514423
patch: final int n $NUMBER$ = n 1 1 / n $NUMBER$ ;
rank: 804
score: 99.09955303485577
patch: final int n 1 final = n $NUMBER$ * n $NUMBER$ ;
rank: 804
score: 99.09654822716347
patch: int n 1 = n 1 * n $NUMBER$ . 0 ;
rank: 805
score: 99.22091238839286
patch: final int n 1 = Math . sqrt ( n $NUMBER$ * n $NUMBER$ + 1 ) / $NUMBER$ ;
rank: 805
score: 99.19476318359375
patch: final int n 1 n $NUMBER$ prod = - $NUMBER$ * $NUMBER$ ;
rank: 805
score: 99.12689678485577
patch: final int n 1 $NUMBER$ = n 1 * $NUMBER$ $NUMBER$ ;
rank: 805
score: 99.09866098257211
patch: int [ ] n 1 = n 1 * n $NUMBER$ ;
rank: 805
score: 99.09621957632211
patch: if ( n 1 - n $NUMBER$ > n $NUMBER$ ) {
rank: 806
score: 99.2206787109375
patch: return n 1 * ( n 1 * n $NUMBER$ + 1 ) / $NUMBER$ . 0 ; }
rank: 806
score: 99.2108154296875
patch: final Object n 1 n $NUMBER$ prod = n 1 * n $NUMBER$
rank: 806
score: 99.14446149553571
patch: double n 1 n $NUMBER$ prod = n 1 * - $NUMBER$ ;
rank: 806
score: 99.12659630408653
patch: final int n $NUMBER$ = n 1 * / n $NUMBER$ ;
rank: 806
score: 99.09778849283855
patch: final boolean n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 806
score: 99.09588153545673
patch: if ( n 1 + n $NUMBER$ > n 1 ) {
rank: 806
score: 99.07919311523438
patch: final Integer n 1 n $NUMBER$ prod = - 1 ;
rank: 807
score: 99.22037353515626
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ n $NUMBER$ ;
rank: 807
score: 99.20872145432692
patch: double n 1 n $NUMBER$ prod = n 1 * n 1
rank: 807
score: 99.13407076322116
patch: double n 1 = n 1 * n $NUMBER$ * 1 ;
rank: 807
score: 99.12655874399039
patch: n 1 = n $NUMBER$ * n $NUMBER$ + n $NUMBER$ ;
rank: 807
score: 99.09759051983173
patch: final final int n 1 n $NUMBER$ prod += n $NUMBER$ ;
rank: 807
score: 99.07857572115384
patch: final int n 1 n $NUMBER$ prod = n 1 ; else
rank: 808
score: 99.22022356305804
patch: final int n 1 n $NUMBER$ prod = n 1 * start ;
rank: 808
score: 99.19246128627232
patch: final int [ ] n 1 = n $NUMBER$ + n $NUMBER$ ;
rank: 808
score: 99.18528529575893
patch: Map n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 808
score: 99.13352272727273
patch: final int n $NUMBER$ = n $NUMBER$ * $NUMBER$ ;
rank: 808
score: 99.12628173828125
patch: if ( n 1 * n $NUMBER$ < n $NUMBER$ ;
rank: 808
score: 99.09003155048077
patch: if ( n 1 > n 1 , n $NUMBER$ ) {
rank: 808
score: 99.07827524038461
patch: if ( n 1 . equals ( n 1 ) ) {
rank: 809
score: 99.22012329101562
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ; / *
rank: 809
score: 99.1922137920673
patch: double n $NUMBER$ n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 809
score: 99.1258544921875
patch: final int n $NUMBER$ n 1 , n $NUMBER$ ;
rank: 809
score: 99.08877328725961
patch: final int n 1 n $NUMBER$ prod = n 1 0 ;
rank: 809
score: 99.0778339092548
patch: final int [ ] n $NUMBER$ n 1 = n 1 ;
rank: 810
score: 99.2189697265625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ n $NUMBER$ * n $NUMBER$ ;
rank: 810
score: 99.2047119140625
patch: final Object n 1 n $NUMBER$ prod = n 1 ; / *
rank: 810
score: 99.12581693209134
patch: final int n $NUMBER$ $NUMBER$ = n 1 * n 1 ;
rank: 810
score: 99.09673602764423
patch: int n 1 = n $NUMBER$ * n $NUMBER$ * 1 ;
rank: 811
score: 99.19170270647321
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ >> 1 ;
rank: 811
score: 99.18415178571429
patch: try { final double n 1 n $NUMBER$ prod = n 1 ;
rank: 811
score: 99.13212076822917
patch: final int n 1 = n 1 >= n $NUMBER$ ;
rank: 811
score: 99.1258036295573
patch: final int n 1 $NUMBER$ = n 1 * $NUMBER$ ;
rank: 811
score: 99.09653727213542
patch: final int n 1 == n 1 * n $NUMBER$ ;
rank: 811
score: 99.07666015625
patch: final int < Integer ] : n $NUMBER$ * n $NUMBER$ ;
rank: 812
score: 99.204345703125
patch: final int n 1 n $NUMBER$ prod = n 1 <= n 1
rank: 812
score: 99.19102125901442
patch: final int n $NUMBER$ ] = n $NUMBER$ * n $NUMBER$ ;
rank: 812
score: 99.13068096454327
patch: double n 1 = n 1 * $NUMBER$ + n $NUMBER$ ;
rank: 812
score: 99.1250887784091
patch: int n 1 = n 1 - n $NUMBER$ ;
rank: 812
score: 99.08391864483173
patch: final int n 1 n $NUMBER$ prod = n 1 ] ;
rank: 813
score: 99.12501878004808
patch: final long n 1 = n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 813
score: 99.0949198404948
patch: int n 1 = n $NUMBER$ * n $NUMBER$ ; final
rank: 813
score: 99.08285757211539
patch: final int n 1 = n 1 / $NUMBER$ . $NUMBER$ ;
rank: 813
score: 99.07593883167614
patch: final int n $NUMBER$ n $NUMBER$ = n $NUMBER$ ;
rank: 814
score: 99.21669224330357
patch: Integer n 1 n $NUMBER$ prod = n 1 * n 1 ;
rank: 814
score: 99.20339133522727
patch: final int n 1 n $NUMBER$ prod = n 1
rank: 814
score: 99.18217250279018
patch: final int n 1 n $NUMBER$ prod = true ; / * /
rank: 814
score: 99.12946026141827
patch: if ( n 1 < 0 ) return 0 . 0 ;
rank: 814
score: 99.12459622896634
patch: final int n 1 1 , n $NUMBER$ , n $NUMBER$ ;
rank: 814
score: 99.09482046274039
patch: final String n 1 = n 1 * n $NUMBER$ ; final
rank: 814
score: 99.07581505408653
patch: final int < Integer * / n 1 = n $NUMBER$ ;
rank: 815
score: 99.2166015625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 - $NUMBER$ ;
rank: 815
score: 99.13674692007211
patch: final final double n 1 = n 1 * n 1 ;
rank: 815
score: 99.1293475811298
patch: if ( n 1 < n $NUMBER$ * n $NUMBER$ ) {
rank: 815
score: 99.1245625813802
patch: int n 1 = n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 815
score: 99.09471638997395
patch: final synchronized n 1 n $NUMBER$ prod = n 1 ;
rank: 815
score: 99.075927734375
patch: final long n 1 n $NUMBER$ prod = $NUMBER$ . 0 ;
rank: 816
score: 99.216064453125
patch: final int n 1 = n 1 * ( n 1 + n $NUMBER$ + n $NUMBER$ ) ;
rank: 816
score: 99.18960135323661
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ > $NUMBER$ ;
rank: 816
score: 99.18101283482143
patch: final boolean n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ;
rank: 816
score: 99.1290752704327
patch: int n 1 = n 1 * n $NUMBER$ * 1 ;
rank: 816
score: 99.1243896484375
patch: final int n 1 = n 1 1 * $NUMBER$ $NUMBER$ ;
rank: 816
score: 99.0756503018466
patch: final if ( n 1 > n $NUMBER$ ) {
rank: 816
score: 99.07408728966347
patch: final final int n 1 = n $NUMBER$ * n 1 ;
rank: 817
score: 99.18940080915179
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ % n $NUMBER$ ;
rank: 817
score: 99.18059430803571
patch: Long n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 817
score: 99.12903771033653
patch: final int n 1 = n $NUMBER$ * $NUMBER$ * $NUMBER$ ;
rank: 817
score: 99.1242206280048
patch: final int n 1 1 = n 1 / n 1 ;
rank: 817
score: 99.09400353064903
patch: final int < 1 * = n $NUMBER$ * n $NUMBER$ ;
rank: 817
score: 99.07419996995192
patch: final int n 1 n $NUMBER$ prod = 0 . 0 ;
rank: 818
score: 99.21565755208333
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ = n $NUMBER$ ;
rank: 818
score: 99.13312237079327
patch: double n 1 n $NUMBER$ prod = n 1 * 1 ;
rank: 818
score: 99.1288592998798
patch: final double n 1 = n 1 * 1 . $NUMBER$ ;
rank: 818
score: 99.1239764873798
patch: / int n 1 = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 818
score: 99.0732891376202
patch: final int < Integer * / n $NUMBER$ * n $NUMBER$ ;
rank: 818
score: 99.07269756610577
patch: final int n $NUMBER$ = n 1 / $NUMBER$ . 0 ;
rank: 819
score: 99.21498325892857
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ : n $NUMBER$ ;
rank: 819
score: 99.12338256835938
patch: int n 1 = n 1 * n $NUMBER$ ; ;
rank: 819
score: 99.09273587740384
patch: / ; int n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 819
score: 99.07008870442708
patch: if ( n 1 > n $NUMBER$ + 1 ) {
rank: 820
score: 99.21425170898438
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n $NUMBER$ - 1 ;
rank: 820
score: 99.19904436383929
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ *
rank: 820
score: 99.1859463778409
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$
rank: 820
score: 99.1296856219952
patch: double n 1 = n 1 * n 1 . 0 ;
rank: 820
score: 99.1268310546875
patch: final double n 1 n $NUMBER$ prod = 1 . 0 ;
rank: 820
score: 99.12291541466347
patch: final int n 1 1 , n 1 , n $NUMBER$ ;
rank: 820
score: 99.07193697415866
patch: final int [ ] [ ] n 1 = n $NUMBER$ ;
rank: 820
score: 99.07008713942308
patch: final int n 1 = n 1 * $NUMBER$ . 1 ;
rank: 821
score: 99.12674654447116
patch: int n 1 n $NUMBER$ prod = n 1 + 1 ;
rank: 821
score: 99.12256876627605
patch: final double n 1 , n $NUMBER$ = n 1 ;
rank: 821
score: 99.0918438251202
patch: final int n 1 min = n 1 * n $NUMBER$ ;
rank: 821
score: 99.07123272235577
patch: final int n $NUMBER$ n $NUMBER$ n 1 = n $NUMBER$ ;
rank: 821
score: 99.06885704627403
patch: if ( n $NUMBER$ - n 1 > n $NUMBER$ ) {
rank: 822
score: 99.12607046274039
patch: final int n 1 = n 1 * n $NUMBER$ Double ;
rank: 822
score: 99.12212665264423
patch: final int n 1 = = n 1 * n 1 ;
rank: 822
score: 99.091796875
patch: / final int n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 823
score: 99.21404157366071
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ * n 1 ;
rank: 823
score: 99.12171349158653
patch: n 1 = n 1 * n 1 + n $NUMBER$ ;
rank: 823
score: 99.0677490234375
patch: final int n 1 = n 1 / 1 . 0 ;
rank: 824
score: 99.21289672851563
patch: final int n 1 n $NUMBER$ prod = n 1 * ( n 1 * n $NUMBER$ ) ;
rank: 824
score: 99.197509765625
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ * n 1
rank: 824
score: 99.12154447115384
patch: final int n 1 = n $NUMBER$ * n $NUMBER$ ) ;
rank: 824
score: 99.09152221679688
patch: int n 1 = = n $NUMBER$ * n $NUMBER$ ;
rank: 824
score: 99.07081956129808
patch: / * * * * * * * * * * /
rank: 825
score: 99.212548828125
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 825
score: 99.19727434430804
patch: final Normal CaMeL Distribution n 1 = n 1 * n 1 ;
rank: 825
score: 99.12068997896634
patch: final int n 1 = n 1 / n $NUMBER$ ; ;
rank: 825
score: 99.07058715820312
patch: final Object n 1 = n $NUMBER$ * n 1 ;
rank: 825
score: 99.06664100060097
patch: final int n 1 n $NUMBER$ prod = 1 . 0 ;
rank: 826
score: 99.21200997488839
patch: String n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 826
score: 99.12230506310097
patch: double n 1 n $NUMBER$ prod = n $NUMBER$ * $NUMBER$ ;
rank: 826
score: 99.1203104654948
patch: final long n 1 = n 1 + n 1 ;
rank: 826
score: 99.09042593149039
patch: final int n 1 n $NUMBER$ prod = n 1 ; *
rank: 826
score: 99.0704678622159
patch: final int n $NUMBER$ n 1 = n $NUMBER$ ;
rank: 826
score: 99.06625600961539
patch: final int n 1 n $NUMBER$ prod = n 1 -- ;
rank: 827
score: 99.21157691592262
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ = n 1 ;
rank: 827
score: 99.19508713942308
patch: final int n 1 final = n 1 * n 1 ;
rank: 827
score: 99.17416817801339
patch: else { final int n 1 n $NUMBER$ prod = n 1 ;
rank: 827
score: 99.17198768028847
patch: final int [ ] n 1 = ( int [ ] ;
rank: 827
score: 99.12009840745192
patch: final int n 1 , n $NUMBER$ = n $NUMBER$ 1 ;
rank: 827
score: 99.08968411959134
patch: final int n 1 } = n 1 * n $NUMBER$ ;
rank: 827
score: 99.06301879882812
patch: if ( n 1 - n 1 > $NUMBER$ ) {
rank: 828
score: 99.17086087740384
patch: final double n 1 = n $NUMBER$ * 0 . $NUMBER$ ;
rank: 828
score: 99.12000450721153
patch: final int n $NUMBER$ = n 1 - n $NUMBER$ $NUMBER$ ;
rank: 828
score: 99.08927095853366
patch: final int n 1 while = n 1 * n $NUMBER$ ;
rank: 828
score: 99.06899007161458
patch: final int t 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 829
score: 99.21105375744048
patch: final int n 1 = Math . sqrt ( n $NUMBER$ + n $NUMBER$ + 1 ) / $NUMBER$ ;
rank: 829
score: 99.12192789713542
patch: final int start 1 = n 1 + n $NUMBER$ ;
rank: 829
score: 99.08864182692308
patch: final int n 1 char = n 1 * n $NUMBER$ ;
rank: 830
score: 99.21079799107143
patch: Long n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 830
score: 99.17299107142857
patch: final int n 1 n $NUMBER$ prod = $STRING$ / n 1 ;
rank: 830
score: 99.163330078125
patch: final int [ ] n $NUMBER$ n $NUMBER$ , n $NUMBER$ ;
rank: 830
score: 99.11903733473558
patch: final int n 1 = n 1 * n 1 / ;
rank: 830
score: 99.08804086538461
patch: final int n 1 = n $NUMBER$ * ( n $NUMBER$ ;
rank: 830
score: 99.06065784801136
patch: final if ( n 1 > n 1 ) {
rank: 831
score: 99.21050734747024
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 - n $NUMBER$ * n $NUMBER$ ;
rank: 831
score: 99.1187235514323
patch: double n 1 $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 831
score: 99.06770833333333
patch: final int < Integer : n 1 * n $NUMBER$ ;
rank: 831
score: 99.06026517427884
patch: final double n 1 n $NUMBER$ prod = $NUMBER$ . 1 ;
rank: 832
score: 99.21050153459821
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ / n $NUMBER$ ;
rank: 832
score: 99.19045785757211
patch: int n 1 n $NUMBER$ prod = n 1 * n 1
rank: 832
score: 99.06719415838069
patch: final int n 1 = $STRING$ + n 1 ;
rank: 832
score: 99.05945763221153
patch: final double n 1 n $NUMBER$ prod = $NUMBER$ . $NUMBER$ ;
rank: 833
score: 99.21019287109375
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 . 0 ; / * /
rank: 833
score: 99.17013985770089
patch: final int n 1 n $NUMBER$ prod = n 1 . null ;
rank: 833
score: 99.11792931189903
patch: final int n 1 = n 1 * n $NUMBER$ - ;
rank: 833
score: 99.1105205829327
patch: final double n 1 n $NUMBER$ prod = n 1 ) ;
rank: 833
score: 99.05869704026442
patch: final double n 1 n $NUMBER$ prod = 0 . 1 ;
rank: 834
score: 99.2096923828125
patch: final int n 1 = n 1 * n $NUMBER$ * Math . sqrt ( n $NUMBER$ ) ;
rank: 834
score: 99.187255859375
patch: final double n 1 n $NUMBER$ prod = n 1 >> $NUMBER$ ;
rank: 834
score: 99.16815655048077
patch: int n 1 n $NUMBER$ prod = n 1 ; / /
rank: 834
score: 99.11859600360577
patch: if ( n 1 >= n $NUMBER$ * n 1 ) {
rank: 834
score: 99.06671142578125
patch: final int n 1 = n 1 ; n $NUMBER$ :
rank: 834
score: 99.0569598858173
patch: final long n 1 = n 1 * $NUMBER$ . 0 ;
rank: 835
score: 99.2095947265625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ = n $NUMBER$ * $NUMBER$ ;
rank: 835
score: 99.16770582932692
patch: else final int n 1 n $NUMBER$ prod = n 1 ;
rank: 835
score: 99.11856079101562
patch: final int n 1 ; n $NUMBER$ = n 1 ;
rank: 835
score: 99.11770395132211
patch: final int n 1 = n 1 = n $NUMBER$ $NUMBER$ ;
rank: 835
score: 99.08645629882812
patch: final int $NUMBER$ 1 = n 1 * n $NUMBER$ ;
rank: 835
score: 99.05641526442308
patch: int n 1 = n 1 / n 1 . 0 ;
rank: 836
score: 99.20933837890625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ / $NUMBER$ ;
rank: 836
score: 99.18499755859375
patch: final Integer n 1 n $NUMBER$ prod = n 1 * n $NUMBER$
rank: 836
score: 99.08467610677083
patch: final Short n 1 = n 1 * n $NUMBER$ ;
rank: 836
score: 99.06563313802083
patch: final void n 1 = n 1 * n $NUMBER$ ;
rank: 836
score: 99.05581430288461
patch: if ( n 1 > n 1 , n 1 ) {
rank: 837
score: 99.20905412946429
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 * n 1 ;
rank: 837
score: 99.15918986002605
patch: final double n 1 = n $NUMBER$ - n $NUMBER$ ;
rank: 837
score: 99.1177509014423
patch: final int n 1 = - n $NUMBER$ * n $NUMBER$ ;
rank: 837
score: 99.11745981069711
patch: final double n 1 = n 1 + n 1 $NUMBER$ ;
rank: 837
score: 99.0842793782552
patch: final int n 1 n $NUMBER$ prod ( n 1 ;
rank: 838
score: 99.18484933035714
patch: final double n 1 n $NUMBER$ prod = n 1 < n 1
rank: 838
score: 99.15494478665866
patch: final int n 1 n $NUMBER$ prod = ( ( double ;
rank: 838
score: 99.15289306640625
patch: final int n 1 n $NUMBER$ prod ; / * /
rank: 838
score: 99.11728140024039
patch: if ( n 1 < n 1 * n $NUMBER$ ) {
rank: 838
score: 99.11649946732955
patch: return n 1 * n 1 * n $NUMBER$ ;
rank: 838
score: 99.10692420372597
patch: final double n 1 = n $NUMBER$ * $NUMBER$ . 0 ;
rank: 838
score: 99.06397594105114
patch: final int [ ] n $NUMBER$ < n 1 ;
rank: 839
score: 99.20877511160714
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ ; / * /
rank: 839
score: 99.11665852864583
patch: if ( n 1 >= n $NUMBER$ * n $NUMBER$ )
rank: 839
score: 99.11590576171875
patch: final double n 1 = n 1 * $NUMBER$ $NUMBER$ ;
rank: 839
score: 99.07938639322917
patch: final int n 1 % n $NUMBER$ * n $NUMBER$ ;
rank: 839
score: 99.06352095170455
patch: final int [ ] n $NUMBER$ = - 1 ;
rank: 839
score: 99.05408653846153
patch: final int n 1 = n 1 / $NUMBER$ . 1 ;
rank: 840
score: 99.20781017485119
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ = n 1 * n 1 ;
rank: 840
score: 99.18301827566964
patch: final double n 1 n $NUMBER$ prod = 1 * n 1 ;
rank: 840
score: 99.15146891276042
patch: final Object n 1 = n $NUMBER$ + n $NUMBER$ ;
rank: 840
score: 99.1499774639423
patch: final int n 1 n $NUMBER$ prod = null ; / /
rank: 840
score: 99.11585489908855
patch: double n 1 = n 1 + n $NUMBER$ $NUMBER$ ;
rank: 840
score: 99.06327311197917
patch: final ] n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 841
score: 99.18218994140625
patch: final double n 1 n $NUMBER$ prod = n 1 < n $NUMBER$
rank: 841
score: 99.14743276742789
patch: { final int n 1 n $NUMBER$ prod = n 1 ;
rank: 841
score: 99.05116624098558
patch: if ( n 1 > n $NUMBER$ , n $NUMBER$ ) {
rank: 842
score: 99.20733173076923
patch: final int n 1 start = n 1 * n 1 ;
rank: 842
score: 99.18217250279018
patch: final float n 1 n $NUMBER$ prod = n 1 * n $NUMBER$
rank: 842
score: 99.14662522536058
patch: final int n 1 n $NUMBER$ prod = this / $NUMBER$ ;
rank: 842
score: 99.11405436197917
patch: double n 1 = n 1 1 * n $NUMBER$ ;
rank: 842
score: 99.06248890269886
patch: final int n 1 = n $NUMBER$ * $STRING$ ;
rank: 842
score: 99.04845252403847
patch: int n 1 = n 1 / n $NUMBER$ . 0 ;
rank: 843
score: 99.18132672991071
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 .
rank: 843
score: 99.14565805288461
patch: final int n 1 n $NUMBER$ prod = Integer . 0 ;
rank: 843
score: 99.0782137784091
patch: final int n 1 n $NUMBER$ prod = this ;
rank: 843
score: 99.06159002130681
patch: final int $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 843
score: 99.0480487530048
patch: int n 1 n $NUMBER$ prod = n 1 + $NUMBER$ ;
rank: 844
score: 99.20720563616071
patch: return n 1 * n 1 * n $NUMBER$ - n 1 ;
rank: 844
score: 99.17994181315105
patch: final int n 1 = n 1 * n $NUMBER$ .
rank: 844
score: 99.1152813251202
patch: if ( n 1 == 0 ) return 0 . 0 ;
rank: 844
score: 99.10010782877605
patch: final double n 1 n $NUMBER$ prod = - 1 ;
rank: 844
score: 99.06116739908855
patch: final Integer n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 844
score: 99.04734293619792
patch: if ( n 1 + 1 > n 1 ) {
rank: 845
score: 99.09916548295455
patch: double n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 845
score: 99.06026204427083
patch: final / * * * * * * * * /
rank: 846
score: 99.20465698242188
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ * n $NUMBER$ ;
rank: 846
score: 99.11494954427083
patch: final int n 1 = n 1 * $NUMBER$ ; ;
rank: 846
score: 99.1115389737216
patch: double n 1 = n 1 / n $NUMBER$ ;
rank: 846
score: 99.07359730113636
patch: for n 1 = n 1 * n $NUMBER$ ;
rank: 846
score: 99.0596923828125
patch: final boolean n 1 n $NUMBER$ prod = n 1 ;
rank: 847
score: 99.1774393717448
patch: final double n 1 n $NUMBER$ prod = n 1 *
rank: 847
score: 99.14634195963542
patch: final double n 1 += n $NUMBER$ * n $NUMBER$ ;
rank: 847
score: 99.11129760742188
patch: final int n $NUMBER$ , n $NUMBER$ , n $NUMBER$ ;
rank: 847
score: 99.07283528645833
patch: int n 1 equals = n $NUMBER$ * n $NUMBER$ ;
rank: 847
score: 99.05888227982955
patch: final int n 1 = n 1 * null ;
rank: 847
score: 99.04354154146634
patch: super ( n 1 , n 1 , n 1 ) ;
rank: 848
score: 99.20424107142857
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n $NUMBER$ * n 1 ;
rank: 848
score: 99.17728969029018
patch: final int n 1 n $NUMBER$ prod = n 1 > n 1
rank: 848
score: 99.1353290264423
patch: final int n 1 n $NUMBER$ prod = true ; / /
rank: 848
score: 99.10939534505208
patch: final int n 1 , n $NUMBER$ ;
rank: 848
score: 99.07197709517045
patch: int list 1 = n 1 * n $NUMBER$ ;
rank: 848
score: 99.05711873372395
patch: int n 1 ] = n 1 * n $NUMBER$ ;
rank: 848
score: 99.04280598958333
patch: if ( n 1 + 1 > n $NUMBER$ ) {
rank: 849
score: 99.2040783110119
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ : n $NUMBER$ * n $NUMBER$ ;
rank: 849
score: 99.13481001420455
patch: final double n 1 n $NUMBER$ prod = null ;
rank: 849
score: 99.11282348632812
patch: final int start 1 = n 1 * n 1 ;
rank: 849
score: 99.10783247514205
patch: double n $NUMBER$ = n 1 + n $NUMBER$ ;
rank: 849
score: 99.07196044921875
patch: final Short n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 849
score: 99.05634099786931
patch: final int n 1 = $STRING$ + n $NUMBER$ ;
rank: 849
score: 99.04171987680289
patch: super ( n 1 , n 1 , n $NUMBER$ ) ;
rank: 850
score: 99.20381469726563
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * 1 . 0 ; /
rank: 850
score: 99.1106465657552
patch: final Long n 1 = n 1 * n $NUMBER$ ;
rank: 850
score: 99.10779825846355
patch: final int n 1 n $NUMBER$ prod , n 1 ;
rank: 850
score: 99.06960042317708
patch: int n 1 : = n 1 * n $NUMBER$ ;
rank: 850
score: 99.05494181315105
patch: final int err 1 = n 1 * n $NUMBER$ ;
rank: 851
score: 99.20379169170673
patch: final int n 1 in = n 1 * n $NUMBER$ ;
rank: 851
score: 99.17391531808036
patch: final int n 1 n $NUMBER$ prod = n 1 <= n $NUMBER$
rank: 851
score: 99.05419921875
patch: final int n 1 = n 1 * compare $NUMBER$ ;
rank: 852
score: 99.20371791294643
patch: return n 1 * n $NUMBER$ * n $NUMBER$ * n 1 ;
rank: 852
score: 99.17371544471153
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$
rank: 852
score: 99.05255681818181
patch: final int value = n 1 * n 1 ;
rank: 852
score: 99.0414569561298
patch: if ( n 1 - n 1 <= n 1 ) {
rank: 853
score: 99.20337524414063
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ + n $NUMBER$ - $NUMBER$ ;
rank: 853
score: 99.14016488882211
patch: final int n 1 >> = n 1 * n $NUMBER$ ;
rank: 853
score: 99.10587565104167
patch: final long n 1 = n 1 - n $NUMBER$ ;
rank: 853
score: 99.06697591145833
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ ; final
rank: 853
score: 99.0521240234375
patch: final int out 1 = n 1 * n $NUMBER$ ;
rank: 854
score: 99.10580444335938
patch: if ( n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 854
score: 99.0610018643466
patch: for n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 854
score: 99.05161539713542
patch: final T n 1 = n 1 * n 1 ;
rank: 854
score: 99.03924560546875
patch: final int n 1 n $NUMBER$ prod = E 1 ;
rank: 855
score: 99.1384746844952
patch: final int n 1 float = n 1 * n $NUMBER$ ;
rank: 855
score: 99.08262125651042
patch: final int n 1 , Umin = n 1 ;
rank: 855
score: 99.06056722005208
patch: final int n 1 + n $NUMBER$ * n $NUMBER$ ;
rank: 855
score: 99.05142211914062
patch: final int n 1 * n 1 * n $NUMBER$ ;
rank: 856
score: 99.20259312220982
patch: final double n 1 [ ] = n 1 * n $NUMBER$ ;
rank: 856
score: 99.17169189453125
patch: final int n 1 n $NUMBER$ prod = n 1 > n $NUMBER$
rank: 856
score: 99.1371561686198
patch: final Object n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 856
score: 99.12832641601562
patch: final byte n 1 n $NUMBER$ prod = n 1 ;
rank: 856
score: 99.1073885830966
patch: final int start = n $NUMBER$ * n $NUMBER$ ;
rank: 856
score: 99.10303751627605
patch: final int n $NUMBER$ = n 1 - n 1 ;
rank: 856
score: 99.05051491477273
patch: final int 0 = n 1 * n $NUMBER$ ;
rank: 856
score: 99.03809532752403
patch: final int n 1 = n 1 / $NUMBER$ * $NUMBER$ ;
rank: 857
score: 99.20244140625
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 - 1 ;
rank: 857
score: 99.13677509014423
patch: final int [ ] n 1 = new int $NUMBER$ ] ;
rank: 857
score: 99.08192795973558
patch: final int = n 1 * n 1 * n $NUMBER$ ;
rank: 857
score: 99.05739339192708
patch: final int n 1 + n 1 * n $NUMBER$ ;
rank: 857
score: 99.05021158854167
patch: final String n 1 = n 1 + n $NUMBER$ ;
rank: 858
score: 99.17001778738839
patch: final double n 1 n $NUMBER$ prod = n 1 <= n 1
rank: 858
score: 99.12632399338942
patch: } final int n 1 n $NUMBER$ prod = n 1 ;
rank: 858
score: 99.10116577148438
patch: return n 1 * n $NUMBER$ $NUMBER$ * n $NUMBER$ ;
rank: 858
score: 99.04978249289773
patch: final int n 1 = n 1 * false ;
rank: 858
score: 99.03676194411058
patch: final int n 1 ++ = n 1 / n $NUMBER$ ;
rank: 859
score: 99.20177641369048
patch: synchronized ( n 1 ) { final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 859
score: 99.13297526041667
patch: final double n 1 n $NUMBER$ prod = ( int ;
rank: 859
score: 99.05698649088542
patch: int n 1 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 859
score: 99.03631122295673
patch: final int n 1 = n 1 * E . 0 ;
rank: 860
score: 99.1326904296875
patch: final int n 1 ( n $NUMBER$ * n $NUMBER$ ) ;
rank: 860
score: 99.1053975423177
patch: final int n 1 = n 1 >> n $NUMBER$ ;
rank: 860
score: 99.09817504882812
patch: final int n 1 , n $NUMBER$ = - 1 ;
rank: 860
score: 99.03539021809895
patch: if ( n 1 > n 1 + 1 ) {
rank: 861
score: 99.201123046875
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n $NUMBER$ * 1 ;
rank: 861
score: 99.16767229352679
patch: double n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ .
rank: 861
score: 99.13186410757211
patch: final double n 1 = n $NUMBER$ * 0 . 1 ;
rank: 861
score: 99.09673517400569
patch: Dimension n 1 = n 1 * n $NUMBER$ ;
rank: 861
score: 99.054443359375
patch: final int n 1 n $NUMBER$ prod / n $NUMBER$ ;
rank: 861
score: 99.03480881911058
patch: final int int n 1 n $NUMBER$ prod = n 1 ;
rank: 862
score: 99.16363525390625
patch: final int n 1 n $NUMBER$ prod = n 1 * $NUMBER$ *
rank: 862
score: 99.12184495192308
patch: final int n 1 n $NUMBER$ prod = 0 * $NUMBER$ ;
rank: 862
score: 99.05337524414062
patch: final int min 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 862
score: 99.0478515625
patch: final int name 1 = n 1 * n $NUMBER$ ;
rank: 862
score: 99.0345458984375
patch: if ( n 1 - n 1 == n 1 ) {
rank: 863
score: 99.20017700195312
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ ; / /
rank: 863
score: 99.16326904296875
patch: int n 1 n $NUMBER$ prod = n 1 * - 1 ;
rank: 863
score: 99.13053072415866
patch: final double n 1 = ( n 1 * n $NUMBER$ ;
rank: 863
score: 99.09580485026042
patch: final int n $NUMBER$ = n $NUMBER$ + n 1 ;
rank: 863
score: 99.05213419596355
patch: final int n 1 - n 1 * n $NUMBER$ ;
rank: 863
score: 99.04725138346355
patch: final int < Integer : n $NUMBER$ * n $NUMBER$ ;
rank: 863
score: 99.033203125
patch: if ( n 1 + n 1 > $NUMBER$ ) {
rank: 864
score: 99.19998779296876
patch: synchronized ( n 1 ) { int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 864
score: 99.1299715909091
patch: final String n 1 n $NUMBER$ prod = null ;
rank: 864
score: 99.11759127103366
patch: int n 1 n $NUMBER$ prod = $STRING$ * n 1 ;
rank: 864
score: 99.0956522623698
patch: final double n $NUMBER$ = n 1 / n $NUMBER$ ;
rank: 864
score: 99.03263033353366
patch: final long n 1 = n 1 / $NUMBER$ . 0 ;
rank: 865
score: 99.19949776785714
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * n 1 + n $NUMBER$ ;
rank: 865
score: 99.11748798076923
patch: double n 1 n $NUMBER$ prod = n 1 ; / /
rank: 865
score: 99.0956319173177
patch: / int n 1 = n 1 * n 1 ;
rank: 865
score: 99.03238619290866
patch: if ( n 1 - n 1 < n 1 ) {
rank: 866
score: 99.19904436383929
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ - n $NUMBER$ - n $NUMBER$ ;
rank: 866
score: 99.12966684194711
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * 0 ;
rank: 866
score: 99.098388671875
patch: final double n 1 = n 1 >= n $NUMBER$ ;
rank: 866
score: 99.09429931640625
patch: final float n 1 = n 1 / n $NUMBER$ ;
rank: 866
score: 99.0431620279948
patch: final int n 1 = n 1 : n $NUMBER$ ;
rank: 867
score: 99.19885864257813
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * $NUMBER$ . 0 ; /
rank: 867
score: 99.1151123046875
patch: final int n 1 n $NUMBER$ prod = n 1 * (
rank: 867
score: 99.093017578125
patch: int n $NUMBER$ $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 867
score: 99.07410606971153
patch: final int = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 867
score: 99.02955118815105
patch: if ( n 1 - n $NUMBER$ > $NUMBER$ ) {
rank: 868
score: 99.19834681919643
patch: final int n 1 = n 1 * n 1 - $NUMBER$ ;
rank: 868
score: 99.12936636117789
patch: final int [ ] n $NUMBER$ = n $NUMBER$ * $NUMBER$ ;
rank: 868
score: 99.07372107872597
patch: double n 1 n $NUMBER$ prod = n 1 . 0 ;
rank: 868
score: 99.04119318181819
patch: final int n 1 = 0 + n 1 ;
rank: 868
score: 99.02935321514423
patch: if ( n 1 + n 1 <= n $NUMBER$ ) {
rank: 869
score: 99.12648362379808
patch: int n 1 [ ] = n 1 * n $NUMBER$ ;
rank: 869
score: 99.1123516376202
patch: final int n 1 n $NUMBER$ prod = Long . 0 ;
rank: 869
score: 99.09215198863636
patch: double n 1 = n 1 - n $NUMBER$ ;
rank: 869
score: 99.05157470703125
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ 1 ;
rank: 869
score: 99.04073079427083
patch: final Float n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 869
score: 99.02823580228366
patch: if ( n $NUMBER$ + n 1 > n 1 ) {
rank: 870
score: 99.19788178943452
patch: final int n 1 = n 1 * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 870
score: 99.15868268694196
patch: int n 1 n $NUMBER$ prod = n 1 * n 1 *
rank: 870
score: 99.09078979492188
patch: / int n 1 n $NUMBER$ prod = n 1 ;
rank: 870
score: 99.0513028231534
patch: int n 1 n $NUMBER$ prod += n $NUMBER$ ;
rank: 870
score: 99.04030539772727
patch: final int n 1 = n 1 ; try {
rank: 871
score: 99.19614955357143
patch: return n 1 * n 1 * n $NUMBER$ % n $NUMBER$ ;
rank: 871
score: 99.08909098307292
patch: final int n 1 1 = n 1 * $NUMBER$ ;
rank: 871
score: 99.0393954190341
patch: final int n 1 = 0 + n $NUMBER$ ;
rank: 871
score: 99.0270244891827
patch: final int n 1 = n 1 * $NUMBER$ % $NUMBER$ ;
rank: 872
score: 99.15787179129464
patch: final double n 1 n $NUMBER$ prod = $NUMBER$ * n $NUMBER$ ;
rank: 872
score: 99.09128824869792
patch: if ( n 1 >= n 1 * n $NUMBER$ )
rank: 872
score: 99.06911057692308
patch: final int n 1 = n 1 * n $NUMBER$ 0 ;
rank: 872
score: 99.0382588704427
patch: final String n $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 872
score: 99.02701509915866
patch: if ( n $NUMBER$ - n $NUMBER$ > n 1 ) {
rank: 873
score: 99.19480678013393
patch: return n 1 * n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 873
score: 99.15686907087054
patch: final String n 1 n $NUMBER$ prod = n 1 ; / *
rank: 873
score: 99.10958158052884
patch: final int n 1 n $NUMBER$ prod = false ; / /
rank: 873
score: 99.0902811686198
patch: if ( n 1 < n 1 * n $NUMBER$ ;
rank: 873
score: 99.087158203125
patch: double n $NUMBER$ = n 1 * n 1 ;
rank: 873
score: 99.04838053385417
patch: final int $NUMBER$ 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 873
score: 99.03788248697917
patch: final int n 1 n $NUMBER$ prod = * $NUMBER$ ;
rank: 873
score: 99.0264180501302
patch: if ( n $NUMBER$ - $NUMBER$ > n 1 ) {
rank: 874
score: 99.10934682992789
patch: final double n 1 n $NUMBER$ prod = n 1 * ;
rank: 874
score: 99.0679180438702
patch: int n 1 n $NUMBER$ prod = n $NUMBER$ * 0 ;
rank: 874
score: 99.0482177734375
patch: final int 1 = n 1 * n $NUMBER$ ;
rank: 874
score: 99.0374043782552
patch: final int n 1 = n 1 ; n $NUMBER$ ;
rank: 874
score: 99.02625450721153
patch: if ( n 1 > n $NUMBER$ , n 1 ) {
rank: 875
score: 99.19453648158482
patch: return n 1 * n 1 * n 1 - n $NUMBER$ ;
rank: 875
score: 99.08878950639205
patch: final double n 1 = n 1 + $NUMBER$ ;
rank: 875
score: 99.08675130208333
patch: final int n 1 = n 1 + 1 $NUMBER$ ;
rank: 875
score: 99.04776000976562
patch: final byte n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 875
score: 99.03718705610795
patch: final int n 1 = n 1 * true ;
rank: 875
score: 99.02611365685097
patch: final double n 1 n $NUMBER$ prod += $NUMBER$ . 0 ;
rank: 876
score: 99.19406563895089
patch: List n 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 876
score: 99.11909993489583
patch: final int n 1 n $NUMBER$ prod = ( String ;
rank: 876
score: 99.1090557391827
patch: final int n 1 n $NUMBER$ prod = $STRING$ / $NUMBER$ ;
rank: 876
score: 99.08828735351562
patch: final int new 1 = n 1 * n $NUMBER$ ;
rank: 876
score: 99.08587646484375
patch: int n 1 = n 1 * n $NUMBER$ * ;
rank: 876
score: 99.0476786295573
patch: final Long n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 876
score: 99.0365498860677
patch: final short n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 877
score: 99.15426870492789
patch: final int n 1 n $NUMBER$ prod = n 1 == 0
rank: 877
score: 99.10814490685097
patch: int n 1 n $NUMBER$ prod = n 1 * $STRING$ ;
rank: 877
score: 99.08610395951705
patch: final int n 1 ; final int n 1 ;
rank: 877
score: 99.03639729817708
patch: final String n 1 n $NUMBER$ prod = - $NUMBER$ ;
rank: 877
score: 99.02235921223958
patch: final double Umin = n 1 * n $NUMBER$ ;
rank: 878
score: 99.19324311755952
patch: final int n 1 n $NUMBER$ prod = n 1 * n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 878
score: 99.08601888020833
patch: if int n 1 = n 1 * n $NUMBER$ ;
rank: 878
score: 99.08516438802083
patch: int n $NUMBER$ = n 1 1 * n $NUMBER$ ;
rank: 878
score: 99.04616292317708
patch: final int n 1 / n 1 * n $NUMBER$ ;
rank: 878
score: 99.02077229817708
patch: final double Umin = n 1 * n 1 ;
rank: 879
score: 99.1928943452381
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ; / * $NUMBER$ . 0 ;
rank: 879
score: 99.14771446814903
patch: final int n 1 n $NUMBER$ prod = 0 ; / *
rank: 879
score: 99.08479817708333
patch: double n 1 = n 1 * n 1 $NUMBER$ ;
rank: 879
score: 99.08479817708333
patch: final Double n 1 = n 1 * n 1 ;
rank: 879
score: 99.0460917154948
patch: if = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 879
score: 99.03502308238636
patch: final int [ ] n $NUMBER$ < n $NUMBER$ ;
rank: 880
score: 99.19269670758929
patch: final int n 1 n $NUMBER$ prod = Math . sqrt ( n 1 * n $NUMBER$ $NUMBER$ ) ;
rank: 880
score: 99.10533650716145
patch: final short n 1 n $NUMBER$ prod = n 1 ;
rank: 880
score: 99.08470662434895
patch: final Integer n 1 = n 1 + n $NUMBER$ ;
rank: 880
score: 99.04525756835938
patch: final int n 1 >= n 1 * n $NUMBER$ ;
rank: 880
score: 99.03482055664062
patch: final int [ 1 ] n $NUMBER$ = n $NUMBER$ ;
rank: 880
score: 99.0181172688802
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ 1 ;
rank: 881
score: 99.19226655505952
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ * $NUMBER$ . 0 ; / /
rank: 881
score: 99.0804110440341
patch: final int n 1 ; final int n $NUMBER$ ;
rank: 881
score: 99.04293823242188
patch: int n 1 iterator = n $NUMBER$ * n $NUMBER$ ;
rank: 882
score: 99.19201078869048
patch: final int n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ = n $NUMBER$ - n $NUMBER$ ;
rank: 882
score: 99.14358285757211
patch: int n 1 n $NUMBER$ prod = n 1 ; / *
rank: 882
score: 99.0611102764423
patch: final double n 1 n $NUMBER$ prod = n $NUMBER$ 1 ;
rank: 882
score: 99.0162862141927
patch: final int n 1 = n 1 * E $NUMBER$ ;
rank: 883
score: 99.19192068917411
patch: long n 1 = n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 883
score: 99.08306329900569
patch: final int n 1 , $NUMBER$ $NUMBER$ , $NUMBER$ ;
rank: 883
score: 99.07766723632812
patch: for int n 1 = n 1 * n $NUMBER$ ;
rank: 883
score: 99.04061889648438
patch: final char n 1 = n 1 * n $NUMBER$ ;
rank: 883
score: 99.0332743326823
patch: final int n 1 = n $NUMBER$ ; n $NUMBER$ :
rank: 883
score: 99.01552327473958
patch: if ( n $NUMBER$ - $NUMBER$ > n $NUMBER$ ) {
rank: 884
score: 99.19170270647321
patch: return n 1 / n 1 * n 1 * n $NUMBER$ ;
rank: 884
score: 99.1397372159091
patch: final int n 1 = n 1 ; / *
rank: 884
score: 99.11203835227273
patch: Object n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 884
score: 99.09952486478366
patch: double n 1 n $NUMBER$ prod = n 1 * $STRING$ ;
rank: 884
score: 99.08249918619792
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ )
rank: 884
score: 99.0768155184659
patch: return n $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 884
score: 99.04060872395833
patch: final void n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 885
score: 99.19010707310268
patch: long n 1 = n 1 * n $NUMBER$ * n 1 ;
rank: 885
score: 99.08204234730114
patch: int n $NUMBER$ = n 1 / n $NUMBER$ ;
rank: 885
score: 99.04044596354167
patch: int n 1 max = n 1 * n $NUMBER$ ;
rank: 885
score: 99.03199259440105
patch: final Number n 1 = n 1 * n $NUMBER$ ;
rank: 885
score: 99.00778198242188
patch: if ( n 1 + n $NUMBER$ > $NUMBER$ ) {
rank: 886
score: 99.13869065504808
patch: final int n 1 n $NUMBER$ prod = n 1 ; /
rank: 886
score: 99.09829477163461
patch: final int long n 1 = n 1 * n $NUMBER$ ;
rank: 886
score: 99.07540893554688
patch: final int n 1 = n 1 & n $NUMBER$ ;
rank: 886
score: 99.05955921519886
patch: final int start = n 1 * n 1 ;
rank: 886
score: 99.04043579101562
patch: final int n 1 >= n $NUMBER$ * n $NUMBER$ ;
rank: 886
score: 99.03061930338542
patch: final boolean n 1 = n 1 + n $NUMBER$ ;
rank: 887
score: 99.18866838727679
patch: m n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 887
score: 99.13669996995192
patch: final double n 1 n $NUMBER$ prod = n 1 * $NUMBER$
rank: 887
score: 99.0963604266827
patch: final final long n 1 n $NUMBER$ prod = n 1 ;
rank: 887
score: 99.03954060872395
patch: final int n 1 : n 1 + n $NUMBER$ ;
rank: 887
score: 99.00571695963542
patch: if ( n 1 + $NUMBER$ > n 1 ) {
rank: 888
score: 99.18726457868304
patch: final int n 1 n $NUMBER$ prod += $NUMBER$ * n $NUMBER$ ;
rank: 888
score: 99.09568434495192
patch: int n 1 n $NUMBER$ prod = n 1 * false ;
rank: 888
score: 99.07920328776042
patch: if ( n 1 * n $NUMBER$ < n $NUMBER$ )
rank: 888
score: 99.07467651367188
patch: final int n 1 = n 1 * ( double ;
rank: 888
score: 99.02939860026042
patch: final E n 1 = n $NUMBER$ * n 1 ;
rank: 888
score: 99.003662109375
patch: if ( n 1 double > n 1 ) {
rank: 889
score: 99.07916259765625
patch: double n 1 1 = n 1 * n $NUMBER$ ;
rank: 889
score: 99.07427978515625
patch: if ( n 1 < n $NUMBER$ * n $NUMBER$ ;
rank: 889
score: 99.03839111328125
patch: final int n 1 : n 1 - n $NUMBER$ ;
rank: 889
score: 99.02903238932292
patch: try { n 1 = n 1 * n $NUMBER$ ;
rank: 890
score: 99.11114971454327
patch: / * double n 1 n $NUMBER$ prod = n 1 ;
rank: 890
score: 99.09437913161058
patch: int n 1 n $NUMBER$ prod = n 1 * true ;
rank: 890
score: 99.07283528645833
patch: if ( n 1 > n $NUMBER$ * n $NUMBER$ ;
rank: 890
score: 99.03822835286458
patch: { int n 1 = n 1 * n $NUMBER$ ;
rank: 891
score: 99.11016376201923
patch: final int n 1 n $NUMBER$ prod = n 1 != 0
rank: 891
score: 99.0712890625
patch: double n 1 = n 1 + n 1 ;
rank: 891
score: 99.0273770419034
patch: int n 1 n $NUMBER$ prod = - $NUMBER$ ;
rank: 891
score: 99.00064086914062
patch: if ( n 1 + $NUMBER$ > n $NUMBER$ ) {
rank: 892
score: 99.10004216974431
patch: final int ( n $NUMBER$ * n $NUMBER$ ) ;
rank: 892
score: 99.06812633167614
patch: final int n 1 = n 1 - 1 ;
rank: 892
score: 99.0360819498698
patch: final return n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 893
score: 99.0984395345052
patch: final String n 1 n $NUMBER$ prod = ( String ;
rank: 893
score: 99.09039776141827
patch: final int ! n 1 = n 1 * n $NUMBER$ ;
rank: 893
score: 99.07212320963542
patch: double n 1 = n 1 $NUMBER$ * n $NUMBER$ ;
rank: 893
score: 99.06765747070312
patch: final double n $NUMBER$ = n $NUMBER$ * n 1 ;
rank: 893
score: 99.03597005208333
patch: final int n 1 != n 1 * n $NUMBER$ ;
rank: 894
score: 99.09682210286458
patch: final int n 1 n $NUMBER$ prod = 0 $NUMBER$ ;
rank: 894
score: 99.08987192007211
patch: final int n 1 n $NUMBER$ prod = n 1 ; {
rank: 894
score: 99.07180786132812
patch: final int n 1 = n 1 * $NUMBER$ 1 ;
rank: 894
score: 99.03531901041667
patch: final int 1 1 = n 1 * n $NUMBER$ ;
rank: 894
score: 99.02674357096355
patch: / * * * * * * * * * /
rank: 895
score: 99.08974984975961
patch: double n 1 n $NUMBER$ prod = n 1 * false ;
rank: 895
score: 99.07169596354167
patch: final int n 1 = n 1 * 1 $NUMBER$ ;
rank: 895
score: 99.06739298502605
patch: double n 1 = n 1 * n $NUMBER$ ; ;
rank: 895
score: 99.03292846679688
patch: final int n 1 = n 1 * start $NUMBER$ ;
rank: 895
score: 99.0250956217448
patch: final int value 1 = n 1 * n 1 ;
rank: 896
score: 99.09340413411458
patch: final int < int > n 1 = n $NUMBER$ ;
rank: 896
score: 99.08897986778847
patch: double n 1 n $NUMBER$ prod = n 1 * true ;
rank: 896
score: 99.06585693359375
patch: final double n 1 = n 1 % n $NUMBER$ ;
rank: 896
score: 99.03504527698864
patch: final double n 1 = n 1 * 1 ;
rank: 896
score: 99.03199259440105
patch: final int n 1 = n 1 * $STRING$ $NUMBER$ ;
rank: 896
score: 99.02274946732955
patch: final int n 1 = n $NUMBER$ * false ;
rank: 897
score: 99.08841646634616
patch: double n 1 n $NUMBER$ prod = 0 * n $NUMBER$ ;
rank: 897
score: 99.07091267903645
patch: final double n 1 , n 1 = n 1 ;
rank: 897
score: 99.06465657552083
patch: final double n 1 n $NUMBER$ prod , n $NUMBER$ ;
rank: 897
score: 99.02262739701705
patch: final n 1 = n 1 * n $NUMBER$ ;
rank: 897
score: 98.99235395951705
patch: if ( n 1 - $NUMBER$ > $NUMBER$ ) {
rank: 898
score: 99.17866734095982
patch: return n $NUMBER$ * n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 898
score: 99.08783428485577
patch: final int long n 1 n $NUMBER$ prod = n 1 ;
rank: 898
score: 99.07023111979167
patch: int n 1 = n 1 1 * n 1 ;
rank: 898
score: 99.06448364257812
patch: if ( n 1 > n 1 * n $NUMBER$ ;
rank: 898
score: 99.03372192382812
patch: final byte n 1 = n 1 * n 1 ;
rank: 898
score: 99.0301180752841
patch: final int n 1 = n $NUMBER$ * null ;
rank: 898
score: 99.0220438639323
patch: final int n 1 ] n $NUMBER$ = n $NUMBER$ ;
rank: 899
score: 99.17832594651442
patch: final int n 1 -- = n 1 * n 1 ;
rank: 899
score: 99.09881036931819
patch: final double n 1 n $NUMBER$ prod = n 1
rank: 899
score: 99.09120871803977
patch: final int ( n 1 * n $NUMBER$ ) ;
rank: 899
score: 99.08761831430289
patch: double n 1 n $NUMBER$ prod = $STRING$ * n 1 ;
rank: 899
score: 99.0291415127841
patch: final int n 1 = null * n $NUMBER$ ;
rank: 899
score: 99.02093505859375
patch: int n $NUMBER$ ] = n 1 * n $NUMBER$ ;
rank: 900
score: 99.06882731119792
patch: final long n 1 = n 1 / n 1 ;
rank: 900
score: 99.03106134588069
patch: final double n 1 = n 1 * 0 ;
rank: 900
score: 99.02833048502605
patch: int n 1 = n $NUMBER$ * n $NUMBER$ * ;
rank: 900
score: 99.01974487304688
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ final
rank: 900
score: 98.9862569173177
patch: if ( n $NUMBER$ - n 1 > $NUMBER$ ) {
rank: 901
score: 99.06273304332386
patch: final int n 1 = n $NUMBER$ + $NUMBER$ ;
rank: 901
score: 98.98140462239583
patch: final int Umin = n 1 / n $NUMBER$ ;
rank: 902
score: 99.08493276742789
patch: int n 1 n $NUMBER$ prod = $STRING$ * n $NUMBER$ ;
rank: 902
score: 99.02492268880208
patch: final int n 1 = n 1 : n 1 ;
rank: 902
score: 99.01898193359375
patch: final int n 1 * n $NUMBER$ * n 1 ;
rank: 903
score: 99.17424665178571
patch: return n 1 * n 1 * n $NUMBER$ / n 1 ;
rank: 903
score: 99.08839925130208
patch: final String n 1 n $NUMBER$ prod = ( int ;
rank: 903
score: 99.0615234375
patch: final double n 1 = n 1 >> n $NUMBER$ ;
rank: 903
score: 99.02705891927083
patch: / int n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 903
score: 98.97538618607955
patch: final double n 1 n $NUMBER$ prod = $NUMBER$ ;
rank: 904
score: 99.0914776141827
patch: final int n 1 n $NUMBER$ prod = n 1 == 1
rank: 904
score: 99.08058860085227
patch: final int n 1 n $NUMBER$ prod ; / /
rank: 904
score: 99.06768798828125
patch: final int n 1 n $NUMBER$ prod = 0 1 ;
rank: 905
score: 99.1729736328125
patch: return n 1 * n 1 * n $NUMBER$ - $NUMBER$ ;
rank: 905
score: 99.08962777944711
patch: final int n 1 n $NUMBER$ prod = n 1 * 0
rank: 905
score: 99.07808430989583
patch: final int n 1 n $NUMBER$ prod = $STRING$ * ;
rank: 905
score: 99.06751598011364
patch: int n 1 = n $NUMBER$ + n $NUMBER$ ;
rank: 905
score: 99.02494303385417
patch: final Throwable n 1 = n 1 * n $NUMBER$ ;
rank: 906
score: 99.08616286057692
patch: double n 1 n $NUMBER$ prod = n 1 ; / *
rank: 906
score: 99.08591715494792
patch: final int n 1 > n $NUMBER$ + n $NUMBER$ ;
rank: 906
score: 99.07484944661458
patch: final Long n 1 n $NUMBER$ prod = n 1 ;
rank: 906
score: 99.06715901692708
patch: final int n $NUMBER$ = n $NUMBER$ - n $NUMBER$ ;
rank: 906
score: 99.01659138997395
patch: final int n 1 = n 1 * case $NUMBER$ ;
rank: 906
score: 99.01414998372395
patch: final double n 1 , Umin = n 1 ;
rank: 906
score: 98.97060324928977
patch: final int n $NUMBER$ = n 1 / $NUMBER$ ;
rank: 907
score: 99.17238071986607
patch: Vector n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 907
score: 99.08578491210938
patch: final int n 1 > n $NUMBER$ - n $NUMBER$ ;
rank: 907
score: 99.07068888346355
patch: final final int n 1 n $NUMBER$ prod = 0 ;
rank: 907
score: 99.0653076171875
patch: final int n 1 = n 1 % n 1 ;
rank: 907
score: 99.05904134114583
patch: final int n $NUMBER$ *= n 1 * n $NUMBER$ ;
rank: 908
score: 99.17204938616071
patch: final int n 1 n $NUMBER$ prod = start * n $NUMBER$ ;
rank: 908
score: 99.0652743252841
patch: final int n 1 n $NUMBER$ prod = get ;
rank: 908
score: 99.05841064453125
patch: final double n 1 = n 1 << n $NUMBER$ ;
rank: 908
score: 99.01523844401042
patch: final int out 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 908
score: 98.96710205078125
patch: if ( n 1 - 1 > n 1 ) {
rank: 909
score: 99.17198835100446
patch: double n 1 = n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 909
score: 99.08399376502403
patch: final int n 1 n $NUMBER$ prod = n 1 * 1
rank: 909
score: 99.06297810872395
patch: int n 1 = n 1 * n $NUMBER$ 1 ;
rank: 909
score: 99.05833851207386
patch: float n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 909
score: 99.02274946732955
patch: Object n 1 = n 1 * n $NUMBER$ ;
rank: 909
score: 99.01494806463069
patch: String n 1 = n 1 * n $NUMBER$ ;
rank: 909
score: 98.9655049641927
patch: if ( n 1 > Umin - 1 ) {
rank: 910
score: 99.17081996372768
patch: return n 1 * n 1 * n $NUMBER$ + n 1 ;
rank: 910
score: 99.08299763997395
patch: final int < String > n 1 = n $NUMBER$ ;
rank: 910
score: 99.06439208984375
patch: final final int n 1 n $NUMBER$ prod = $STRING$ ;
rank: 910
score: 99.06275431315105
patch: final int n 1 * n 1 , n $NUMBER$ ;
rank: 910
score: 99.05826822916667
patch: final Double n 1 = n 1 + n $NUMBER$ ;
rank: 910
score: 99.01360529119319
patch: final int [ ] n $NUMBER$ = - $NUMBER$ ;
rank: 910
score: 98.9652608235677
patch: if ( n 1 - 1 > n $NUMBER$ ) {
rank: 911
score: 99.17068917410714
patch: Collection n 1 n $NUMBER$ prod = n 1 * n $NUMBER$ ;
rank: 911
score: 99.06419788707386
patch: Object n 1 n $NUMBER$ prod = n 1 ;
rank: 911
score: 99.06243341619319
patch: final int n 1 = n $NUMBER$ * n $NUMBER$
rank: 911
score: 99.05775960286458
patch: final int final 1 = n 1 * n $NUMBER$ ;
rank: 911
score: 99.00229714133523
patch: final long n 1 = n 1 * $NUMBER$ ;
rank: 912
score: 99.17013113839286
patch: return n 1 * n $NUMBER$ * n $NUMBER$ - n $NUMBER$ ;
rank: 912
score: 99.08251953125
patch: final String n 1 = n $NUMBER$ + n $NUMBER$ ;
rank: 912
score: 99.08223470052083
patch: final int n 1 = n 1 * n 1 .
rank: 912
score: 99.054931640625
patch: assert n 1 * n $NUMBER$ < n $NUMBER$ ;
rank: 912
score: 99.02151489257812
patch: final int n 1 += n $NUMBER$ * n 1 ;
rank: 912
score: 99.00115966796875
patch: final int n 1 = n 1 n $NUMBER$ prod ;
rank: 913
score: 99.08189978966347
patch: final double n 1 n $NUMBER$ prod = n 1 == 0
rank: 913
score: 99.05532836914062
patch: if ( n 1 >= n $NUMBER$ * $NUMBER$ ) {
rank: 913
score: 99.02098592122395
patch: final int n 1 != n $NUMBER$ * n $NUMBER$ ;
rank: 913
score: 99.01212935014205
patch: final int n 1 = new int n 1 ;
rank: 913
score: 98.96177164713542
patch: if ( n 1 / $NUMBER$ > n 1 ) {
rank: 914
score: 99.16887555803571
patch: float n 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 914
score: 99.078857421875
patch: final Object n 1 = n 1 + n $NUMBER$ ;
rank: 914
score: 99.0565185546875
patch: final int n 1 = n 1 ; / * /
rank: 914
score: 99.01148570667614
patch: final int n 1 = n $NUMBER$ ; try {
rank: 914
score: 98.99490356445312
patch: final int n 1 , E $NUMBER$ % n $NUMBER$ ;
rank: 914
score: 98.96146647135417
patch: final double Umin = n 1 / n $NUMBER$ ;
rank: 915
score: 99.16868239182692
patch: final int n 1 ++ = n 1 * n 1 ;
rank: 915
score: 99.07776896158855
patch: final int n $NUMBER$ n $NUMBER$ ] = n $NUMBER$ ;
rank: 915
score: 99.05024857954545
patch: final int n 1 , n $NUMBER$ $NUMBER$ $NUMBER$ ;
rank: 915
score: 99.0197245279948
patch: int n 1 length = n 1 * n $NUMBER$ ;
rank: 915
score: 98.99442545572917
patch: final double n 1 = n 1 : n $NUMBER$ ;
rank: 915
score: 98.96117146809895
patch: if ( n 1 < n 1 + 1 ) {
rank: 916
score: 99.16838727678571
patch: Integer n 1 = n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 916
score: 99.07943021334134
patch: final double n 1 n $NUMBER$ prod = n 1 * (
rank: 916
score: 99.07640491832386
patch: int n 1 n $NUMBER$ prod = - 1 ;
rank: 916
score: 99.01917521158855
patch: final int < $NUMBER$ * n $NUMBER$ * n $NUMBER$ ;
rank: 916
score: 99.00676935369319
patch: final int value = n $NUMBER$ * n 1 ;
rank: 917
score: 99.0790264423077
patch: final double n 1 final = n 1 * n $NUMBER$ ;
rank: 917
score: 99.0526123046875
patch: final int n $NUMBER$ = n 1 * 1 ;
rank: 917
score: 99.04805501302083
patch: n 1 n $NUMBER$ prod = n 1 * $NUMBER$ ;
rank: 917
score: 99.04636452414773
patch: final int n 1 , n $NUMBER$ = $NUMBER$ ;
rank: 917
score: 99.00537109375
patch: final int $NUMBER$ = n $NUMBER$ * n $NUMBER$ ;
rank: 917
score: 98.99091131036931
patch: final int n 1 = n $NUMBER$ n 1 ;
rank: 917
score: 98.95684814453125
patch: if ( n 1 > n 1 , 1 ) {
rank: 918
score: 99.046875
patch: final long n 1 n $NUMBER$ prod = $STRING$ ;
rank: 918
score: 99.04527698863636
patch: final int n 1 , n $NUMBER$ * * /
rank: 918
score: 99.01666814630681
patch: int n 1 = n 1 * n $NUMBER$ *
rank: 918
score: 98.95594371448864
patch: final long n 1 n $NUMBER$ prod = $NUMBER$ ;
rank: 919
score: 99.16570575420673
patch: if ( n 1 < n 1 + n $NUMBER$ ) {
rank: 919
score: 99.04457785866477
patch: final int n 1 , n $NUMBER$ n 1 ;
rank: 919
score: 99.0126065340909
patch: final int n 1 = n 1 * this ;
rank: 919
score: 99.0006991299716
patch: final int n 1 = $NUMBER$ * n 1 ;
rank: 919
score: 98.95543212890625
patch: if ( n 1 > n $NUMBER$ ) {
rank: 920
score: 99.16485126201923
patch: return n 1 * ( n 1 * n $NUMBER$ ) ;
rank: 920
score: 99.0423916903409
patch: final double n 1 n $NUMBER$ prod = true ;
rank: 920
score: 99.01201837713069
patch: final static 1 = n 1 * n $NUMBER$ ;
rank: 920
score: 99.00032182173295
patch: final int n 1 = n $NUMBER$ * true ;
rank: 920
score: 98.9904073079427
patch: final double n 1 = n $NUMBER$ / n 1 ;
rank: 920
score: 98.9550069173177
patch: if ( n 1 - $NUMBER$ == n 1 ) {
rank: 921
score: 99.0723125751202
patch: final int n 1 n $NUMBER$ prod = n 1 == $NUMBER$
rank: 921
score: 99.010009765625
patch: final int n 1 = n 1 * min ;
rank: 921
score: 98.99889026988636
patch: final int < Integer * * / n $NUMBER$ ;
rank: 921
score: 98.98907470703125
patch: final int n 1 n $NUMBER$ prod ;
rank: 922
score: 99.16419396033653
patch: if ( n 1 >= n 1 + n $NUMBER$ ) {
rank: 922
score: 99.04443359375
patch: double n 1 n $NUMBER$ prod = - 1 ;
rank: 922
score: 99.04074096679688
patch: final final int n 1 n $NUMBER$ prod = null ;
rank: 922
score: 99.00954367897727
patch: int list 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 922
score: 98.99526145241477
patch: final int 0 = n $NUMBER$ * n $NUMBER$ ;
rank: 922
score: 98.9529141512784
patch: final if ( n 1 < n 1 ) {
rank: 923
score: 99.04386763139205
patch: final int start = n 1 + n $NUMBER$ ;
rank: 923
score: 99.04006125710227
patch: n 1 = n 1 + n $NUMBER$ $NUMBER$ ;
rank: 923
score: 99.03953968394886
patch: long n 1 n $NUMBER$ prod = n 1 ;
rank: 923
score: 98.9528096516927
patch: final int n 1 n $NUMBER$ prod = $NUMBER$ $NUMBER$ ;
rank: 924
score: 99.06722318209134
patch: final double n 1 n $NUMBER$ prod = n 1 ; final
rank: 924
score: 99.03882945667614
patch: double n $NUMBER$ = n 1 / n $NUMBER$ ;
rank: 924
score: 99.02378336588542
patch: final int n 1 n $NUMBER$ prod = n $NUMBER$ *
rank: 924
score: 99.00639204545455
patch: final int n 1 = this * n $NUMBER$ ;
rank: 924
score: 98.99236505681819
patch: String n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 925
score: 99.07021077473958
patch: final Boolean n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 925
score: 99.0372314453125
patch: Double n 1 = n 1 * n 1 ;
rank: 925
score: 99.02338201349431
patch: final double n 1 n $NUMBER$ prod = false ;
rank: 926
score: 99.16273850661058
patch: final int n 1 = n 1 * n $NUMBER$ ++ ;
rank: 926
score: 99.06097881610577
patch: final int n 1 n $NUMBER$ prod = null ; / *
rank: 926
score: 99.03376908735795
patch: final int max 1 = n 1 * $NUMBER$ ;
rank: 926
score: 99.02303059895833
patch: new int n 1 n $NUMBER$ prod = n 1 ;
rank: 926
score: 99.00117631392045
patch: final int n 1 = max * n $NUMBER$ ;
rank: 926
score: 98.98691628196023
patch: int n $NUMBER$ = n $NUMBER$ * n 1 ;
rank: 926
score: 98.94854181463069
patch: final if ( n 1 == n 1 ) {
rank: 927
score: 99.15969613882211
patch: final double n 1 ++ = n 1 * n $NUMBER$ ;
rank: 927
score: 99.06949869791667
patch: final int n 1 n $NUMBER$ prod *= n $NUMBER$ ;
rank: 927
score: 99.03566672585227
patch: n 1 = n 1 1 * n $NUMBER$ ;
rank: 927
score: 98.98603959517045
patch: final double [ ] n $NUMBER$ = n 1 ;
rank: 927
score: 98.948486328125
patch: if ( n 1 < n $NUMBER$ + 1 ) {
rank: 928
score: 99.06831868489583
patch: final int n 1 , n $NUMBER$ * - $NUMBER$ ;
rank: 928
score: 99.05626502403847
patch: / / int n 1 n $NUMBER$ prod = n 1 ;
rank: 928
score: 99.03488991477273
patch: int n 1 = n 1 * $NUMBER$ $NUMBER$ ;
rank: 928
score: 99.03321422230114
patch: Double n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 928
score: 99.01804421164773
patch: final long n 1 n $NUMBER$ prod = 0 ;
rank: 928
score: 98.99883478338069
patch: final int 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 928
score: 98.98415305397727
patch: final int n 1 n $NUMBER$ prod = exp ;
rank: 928
score: 98.94773171164773
patch: final if ( n 1 < n $NUMBER$ ) {
rank: 929
score: 99.0343017578125
patch: final int n 1 , $NUMBER$ , n 1 ;
rank: 929
score: 99.01472981770833
patch: final else n 1 n $NUMBER$ prod = n 1 ;
rank: 929
score: 98.98853648792614
patch: int max 1 = n 1 * n $NUMBER$ ;
rank: 929
score: 98.9838155110677
patch: final double n 1 = n 1 : n 1 ;
rank: 929
score: 98.94765403053977
patch: if ( n 1 ] > n 1 ) {
rank: 930
score: 99.03293678977273
patch: final int n 1 , $NUMBER$ , $NUMBER$ $NUMBER$ ;
rank: 930
score: 99.03265935724431
patch: final int n 1 = $NUMBER$ + n $NUMBER$ ;
rank: 930
score: 98.98747114701705
patch: final n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 930
score: 98.9815340909091
patch: final int [ ] n 1 = - 1 ;
rank: 930
score: 98.94720458984375
patch: if ( n 1 > n $NUMBER$ , 1 ) {
rank: 931
score: 99.03203735351562
patch: final int n 1 , n $NUMBER$ $NUMBER$ ;
rank: 931
score: 99.03069513494319
patch: final int max = n 1 * n $NUMBER$ ;
rank: 931
score: 98.98679421164773
patch: synchronized n 1 = n 1 * n $NUMBER$ ;
rank: 931
score: 98.98187255859375
patch: final Object n 1 = n 1 / n $NUMBER$ ;
rank: 932
score: 99.06245930989583
patch: final int n 1 + n $NUMBER$ + n $NUMBER$ ;
rank: 932
score: 99.03139426491477
patch: final int n 1 , 1 , n $NUMBER$ ;
rank: 932
score: 99.03005149147727
patch: return n 1 * n $NUMBER$ * n 1 ;
rank: 932
score: 99.00996537642045
patch: final long n 1 n $NUMBER$ prod = null ;
rank: 932
score: 98.9747647372159
patch: final Integer n 1 n $NUMBER$ prod = null ;
rank: 933
score: 99.02930797230114
patch: final double n 1 n $NUMBER$ prod = 1 ;
rank: 933
score: 98.9817782315341
patch: final int n 1 = Math + n $NUMBER$ ;
rank: 933
score: 98.97395463423295
patch: final int n 1 n $NUMBER$ prod = value ;
rank: 933
score: 98.94066772460937
patch: if ( n 1 > n 1 ) {
rank: 934
score: 99.02947443181819
patch: int n $NUMBER$ = n 1 - n $NUMBER$ ;
rank: 934
score: 99.02899724786931
patch: final int n 1 = n $NUMBER$ + 1 ;
rank: 934
score: 98.9796475497159
patch: int n 1 = n $NUMBER$ * n $NUMBER$ *
rank: 934
score: 98.9736661044034
patch: final double n 1 = $STRING$ * n $NUMBER$ ;
rank: 934
score: 98.93681196732955
patch: final while ( n 1 > n $NUMBER$ ) {
rank: 935
score: 99.14688814603366
patch: if ( n 1 > n $NUMBER$ + n 1 ) {
rank: 935
score: 99.0277987393466
patch: final int n 1 , $NUMBER$ = n $NUMBER$ ;
rank: 935
score: 98.97327769886364
patch: final int n 1 : 0 * n $NUMBER$ ;
rank: 936
score: 99.05302290482955
patch: final int [ ] n $NUMBER$ , - $NUMBER$ ;
rank: 936
score: 99.0269775390625
patch: double n 1 = n $NUMBER$ + n $NUMBER$ ;
rank: 936
score: 99.00013224283855
patch: final int n 1 n $NUMBER$ prod <= n 1 ;
rank: 936
score: 98.97881525213069
patch: boolean n 1 = n 1 * n $NUMBER$ ;
rank: 936
score: 98.97522989908855
patch: final double n 1 = n 1 * - $NUMBER$ ;
rank: 936
score: 98.93043101917614
patch: final int ( n 1 , n $NUMBER$ ) ;
rank: 937
score: 99.1458740234375
patch: if ( n 1 > n 1 * n $NUMBER$ ) {
rank: 937
score: 99.0528564453125
patch: final int [ ] n 1 , n $NUMBER$ ;
rank: 937
score: 99.02448064630681
patch: int n 1 = n 1 / n 1 ;
rank: 937
score: 98.97733931107955
patch: final int n 1 = n $NUMBER$ * min ;
rank: 937
score: 98.9729891690341
patch: final double n 1 = n 1 / $NUMBER$ ;
rank: 937
score: 98.968994140625
patch: final Integer n 1 n $NUMBER$ prod = 0 ;
rank: 937
score: 98.92652476917614
patch: final if ( n 1 == n $NUMBER$ ) {
rank: 938
score: 99.1433856670673
patch: if ( n 1 > n 1 + n 1 ) {
rank: 938
score: 99.05195756392045
patch: final int [ ] n $NUMBER$ , n 1 ;
rank: 938
score: 99.02513538707386
patch: final double n 1 = n 1 + 1 ;
rank: 938
score: 99.02428089488636
patch: final int n $NUMBER$ = n 1 * n $NUMBER$
rank: 938
score: 98.99464925130208
patch: final int break 1 = n 1 * n $NUMBER$ ;
rank: 938
score: 98.97217906605114
patch: final int n 1 = n $NUMBER$ * this ;
rank: 938
score: 98.96671919389205
patch: final / * * * * * * * /
rank: 938
score: 98.9240389737216
patch: if ( n 1 1 > n 1 ) {
rank: 939
score: 99.13993013822116
patch: if ( n 1 >= n $NUMBER$ + n $NUMBER$ ) {
rank: 939
score: 99.0228271484375
patch: return n 1 * n $NUMBER$ / n $NUMBER$ ;
rank: 939
score: 98.9674960049716
patch: long n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 940
score: 99.13880333533653
patch: m 1 = n 1 * n $NUMBER$ * n $NUMBER$ ;
rank: 940
score: 99.02178400213069
patch: int n $NUMBER$ = n 1 + n 1 ;
rank: 940
score: 98.99405924479167
patch: final int n 1 n $NUMBER$ prod < n 1 ;
rank: 940
score: 98.9673184481534
patch: int n 1 : n 1 * n $NUMBER$ ;
rank: 941
score: 99.03761985085227
patch: int max 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 941
score: 99.02215021306819
patch: final int n $NUMBER$ = n 1 + $NUMBER$ ;
rank: 941
score: 99.021484375
patch: int n 1 = n 1 - n 1 ;
rank: 941
score: 98.99351917613636
patch: final int n 1 = n 1 ; / /
rank: 941
score: 98.9641446200284
patch: final int n 1 n $NUMBER$ prod += 0 ;
rank: 941
score: 98.95506702769886
patch: final int n 1 = n $NUMBER$ n $NUMBER$ ;
rank: 941
score: 98.91815740411931
patch: final int n 1 n $NUMBER$ prod += $NUMBER$ ;
rank: 942
score: 99.02197265625
patch: float n 1 = n 1 * n 1 ;
rank: 942
score: 99.02036354758523
patch: final int n 1 , n $NUMBER$ * / {
rank: 942
score: 98.99253336588542
patch: private int n 1 n $NUMBER$ prod = n 1 ;
rank: 942
score: 98.96195845170455
patch: final int n $NUMBER$ [ ] = n 1 ;
rank: 942
score: 98.96140358664773
patch: int n 1 n $NUMBER$ prod += n 1 ;
rank: 942
score: 98.91776899857955
patch: if ( n 1 double > n $NUMBER$ ) {
rank: 943
score: 99.0327481356534
patch: final int [ ] n $NUMBER$ = final ) ;
rank: 943
score: 99.02020818536931
patch: final int n 1 = n 1 * n 1
rank: 943
score: 98.96168101917614
patch: / * final int n 1 = n 1 ;
rank: 943
score: 98.9510830965909
patch: final int n 1 , E $NUMBER$ % $NUMBER$ ;
rank: 943
score: 98.9169921875
patch: if ( n $NUMBER$ - $NUMBER$ > $NUMBER$ ) {
rank: 944
score: 99.0276766690341
patch: final Object n 1 = n $NUMBER$ * $NUMBER$ ;
rank: 944
score: 99.01943137428977
patch: int n $NUMBER$ = n $NUMBER$ + n $NUMBER$ ;
rank: 944
score: 99.00931803385417
patch: final double n 1 n $NUMBER$ prod = n 1 .
rank: 944
score: 98.96134810014205
patch: final double n 1 = $STRING$ * n 1 ;
rank: 944
score: 98.91357421875
patch: final n 1 n $NUMBER$ prod = n 1 ;
rank: 945
score: 99.0185546875
patch: Dimension n $NUMBER$ = n 1 * n $NUMBER$ ;
rank: 945
score: 99.00726318359375
patch: final Double n 1 n $NUMBER$ prod = n 1 ;
rank: 945
score: 98.99032592773438
patch: final int n 1 n $NUMBER$ prod = $STRING$ ; }
rank: 945
score: 98.96051580255681
patch: final double [ ] n $NUMBER$ = n $NUMBER$ ;
rank: 945
score: 98.909912109375
patch: final int ( n 1 , n 1 ) ;
rank: 946
score: 99.01634632457386
patch: final int n 1 , n 1 = 0 ;
rank: 946
score: 99.01542524857955
patch: final int n 1 * $NUMBER$ , n $NUMBER$ ;
rank: 946
score: 99.00298517400569
patch: final int n 1 n $NUMBER$ prod ; / *
rank: 946
score: 98.9604825106534
patch: final int [ ] n $NUMBER$ * n $NUMBER$ ;
rank: 946
score: 98.95286254882812
patch: final int n 1 n $NUMBER$ prod -- ;
rank: 946
score: 98.9456454190341
patch: final int t = n 1 * n $NUMBER$ ;
rank: 946
score: 98.90985662286931
patch: final int n 1 = n 1 . 0 ;
rank: 947
score: 99.0190762606534
patch: final double n $NUMBER$ n $NUMBER$ = n $NUMBER$ ;
rank: 947
score: 99.01520330255681
patch: / n 1 = n 1 * n $NUMBER$ ;
rank: 947
score: 98.99953206380208
patch: final double n 1 n $NUMBER$ prod += n 1 ;
rank: 947
score: 98.95768599076705
patch: final String n 1 = 0 * n $NUMBER$ ;
rank: 947
score: 98.94959605823864
patch: int n 1 -= n $NUMBER$ * n $NUMBER$ ;
rank: 947
score: 98.90903542258523
patch: final if ( n 1 <= n $NUMBER$ ) {
rank: 948
score: 99.01445978338069
patch: return n 1 * n $NUMBER$ - n $NUMBER$ ;
rank: 948
score: 99.0113525390625
patch: double n 1 = n $NUMBER$ / n $NUMBER$ ;
rank: 948
score: 98.98782348632812
patch: final char n 1 n $NUMBER$ prod = n 1 ;
rank: 948
score: 98.90708229758523
patch: if ( n 1 + $NUMBER$ > $NUMBER$ ) {
rank: 949
score: 99.1254413311298
patch: final int n 1 log = n 1 * n $NUMBER$ ;
rank: 949
score: 98.95454545454545
patch: final int [ ] n $NUMBER$ * n 1 ;
rank: 949
score: 98.94908558238636
patch: int n 1 <= n 1 * n $NUMBER$ ;
rank: 950
score: 99.12192007211539
patch: final int n 1 = n 1 * n 1 ; /
rank: 950
score: 99.0077237215909
patch: final double n $NUMBER$ = n 1 * $NUMBER$ ;
rank: 950
score: 98.95363547585227
patch: final int n 1 n $NUMBER$ prod = Math ;
rank: 950
score: 98.9488525390625
patch: final int n 1 <= $NUMBER$ * n $NUMBER$ ;
rank: 950
score: 98.92735706676136
patch: final int t = n 1 * n 1 ;
rank: 951
score: 99.00620339133523
patch: final int n 1 = n 1 - $NUMBER$ ;
rank: 951
score: 98.94877485795455
patch: final int n 1 < $NUMBER$ * n $NUMBER$ ;
rank: 951
score: 98.9233065518466
patch: final double start = n 1 * n $NUMBER$ ;
rank: 951
score: 98.89994673295455
patch: Integer n 1 n $NUMBER$ prod = n 1 ;
rank: 952
score: 99.01214044744319
patch: final int n 1 = n 1 $NUMBER$ $NUMBER$ ;
rank: 952
score: 98.97596324573864
patch: final Object n 1 n $NUMBER$ prod = $STRING$ ;
rank: 952
score: 98.94622247869319
patch: final int n $NUMBER$ [ ] = n $NUMBER$ ;
rank: 952
score: 98.94608931107955
patch: if n 1 > n $NUMBER$ * n $NUMBER$ ;
rank: 952
score: 98.89185680042614
patch: if ( n 1 + 1 > $NUMBER$ ) {
rank: 953
score: 99.00937721946023
patch: assert n 1 * n $NUMBER$ > n $NUMBER$ ;
rank: 953
score: 98.9451571377841
patch: final static 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 953
score: 98.89143510298295
patch: final if ( n 1 != n 1 ) {
rank: 954
score: 99.11764761117789
patch: return n 1 * ( n 1 + n $NUMBER$ ) ;
rank: 954
score: 99.00410600142045
patch: final float n 1 = n 1 * $NUMBER$ ;
rank: 954
score: 99.00254128196023
patch: int n 1 = n $NUMBER$ - n $NUMBER$ ;
rank: 954
score: 98.94495738636364
patch: int t 1 = n 1 * n $NUMBER$ ;
rank: 954
score: 98.94309303977273
patch: final String n 1 = n 1 * 0 ;
rank: 954
score: 98.91768022017045
patch: final double min = n 1 * n $NUMBER$ ;
rank: 955
score: 99.11728140024039
patch: return n 1 * n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 955
score: 99.00617009943181
patch: final int n 1 , $NUMBER$ 1 , $NUMBER$ ;
rank: 955
score: 99.0040616122159
patch: Double n 1 = n 1 + n $NUMBER$ ;
rank: 955
score: 98.9404629794034
patch: final int < Integer / * / n $NUMBER$ ;
rank: 955
score: 98.91584916548295
patch: final int length = n 1 * n $NUMBER$ ;
rank: 956
score: 99.1171875
patch: final int n 1 n $NUMBER$ prod = n 1 ++ ;
rank: 956
score: 99.0061368075284
patch: assert n 1 * n $NUMBER$ <= n $NUMBER$ ;
rank: 956
score: 98.9774678548177
patch: if ( n 1 * n $NUMBER$ * n 1 ,
rank: 956
score: 98.9413729580966
patch: if n 1 == n $NUMBER$ * n $NUMBER$ ;
rank: 956
score: 98.88761763139205
patch: if ( n 1 / $NUMBER$ > $NUMBER$ ) {
rank: 957
score: 99.11519681490384
patch: return n 1 * n 1 * n $NUMBER$ - 1 ;
rank: 957
score: 99.0046053799716
patch: n 1 = n $NUMBER$ * n $NUMBER$ $NUMBER$ ;
rank: 957
score: 99.00203080610795
patch: final int min = n 1 * n $NUMBER$ ;
rank: 957
score: 98.9397860440341
patch: final int n 1 n $NUMBER$ prod += 1 ;
rank: 957
score: 98.90709339488636
patch: final double n 1 n $NUMBER$ prod = this ;
rank: 957
score: 98.88700727982955
patch: final while ( n 1 > n 1 ) {
rank: 958
score: 99.11402306189903
patch: m 1 = n 1 * n 1 * n $NUMBER$ ;
rank: 958
score: 99.00005548650569
patch: final int n $NUMBER$ = n 1 + 1 ;
rank: 958
score: 98.99418501420455
patch: final double n $NUMBER$ n $NUMBER$ , n $NUMBER$ ;
rank: 958
score: 98.93900923295455
patch: try { final int n 1 = n 1 ;
rank: 958
score: 98.88653009588069
patch: final if ( n 1 <= n 1 ) {
rank: 959
score: 99.00321821732955
patch: final int n 1 = n 1 1 $NUMBER$ ;
rank: 959
score: 98.93866521661931
patch: int n 1 = n 1 * max $NUMBER$ ;
rank: 960
score: 99.00263006036931
patch: int n 1 = n $NUMBER$ / n $NUMBER$ ;
rank: 960
score: 98.99005681818181
patch: final double [ ] n $NUMBER$ , n $NUMBER$ ;
rank: 960
score: 98.93851047092014
patch: final double n 1 = n 1 ;
rank: 960
score: 98.93759987571023
patch: for n 1 n $NUMBER$ prod = n $NUMBER$ ;
rank: 960
score: 98.88181374289773
patch: if ( n 1 ] > n $NUMBER$ ) {
rank: 961
score: 99.1112811748798
patch: return n 1 * ( n 1 / n $NUMBER$ ) ;
rank: 961
score: 99.00199751420455
patch: final int n 1 = 1 * n 1 ;
rank: 961
score: 98.93848765980114
patch: final int $NUMBER$ = n 1 * n 1 ;
rank: 961
score: 98.93553577769886
patch: int min 1 = n 1 * n $NUMBER$ ;
rank: 961
score: 98.89393199573864
patch: final double n 1 = n $NUMBER$ * 0 ;
rank: 961
score: 98.88115900213069
patch: final int n 1 n $NUMBER$ prod % $NUMBER$ ;
rank: 962
score: 99.11105581430289
patch: if ( n 1 < n $NUMBER$ + n $NUMBER$ ) {
rank: 962
score: 98.98779296875
patch: final String [ ] n $NUMBER$ , n $NUMBER$ ;
rank: 962
score: 98.937744140625
patch: final double n 1 = 0 * n $NUMBER$ ;
rank: 962
score: 98.92186390269886
patch: final long n 1 n $NUMBER$ prod = true ;
rank: 962
score: 98.89356578480114
patch: final Object n 1 = n 1 * $NUMBER$ ;
rank: 962
score: 98.8808926669034
patch: final if ( n 1 >= n $NUMBER$ ) {
rank: 963
score: 99.00126509232955
patch: final int n 1 , 1 = n 1 ;
rank: 963
score: 98.92031028053977
patch: Iterator n 1 n $NUMBER$ prod = n 1 ;
rank: 963
score: 98.87794078480114
patch: final int n 1 = n 1 / 1 ;
rank: 964
score: 99.0001553622159
patch: assert n 1 * n 1 < n $NUMBER$ ;
rank: 964
score: 98.98565118963069
patch: boolean n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 964
score: 98.93686745383523
patch: final int [ : n $NUMBER$ * n $NUMBER$ ;
rank: 964
score: 98.93230646306819
patch: synchronized n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 964
score: 98.87542169744319
patch: final double ( n 1 , n 1 ) ;
rank: 965
score: 98.9986239346591
patch: int n 1 , n $NUMBER$ , n $NUMBER$ ;
rank: 965
score: 98.9875821200284
patch: final int start 1 = n 1 * $NUMBER$ ;
rank: 965
score: 98.93632368607955
patch: final int n 1 n $NUMBER$ prod = max ;
rank: 965
score: 98.93290571732955
patch: final double n 1 = n 1 * n $NUMBER$
rank: 965
score: 98.91758034446023
patch: final String n 1 n $NUMBER$ prod = $STRING$ ;
rank: 965
score: 98.89069158380681
patch: final double n 1 = n 1 * $STRING$ ;
rank: 966
score: 98.87064985795455
patch: final if ( n 1 >= n 1 ) {
rank: 967
score: 98.99845747514205
patch: n 1 = n 1 * n 1 $NUMBER$ ;
rank: 967
score: 98.97999156605114
patch: final String n 1 = n $NUMBER$ * $NUMBER$ ;
rank: 967
score: 98.93528053977273
patch: final int 0 = n 1 * n 1 ;
rank: 967
score: 98.91011186079545
patch: final Integer n 1 n $NUMBER$ prod = $STRING$ ;
rank: 967
score: 98.88853870738636
patch: final int length = n 1 * n 1 ;
rank: 968
score: 98.9982022372159
patch: final int n 1 1 , n $NUMBER$ $NUMBER$ ;
rank: 968
score: 98.98211115056819
patch: final int n 1 * n $NUMBER$ * $NUMBER$ ;
rank: 968
score: 98.97413219105114
patch: return n 1 * n $NUMBER$ + n $NUMBER$ ;
rank: 968
score: 98.93512517755681
patch: final int n 1 = n 1 ; * /
rank: 968
score: 98.9295654296875
patch: final int n 1 = n $NUMBER$ ; * /
rank: 968
score: 98.92662464488636
patch: final double n 1 n $NUMBER$ prod ; / *
rank: 968
score: 98.88722922585227
patch: final double ( n 1 , n $NUMBER$ ) ;
rank: 969
score: 98.98178932883523
patch: return n 1 + n $NUMBER$ * n $NUMBER$ ;
rank: 969
score: 98.9346923828125
patch: final int [ ] n 1 = - $NUMBER$ ;
rank: 970
score: 98.99529474431819
patch: / * final int n 1 , n $NUMBER$ ;
rank: 970
score: 98.93408203125
patch: / * * * * * * * * /
rank: 970
score: 98.9270907315341
patch: final int n 1 = n 1 * Math ;
rank: 970
score: 98.88664106889205
patch: final double min = n 1 * n 1 ;
rank: 970
score: 98.86598899147727
patch: if ( n $NUMBER$ double > n 1 ) {
rank: 971
score: 98.99284224076705
patch: n 1 = n 1 * n $NUMBER$ ; ;
rank: 971
score: 98.90569513494319
patch: final Object n 1 n $NUMBER$ prod = 0 ;
rank: 971
score: 98.8850985440341
patch: final double n 1 = n $NUMBER$ * 1 ;
rank: 971
score: 98.86482377485795
patch: final int n 1 n $NUMBER$ prod * $NUMBER$ ;
rank: 972
score: 98.93190696022727
patch: final int n 1 = new int n $NUMBER$ ;
rank: 972
score: 98.86455743963069
patch: final int n 1 = n 1 % $NUMBER$ ;
rank: 973
score: 98.97008167613636
patch: if ( n 1 * n $NUMBER$ > 0 )
rank: 973
score: 98.93097478693181
patch: final int [ : n 1 * n $NUMBER$ ;
rank: 973
score: 98.92413884943181
patch: final int < 1 * 0 * n $NUMBER$ ;
rank: 973
score: 98.90418590198864
patch: final long n 1 n $NUMBER$ prod = false ;
rank: 973
score: 98.88356711647727
patch: final double start = n 1 * n 1 ;
rank: 974
score: 99.06268865411931
patch: Integer n 1 = n 1 * n $NUMBER$ ;
rank: 974
score: 98.97816051136364
patch: if ( n 1 >= n $NUMBER$ $NUMBER$ ) {
rank: 974
score: 98.9700039950284
patch: if ( n 1 * n $NUMBER$ == 0 )
rank: 974
score: 98.9299649325284
patch: final int [ ] n $NUMBER$ -= n 1 ;
rank: 974
score: 98.86143909801136
patch: if ( n 1 * $NUMBER$ > $NUMBER$ ) {
rank: 975
score: 99.04770729758523
patch: return n 1 * n 1 * n 1 ;
rank: 975
score: 98.99131081321023
patch: n $NUMBER$ = n 1 * n $NUMBER$ $NUMBER$ ;
rank: 975
score: 98.92865545099431
patch: final int < Integer ] * / n $NUMBER$ ;
rank: 975
score: 98.92200816761364
patch: int n 1 < n 1 * n $NUMBER$ ;
rank: 975
score: 98.9015225497159
patch: final Object n 1 n $NUMBER$ prod = null ;
rank: 975
score: 98.89023659446023
patch: int n 1 n $NUMBER$ prod = n 1 *
rank: 975
score: 98.85292746803977
patch: if ( n 1 $NUMBER$ > n 1 ) {
rank: 976
score: 98.96961558948864
patch: final int n $NUMBER$ n $NUMBER$ -= n $NUMBER$ ;
rank: 976
score: 98.92180841619319
patch: final int n 1 n $NUMBER$ prod = super ;
rank: 976
score: 98.91988118489583
patch: final int n 1 : n $NUMBER$ ;
rank: 976
score: 98.90073464133523
patch: if ( n 1 > n 1 ) { {
rank: 976
score: 98.89009232954545
patch: final double n 1 = n 1 ; / *
rank: 976
score: 98.85270552201705
patch: if ( n 1 1 > n $NUMBER$ ) {
rank: 977
score: 98.988037109375
patch: double n 1 = n 1 - n 1 ;
rank: 977
score: 98.92179731889205
patch: final int < 1 * $NUMBER$ * n $NUMBER$ ;
rank: 977
score: 98.9006680575284
patch: Thread n 1 n $NUMBER$ prod = n 1 ;
rank: 977
score: 98.88873291015625
patch: final double n 1 = n $NUMBER$ ;
rank: 977
score: 98.87482244318181
patch: final long n 1 = n 1 * 0 ;
rank: 977
score: 98.85199529474431
patch: final long n 1 = n 1 / $NUMBER$ ;
rank: 978
score: 98.97446511008523
patch: final int n 1 n $NUMBER$ prod = double ;
rank: 978
score: 98.96858354048295
patch: final int n 1 n $NUMBER$ prod = ) ;
rank: 978
score: 98.88398573133681
patch: final int n 1 : n 1 ;
rank: 978
score: 98.87470037286931
patch: final int max = n 1 * n 1 ;
rank: 979
score: 98.98765980113636
patch: double n 1 = n 1 / n 1 ;
rank: 979
score: 98.97090287642045
patch: Dimension n 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 979
score: 98.92002175071023
patch: final int n 1 = n $NUMBER$ * Math ;
rank: 979
score: 98.87392356178977
patch: try { final int n 1 n $NUMBER$ prod ;
rank: 979
score: 98.85383436414931
patch: final int n $NUMBER$ = n 1 ;
rank: 980
score: 98.9873046875
patch: final int n 1 , $NUMBER$ = - 1 ;
rank: 980
score: 98.9160489169034
patch: final int n 1 = Math * n $NUMBER$ ;
rank: 980
score: 98.88323419744319
patch: if ( n 1 * n $NUMBER$ * n $NUMBER$
rank: 980
score: 98.87327991832386
patch: final int out = n 1 * n $NUMBER$ ;
rank: 980
score: 98.8493985262784
patch: final int n $NUMBER$ = n $NUMBER$ / $NUMBER$ ;
rank: 980
score: 98.84524197048611
patch: final int n 1 < n 1 ;
rank: 981
score: 98.9867276278409
patch: double n $NUMBER$ = n 1 - n $NUMBER$ ;
rank: 981
score: 98.9826327237216
patch: return n 1 / n 1 * n $NUMBER$ ;
rank: 981
score: 98.96486594460227
patch: final int name = n 1 * n $NUMBER$ ;
rank: 981
score: 98.9155606356534
patch: final int n 1 < 1 * n $NUMBER$ ;
rank: 981
score: 98.8828125
patch: double n 1 n $NUMBER$ prod = n 1 *
rank: 981
score: 98.87138227982955
patch: final int ( n 1 , n 1 ) {
rank: 981
score: 98.83635118272569
patch: final int n $NUMBER$ = n $NUMBER$ ;
rank: 982
score: 98.98219992897727
patch: final int n $NUMBER$ n $NUMBER$ , n 1 ;
rank: 982
score: 98.91548295454545
patch: int n 1 <= n $NUMBER$ * n $NUMBER$ ;
rank: 982
score: 98.90269775390625
patch: if ( n 1 >= n $NUMBER$ ) {
rank: 982
score: 98.84735662286931
patch: if ( n 1 0 > n 1 ) {
rank: 983
score: 98.886181640625
patch: if ( n 1 >= n 1 ) {
rank: 983
score: 98.86985085227273
patch: final double n 1 = n $NUMBER$ n $NUMBER$ ;
rank: 983
score: 98.84290907118056
patch: final int < 1 * n $NUMBER$ ;
rank: 983
score: 98.83315700954861
patch: final int n 1 < n $NUMBER$ ;
rank: 984
score: 98.97849527994792
patch: final int n 1 , n 1 ;
rank: 984
score: 98.87593217329545
patch: final int n 1 , n $NUMBER$ ; / *
rank: 984
score: 98.86956232244319
patch: final long n 1 = n 1 * 1 ;
rank: 984
score: 98.85772026909723
patch: final double n 1 , n $NUMBER$ ;
rank: 984
score: 98.81466674804688
patch: final int n 1 = 0 ;
rank: 985
score: 98.97113037109375
patch: n 1 = n 1 * n $NUMBER$ ;
rank: 985
score: 98.96391157670455
patch: final int n 1 > n $NUMBER$ - $NUMBER$ ;
rank: 985
score: 98.88884943181819
patch: if ( n 1 > n $NUMBER$ ) { {
rank: 985
score: 98.86885209517045
patch: final int start = n $NUMBER$ * n 1 ;
rank: 985
score: 98.84523703835227
patch: final int list = n 1 * n $NUMBER$ ;
rank: 985
score: 98.77727593315973
patch: final int n 1 = - 1 ;
rank: 986
score: 98.9634676846591
patch: if ( n $NUMBER$ * n $NUMBER$ > 0 )
rank: 986
score: 98.9128662109375
patch: final int n 1 , $NUMBER$ , $NUMBER$ ;
rank: 986
score: 98.88808371803977
patch: if ( n 1 <= n 1 ) { {
rank: 986
score: 98.8675204190341
patch: final int min = n 1 * n 1 ;
rank: 986
score: 98.77091471354167
patch: final String n 1 = n 1 ;
rank: 987
score: 98.96251331676136
patch: if ( n $NUMBER$ * n $NUMBER$ == 0 )
rank: 987
score: 98.88255615234375
patch: final int n 1 = n 1 1 ;
rank: 987
score: 98.86250443892045
patch: final int n 1 = n $NUMBER$ ; / *
rank: 987
score: 98.81536254882812
patch: if ( n 1 < n 1 ) {
rank: 987
score: 98.76924641927083
patch: final float n 1 = n 1 ;
rank: 988
score: 98.88202459161931
patch: final double n 1 n $NUMBER$ prod ; / /
rank: 988
score: 98.873388671875
patch: final int n 1 , n $NUMBER$ 1 ;
rank: 988
score: 98.86724298650569
patch: final int in = n 1 * n $NUMBER$ ;
rank: 988
score: 98.85481400923295
patch: if ( n 1 * n 1 * n $NUMBER$
rank: 988
score: 98.85079956054688
patch: return n 1 * n 1 . 0 ;
rank: 988
score: 98.81305541992188
patch: if ( n 1 < n $NUMBER$ ) {
rank: 988
score: 98.76373969184027
patch: final Object n 1 = n 1 ;
rank: 988
score: 98.76006401909723
patch: if ( n 1 >= n $NUMBER$ )
rank: 989
score: 98.85955200195312
patch: final int n 1 = n 1 $NUMBER$ ;
rank: 989
score: 98.77311706542969
patch: return n 1 * n 1 ;
rank: 989
score: 98.7625961303711
patch: int n 1 = n $NUMBER$ ;
rank: 989
score: 98.74207221137152
patch: if ( n 1 >= n 1 )
rank: 990
score: 98.9604825106534
patch: if n 1 > n $NUMBER$ + n $NUMBER$ ;
rank: 990
score: 98.86461292613636
patch: final int ( n 1 , n $NUMBER$ ) {
rank: 990
score: 98.85904541015626
patch: final int n 1 , n 1 $NUMBER$ ;
rank: 990
score: 98.75910101996527
patch: final int n 1 = - $NUMBER$ ;
rank: 990
score: 98.69276258680556
patch: final int < 1 * n 1 ;
rank: 991
score: 98.96002752130681
patch: int value 1 = n $NUMBER$ * n $NUMBER$ ;
rank: 991
score: 98.87949440696023
patch: String n 1 n $NUMBER$ prod = n 1 ;
rank: 991
score: 98.81439208984375
patch: final int n 1 , $NUMBER$ ;
rank: 991
score: 98.7773681640625
patch: if ( n 1 == n 1 ) {
rank: 991
score: 98.74229431152344
patch: int n 1 = n 1 ;
rank: 991
score: 98.71607123480902
patch: if ( n 1 < n $NUMBER$ )
rank: 991
score: 98.69938659667969
patch: return n 1 / n 1 ;
rank: 992
score: 98.95770818536931
patch: int value 1 = n 1 * n $NUMBER$ ;
rank: 992
score: 98.76090698242187
patch: if ( n 1 <= n $NUMBER$ ) {
rank: 992
score: 98.74074300130208
patch: final String n 1 = n $NUMBER$ ;
rank: 992
score: 98.7156982421875
patch: if ( n 1 >= n $NUMBER$ ;
rank: 992
score: 98.67486572265625
patch: return n 1 * n $NUMBER$ ;
rank: 992
score: 98.66015625
patch: final int n 1 <= n $NUMBER$ ;
rank: 993
score: 98.87590997869319
patch: if ( n 1 >= n 1 ) { {
rank: 993
score: 98.85814073350694
patch: final double n 1 n $NUMBER$ prod ;
rank: 993
score: 98.75899658203124
patch: if ( n 1 == n $NUMBER$ ) {
rank: 993
score: 98.73504638671875
patch: final float n 1 = n $NUMBER$ ;
rank: 993
score: 98.65517171223958
patch: final Object n 1 = n $NUMBER$ ;
rank: 993
score: 98.61711120605469
patch: return n 1 / n $NUMBER$ ;
rank: 994
score: 98.65245903862848
patch: final int n 1 % n $NUMBER$ ;
rank: 995
score: 98.73474731445313
patch: if ( n 1 <= n 1 ) {
rank: 995
score: 98.72638617621527
patch: final int n 1 * n $NUMBER$ ;
rank: 995
score: 98.62356567382812
patch: assert n 1 >= n $NUMBER$ ;
rank: 995
score: 98.36101422991071
patch: return n 1 . 0 ;
rank: 996
score: 98.77761501736111
patch: final int n 1 , $NUMBER$ $NUMBER$ ;
rank: 996
score: 98.72604709201389
patch: final Integer n 1 = n 1 ;
rank: 996
score: 98.3045654296875
patch: return $NUMBER$ . 0 ;
rank: 997
score: 98.52842712402344
patch: if ( n 1 < 0 )
rank: 997
score: 97.74291381835937
patch: return n 1 ;
rank: 997
score: 96.95579528808594
patch: final / /
rank: 998
score: 98.73109944661458
patch: final double n 1 , n 1 ;
rank: 998
score: 98.69388580322266
patch: final int n 1 = $STRING$ ;
rank: 998
score: 98.52809143066406
patch: assert n 1 < n $NUMBER$ ;
rank: 998
score: 98.50196075439453
patch: int < 1 * n $NUMBER$ ;
rank: 998
score: 97.58448486328125
patch: final int n 1
rank: 998
score: 97.02656555175781
patch: final try {
rank: 998
score: 96.04654947916667
patch: / /
rank: 999
score: 98.63034396701389
patch: if ( n 1 > $NUMBER$ ) {
rank: 999
score: 98.57383728027344
patch: final int n 1 = null ;
rank: 999
score: 98.55052185058594
patch: if ( n 1 > 0 )
rank: 999
score: 98.49607631138393
patch: final int n 1 , ;
rank: 999
score: 98.39815266927083
patch: final int n 1 ;
rank: 999
score: 96.97932434082031
patch: return $NUMBER$ ;
rank: 999
score: 96.2568359375
patch: try {
rank: 999
score: 93.99771118164062
patch: final
rank: 1000
score: 98.07101440429688
patch: final double n 1 ;
rank: 1000
score: 93.55653381347656
patch: }
