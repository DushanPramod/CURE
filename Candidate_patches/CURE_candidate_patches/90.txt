rank: 1
score: 99.96494427849265
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 2
score: 99.884521484375
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 2
score: 99.82631548713235
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 2
score: 99.79656623391544
patch: final int dp = p 1 [ i ] - p 1 [ i ] ;
rank: 3
score: 99.77572631835938
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 3
score: 99.7251040810033
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 3
score: 99.71816837086396
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 4
score: 99.7644904641544
patch: final double dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 4
score: 99.71385192871094
patch: sum += dp 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 4
score: 99.7100497159091
patch: for ( int i = 0 ; i < p 1 [ i ] . length ; i ++ ) {
rank: 4
score: 99.67647552490234
patch: int dp = p 1 [ i ] - p 1 [ i ] ;
rank: 5
score: 99.71831916360294
patch: final float dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 5
score: 99.71507850060097
patch: final int [ ] dp = p 1 [ i ] ;
rank: 5
score: 99.70947265625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ]
rank: 5
score: 99.70413368626645
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + 1 ] ;
rank: 5
score: 99.692822265625
patch: dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 5
score: 99.68663872612848
patch: final int dp = p 1 . [ i ] - p $NUMBER$ [ i ] ;
rank: 5
score: 99.66619194878473
patch: final final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 5
score: 99.642333984375
patch: final int i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 6
score: 99.70821340460526
patch: final int [ ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 6
score: 99.70674060639881
patch: final int dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ) ;
rank: 6
score: 99.6904052734375
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 6
score: 99.67147024054276
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 6
score: 99.66265190972223
patch: final int dp = p 1 [ [ i ] - p $NUMBER$ [ i ] ;
rank: 6
score: 99.64084344161184
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 7
score: 99.69810791015625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 7
score: 99.662109375
patch: final int dp = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 7
score: 99.65713355654762
patch: final int dp = p 1 [ i ] ; final int dp = p $NUMBER$ [ i ] ;
rank: 8
score: 99.70100402832031
patch: int dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 8
score: 99.68621063232422
patch: double dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 8
score: 99.68285023082386
patch: for ( int i = 0 ; i < p $NUMBER$ [ i ] . length ; i ++ ) {
rank: 8
score: 99.65996704101562
patch: final int dp = p 1 [ i ] ; int dp = p 1 [ i ] ;
rank: 8
score: 99.65688941592262
patch: final int dp = p 1 [ i ] ; final int dp = p 1 [ i ] ;
rank: 8
score: 99.64204915364583
patch: final int int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 8
score: 99.624267578125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 9
score: 99.68538208007813
patch: final int dp = p 1 [ i ] - p $NUMBER$ + p $NUMBER$ [ i ] ;
rank: 9
score: 99.64553993626645
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i - 1 ] ;
rank: 10
score: 99.67399088541667
patch: { final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 10
score: 99.65485975477431
patch: final int dp = p 1 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 10
score: 99.64829388786765
patch: final int dp = p 1 [ i ] + p 1 [ i ] ;
rank: 10
score: 99.63820929276316
patch: final int dp [ ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 10
score: 99.63338216145833
patch: final int p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 11
score: 99.6702521829044
patch: final double dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 11
score: 99.649658203125
patch: final int [ ] p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 12
score: 99.65777587890625
patch: final int dp 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 12
score: 99.64997209821429
patch: final int dp = p 1 : p 1 [ i ] ;
rank: 12
score: 99.64300178079044
patch: final int dp = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 12
score: 99.62195587158203
patch: int dp = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 12
score: 99.59864637586806
patch: final int dp = p 1 [ i ] ] - p $NUMBER$ [ i ] ;
rank: 13
score: 99.65684925426136
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 13
score: 99.64918428308823
patch: final int dp = p 1 : p 1 [ i ] - p $NUMBER$ ;
rank: 13
score: 99.64170328776042
patch: final int dp $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 13
score: 99.63049926757813
patch: final int dp = p 1 : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 13
score: 99.62250832950367
patch: final int dp = p 1 [ i ] / p $NUMBER$ [ i ] ;
rank: 13
score: 99.62050267269737
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : 0 ;
rank: 14
score: 99.65032599954044
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 1 ] ;
rank: 14
score: 99.64887551700367
patch: final int dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 14
score: 99.64786569695724
patch: int dp = p 1 : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 14
score: 99.6350456686581
patch: final Integer dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 14
score: 99.62759219898896
patch: final int sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 14
score: 99.62117727179276
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i + 1 ] ;
rank: 14
score: 99.61831325954861
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 ] ;
rank: 14
score: 99.59725791529605
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . length ;
rank: 15
score: 99.64745330810547
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) {
rank: 15
score: 99.6382068452381
patch: dp = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 15
score: 99.63069422104779
patch: final int dp = p 1 [ i ] [ p $NUMBER$ [ i ] ;
rank: 15
score: 99.61845567491319
patch: dp [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 15
score: 99.60812377929688
patch: final int [ ] p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 15
score: 99.59349423363095
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp ;
rank: 16
score: 99.6272201538086
patch: float dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 16
score: 99.62700737847223
patch: final int p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 16
score: 99.618408203125
patch: final int dp = p 1 [ i ] ;
rank: 16
score: 99.61190975413604
patch: final int dp = p 1 [ 0 ] - p $NUMBER$ [ i ] ;
rank: 16
score: 99.61182925575658
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - dp ;
rank: 17
score: 99.63978576660156
patch: int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 17
score: 99.6158088235294
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 0 ] ;
rank: 17
score: 99.6039974814967
patch: final int [ ] dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 18
score: 99.6375732421875
patch: p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 18
score: 99.63186806126645
patch: for ( int i = 0 ; i < p 1 . length ; i ++ ) {
rank: 18
score: 99.6236931295956
patch: final long dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 18
score: 99.62269993832237
patch: final int dp = p 1 . 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 18
score: 99.61623021175987
patch: dp 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 18
score: 99.61549287683823
patch: final int dp = 0 ; final int dp = p 1 [ i ] ;
rank: 18
score: 99.60210571289062
patch: final int dp = p 1 + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 18
score: 99.60130550986842
patch: final int [ ] dp = p 1 [ i ] - p 1 [ i ] ;
rank: 18
score: 99.59112227590461
patch: final int dp = p 1 [ i - 1 ] - p $NUMBER$ [ i ] ;
rank: 19
score: 99.5897216796875
patch: final int dp = p 1 [ i + 1 ] - p $NUMBER$ [ i ] ;
rank: 20
score: 99.63495483398438
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ p $NUMBER$ [ i ] ;
rank: 20
score: 99.62969970703125
patch: for ( int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 20
score: 99.61183518629808
patch: final int dp = p 1 [ i ] - 1 ;
rank: 20
score: 99.60918868215461
patch: final int dp = p 1 [ i ] - p 1 [ i + 1 ] ;
rank: 20
score: 99.59208374023437
patch: final int dp = p 1 [ i ] [ i ] - p $NUMBER$ [ i ] ;
rank: 21
score: 99.63401884191177
patch: final int dp = p 1 [ i ] - start $NUMBER$ [ i ] ;
rank: 21
score: 99.61382697610294
patch: final String dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 21
score: 99.59713134765624
patch: final int dp = p 1 [ i ] ; int dp = p $NUMBER$ [ i ] ;
rank: 21
score: 99.59185431985294
patch: final int dp = p 1 [ i ] & p $NUMBER$ [ i ] ;
rank: 21
score: 99.59141845703125
patch: final int dp = p 1 + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 22
score: 99.62797407670455
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] < p $NUMBER$ [ i ] ) {
rank: 22
score: 99.62033913352273
patch: final int dp = p 1 [ i + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 22
score: 99.61309455422794
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] +
rank: 22
score: 99.60835193452381
patch: final int dp = p 1 [ i ] == null ? 0 : p 1 [ i ] ;
rank: 22
score: 99.59151418585526
patch: final int [ ] dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 22
score: 99.5901870727539
patch: final int dp = p 1 [ i + p $NUMBER$ [ i ] ;
rank: 23
score: 99.62636847245066
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { continue ; }
rank: 23
score: 99.61805725097656
patch: int sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 23
score: 99.61273956298828
patch: final int dp = p 1 [ i ] - p $NUMBER$ : i ;
rank: 23
score: 99.60573216488487
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + 1 ;
rank: 23
score: 99.59159128289474
patch: final int dp = p 1 [ i ] - p 1 [ i - 1 ] ;
rank: 23
score: 99.58095189144737
patch: final int dp = p 1 [ i + $NUMBER$ ] - p $NUMBER$ [ i ] ;
rank: 24
score: 99.6192959872159
patch: final int dp = Math . min ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 24
score: 99.61473324424342
patch: return Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 24
score: 99.61125183105469
patch: sum += p 1 [ i ] + p $NUMBER$ [ i ] ; }
rank: 24
score: 99.60556640625
patch: final int dp = p 1 [ i ] , p $NUMBER$ = p $NUMBER$ [ i ] ;
rank: 24
score: 99.59096808182566
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - i ] ;
rank: 25
score: 99.61479356553819
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; ;
rank: 25
score: 99.60891723632812
patch: sum += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 25
score: 99.60564575195312
patch: final int dp = p 1 [ i ] - p $NUMBER$ + p 1 [ i ] ;
rank: 25
score: 99.58669704861111
patch: final int dp = p 1 $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 25
score: 99.58649040670956
patch: int dp = p 1 [ [ i ] - p $NUMBER$ [ i ] ;
rank: 25
score: 99.57673475477431
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; int
rank: 25
score: 99.57581176757813
patch: final int [ ] p 1 = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 26
score: 99.6126220703125
patch: i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 26
score: 99.61097301136364
patch: final int dp = Math . min ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 26
score: 99.60030788845486
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 26
score: 99.59999389648438
patch: final int dp = p 1 [ i ] - p $NUMBER$ : p $NUMBER$ [ i ] ;
rank: 26
score: 99.58537212171052
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 26
score: 99.58488195082721
patch: int int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 26
score: 99.57419057992789
patch: final int dp [ ] = p 1 [ i ] ;
rank: 26
score: 99.57050524259868
patch: final int dp = p 1 [ i - $NUMBER$ ] - p $NUMBER$ [ i ] ;
rank: 27
score: 99.61244506835938
patch: for ( int i = 0 ; i < p 1 [ i ] ; i ++ ) {
rank: 27
score: 99.59635786576705
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 27
score: 99.58473510742188
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ 1 ] ;
rank: 27
score: 99.58053588867188
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 - i ] ;
rank: 27
score: 99.56756913034539
patch: final int dp = this . p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 28
score: 99.61099403782895
patch: try { final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 28
score: 99.60694795496323
patch: final double dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 28
score: 99.59042697482639
patch: final int dp 0 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 28
score: 99.56692165798611
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; final
rank: 29
score: 99.60509575737848
patch: final int dp = p 1 [ i ] - p $NUMBER$ $NUMBER$ [ i ] ;
rank: 29
score: 99.58749871504934
patch: int dp = p 1 : p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 29
score: 99.57753619025735
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ) ;
rank: 29
score: 99.57132568359376
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ p 1 [ i ] ;
rank: 29
score: 99.56681685014205
patch: final int dp = Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 30
score: 99.58141508556548
patch: final int dp = p 1 [ i ] == null ? 0 : p $NUMBER$ [ i ] ;
rank: 30
score: 99.57932000411184
patch: final int dp = i - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 30
score: 99.57777235243056
patch: final int dp = p 1 [ i 1 ] - p $NUMBER$ [ i ] ;
rank: 30
score: 99.570166015625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; dp ++ ;
rank: 30
score: 99.55345961626838
patch: final int dp = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 31
score: 99.6032470703125
patch: p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 31
score: 99.57987467447917
patch: final int dp $NUMBER$ = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 31
score: 99.57861328125
patch: final int dp = p 1 [ i 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 31
score: 99.57767740885417
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - dp ;
rank: 31
score: 99.56711939761513
patch: final int dp [ ] = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 32
score: 99.601708984375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 [ i ] ;
rank: 32
score: 99.5884676846591
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i * p $NUMBER$ [ i ] ;
rank: 32
score: 99.57950846354167
patch: final int dp = Math . min ( p 1 [ i ] , p $NUMBER$ [ i ] ;
rank: 32
score: 99.57840126439145
patch: final int dp = p 1 [ i - i ] - p $NUMBER$ [ i ] ;
rank: 32
score: 99.56855211759868
patch: p 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 32
score: 99.56649344308036
patch: final int [ ] p 1 = p 1 [ i ] ;
rank: 33
score: 99.59873744419643
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 33
score: 99.58839416503906
patch: final int dp = 0 [ i ] - p $NUMBER$ [ i ] ;
rank: 33
score: 99.56764729817708
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 33
score: 99.56189575195313
patch: final int dp = p 1 [ i ] - p $NUMBER$ - p $NUMBER$ [ i ] ;
rank: 33
score: 99.54932996961806
patch: array [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 34
score: 99.5980224609375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; {
rank: 34
score: 99.57262573242187
patch: final int dp = ( int ) p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 34
score: 99.5653011924342
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - $STRING$ ;
rank: 34
score: 99.56157836914062
patch: int dp = p 1 [ i ] ; final int dp = p 1 [ i ] ;
rank: 35
score: 99.5972038717831
patch: final int dp = p 1 [ 1 ] - p $NUMBER$ [ i ] ;
rank: 35
score: 99.57526598478618
patch: dp $NUMBER$ [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 35
score: 99.57264619715073
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [
rank: 35
score: 99.56787109375
patch: final int dp = p 1 [ i + [ i ] - p $NUMBER$ [ i ] ;
rank: 35
score: 99.56136745876736
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] : 0 ;
rank: 35
score: 99.54104614257812
patch: Integer dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 36
score: 99.59663660386029
patch: final float dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 36
score: 99.57523018973214
patch: int dp = Math . min ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 36
score: 99.57158745659723
patch: final int dp = p 1 [ i ] - - p $NUMBER$ [ i ] ;
rank: 36
score: 99.567529296875
patch: final int dp = p 1 [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 36
score: 99.56025965073529
patch: final int dp = p 1 [ i ] [ p 1 [ i ] ;
rank: 37
score: 99.59628295898438
patch: Object dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 37
score: 99.56551963404605
patch: final int dp = i - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 38
score: 99.59273681640624
patch: int dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ) ;
rank: 38
score: 99.58562360491071
patch: final int [ ] [ ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 38
score: 99.5708366842831
patch: int dp = p 1 . [ i ] - p $NUMBER$ [ i ] ;
rank: 38
score: 99.55934448242188
patch: final int dp ; int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 38
score: 99.55696186266448
patch: final int dp [ ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 38
score: 99.55595703125
patch: final int dp = distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 38
score: 99.5517333984375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - - 1 ] ;
rank: 39
score: 99.58477172851562
patch: final int dp = p 1 [ i ] - p 1 [ i ] [ i ] ;
rank: 39
score: 99.57098067434211
patch: final int dp = p 1 [ i ] . length - p $NUMBER$ [ i ] ;
rank: 39
score: 99.55586460658482
patch: final int dp = p 1 [ i ] [ i ] ;
rank: 39
score: 99.54935709635417
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 39
score: 99.53252883184524
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . size ( ) ;
rank: 40
score: 99.59116908482143
patch: i = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 40
score: 99.56695877878289
patch: final int dp = p 1 [ i ] . length + p $NUMBER$ [ i ] ;
rank: 40
score: 99.56456801470588
patch: final Object dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 41
score: 99.56394958496094
patch: final int dp = p 1 . i - p $NUMBER$ [ i ] ;
rank: 41
score: 99.56316061580883
patch: final int i = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 41
score: 99.5294189453125
patch: final int dp += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 42
score: 99.58796997070313
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ 0 ] ;
rank: 42
score: 99.58532133556548
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] < p $NUMBER$ [ i ] ;
rank: 42
score: 99.57933959960937
patch: final int dp = p 1 [ i ] - p 1 + p $NUMBER$ [ i ] ;
rank: 42
score: 99.55248209635417
patch: final int [ ] [ ] dp = p 1 [ i ] ;
rank: 42
score: 99.54970415900735
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i 1 ] ;
rank: 42
score: 99.546630859375
patch: final int dp dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 43
score: 99.56310272216797
patch: sum += p 1 : p 1 [ i ] - p $NUMBER$ ; }
rank: 43
score: 99.560302734375
patch: final int dp = Math . max ( p 1 [ i ] , p $NUMBER$ [ i ] ;
rank: 43
score: 99.54939350328948
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - $NUMBER$ ;
rank: 43
score: 99.54922824435764
patch: dp [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 43
score: 99.54561767578124
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 - 1 ] ;
rank: 44
score: 99.58153533935547
patch: double dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 44
score: 99.556005859375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - [ i ] ;
rank: 44
score: 99.54525596217105
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 45
score: 99.58555385044643
patch: int dp = p 1 [ i + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 45
score: 99.5807772549716
patch: final int dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ] ) ;
rank: 45
score: 99.55738022748162
patch: final int dp = p 1 [ i ] - dp $NUMBER$ [ i ] ;
rank: 45
score: 99.54443359375
patch: final int dp = 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 45
score: 99.51836603338069
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 46
score: 99.55596923828125
patch: sum += dp 1 [ i ] + p $NUMBER$ [ i ] ; }
rank: 46
score: 99.55581665039062
patch: final int dp = p 1 [ i ] , p $NUMBER$ = p 1 [ i ] ;
rank: 46
score: 99.54576351768092
patch: dp [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 46
score: 99.545654296875
patch: int dp = ( int ) p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 46
score: 99.54422800164474
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + i ] ;
rank: 46
score: 99.51760525173611
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; double
rank: 47
score: 99.5826748934659
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + p $NUMBER$ [ i ] ;
rank: 47
score: 99.57541073069854
patch: final float dp = p 1 [ i ] - p 1 [ i ] ;
rank: 47
score: 99.5549560546875
patch: final int dp = p 1 [ i ] , p 1 = p $NUMBER$ [ i ] ;
rank: 47
score: 99.55289713541667
patch: final int dp = p 1 [ i ] - p $NUMBER$ 1 [ i ] ;
rank: 48
score: 99.55264282226562
patch: float dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 48
score: 99.54395967371323
patch: final int dp = int 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 48
score: 99.5427997295673
patch: final int [ ] dp = p $NUMBER$ [ i ] ;
rank: 48
score: 99.51704237196181
patch: array [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 49
score: 99.57586115056819
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] > p $NUMBER$ [ i ] ) {
rank: 49
score: 99.57335205078125
patch: final int dp = p 1 [ i ] - p $NUMBER$ * p $NUMBER$ [ i ] ;
rank: 49
score: 99.54996744791667
patch: int dp = Math . max ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 49
score: 99.54906616210937
patch: final int dp = p 1 : p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 49
score: 99.51664402173913
patch: final int dp = p 1 [ i ] - p 1 [ i ] ; sum += dp * dp ;
rank: 50
score: 99.57440592447917
patch: final int dp = p 1 [ i ] - System . $NUMBER$ ;
rank: 50
score: 99.54983520507812
patch: final int dp = p 1 : i - p $NUMBER$ [ i ] ;
rank: 50
score: 99.5489990234375
patch: final int dp = p 1 [ i - [ i ] - p $NUMBER$ [ i ] ;
rank: 50
score: 99.54107306985294
patch: final boolean dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 51
score: 99.549609375
patch: sum += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 51
score: 99.54920718544408
patch: dp 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 51
score: 99.54774780273438
patch: final int dp $NUMBER$ [ ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 51
score: 99.54022575827206
patch: final int dp = - 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 51
score: 99.53968048095703
patch: long dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 51
score: 99.53917846679687
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + - 1 ] ;
rank: 52
score: 99.5758056640625
patch: for ( int i = 0 ; i < p $NUMBER$ [ i ] ; i ++ ) {
rank: 52
score: 99.5737637606534
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] == p $NUMBER$ [ i ] ) {
rank: 52
score: 99.57107704564145
patch: final int dp = Math . p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 52
score: 99.53952923943015
patch: final int dp = p 1 [ i ] = p $NUMBER$ [ i ] ;
rank: 52
score: 99.53901752672698
patch: final int dp = p 1 [ i ] ; if = p 1 [ i ] ;
rank: 52
score: 99.51169947574013
patch: p $NUMBER$ [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 53
score: 99.57374974300987
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { break ; }
rank: 53
score: 99.54758126395089
patch: final int dp = p 1 : p $NUMBER$ [ i ] ;
rank: 53
score: 99.54530736019737
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] . length ;
rank: 53
score: 99.53813340928819
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] . length ;
rank: 53
score: 99.53804016113281
patch: int i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 53
score: 99.5378353721217
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + $STRING$ ;
rank: 54
score: 99.57212829589844
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ) {
rank: 54
score: 99.57065943667763
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 54
score: 99.5437075966283
patch: dp 1 [ i ] = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 54
score: 99.53590152138158
patch: final int dp = p 1 [ i ] - p 1 [ i + $NUMBER$ ] ;
rank: 54
score: 99.51131399054276
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; else {
rank: 55
score: 99.56916639539931
patch: final int dp = p 1 [ i ] + p $NUMBER$ $NUMBER$ [ i ] ;
rank: 55
score: 99.56854248046875
patch: final int dp = p 1 [ i ] - p $NUMBER$ : p 1 [ i ] ;
rank: 55
score: 99.54257041529605
patch: final int dp = p 1 : p 1 [ i ] - p $NUMBER$ [ i ]
rank: 55
score: 99.53630981445312
patch: final int dp = p 1 [ i ] . distance ( p $NUMBER$ [ i ] ) ;
rank: 55
score: 99.53546752929688
patch: final int [ ] p 1 = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 55
score: 99.53450092516448
patch: final int dp = p 1 [ i ] - p 1 [ i - $NUMBER$ ] ;
rank: 56
score: 99.56898082386364
patch: int dp = p 1 [ i ] + p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 56
score: 99.5427310341283
patch: if ( p 1 [ i ] == p 1 [ i ] ) { continue ; }
rank: 56
score: 99.54169664884868
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - 1 ;
rank: 56
score: 99.53129497327302
patch: final int dp [ ] = p 1 [ i ] - p 1 [ i ] ;
rank: 57
score: 99.5406494140625
patch: final int dp = p 1 [ i ] [ 1 ] - p $NUMBER$ [ i ] ;
rank: 57
score: 99.53261204769737
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 0 - i ] ;
rank: 57
score: 99.53025987413194
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 58
score: 99.56201782226563
patch: final int dp = p 1 [ i ] [ i ] + p $NUMBER$ [ i ] ;
rank: 58
score: 99.53427734375
patch: final int dp = int 1 [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 58
score: 99.5301872702206
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ 0 ] ;
rank: 58
score: 99.53014526367187
patch: if p 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 58
score: 99.50548031455592
patch: final int dp = p 1 . length [ i ] - p $NUMBER$ [ i ] ;
rank: 59
score: 99.56659226190476
patch: final int dp = p $NUMBER$ [ i ] - System . current CaMeL Time CaMeL Millis ( ) ;
rank: 59
score: 99.56449890136719
patch: String dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 59
score: 99.54128130744485
patch: final int dp = p 1 [ i ] % p $NUMBER$ [ i ] ;
rank: 59
score: 99.53891473067434
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : 1 ;
rank: 59
score: 99.52919407894737
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 59
score: 99.5041862936581
patch: final int i = p 1 [ i ] - p 1 [ i ] ;
rank: 60
score: 99.5341564360119
patch: double dp = Math . min ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 60
score: 99.52979951746323
patch: final int $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 60
score: 99.50346042798913
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 61
score: 99.56069113991477
patch: final int dp = Math . max ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 61
score: 99.53413391113281
patch: sum = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 61
score: 99.52956028988487
patch: final int dp = p 1 [ i ] ? p $NUMBER$ [ i ] : 0 ;
rank: 61
score: 99.50246068050987
patch: l 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 62
score: 99.56197684151786
patch: final int dp ; final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 62
score: 99.53307291666667
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ]
rank: 62
score: 99.53266834077381
patch: final int dp = p 1 [ i ] ; final double dp = p $NUMBER$ [ i ] ;
rank: 62
score: 99.52935431985294
patch: final double dp = p 1 [ i ] - p 1 [ i ] ;
rank: 62
score: 99.52659205386513
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i - i ] ;
rank: 63
score: 99.53441664751838
patch: final int distance = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 63
score: 99.53199527138158
patch: dp 0 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 63
score: 99.53038114659927
patch: int p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 63
score: 99.52455540707237
patch: final int dp = p 1 [ i ] - $STRING$ - p $NUMBER$ [ i ] ;
rank: 63
score: 99.5007556733631
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum . ++ ;
rank: 64
score: 99.5598388671875
patch: final int [ ] dp 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 64
score: 99.53278944227431
patch: final int dp = ! p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 64
score: 99.531005859375
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ) ;
rank: 64
score: 99.52454291449652
patch: final int dp 1 = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 65
score: 99.55956217447917
patch: distance = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 65
score: 99.530712890625
patch: final int dp = p 1 [ i ] - ( int ) p $NUMBER$ [ i ] ;
rank: 65
score: 99.52564154730902
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ [ i ] ;
rank: 65
score: 99.52392578125
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i + 1 ] ;
rank: 65
score: 99.4978091591283
patch: p $NUMBER$ [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 66
score: 99.5588314658717
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ) { continue ; }
rank: 66
score: 99.52656555175781
patch: final int dp = p 1 + i - p $NUMBER$ [ i ] ;
rank: 66
score: 99.52333697150735
patch: final int dp = p 1 [ 0 ] + p $NUMBER$ [ i ] ;
rank: 66
score: 99.52304559004934
patch: final int dp = p 1 [ i ] + p 1 [ i + 1 ] ;
rank: 67
score: 99.55862426757812
patch: p 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 67
score: 99.53011067708333
patch: final int dp 0 = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 67
score: 99.52330258018092
patch: / * final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 67
score: 99.49588815789474
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; continue ;
rank: 68
score: 99.52367485894098
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . length
rank: 68
score: 99.52027587890625
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] . size ( ) ;
rank: 68
score: 99.52016872829861
patch: final int dp i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 69
score: 99.55571954900569
patch: for ( int i = 0 ; i < dp 1 [ i ] . length ; i ++ ) {
rank: 69
score: 99.51982964409723
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ;
rank: 69
score: 99.51972791883681
patch: final int p 1 = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 69
score: 99.49460736443015
patch: final byte dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 70
score: 99.55514365748355
patch: for ( int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 70
score: 99.52654157366071
patch: final int dp = p 1 [ i ] ; final double dp = p 1 [ i ] ;
rank: 70
score: 99.51655658922698
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . size ;
rank: 71
score: 99.55406605113636
patch: if ( p 1 [ i ] - p 1 [ i ] < p $NUMBER$ [ i ] ) {
rank: 71
score: 99.52577427455357
patch: final int dp = p 1 [ i ] >= 0 ? p $NUMBER$ [ i ] : 0 ;
rank: 71
score: 99.52379150390625
patch: final int dp = p 1 [ i ] [ 0 ] - p $NUMBER$ [ i ] ;
rank: 71
score: 99.5186831825658
patch: double dp = p 1 : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 71
score: 99.51711801382211
patch: final int dp = p 1 [ i - 1 ] ;
rank: 71
score: 99.51106342516448
patch: int dp = distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 71
score: 99.48912138097427
patch: final short dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 72
score: 99.55531141493056
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ++ ] ;
rank: 72
score: 99.55332545230263
patch: int dp = p 1 [ i ] - p $NUMBER$ [ p $NUMBER$ [ i ] ;
rank: 72
score: 99.55279250372024
patch: if ( p 1 [ i ] + p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 72
score: 99.52362381784539
patch: final int [ ] i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 72
score: 99.5149787454044
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] *
rank: 73
score: 99.51670619419643
patch: final int dp = p 1 [ i ] ; dp ++ ;
rank: 73
score: 99.50863037109374
patch: int dp = p 1 [ i ] . length - p $NUMBER$ [ i ] . length ;
rank: 74
score: 99.55287388392857
patch: int dp = Math . min ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 74
score: 99.55063990542763
patch: final int dp = p 1 [ 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 74
score: 99.5214907997533
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - 0 ] ;
rank: 74
score: 99.50849066840277
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - $STRING$ ;
rank: 74
score: 99.48283835018383
patch: final int max = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 75
score: 99.5527576264881
patch: final double dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ) ;
rank: 75
score: 99.55265085320724
patch: int dp = p 1 [ i ] - p $NUMBER$ + p $NUMBER$ [ i ] ;
rank: 75
score: 99.52053833007812
patch: sum += Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 75
score: 99.51639811197917
patch: final int dp = p 1 [ i ] . - p $NUMBER$ [ i ] ;
rank: 75
score: 99.51515599300987
patch: final int dp = 0 - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 75
score: 99.5142822265625
patch: int dp = p 1 : p 1 [ i ] - p $NUMBER$ ;
rank: 75
score: 99.50799919577206
patch: final int name = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 75
score: 99.48259534333882
patch: final int dp = p 1 [ i ] - p 1 [ i ] . length ;
rank: 76
score: 99.55224609375
patch: if ( p 1 [ i ] <= p $NUMBER$ [ i ] ) {
rank: 76
score: 99.55053100585937
patch: final float dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 76
score: 99.54969371448864
patch: final int dp = p 1 , dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 76
score: 99.50593836167279
patch: int dp = p 1 [ i 1 ] - p $NUMBER$ [ i ] ;
rank: 77
score: 99.55022321428571
patch: final int dp = p 1 [ i ] - 1 $NUMBER$ ;
rank: 77
score: 99.5500821200284
patch: final int dp = Math . max ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 77
score: 99.54966517857143
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i + p $NUMBER$ [ i ] ;
rank: 77
score: 99.52283432904412
patch: final int dp = p 1 [ i ] & p 1 [ i ] ;
rank: 77
score: 99.51626925998264
patch: int [ ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 77
score: 99.50489566200658
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - 0 ;
rank: 77
score: 99.48129111842105
patch: l 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 78
score: 99.52179633246527
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ; ;
rank: 78
score: 99.51762952302632
patch: final int dp = ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 78
score: 99.51275024414062
patch: final int dp 1 = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 78
score: 99.48095703125
patch: VM i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 79
score: 99.51546020507813
patch: final int [ ] p 1 = p 1 [ i ] - p 1 [ i ] ;
rank: 79
score: 99.51250256990132
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i + 1 ] ;
rank: 79
score: 99.51067151521382
patch: final int dp = p 1 . $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 79
score: 99.50129250919117
patch: final int start = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 79
score: 99.48040771484375
patch: final int dp = p 1 [ i ] 1 - p $NUMBER$ [ i ] ;
rank: 80
score: 99.54579162597656
patch: if ( p 1 [ i ] > p $NUMBER$ [ i ] ) {
rank: 80
score: 99.52045288085938
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] [ i ] ;
rank: 80
score: 99.51577758789062
patch: final int dp = p 1 [ p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 80
score: 99.51518169202302
patch: final int dp = p 1 [ i ] ; dp = p $NUMBER$ [ i ] ;
rank: 80
score: 99.51175087376645
patch: final int dp = p 1 [ i + i ] - p $NUMBER$ [ i ] ;
rank: 80
score: 99.50403594970703
patch: sum += p 1 [ i ] * p $NUMBER$ [ i ] ; }
rank: 80
score: 99.50026448567708
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i $NUMBER$ ] ;
rank: 80
score: 99.48025851779514
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; else
rank: 81
score: 99.54831764914773
patch: final int dp = p 1 [ i + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 81
score: 99.54701538085938
patch: final int dp = p 1 [ i ] + p $NUMBER$ + p $NUMBER$ [ i ] ;
rank: 81
score: 99.5455810546875
patch: dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 81
score: 99.51987176192434
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] + 1 ;
rank: 81
score: 99.51470947265625
patch: final int p 1 = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 81
score: 99.50304412841797
patch: final int dp = p 1 [ i ] - p $NUMBER$ : 0 ;
rank: 81
score: 99.49971923828124
patch: int dp = p 1 [ i ] 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 81
score: 99.4800961143092
patch: final int dp = p 1 [ i ] ; sum += dp * dp * dp ;
rank: 82
score: 99.5478271484375
patch: sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 82
score: 99.54638671875
patch: final int dp = Math . max p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 82
score: 99.51502075195313
patch: final int dp = new int [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 82
score: 99.51144748263889
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - ] ;
rank: 82
score: 99.50285339355469
patch: final int dp = p 1 , dp = p 1 [ i ] ;
rank: 82
score: 99.49866440716912
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] -
rank: 82
score: 99.47974310980902
patch: final int p 1 = p 1 [ i ] - p 1 [ i ] ;
rank: 83
score: 99.5462979403409
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i / p $NUMBER$ [ i ] ;
rank: 83
score: 99.54497528076172
patch: int dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 83
score: 99.51413445723684
patch: final int dp = p 1 [ i ] ; dp = p 1 [ i ] ;
rank: 83
score: 99.51173159950658
patch: final int dp = $STRING$ - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 83
score: 99.51063232421875
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i 1 - i ] ;
rank: 83
score: 99.50201056985294
patch: int dp = p 1 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 83
score: 99.4977294921875
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] $NUMBER$ [ i ] ;
rank: 84
score: 99.54470985814145
patch: final Big CaMeL Integer dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 84
score: 99.51813616071429
patch: float dp = Math . min ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 84
score: 99.51303280101104
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ $NUMBER$ ] ;
rank: 84
score: 99.51163330078126
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i $NUMBER$ [ i ] ;
rank: 84
score: 99.51058156866776
patch: int dp = p 1 [ i ] ; int dp = p 1 [ i ] ;
rank: 84
score: 99.47893732244319
patch: final int dp = Math . sqrt ( p 1 [ i ] - p 1 [ i ] ) ;
rank: 85
score: 99.54690372242646
patch: { int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 85
score: 99.54433306525735
patch: int dp = p 1 [ i ] ] - p $NUMBER$ [ i ] ;
rank: 85
score: 99.54329427083333
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i * p $NUMBER$ [ i ] ;
rank: 85
score: 99.51751999627976
patch: final int dp = p $NUMBER$ [ i ] ; final int dp = p 1 [ i ] ;
rank: 85
score: 99.51128472222223
patch: final int dp = p 1 [ i ] ) - p $NUMBER$ [ i ] ;
rank: 85
score: 99.51025390625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 + 1 ] ;
rank: 85
score: 99.49717310855263
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - sum ;
rank: 85
score: 99.47872585720486
patch: Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 86
score: 99.54573567708333
patch: distance = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 86
score: 99.540380859375
patch: final int dp = p 1 [ i ] - p $NUMBER$ | p $NUMBER$ [ i ] ;
rank: 86
score: 99.5127685546875
patch: if p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 86
score: 99.50901392886513
patch: final int dp = p 1 [ i - 1 ] + p $NUMBER$ [ i ] ;
rank: 86
score: 99.49442784926471
patch: final int final = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 86
score: 99.4783871299342
patch: final int dp = p 1 [ i ] - $STRING$ + p $NUMBER$ [ i ] ;
rank: 87
score: 99.54339890252976
patch: dp = p 1 [ i ] - p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 87
score: 99.50871196546052
patch: final int dp = p 1 [ i ] + p 1 [ i - 1 ] ;
rank: 88
score: 99.54454985119048
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ - $NUMBER$ ] ;
rank: 88
score: 99.54338522518383
patch: final Double dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 88
score: 99.53926355698529
patch: final int dp = p 1 [ i ] < p $NUMBER$ [ i ] ;
rank: 88
score: 99.51591564360119
patch: final int dp = p 1 [ i ] == p $NUMBER$ [ i ] ? 1 : 0 ;
rank: 88
score: 99.51221381293402
patch: final int [ ] dp = ( int [ ] ) p 1 [ i ] ;
rank: 88
score: 99.49405924479167
patch: int dp = p 1 [ i + 1 ] - p $NUMBER$ [ i ] ;
rank: 88
score: 99.47742280505952
patch: final int dp = p 1 [ i ] - p 1 [ i ] ; sum += dp ;
rank: 89
score: 99.53897897820724
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + 0 ;
rank: 89
score: 99.51579846833882
patch: dp $NUMBER$ [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 89
score: 99.51209852430556
patch: final int [ ] dp = ( int [ ] ) p $NUMBER$ [ i ] ;
rank: 89
score: 99.49449247472427
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ?
rank: 89
score: 99.49337948069854
patch: int dp 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 89
score: 99.47506277901786
patch: final int dp = p 1 . iterator ( ) [ i ] - p $NUMBER$ [ i ] ;
rank: 90
score: 99.54335423519737
patch: p 1 [ i ] = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 90
score: 99.54264322916667
patch: sum = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 90
score: 99.51547080592105
patch: if ( p 1 [ i ] < p 1 [ i ] ) { continue ; }
rank: 90
score: 99.5120620727539
patch: int dp = p 1 [ i ] + p 1 [ i ] ;
rank: 90
score: 99.50526258680556
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ] ;
rank: 90
score: 99.4931640625
patch: sum += distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ; }
rank: 91
score: 99.54331752232143
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] == p $NUMBER$ [ i ] ;
rank: 91
score: 99.5103400735294
patch: final int dp = p 1 [ i ] . p $NUMBER$ [ i ] ;
rank: 91
score: 99.50526187294408
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + 0 ] ;
rank: 91
score: 99.49169921875
patch: sum += sum * dp 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 91
score: 99.47369063527961
patch: l $NUMBER$ [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 92
score: 99.53975053267045
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - p $NUMBER$ [ i ] ;
rank: 92
score: 99.51425316220238
patch: final int dp = p 1 [ i ] != null ? p $NUMBER$ [ i ] : 0 ;
rank: 92
score: 99.50956645764802
patch: final int dp = p 1 [ i ] - 0 + p $NUMBER$ [ i ] ;
rank: 92
score: 99.50244903564453
patch: final int dp = p 1 [ i ] - 1 [ i ] ;
rank: 92
score: 99.49131266276042
patch: sum += dp = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 92
score: 99.48909912109374
patch: final int dp = int ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 93
score: 99.50350341796874
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ $NUMBER$ ] ;
rank: 93
score: 99.50238037109375
patch: final int dp = p 1 [ i ] - p $NUMBER$ - p 1 [ i ] ;
rank: 93
score: 99.4911750344669
patch: sum += p 1 . [ i ] - p $NUMBER$ [ i ] ; }
rank: 93
score: 99.48828803168402
patch: int dp = p 1 [ i - 1 ] - p $NUMBER$ [ i ] ;
rank: 94
score: 99.54139927455357
patch: final int dp = p 1 [ i ] - System . identity CaMeL Hash CaMeL Code ( ) ;
rank: 94
score: 99.5387295809659
patch: double dp = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 94
score: 99.50265502929688
patch: final int dp = p 1 [ i + p 1 [ i ] ;
rank: 94
score: 99.4987060546875
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 - 0 ] ;
rank: 94
score: 99.49013157894737
patch: double dp = p 1 : p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 94
score: 99.47301528033088
patch: final int dp = mod 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 95
score: 99.54053452435662
patch: final int dp = p 1 [ i ] - i $NUMBER$ [ i ] ;
rank: 95
score: 99.53866916232639
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ - i ] ;
rank: 95
score: 99.50845497532895
patch: final int dp = p 1 [ i ] + 0 + p $NUMBER$ [ i ] ;
rank: 95
score: 99.50156860351562
patch: final int p $NUMBER$ [ ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 95
score: 99.489990234375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : 0
rank: 95
score: 99.48778076171875
patch: int dp = [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 95
score: 99.47166806175595
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - p $NUMBER$ . length ;
rank: 96
score: 99.53937639508929
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] > p $NUMBER$ [ i ] ;
rank: 96
score: 99.51005045572917
patch: final int int dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 96
score: 99.50714789496527
patch: dp [ i ] = p 1 [ i ] - p 1 [ i ] ;
rank: 96
score: 99.46989360608552
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; break ;
rank: 97
score: 99.53818969726562
patch: final int [ ] dp $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 97
score: 99.52988568474265
patch: final int dp -= p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 97
score: 99.50607139185855
patch: final int [ ] p 1 = ( int [ ] ) p $NUMBER$ [ i ] ;
rank: 97
score: 99.46955309416118
patch: l $NUMBER$ [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 98
score: 99.53835161994485
patch: final Integer dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 98
score: 99.504541015625
patch: dp += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 98
score: 99.49791259765625
patch: final int dp = p 1 [ i ] ; double dp = p 1 [ i ] ;
rank: 98
score: 99.4871597290039
patch: sum += dp 1 : p 1 [ i ] - p $NUMBER$ ; }
rank: 98
score: 99.48621961805556
patch: int dp = this . p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 99
score: 99.53797104779412
patch: this . dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 99
score: 99.53673206676136
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ p $NUMBER$ . length - 1 ] ;
rank: 99
score: 99.52916899181548
patch: final int [ ] [ ] dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 99
score: 99.50874255952381
patch: final int dp = p 1 [ i ] == p $NUMBER$ [ i ] ? 0 : 0 ;
rank: 99
score: 99.49770779079861
patch: final final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 99
score: 99.48619249131944
patch: int dp = p 1 [ i ] . length - p $NUMBER$ [ i ] ;
rank: 99
score: 99.48431396484375
patch: sum += ( p 1 [ i ] - p $NUMBER$ [ i ] ) ; }
rank: 99
score: 99.46735975477431
patch: final int dp = p 1 [ i ] - p $NUMBER$ . [ i ] ;
rank: 100
score: 99.5081851356908
patch: final int dp = Math . min ( p 1 , p $NUMBER$ [ i ] ) ;
rank: 100
score: 99.49766845703125
patch: final final int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 101
score: 99.53738839285714
patch: if ( p 1 [ i ] + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 101
score: 99.5361095610119
patch: final int dp = p 1 [ i ] 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 101
score: 99.50794813368056
patch: final int dp = p 1 [ i ] 1 [ p $NUMBER$ [ i ] ;
rank: 101
score: 99.49704461348684
patch: final int dp = p 1 [ i ] / p $NUMBER$ [ i + 1 ] ;
rank: 101
score: 99.46516498766448
patch: final int dp = p 1 [ i ] - $STRING$ ; sum += dp * dp ;
rank: 102
score: 99.50607299804688
patch: final int dp = p 1 [ i ] , p 1 = p 1 [ i ] ;
rank: 102
score: 99.50143612132354
patch: final int dp = p 1 [ i ] : p $NUMBER$ [ i ] ;
rank: 102
score: 99.49662057976974
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 0 + i ] ;
rank: 102
score: 99.49270450367646
patch: final int break = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 102
score: 99.48129272460938
patch: dp = p 1 . [ i ] - p $NUMBER$ [ i ] ;
rank: 102
score: 99.46418200041118
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . start ;
rank: 103
score: 99.50533447265624
patch: dp 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 103
score: 99.49898071289063
patch: final int dp = p 1 [ i ] [ i ] - p 1 [ i ] ;
rank: 103
score: 99.49564302884616
patch: final int dp = p 1 [ i ] - $STRING$ ;
rank: 103
score: 99.48350830078125
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp ;
rank: 103
score: 99.48055267333984
patch: sum += dp $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 104
score: 99.53563774956598
patch: final int dp ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 104
score: 99.5343505859375
patch: final Big CaMeL Integer p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 104
score: 99.49779595269098
patch: int dp [ ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 104
score: 99.49495849609374
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ; dp ++ ;
rank: 104
score: 99.48253631591797
patch: final dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 104
score: 99.4802310341283
patch: int dp = p 1 [ i ] - p $NUMBER$ : p $NUMBER$ [ i ] ;
rank: 104
score: 99.46251763237848
patch: list [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 105
score: 99.53415749289773
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 105
score: 99.49427554481908
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 1 - i ] ;
rank: 105
score: 99.4798519736842
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + $NUMBER$ ;
rank: 105
score: 99.47940063476562
patch: final p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 105
score: 99.46159811580883
patch: final int i = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 106
score: 99.53336588541667
patch: final int dp = p 1 [ i ] + System . current CaMeL Time CaMeL Millis ( ) ;
rank: 106
score: 99.52524285567434
patch: final int dp = compare = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 106
score: 99.49352416992187
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - - i ] ;
rank: 106
score: 99.47929944490132
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : $NUMBER$ ;
rank: 106
score: 99.47904052734376
patch: int dp = int [ ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 106
score: 99.46133083767361
patch: final int dp ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 107
score: 99.4786376953125
patch: int dp = p 1 [ i + $NUMBER$ ] - p $NUMBER$ [ i ] ;
rank: 107
score: 99.45866394042969
patch: Point dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 108
score: 99.53270321800595
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { return - 1 ; }
rank: 108
score: 99.50276692708333
patch: double dp = Math . max ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 108
score: 99.49664984809027
patch: final int dp = ( p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 108
score: 99.49241943359375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 + i ] ;
rank: 108
score: 99.45807206003289
patch: final int dp p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 109
score: 99.5313949584961
patch: if ( p 1 [ i ] != p $NUMBER$ [ i ] ) {
rank: 109
score: 99.53128487723214
patch: for ( int i = 0 - $NUMBER$ ; i < p 1 . length ; i ++ ) {
rank: 109
score: 99.50275530133929
patch: long dp = Math . min ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 109
score: 99.4923583984375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + - i ] ;
rank: 109
score: 99.48958093979779
patch: final int dp = p 1 [ i ] ; sum += dp * dp ;
rank: 109
score: 99.47766723632813
patch: int dp = int [ ] + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 109
score: 99.45747302827381
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . get ( ) ;
rank: 110
score: 99.52381656044408
patch: final int dp = Math . dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 110
score: 99.502685546875
patch: final int dp = p 1 [ i ] == 0 ? 0 : p $NUMBER$ [ i ] ;
rank: 110
score: 99.49585723876953
patch: p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 110
score: 99.47861842105263
patch: sum += dp 1 : p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 110
score: 99.4572420987216
patch: final int dp = p 1 . length - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 111
score: 99.53067819695724
patch: final int dp = p 1 [ i ] + $STRING$ + p $NUMBER$ [ i ] ;
rank: 111
score: 99.47854178292411
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ]
rank: 111
score: 99.4571597450658
patch: final int dp = p 1 [ i - 1 ] - p 1 [ i ] ;
rank: 112
score: 99.53066119025735
patch: final double dp = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 112
score: 99.5296297940341
patch: for ( int i = 0 ; i < dp $NUMBER$ [ i ] . length ; i ++ ) {
rank: 112
score: 99.52230834960938
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 112
score: 99.49459402901786
patch: final int [ ] p 1 = p $NUMBER$ [ i ] ;
rank: 112
score: 99.45648484002976
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + p $NUMBER$ . length ;
rank: 113
score: 99.52796630859375
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ p $NUMBER$ [ i ] ;
rank: 113
score: 99.50132992393092
patch: dp $NUMBER$ [ i ] = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 113
score: 99.48627672697368
patch: final int dp = p 1 [ i - 0 ] - p $NUMBER$ [ i ] ;
rank: 113
score: 99.45566277754934
patch: final int dp = p 1 [ i + 1 ] - p 1 [ i ] ;
rank: 114
score: 99.52803178267045
patch: final int dp = p 1 , dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 114
score: 99.5272216796875
patch: final int dp = p 1 [ i ] - 1 - p $NUMBER$ [ i ] ;
rank: 114
score: 99.52128462357955
patch: final int dp = p 1 [ i ] - p $NUMBER$ , i = p $NUMBER$ [ i ] ;
rank: 114
score: 99.49013384650735
patch: final int dp = null ; final int dp = p 1 [ i ] ;
rank: 114
score: 99.47548217773438
patch: final int dp = p 1 - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 114
score: 99.45534380744485
patch: final char dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 115
score: 99.52715773809524
patch: sum += dp 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 115
score: 99.52705310639881
patch: dp = p 1 [ i ] + p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 115
score: 99.51777086759868
patch: final int dp = 0 - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 115
score: 99.49838402157738
patch: final int dp = p 1 [ i ] ; final float dp = p 1 [ i ] ;
rank: 115
score: 99.48989529079861
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 115
score: 99.47570082720588
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] )
rank: 115
score: 99.4753646850586
patch: final int dp = p 1 [ i ] - $NUMBER$ [ i ] ;
rank: 116
score: 99.52638872931985
patch: final float dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 116
score: 99.52577903053977
patch: for ( int i = 1 ; i < p 1 [ i ] . length ; i ++ ) {
rank: 116
score: 99.49745483398438
patch: final int dp = p 1 [ p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 116
score: 99.48719482421875
patch: final int dp 1 = p 1 [ i ] - p $NUMBER$ [ i + 1 ] ;
rank: 116
score: 99.48265729631696
patch: final int dp = p 1 + p $NUMBER$ [ i ] ;
rank: 116
score: 99.47499486019737
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ; } return sum ;
rank: 116
score: 99.4747673483456
patch: final int dp = final 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 117
score: 99.52635498046875
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { sum ++ ; }
rank: 117
score: 99.49712844122024
patch: final int dp = p 1 [ i ] == 0 ? 0 : p 1 [ i ] ;
rank: 117
score: 99.48189051011029
patch: final int dp = p 1 , p $NUMBER$ = p $NUMBER$ [ i ] ;
rank: 117
score: 99.47484588623047
patch: double dp = p 1 : p 1 [ i ] - p $NUMBER$ ;
rank: 117
score: 99.45343981291118
patch: final int dp = p 1 [ i + $NUMBER$ ] - p 1 [ i ] ;
rank: 118
score: 99.52594315378289
patch: if ( p 1 [ i ] <= p $NUMBER$ [ i ] ) { continue ; }
rank: 118
score: 99.52504660866477
patch: int sum = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 118
score: 99.51594094669117
patch: final int dp = max 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 118
score: 99.4933849516369
patch: final int dp = p $NUMBER$ [ i ] ; final int dp = p $NUMBER$ [ i ] ;
rank: 118
score: 99.49128160978618
patch: final int [ ] dp = p 1 [ i ] + p 1 [ i ] ;
rank: 118
score: 99.48575168185764
patch: final int dp 1 = p 1 [ i ] - p 1 [ i ] ;
rank: 118
score: 99.48127184416118
patch: final int dp = p 1 [ i ] ; sum += p $NUMBER$ [ i ] ;
rank: 119
score: 99.51540305397727
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i * p 1 [ i ] ;
rank: 119
score: 99.48895263671875
patch: int dp = p 1 [ i ] ; final int dp = p $NUMBER$ [ i ] ;
rank: 119
score: 99.48542223478618
patch: final int dp = p 1 [ i ] / p $NUMBER$ [ i - 1 ] ;
rank: 119
score: 99.47335994944854
patch: sum += p 1 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 119
score: 99.47293429904514
patch: final final int dp = p 1 [ i ] - p 1 [ i ] ;
rank: 120
score: 99.52491396949405
patch: final int dp = p 1 [ i ] - System . $NUMBER$ / p $NUMBER$ [ i ] ;
rank: 120
score: 99.52340087890624
patch: return Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ; }
rank: 120
score: 99.48538208007812
patch: final int dp = p 1 [ i ] + p $NUMBER$ - p $NUMBER$ [ i ] ;
rank: 120
score: 99.47286826685855
patch: final int dp = p 1 [ i ] . length - p 1 [ i ] ;
rank: 120
score: 99.4515380859375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum ++ ;
rank: 121
score: 99.52427455357143
patch: final int dp = Math . min ( p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 121
score: 99.52294921875
patch: final int dp = p 1 , dp += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 121
score: 99.48841552734375
patch: final int [ ] p 1 = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 121
score: 99.48463841488487
patch: final int dp = p 1 [ i ] ; if = p $NUMBER$ [ i ] ;
rank: 121
score: 99.47286648220486
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + ] ;
rank: 122
score: 99.52276252297794
patch: i int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 122
score: 99.51123046875
patch: final int dp = 0 ; int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 122
score: 99.49037798713235
patch: final int dp = p 1 [ i ] . int CaMeL Value ( ) ;
rank: 122
score: 99.48787006578948
patch: final int [ ] p 1 = ( int [ ] ) p 1 [ i ] ;
rank: 122
score: 99.4845034950658
patch: final int dp = Math = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 122
score: 99.48025851779514
patch: final int dp = p 1 . [ i ] - p 1 [ i ] ;
rank: 122
score: 99.47231158088235
patch: final int dp = dp 1 [ i ] - p 1 [ i ] ;
rank: 122
score: 99.47227718955592
patch: final int dp = p 1 [ i ] , dp = p $NUMBER$ [ i ] ;
rank: 122
score: 99.44908905029297
patch: double sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 123
score: 99.52287946428571
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ p $NUMBER$ [ p $NUMBER$ ] ;
rank: 123
score: 99.52239435369319
patch: for ( int i = 1 ; i < p $NUMBER$ [ i ] . length ; i ++ ) {
rank: 123
score: 99.51117234002976
patch: final int dp = Math . max = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 123
score: 99.48952122738487
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] - 1 ;
rank: 123
score: 99.4843017578125
patch: final int dp = p $NUMBER$ [ i ] ; int dp = p 1 [ i ] ;
rank: 123
score: 99.4716796875
patch: final int dp = p 1 [ i ] - p $NUMBER$ : 1 ;
rank: 123
score: 99.47157046669408
patch: int dp = p 1 [ i ] . distance ( p $NUMBER$ [ i ] ) ;
rank: 123
score: 99.44765837296195
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 124
score: 99.52264694940476
patch: final int dp = p 1 [ i ] - System . out . to CaMeL String ( ) ;
rank: 124
score: 99.52159830729167
patch: i += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 124
score: 99.4894787016369
patch: final int dp = p 1 [ i ] ; final float dp = p $NUMBER$ [ i ] ;
rank: 124
score: 99.48599403782895
patch: final int [ ] dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 124
score: 99.47134399414062
patch: final int dp = p 1 [ i ] < p $NUMBER$ [ i ]
rank: 124
score: 99.47061317845395
patch: int dp = int 1 [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 125
score: 99.52207253196023
patch: final int dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ) ; ;
rank: 125
score: 99.47805989583334
patch: sum += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 125
score: 99.47126850328948
patch: final int dp = p 1 . distance [ i ] - p $NUMBER$ [ i ] ;
rank: 125
score: 99.4471499794408
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . 0 ;
rank: 126
score: 99.52167038690476
patch: dp = p 1 [ i ] - p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 126
score: 99.51956787109376
patch: for ( int [ ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 126
score: 99.48609561011905
patch: final int dp = ( p 1 [ i ] - p $NUMBER$ [ i ] ) - 1 ;
rank: 126
score: 99.47732364430146
patch: final int dp = p 1 , p $NUMBER$ = p 1 [ i ] ;
rank: 126
score: 99.47028944227431
patch: final int dp = p 1 [ i ] 0 - p $NUMBER$ [ i ] ;
rank: 126
score: 99.44710286458333
patch: final int dp = p 1 [ i ++ ] - p $NUMBER$ [ i ] ;
rank: 127
score: 99.51824592141544
patch: final int dp = p 1 [ i ] - max $NUMBER$ [ i ] ;
rank: 127
score: 99.48592979029605
patch: for ( int i = 0 ; i < p 1 [ i ] ; i ++ )
rank: 127
score: 99.48372156479779
patch: final int dp = p 1 [ 0 ] - p 1 [ i ] ;
rank: 127
score: 99.47730712890625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + [ i ] ;
rank: 127
score: 99.4700927734375
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - $NUMBER$ ;
rank: 127
score: 99.44704367897727
patch: final int dp = p 1 . length - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 128
score: 99.5095547762784
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] + p 1 [ i ] ;
rank: 128
score: 99.48328399658203
patch: int dp = p 1 [ i ] - p $NUMBER$ [ 0 ] ;
rank: 128
score: 99.48236443014706
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 ;
rank: 128
score: 99.47703857421875
patch: final int dp = p 1 [ i ] [ $NUMBER$ ] - p $NUMBER$ [ i ] ;
rank: 128
score: 99.4698550575658
patch: final int dp = p 1 : p $NUMBER$ [ i ] - p $NUMBER$ [ i ]
rank: 129
score: 99.52118210565476
patch: final float dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ) ;
rank: 129
score: 99.50947840073529
patch: final Float dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 129
score: 99.48444475446429
patch: final int dp = p $NUMBER$ [ i ] == null ? 0 : p 1 [ i ] ;
rank: 129
score: 99.48236083984375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - - $NUMBER$ ] ;
rank: 129
score: 99.4689582375919
patch: int dp = p 1 [ i ] - p $NUMBER$ [ [ i ] ;
rank: 129
score: 99.4454345703125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum +=
rank: 130
score: 99.52100219726563
patch: p $NUMBER$ [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 130
score: 99.50891723632813
patch: final int dp = p 1 [ i ] - p $NUMBER$ * p 1 [ i ] ;
rank: 130
score: 99.48431687127976
patch: long dp = Math . max ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 130
score: 99.48229262408088
patch: final String dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 130
score: 99.47596028645833
patch: sum += p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 130
score: 99.46759996916118
patch: int dp = new int [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 130
score: 99.44399879092262
patch: int dp = Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 131
score: 99.52011287913604
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; ;
rank: 131
score: 99.51495361328125
patch: if ( p 1 [ i ] >= p $NUMBER$ [ i ] ) {
rank: 131
score: 99.48409873560855
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] + $STRING$ ;
rank: 131
score: 99.48199141652961
patch: final int [ ] dp = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 131
score: 99.475
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ ;
rank: 131
score: 99.46900092230902
patch: dp = p 1 : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 132
score: 99.51982964409723
patch: final int dp = p 1 [ i ] ] + p $NUMBER$ [ i ] ;
rank: 132
score: 99.51427001953125
patch: this . distance [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 132
score: 99.48361687911184
patch: if ( p 1 [ i ] > p $NUMBER$ [ i ] ) { continue ; }
rank: 132
score: 99.48102127878289
patch: final int dp = Math + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 132
score: 99.47489420572917
patch: / * int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 132
score: 99.4418881064967
patch: final int dp = p 1 [ i - $NUMBER$ ] - p 1 [ i ] ;
rank: 133
score: 99.51966050091912
patch: final int dp = p 1 [ i ] + i $NUMBER$ [ i ] ;
rank: 133
score: 99.48165732935855
patch: final int dp = this . p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 133
score: 99.4808349609375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + 1 ;
rank: 133
score: 99.4747314453125
patch: final int dp = p 1 [ int $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 134
score: 99.4814453125
patch: final int [ ] p $NUMBER$ = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 134
score: 99.48029528166118
patch: final int dp = p 1 [ i ] + $STRING$ - p $NUMBER$ [ i ] ;
rank: 134
score: 99.46731728001645
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i 1 [ i ] ;
rank: 134
score: 99.44152153862848
patch: final int dp = p 1 [ i ] - p 1 [ i ] ; int
rank: 135
score: 99.519287109375
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] < p 1 [ i ] ) {
rank: 135
score: 99.4830681295956
patch: final int 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 135
score: 99.48013070913461
patch: final int dp = p 1 [ i + 1 ] ;
rank: 135
score: 99.46717664930556
patch: final int dp = p 1 [ [ i ] - p 1 [ i ] ;
rank: 135
score: 99.46715545654297
patch: sum += p 1 : p $NUMBER$ [ i ] - p $NUMBER$ ; }
rank: 135
score: 99.44138502038044
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum = dp * dp ;
rank: 136
score: 99.51926491477273
patch: final int dp = p 1 [ i ] . compare CaMeL To ( p $NUMBER$ [ i ] ) ;
rank: 136
score: 99.4821026141827
patch: final int dp = p 1 [ i ] - i ;
rank: 137
score: 99.51788884943181
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ p 1 . length - 1 ] ;
rank: 137
score: 99.51211402529762
patch: int dp = p 1 [ i + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 137
score: 99.48190646701389
patch: final int dp $NUMBER$ = p 1 [ i ] - p 1 [ i ] ;
rank: 137
score: 99.47322805304276
patch: final int dp = p 1 . . [ i ] - p $NUMBER$ [ i ] ;
rank: 137
score: 99.46507504111842
patch: sum += p 1 : p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 138
score: 99.51703202097039
patch: if ( p 1 [ i ] != p $NUMBER$ [ i ] ) { continue ; }
rank: 138
score: 99.50570518092105
patch: final int dp = Double . p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 138
score: 99.47906853170956
patch: final int dp = p 1 [ i ] ; final int dp = 0 ;
rank: 138
score: 99.47893965871711
patch: dp [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 138
score: 99.46600341796875
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ ,
rank: 138
score: 99.46447075737848
patch: final int dp = p 1 [ i ] [ - p $NUMBER$ [ i ] ;
rank: 138
score: 99.4405517578125
patch: final int dp = this . p 1 [ i ] - p 1 [ i ] ;
rank: 139
score: 99.50460379464286
patch: final int dp = p 1 [ i ] - p $NUMBER$ ;
rank: 139
score: 99.4654296875
patch: final int dp = p 1 [ i ] . distance ( p 1 [ i ] ) ;
rank: 139
score: 99.43984087775735
patch: double p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 140
score: 99.51491411994485
patch: final double dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 140
score: 99.50450439453125
patch: for p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 140
score: 99.47809801603618
patch: final double [ ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 140
score: 99.47086827895221
patch: final int dp : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 140
score: 99.46387481689453
patch: final int dp = p 1 - i - p $NUMBER$ [ i ] ;
rank: 140
score: 99.43979220920139
patch: final int dp -- = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 141
score: 99.51435289884868
patch: int dp = p 1 [ i ] - p $NUMBER$ [ p 1 [ i ] ;
rank: 141
score: 99.48158892463235
patch: final int dp = p 1 [ i ] > p $NUMBER$ [ i ] ;
rank: 141
score: 99.47783203125
patch: final int < Integer > dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 141
score: 99.47761535644531
patch: final int dp = p 1 [ i ] - 0 [ i ] ;
rank: 141
score: 99.4708316200658
patch: final / * int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 141
score: 99.46475219726562
patch: final int dp = dp [ i ] - p $NUMBER$ [ i ] ;
rank: 142
score: 99.51358032226562
patch: int dp = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 142
score: 99.50904083251953
patch: int dp = p 1 [ i ] - p $NUMBER$ [ 1 ] ;
rank: 142
score: 99.48157456341912
patch: int dp $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 142
score: 99.46031996783088
patch: final int dp = distance 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 142
score: 99.43943277994792
patch: list [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 143
score: 99.5135498046875
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] / p $NUMBER$ [ i ] ;
rank: 143
score: 99.47734631990132
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 143
score: 99.46416473388672
patch: int dp = int 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 143
score: 99.46006864659927
patch: double dp = p 1 . [ i ] - p $NUMBER$ [ i ] ;
rank: 143
score: 99.43938245271382
patch: v 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 144
score: 99.51271057128906
patch: double dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 144
score: 99.50838216145833
patch: distance [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 144
score: 99.50255237926136
patch: final int dp = p 1 [ i ] - p $NUMBER$ . i - p $NUMBER$ [ i ] ;
rank: 144
score: 99.47642211914062
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ] ;
rank: 144
score: 99.4592056274414
patch: sum = dp 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 144
score: 99.43917410714286
patch: final int dp = p 1 [ i ] $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 145
score: 99.51216264204545
patch: final int dp = p 1 [ i ] - System . identity CaMeL Hash CaMeL Code ( $NUMBER$ ) ;
rank: 145
score: 99.50820743336396
patch: final int dp = p 1 [ i ] - min $NUMBER$ [ i ] ;
rank: 145
score: 99.47971705386513
patch: dp 1 [ i ] = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 145
score: 99.47667694091797
patch: final int [ ] dp = new int [ p 1 [ i ] ;
rank: 145
score: 99.476416015625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 - 1 ;
rank: 145
score: 99.45904541015625
patch: sum += p 1 [ i ] / p $NUMBER$ [ i ] ; }
rank: 146
score: 99.5111083984375
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) continue ;
rank: 146
score: 99.50806773792614
patch: for ( int dp = 0 ; dp < p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 146
score: 99.50205775669643
patch: final int dp = p 1 [ i - 1 ] - p $NUMBER$ [ i - 1 ] ;
rank: 146
score: 99.47647255345395
patch: int dp = p 1 [ i ] [ i ] - p $NUMBER$ [ i ] ;
rank: 146
score: 99.47615774054276
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + 1 ) ;
rank: 146
score: 99.46890462239584
patch: final int dp = p 1 ) - p $NUMBER$ [ i ] ;
rank: 146
score: 99.46315630744485
patch: final int min = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 146
score: 99.43809925426136
patch: final int dp = Math . sqrt ( p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ) ;
rank: 147
score: 99.5108975497159
patch: final int dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ) ] ;
rank: 147
score: 99.50188337053571
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i / p $NUMBER$ [ i ] ;
rank: 147
score: 99.47542114257813
patch: final int dp = p 1 [ i ] - p $NUMBER$ . p $NUMBER$ [ i ] ;
rank: 147
score: 99.46797260485198
patch: final int dp = p 1 [ i ] - $NUMBER$ - p $NUMBER$ [ i ] ;
rank: 147
score: 99.45882839626736
patch: final int dp = p 1 [ i ] - [ p $NUMBER$ [ i ] ;
rank: 147
score: 99.43734741210938
patch: double dp = p 1 [ i ] - p 1 [ i ] ;
rank: 148
score: 99.51080643503289
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ) { break ; }
rank: 148
score: 99.47880626860119
patch: float dp = Math . max ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 148
score: 99.46773681640624
patch: final int dp = p 1 [ i $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 148
score: 99.46228637695313
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + p 1 ] ;
rank: 148
score: 99.45855353860294
patch: sum * dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 148
score: 99.43688286675348
patch: final int dp = p 1 [ i ] $NUMBER$ - p $NUMBER$ [ i ] ;
rank: 149
score: 99.51078657670455
patch: if ( p 1 [ i ] . equals ( p $NUMBER$ [ i ] ) ) { continue ; }
rank: 149
score: 99.50552707248264
patch: for ( int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 149
score: 99.50093994140624
patch: final double dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 149
score: 99.4785388764881
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] $NUMBER$ [ i ] ;
rank: 149
score: 99.47552490234375
patch: final int < int > dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 149
score: 99.47536892361111
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - $NUMBER$ ;
rank: 149
score: 99.45838687294408
patch: final int dp = p 1 1 . [ i ] - p $NUMBER$ [ i ] ;
rank: 149
score: 99.43624717310855
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . max ;
rank: 150
score: 99.51036487926136
patch: final int dp = p 1 [ i ] . index CaMeL Of ( p $NUMBER$ [ i ] ) ;
rank: 150
score: 99.50017755681819
patch: final int dp = p 1 [ i ] - p 1 [ i * p $NUMBER$ [ i ] ;
rank: 150
score: 99.47521254595588
patch: final int dp = p 1 [ i ] / p 1 [ i ] ;
rank: 150
score: 99.46672227647569
patch: final int dp ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 150
score: 99.46187097886029
patch: final int key = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 150
score: 99.45808490953948
patch: final int dp = p 1 : p 1 [ i ] [ - p $NUMBER$ ] ;
rank: 150
score: 99.43623182508681
patch: final int dp = p 1 [ i ] - p 1 [ i ] ; final
rank: 151
score: 99.50983072916667
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ;
rank: 151
score: 99.47520751953125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + 1 1 ] ;
rank: 151
score: 99.4608090049342
patch: int dp = p 1 [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 152
score: 99.50981140136719
patch: if ( p 1 [ i ] < p 1 [ i ] ) {
rank: 152
score: 99.50390625
patch: { { final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 152
score: 99.478076171875
patch: dp $NUMBER$ [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 152
score: 99.47488742404514
patch: final int dp = p 1 [ i ] + - p $NUMBER$ [ i ] ;
rank: 152
score: 99.47396850585938
patch: final int dp = p 1 [ i ] p $NUMBER$ [ i ] ;
rank: 152
score: 99.45640462239584
patch: return p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 152
score: 99.43546549479167
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; ++
rank: 153
score: 99.50953504774306
patch: if ; int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 153
score: 99.49894409179687
patch: final float dp = p 1 [ i ] - p $NUMBER$ + p $NUMBER$ [ i ] ;
rank: 153
score: 99.4748470908717
patch: final int dp = p 1 [ i + 1 ] + p $NUMBER$ [ i ] ;
rank: 153
score: 99.47257915296052
patch: final int dp = p 1 [ i ] - $NUMBER$ + p $NUMBER$ [ i ] ;
rank: 153
score: 99.45564270019531
patch: final int dp = p 1 : p 1 [ i ] . length ;
rank: 153
score: 99.43514251708984
patch: float dp = p 1 [ i ] - p 1 [ i ] ;
rank: 154
score: 99.50308082217262
patch: this . dp 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 154
score: 99.49820709228516
patch: final int dp = 0 [ i ] - p 1 [ i ] ;
rank: 154
score: 99.47705078125
patch: if ( p 1 [ i ] != p 1 [ i ] ) { continue ; }
rank: 154
score: 99.47473754882813
patch: final final int dp = p 1 [ i ] - p $NUMBER$ [ i + 1 ] ;
rank: 154
score: 99.4590087890625
patch: int dp = dp [ i ] - p $NUMBER$ [ i ] ;
rank: 154
score: 99.45530870225694
patch: final int dp = p 1 . [ i ] + p $NUMBER$ [ i ] ;
rank: 154
score: 99.43513319227431
patch: final int dp 1 = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 155
score: 99.50272042410714
patch: if ( Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ) {
rank: 155
score: 99.47626696134868
patch: final int dp = 1 [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 155
score: 99.47430098684211
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 1 + i ] ;
rank: 155
score: 99.47128475413604
patch: final int dp = exp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 155
score: 99.4546760110294
patch: final int dp = p 1 : p $NUMBER$ [ i ] - p $NUMBER$ ;
rank: 155
score: 99.43471165707237
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; final int
rank: 156
score: 99.5072021484375
patch: final double dp = p 1 [ i ] ] - p $NUMBER$ [ i ] ;
rank: 156
score: 99.50245250355114
patch: int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 156
score: 99.47579345703124
patch: dp = Math . min ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 156
score: 99.47403658353366
patch: final int dp = p 1 [ i - i ] ;
rank: 156
score: 99.4696109169408
patch: final int dp = p 1 [ i ] + $NUMBER$ + p $NUMBER$ [ i ] ;
rank: 156
score: 99.45821804470486
patch: final int p 1 = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 156
score: 99.43471165707237
patch: final int dp = $STRING$ + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 157
score: 99.50705788352273
patch: int dp = p 1 [ i ] + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 157
score: 99.49803161621094
patch: final int dp = p 1 [ i ] - p $NUMBER$ . i ;
rank: 157
score: 99.46932180304276
patch: final int dp [ ] = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 157
score: 99.4625
patch: final int dp = p 1 < p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 157
score: 99.45814819335938
patch: int dp = p 1 ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 157
score: 99.45404815673828
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ]
rank: 158
score: 99.50653686523438
patch: p 1 [ i ] = p 1 [ i ] + p $NUMBER$ [ i ] ; }
rank: 158
score: 99.50099182128906
patch: int sum = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 158
score: 99.49794311523438
patch: for p $NUMBER$ [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 158
score: 99.47489206414474
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] / $NUMBER$ ;
rank: 158
score: 99.47317843967014
patch: final int dp dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 158
score: 99.46239471435547
patch: final int dp = $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 158
score: 99.45631408691406
patch: final int dp = p 1 [ i ] - p $NUMBER$ . length ;
rank: 159
score: 99.49989947150735
patch: new int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 159
score: 99.49791370738636
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 159
score: 99.46909790039062
patch: final int dp = p 1 [ i ] - p 1 [ p 1 [ i ] ;
rank: 159
score: 99.4560791015625
patch: int dp = int [ ] - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 159
score: 99.43253580729167
patch: final int dp = p 1 [ i ] ] - p 1 [ i ] ;
rank: 160
score: 99.50589425223214
patch: if ( p 1 [ i ] - p 1 [ i ] < p $NUMBER$ [ i ] ;
rank: 160
score: 99.47450086805556
patch: final int dp = p 1 [ i ] ( p $NUMBER$ [ i ] ) ;
rank: 160
score: 99.47198486328125
patch: final int dp = p 1 [ i ; final int dp = p 1 [ i ] ;
rank: 160
score: 99.46119689941406
patch: final int dp = name [ i ] - p $NUMBER$ [ i ] ;
rank: 160
score: 99.45336151123047
patch: final int dp = p 1 [ i ] * p $NUMBER$ [ i ]
rank: 160
score: 99.43238022748162
patch: float p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 161
score: 99.50584652549342
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; * /
rank: 161
score: 99.49947684151786
patch: int dp = p 1 , dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 161
score: 99.4968994140625
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ + p $NUMBER$ [ i ] ;
rank: 161
score: 99.46071905838816
patch: final int dp = p 1 [ i ] - 0 - p $NUMBER$ [ i ] ;
rank: 161
score: 99.45568237304687
patch: final int dp = p 1 [ i + p 1 ] - p $NUMBER$ [ i ] ;
rank: 161
score: 99.45301055908203
patch: sum += p 1 [ i ] - dp $NUMBER$ [ i ] ; }
rank: 162
score: 99.49676872702206
patch: public int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 162
score: 99.47420008042279
patch: final int dp = p 1 [ i ] * p 1 [ i ] ;
rank: 162
score: 99.4713134765625
patch: final int dp = p 1 [ i ] ; int max = p 1 [ i ] ;
rank: 162
score: 99.45157020970395
patch: sum += p 1 : p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 162
score: 99.43046431107955
patch: float dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 163
score: 99.5054069967831
patch: final long dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 163
score: 99.4710629111842
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 0 + 1 ] ;
rank: 163
score: 99.46788330078125
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ p 1 [ i ] ;
rank: 163
score: 99.459716796875
patch: final int dp = p 1 [ i + - 1 ] - p $NUMBER$ [ i ] ;
rank: 163
score: 99.43014365748355
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 164
score: 99.5052719116211
patch: int dp = p 1 [ i ] - start $NUMBER$ [ i ] ;
rank: 164
score: 99.4992443266369
patch: final int dp = p 1 ) - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 164
score: 99.47273763020833
patch: final int dp = p 1 [ i ] > 0 ? p $NUMBER$ [ i ] : 0 ;
rank: 164
score: 99.47091854319854
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - ;
rank: 164
score: 99.45911516462054
patch: final int dp = p 1 + p 1 [ i ] ;
rank: 164
score: 99.43008761935764
patch: array [ i ] = p 1 [ i ] - p 1 [ i ] ;
rank: 165
score: 99.47263997395834
patch: if ( p 1 [ i ] == null ) { continue ; }
rank: 165
score: 99.46729800575658
patch: final int dp = 0 + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 165
score: 99.42959415211396
patch: final int value = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 166
score: 99.5043712797619
patch: final long dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ) ;
rank: 166
score: 99.49898488898026
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - } ;
rank: 166
score: 99.49609375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i / p 1 [ i ] ;
rank: 166
score: 99.47198195684524
patch: final int dp = p 1 [ i ] . size ( ) - p $NUMBER$ [ i ] ;
rank: 166
score: 99.47059936523438
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 - $NUMBER$ ] ;
rank: 166
score: 99.45041791130515
patch: final int dp = p 1 . [ i ] - p $NUMBER$ [ i ]
rank: 166
score: 99.42942116477273
patch: double dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 167
score: 99.49795386904762
patch: int dp = p 1 , dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 167
score: 99.49564985795455
patch: final int dp = p 1 [ i ] - p $NUMBER$ , i = p 1 [ i ] ;
rank: 167
score: 99.47172995174633
patch: final int dp = p 1 [ i ] | p $NUMBER$ [ i ] ;
rank: 167
score: 99.46973876953125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + - $NUMBER$ ] ;
rank: 167
score: 99.46671335320724
patch: final int dp = this . p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 167
score: 99.44989420572917
patch: final int dp = p 1 [ i ] - p $NUMBER$ : i
rank: 167
score: 99.42892020089286
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp *
rank: 168
score: 99.50376198508523
patch: final int dp = Math . round ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 168
score: 99.49770285866477
patch: final int dp = p 1 , sum += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 168
score: 99.4956298828125
patch: final int dp = p 1 [ i ] - p $NUMBER$ | p 1 [ i ] ;
rank: 168
score: 99.47117978050595
patch: final int dp = Math . min ( p 1 . length , p $NUMBER$ [ i ] ) ;
rank: 168
score: 99.469677734375
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i - - 1 ] ;
rank: 168
score: 99.44971516927083
patch: dp = p 1 : p 1 [ i ] - p $NUMBER$ ;
rank: 168
score: 99.42861938476562
patch: Long dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 169
score: 99.50361463758681
patch: try { int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 169
score: 99.47069149925595
patch: double dp = Math . abs ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 169
score: 99.46932822779605
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ) ;
rank: 169
score: 99.45234985351563
patch: final int dp = int $NUMBER$ [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 170
score: 99.502685546875
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] . hash CaMeL Code ( ) ;
rank: 170
score: 99.4961825284091
patch: for ( int i = 0 ; i < p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 170
score: 99.49311659071181
patch: final int p $NUMBER$ = p 1 [ i ] - p 1 [ i ] ;
rank: 170
score: 99.46985626220703
patch: if ( p 1 [ i ] == p 1 [ i ] ) {
rank: 170
score: 99.46932644314236
patch: final int dp = p 1 [ i ] ? p $NUMBER$ [ i ] } ;
rank: 170
score: 99.46567993164062
patch: for p 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 170
score: 99.45220947265625
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - 1 ;
rank: 170
score: 99.44956868489584
patch: dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 170
score: 99.42827012803819
patch: for ( int i = 0 ; i < p 1 . length ; i ++ )
rank: 171
score: 99.50215287642045
patch: int dp = p 1 [ i ] + p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 171
score: 99.49303089488636
patch: final int dp = Math . max ( p 1 [ i ] , p 1 [ i ] ) ;
rank: 171
score: 99.46983578330592
patch: final int dp = Math . max ( p 1 , p $NUMBER$ [ i ] ) ;
rank: 171
score: 99.46925659179688
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i 1 [ i ] ;
rank: 171
score: 99.45674213610198
patch: final int dp = p 1 [ int [ i ] - p $NUMBER$ [ i ] ;
rank: 171
score: 99.44954681396484
patch: sum += p 1 [ i ] - p 1 [ i ] ; }
rank: 172
score: 99.502099609375
patch: final int dp = p 1 [ i ] - System . ] ;
rank: 172
score: 99.46559651692708
patch: dp [ i ] = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 172
score: 99.45660400390625
patch: final int dp = p 1 - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 172
score: 99.45148383246527
patch: final int int dp = p 1 [ i ] - p 1 [ i ] ;
rank: 172
score: 99.4480044716283
patch: final int dp = p 1 [ i ] , dp += p $NUMBER$ [ i ] ;
rank: 172
score: 99.4277279502467
patch: g 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 173
score: 99.50199751420455
patch: if ( p 1 [ i ] - p 1 [ i ] == p $NUMBER$ [ i ] ) {
rank: 173
score: 99.49480646306819
patch: final int dp = p 1 . i - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 173
score: 99.49256591796875
patch: final int dp = p 1 [ i ] - p 1 + p 1 [ i ] ;
rank: 173
score: 99.4691162109375
patch: final int dp $NUMBER$ = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 173
score: 99.46864670973558
patch: final int dp = p 1 [ i - $NUMBER$ ] ;
rank: 173
score: 99.451318359375
patch: final p 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 173
score: 99.44698079427083
patch: dp = p 1 : p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 173
score: 99.42769775390624
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum -- ;
rank: 174
score: 99.49473353794643
patch: for ( int i = 0 ; i < p 1 . size ( ) ; i ++ ) {
rank: 174
score: 99.49251062729779
patch: final Integer dp = p 1 [ i ] - p 1 [ i ] ;
rank: 174
score: 99.46516723632813
patch: final int [ ] p 1 = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 174
score: 99.45480685763889
patch: final int dp = p 1 [ i ] - + p $NUMBER$ [ i ] ;
rank: 175
score: 99.5008544921875
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { break ; } }
rank: 175
score: 99.49309747869319
patch: final int dp = p 1 [ i - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 175
score: 99.45043334960937
patch: final dp 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 175
score: 99.42747096011513
patch: final int ! p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 176
score: 99.50009637129934
patch: p 1 [ i ] = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 176
score: 99.46813025841347
patch: final int dp = 0 - p 1 [ i ] ;
rank: 176
score: 99.46783088235294
patch: final int dp = p $NUMBER$ [ i ] [ p $NUMBER$ [ i ] ;
rank: 176
score: 99.46351382606908
patch: final int dp = p 1 [ i ] ? p $NUMBER$ [ i ] : i ;
rank: 176
score: 99.44962310791016
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] -
rank: 177
score: 99.4993563565341
patch: if ( p 1 [ i ] - p 1 [ i ] > p $NUMBER$ [ i ] ) {
rank: 177
score: 99.46741303943452
patch: final int dp = p 1 [ i ] == p 1 [ i ] ? 1 : 0 ;
rank: 177
score: 99.46270751953125
patch: int dp = p 1 [ 0 ] - p $NUMBER$ [ i ] ;
rank: 177
score: 99.45176295230263
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ length - i ] ;
rank: 177
score: 99.44880114103618
patch: int [ ] p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 177
score: 99.44569156044408
patch: int dp = p 1 + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 178
score: 99.49906412760417
patch: final int dp = p $NUMBER$ [ i ] ] - p $NUMBER$ [ i ] ;
rank: 178
score: 99.49142937911184
patch: final int dp = Math . p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 178
score: 99.4454704733456
patch: final int dp = p 1 : p 1 [ i + p $NUMBER$ ] ;
rank: 178
score: 99.42578125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 0 ] ;
rank: 179
score: 99.49882579985119
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] < 0 ) { continue ; }
rank: 179
score: 99.46721733940973
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; dp
rank: 179
score: 99.46673905222039
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] * $NUMBER$ ;
rank: 179
score: 99.46197509765625
patch: this . dp [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 179
score: 99.44460161994485
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] /
rank: 180
score: 99.49115600585938
patch: final int dp = Math . abs p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 180
score: 99.46172131990132
patch: final int [ ] dp = p 1 [ i ] - p $NUMBER$ [ 0 ] ;
rank: 180
score: 99.45066324869792
patch: final int dp = p 1 [ int 1 ] - p $NUMBER$ [ i ] ;
rank: 180
score: 99.4476806640625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - dp ] ;
rank: 180
score: 99.42497253417969
patch: short dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 181
score: 99.49765159970238
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] > 0 ) { continue ; }
rank: 181
score: 99.49144744873047
patch: byte dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 181
score: 99.49114668996711
patch: final float dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 181
score: 99.46661376953125
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 + 1 ] ;
rank: 181
score: 99.4656982421875
patch: final int dp = p 1 [ i ] - p 1 [ i ] + 1 ;
rank: 181
score: 99.46025848388672
patch: int dp = p 1 [ i ] & p $NUMBER$ [ i ] ;
rank: 181
score: 99.45051655016448
patch: final int dp = p 1 [ $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 181
score: 99.44414206112133
patch: sum += dp p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 181
score: 99.42491390830592
patch: final int dp = 1 - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 182
score: 99.46564592633929
patch: int dp = Math . min ( p $NUMBER$ [ i ] , p $NUMBER$ [ i ] ) ;
rank: 182
score: 99.44933471679687
patch: final int dp = ( int ) p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 182
score: 99.44377698396382
patch: final int dp = p 1 [ i ] , dp = p 1 [ i ] ;
rank: 183
score: 99.49052159926471
patch: final long dp = p 1 [ i ] - p 1 [ i ] ;
rank: 183
score: 99.46597055288461
patch: final int dp [ ] = p $NUMBER$ [ i ] ;
rank: 183
score: 99.46558837890625
patch: final int dp = p 1 [ i ] . equals ( p $NUMBER$ [ i ] ) ;
rank: 183
score: 99.44931640625
patch: final int dp = p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 183
score: 99.44282531738281
patch: sum += dp 1 [ i ] * p $NUMBER$ [ i ] ; }
rank: 183
score: 99.42457982113487
patch: for ( int i = 0 ; i < p $NUMBER$ . length ; i ++ ) {
rank: 184
score: 99.49599322150735
patch: final Integer dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 184
score: 99.49046415441177
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ; } }
rank: 184
score: 99.46558335248162
patch: final int dp = p 1 [ i ] - p 1 [ 0 ] ;
rank: 184
score: 99.44589233398438
patch: final int dp = distance ( dp 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 184
score: 99.44262017144098
patch: int dp = p 1 . 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 184
score: 99.42414407169117
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ start ] ;
rank: 185
score: 99.49551246279762
patch: if ; p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 185
score: 99.49038550967262
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i - p $NUMBER$ [ i ] ;
rank: 185
score: 99.45669555664062
patch: final int [ ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 185
score: 99.44567108154297
patch: int sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 185
score: 99.44215794613487
patch: sum += Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] )
rank: 186
score: 99.49541625976562
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; if ( ;
rank: 186
score: 99.49005681818181
patch: int dp = p 1 [ i ] - p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 186
score: 99.46515856291118
patch: dp 1 [ i ] = p 1 [ i ] - p 1 [ i ] ;
rank: 186
score: 99.4640625
patch: final int dp = p 1 [ i ] - - p $NUMBER$ [ i - 1 ] ;
rank: 186
score: 99.45647872121711
patch: final int [ ] dp = p 1 [ i ] [ p 1 [ i ] ;
rank: 186
score: 99.44807434082031
patch: final int dp = list [ i ] - p $NUMBER$ [ i ] ;
rank: 186
score: 99.44525467722039
patch: int dp = dp ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 186
score: 99.44142150878906
patch: final int dp = p 1 , dp = p $NUMBER$ [ i ] ;
rank: 187
score: 99.49526742788461
patch: final int dp = p 1 [ i ] + 1 ;
rank: 187
score: 99.46497938368056
patch: final int p $NUMBER$ = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 187
score: 99.46404418945312
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 1 ] ;
rank: 187
score: 99.44110466452206
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ,
rank: 188
score: 99.48976828835227
patch: for ( int i = p 1 [ i ] - p $NUMBER$ [ i ] ; i ++ ) {
rank: 188
score: 99.48895622702206
patch: int p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 188
score: 99.46493369654605
patch: if ( p 1 [ i ] >= p $NUMBER$ [ i ] ) { continue ; }
rank: 188
score: 99.46393785978618
patch: final int dp = p 1 [ i - i ] + p $NUMBER$ [ i ] ;
rank: 188
score: 99.44764404296875
patch: final int dp = p 1 < p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 188
score: 99.4437255859375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - start ;
rank: 188
score: 99.44097222222223
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i : 0 ;
rank: 188
score: 99.42342122395833
patch: final int dp = p 1 [ i ] . [ i ] - p $NUMBER$ [ i ] ;
rank: 189
score: 99.494873046875
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] < p $NUMBER$ [ i ] )
rank: 189
score: 99.48963623046875
patch: dp = p 1 [ i + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 189
score: 99.48889741443452
patch: this . p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 189
score: 99.46329538445724
patch: final int dp = p 1 [ i ] ; if p $NUMBER$ [ i ] -- ;
rank: 189
score: 99.45606146918402
patch: final int dp = p 1 [ - i ] - p $NUMBER$ [ i ] ;
rank: 189
score: 99.44755045572917
patch: sum += p 1 [ i ] - p 1 [ i ] ;
rank: 189
score: 99.4436767578125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : - $NUMBER$ ;
rank: 189
score: 99.42333306206598
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ - $NUMBER$ ] ;
rank: 190
score: 99.48956853693181
patch: if ( p 1 [ i ] + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ) {
rank: 190
score: 99.46278686523438
patch: final int dp 1 = p 1 [ i - 1 ] - p $NUMBER$ [ i ] ;
rank: 190
score: 99.45490180121527
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ - 1 ] ;
rank: 190
score: 99.44347534179687
patch: final int dp = p 1 [ i ] - new int [ p 1 [ i ] ;
rank: 191
score: 99.49449573863636
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { return 0 . 0 ; }
rank: 191
score: 99.48869977678571
patch: final int [ ] [ ] dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 191
score: 99.46199340820313
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 + 1 ;
rank: 191
score: 99.45400103400735
patch: final String dp = p 1 [ i ] - p 1 [ i ] ;
rank: 191
score: 99.44655151367188
patch: final int [ ] p $NUMBER$ = p 1 [ i ] - p 1 [ i ] ;
rank: 191
score: 99.44337463378906
patch: int dp = dp $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 191
score: 99.44005062705592
patch: final int dp = p 1 [ i ] - i - p $NUMBER$ [ i ] ;
rank: 192
score: 99.48869054457721
patch: final T dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 192
score: 99.46346242804276
patch: final int dp = p 1 [ i ] . length + p 1 [ i ] ;
rank: 192
score: 99.44296603732639
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - 0 ;
rank: 192
score: 99.43992704503677
patch: for ( int dp = p 1 [ i ] - p $NUMBER$ [ i ]
rank: 192
score: 99.42250279017857
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . max ( ) ;
rank: 193
score: 99.4882479580966
patch: final int dp = p 1 , sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 193
score: 99.48817027698864
patch: final int dp = p 1 [ i ] - p $NUMBER$ , dp = p $NUMBER$ [ i ] ;
rank: 193
score: 99.4615542763158
patch: final int dp = p 1 [ i - $NUMBER$ ] + p $NUMBER$ [ i ] ;
rank: 193
score: 99.44611206054688
patch: final int dp = p 1 [ i + - i ] - p $NUMBER$ [ i ] ;
rank: 193
score: 99.4397216796875
patch: int dp = p 1 [ i ] - p $NUMBER$ : i ;
rank: 194
score: 99.4629138764881
patch: final int dp = Math . abs ( p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 194
score: 99.46153259277344
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ;
rank: 194
score: 99.45269454152961
patch: final int [ ] dp = p 1 [ 0 ] - p $NUMBER$ [ i ] ;
rank: 194
score: 99.44583290501645
patch: final int [ ] sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 194
score: 99.43909976356908
patch: sum += p 1 : p 1 : p 1 [ i ] - p $NUMBER$ ; }
rank: 194
score: 99.42181951349431
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; return dp * dp ;
rank: 195
score: 99.49272717927632
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] [ i ] ) {
rank: 195
score: 99.46262078536184
patch: if ( p 1 [ i ] == p 1 [ i ] ) { break ; }
rank: 195
score: 99.4606997841283
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i + i ] ;
rank: 195
score: 99.441748046875
patch: int dp = p 1 [ i ] . size ( ) - p $NUMBER$ [ i ] ;
rank: 195
score: 99.43888132195724
patch: sum += dp ( p 1 [ i ] - p $NUMBER$ [ i ] ) ; }
rank: 196
score: 99.48721923828126
patch: sum = Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 196
score: 99.46039895450367
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ 1 ] ;
rank: 196
score: 99.45182495117187
patch: int dp = p 1 [ i ] != null ? p $NUMBER$ [ i ] : 0 ;
rank: 196
score: 99.44511333264802
patch: final int dp = p 1 [ i + 0 ] - p $NUMBER$ [ i ] ;
rank: 196
score: 99.43879780016448
patch: int dp = p 1 : p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 196
score: 99.42153591579861
patch: final int dp = p 1 [ i ] $NUMBER$ [ p $NUMBER$ [ i ] ;
rank: 197
score: 99.49220904181985
patch: final int dp = p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 197
score: 99.4867007606908
patch: for ( int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; ;
rank: 197
score: 99.46197219122024
patch: final int dp = p 1 [ i ] != 0 ? p $NUMBER$ [ i ] : 0 ;
rank: 197
score: 99.44507446289063
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - i ] ;
rank: 197
score: 99.44117495888158
patch: final int dp = i + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 197
score: 99.43825120192308
patch: int dp = p 1 : p 1 [ i ] ;
rank: 197
score: 99.42131212022569
patch: data [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 198
score: 99.46192568824405
patch: final int dp = Math . min ( p $NUMBER$ [ i ] , p $NUMBER$ [ i ] ;
rank: 198
score: 99.44057329963235
patch: final int dp = dp $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 199
score: 99.4859952059659
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + p 1 [ i ] ;
rank: 199
score: 99.45062577097039
patch: final double dp [ ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 199
score: 99.44036187065973
patch: final int dp = p 1 [ i $NUMBER$ ] - p $NUMBER$ [ i ] ;
rank: 199
score: 99.43777804904514
patch: sum += distance = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 199
score: 99.42128057065217
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 200
score: 99.49098899147727
patch: final int dp = Math . abs ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 200
score: 99.4858731356534
patch: for ( int dp = 0 ; dp < p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 200
score: 99.46026000976562
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ p $NUMBER$ [ i ] ;
rank: 200
score: 99.45988159179687
patch: final int dp = p 1 [ i ] ; p 1 = p 1 [ i ] ;
rank: 200
score: 99.43766021728516
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] +
rank: 200
score: 99.42088681175595
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . length ( ) ;
rank: 201
score: 99.46001906622024
patch: final int dp = p 1 [ i ] . compare CaMeL To ( p $NUMBER$ [ i ] ;
rank: 201
score: 99.45977783203125
patch: final int dp = p 1 [ i ] - $STRING$ [ i ] ;
rank: 201
score: 99.44939778645833
patch: if = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 201
score: 99.44326782226562
patch: final int { final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 201
score: 99.43730083264802
patch: sum += int ( p 1 [ i ] - p $NUMBER$ [ i ] ) ; }
rank: 201
score: 99.42073139391448
patch: final int dp = 1 + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 202
score: 99.48516290838069
patch: final int dp = Math . max ( p 1 [ i ] - p 1 [ i ] ) ;
rank: 202
score: 99.45936889648438
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i + 1 + 1 ] ;
rank: 202
score: 99.44285888671875
patch: final int dp = p 1 [ final 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 202
score: 99.439453125
patch: final int dp = p 1 [ i ] - $STRING$ : p $NUMBER$ [ i ] ;
rank: 202
score: 99.43566131591797
patch: sum += p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ; }
rank: 202
score: 99.42037803248355
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ } ;
rank: 203
score: 99.49044799804688
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + p $NUMBER$ ;
rank: 203
score: 99.48477027529762
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 203
score: 99.45934448242187
patch: final int dp 1 = p 1 [ i ] - p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 203
score: 99.45884486607143
patch: final int dp = p 1 [ i ] == p 1 [ i ] ? 0 : 0 ;
rank: 203
score: 99.44877115885417
patch: final String p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 203
score: 99.442138671875
patch: final int dp = p $NUMBER$ . [ i ] - p $NUMBER$ [ i ] ;
rank: 203
score: 99.43502004523026
patch: sum += p 1 [ i ] - p $NUMBER$ [ i 1 [ i ] ; }
rank: 204
score: 99.48462524414063
patch: final int dp = p 1 [ i ] - p $NUMBER$ == p $NUMBER$ [ i ] ;
rank: 204
score: 99.45872096011513
patch: final int dp = 1 [ p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 205
score: 99.4897128018466
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] >= p $NUMBER$ [ i ] ) {
rank: 205
score: 99.44792624080883
patch: final int dp = p 1 [ $NUMBER$ ] - p $NUMBER$ [ i ] ;
rank: 205
score: 99.44194592927632
patch: final int list [ ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 205
score: 99.43864610460069
patch: int dp = i - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 205
score: 99.4339663856908
patch: return Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ?
rank: 205
score: 99.41805013020833
patch: final int dp = = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 206
score: 99.48903586647727
patch: double dp = p 1 [ i ] - p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 206
score: 99.48454204358552
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - i ;
rank: 206
score: 99.45881733141448
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ 0 - i ] ;
rank: 206
score: 99.44182272518383
patch: final int dp = else 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 206
score: 99.43356662326389
patch: final int dp = dp 1 . [ i ] - p $NUMBER$ [ i ] ;
rank: 207
score: 99.48424072265625
patch: i = ( int ) ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 207
score: 99.45865478515626
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i + - 1 ] ;
rank: 207
score: 99.45819382440476
patch: final int dp = ( p 1 [ i ] - p $NUMBER$ [ i ] ) + 1 ;
rank: 207
score: 99.44136770148026
patch: final int [ ] distance = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 207
score: 99.4378726356908
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : i ;
rank: 207
score: 99.43345240542763
patch: return Math . sqrt ( p 1 [ i ] + p $NUMBER$ [ i ] ) ;
rank: 208
score: 99.48856977982955
patch: final double dp = Math . min ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 208
score: 99.45818413628473
patch: final double dp $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 208
score: 99.45786420036765
patch: final int dp = 0 ; final int dp = p $NUMBER$ [ i ] ;
rank: 208
score: 99.44711739676339
patch: final int [ ] p $NUMBER$ = p 1 [ i ] ;
rank: 208
score: 99.43304122121711
patch: Math . distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ; }
rank: 208
score: 99.41724795386905
patch: final int dp = p 1 [ i ] - p 1 [ i ] . size ( ) ;
rank: 209
score: 99.48835100446429
patch: final int dp = p 1 [ i ] - System . $NUMBER$ [ p $NUMBER$ [ i ] ;
rank: 209
score: 99.48387562144886
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] <= p $NUMBER$ [ i ] ) {
rank: 209
score: 99.4830655184659
patch: int dp = p 1 [ i ] - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 209
score: 99.44691226356908
patch: final int dp [ ] = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 209
score: 99.43723431755515
patch: int dp = p 1 [ i ] 1 - p $NUMBER$ [ i ] ;
rank: 209
score: 99.41724310980902
patch: final float p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 210
score: 99.48809814453125
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ p 1 [ i ] ;
rank: 210
score: 99.483642578125
patch: if ( p 1 [ i ] . length < p $NUMBER$ [ i ] . length ) {
rank: 210
score: 99.45736839657738
patch: int dp = Math . max ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 210
score: 99.43284098307292
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + 0
rank: 210
score: 99.41687689887152
patch: final int dp = - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 211
score: 99.48319868607955
patch: Object dp = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 211
score: 99.48131214488636
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i + 1 ] ;
rank: 211
score: 99.45700555098684
patch: dp 0 [ i ] = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 211
score: 99.43619791666667
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - sum ;
rank: 211
score: 99.41670227050781
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ ] ;
rank: 212
score: 99.48760431463069
patch: final double dp = Math . min ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 212
score: 99.45644996279762
patch: float dp = Math . abs ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 212
score: 99.43732010690789
patch: final int dp = start : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 212
score: 99.43271213107639
patch: sum * dp = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 213
score: 99.48749334161931
patch: int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 213
score: 99.44557495117188
patch: final int [ ] p $NUMBER$ = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 213
score: 99.43723016036184
patch: final int dp = p 1 [ i ] ; sum += p 1 [ i ] ;
rank: 213
score: 99.43523559570312
patch: int dp = p 1 [ i ] $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 213
score: 99.41572709517045
patch: final int dp = p 1 [ i ] - $STRING$ . equals ( p $NUMBER$ [ i ] ) ;
rank: 214
score: 99.48745582217262
patch: final int dp = p 1 [ i ] - System . $NUMBER$ , p $NUMBER$ [ i ] ;
rank: 214
score: 99.48259943181819
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - dp $NUMBER$ [ i ] ;
rank: 214
score: 99.48030813116776
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + i ;
rank: 214
score: 99.4544677734375
patch: final int dp = p 1 [ i ] ; if p 1 [ i ] -- ;
rank: 214
score: 99.44555053710937
patch: final int < ? > dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 214
score: 99.43689727783203
patch: final int dp = distance [ i ] - p $NUMBER$ [ i ] ;
rank: 215
score: 99.48716042258523
patch: final int dp = Math . min ( p 1 [ i ] - p 1 [ i ] ) ;
rank: 215
score: 99.48252650669643
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 215
score: 99.45527918198529
patch: if int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 215
score: 99.43124871504934
patch: final int dp = 0 : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 215
score: 99.4150390625
patch: final int dp = Math . distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 216
score: 99.48711799172794
patch: int dp = p 1 [ i ] - p $NUMBER$ $NUMBER$ [ i ] ;
rank: 216
score: 99.48189086914063
patch: for ( int i = 0 ; i <= p 1 [ i ] ; i ++ ) {
rank: 216
score: 99.4541015625
patch: int dp = p 1 [ i ] + p $NUMBER$ [ i - 1 ] ;
rank: 216
score: 99.43114556206598
patch: sum += ( p 1 [ i ] + p $NUMBER$ [ i ] ) ; }
rank: 217
score: 99.48162231445312
patch: return p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 217
score: 99.47953869047619
patch: final int [ ] dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 217
score: 99.45512462797619
patch: for ( int i = 0 ; i < p 1 [ i ] . length ; i ++ )
rank: 217
score: 99.44509708180146
patch: final int dp = - 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 217
score: 99.43522338867187
patch: final int dp = p 1 && p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 217
score: 99.43375436883224
patch: int dp = int ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 217
score: 99.43092105263158
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 [ i ]
rank: 217
score: 99.41466000205592
patch: final int dp = p 1 [ i ] - $NUMBER$ ; sum += dp * dp ;
rank: 218
score: 99.47907104492188
patch: final int dp = p 1 [ i ] - p 1 [ i 1 [ i ] ;
rank: 218
score: 99.4534423828125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 + 0 ] ;
rank: 218
score: 99.4337890625
patch: final int dp = new int [ p 1 . length ] - p $NUMBER$ [ i ] ;
rank: 218
score: 99.4332275390625
patch: final int dp = p 1 [ i ] - p 1 [ i ] : 0 ;
rank: 218
score: 99.43025037977431
patch: double [ ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 219
score: 99.48609008789063
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + i $NUMBER$ ;
rank: 219
score: 99.45476422991071
patch: final int dp = p 1 [ i ] == $STRING$ ? 0 : p 1 [ i ] ;
rank: 219
score: 99.45300903320313
patch: final int dp dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 219
score: 99.43239874588816
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - key ;
rank: 220
score: 99.48109654017857
patch: for ( int i = 0 ; i < p 1 [ i ] ; i ++ ) { {
rank: 220
score: 99.47857344777961
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . i ;
rank: 220
score: 99.45472935267857
patch: final int dp = Math . max ( p 1 . length , p $NUMBER$ [ i ] ) ;
rank: 220
score: 99.44442588404605
patch: final String dp [ ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 220
score: 99.42972819010417
patch: final int ! dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 221
score: 99.48077101934524
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 221
score: 99.47841574928977
patch: final int dp = Math . max ( p $NUMBER$ [ i ] , p $NUMBER$ [ i ] ) ;
rank: 221
score: 99.45173196231617
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ) ;
rank: 221
score: 99.44439697265625
patch: final int dp = p $NUMBER$ [ i ] [ i ] - p $NUMBER$ [ i ] ;
rank: 221
score: 99.43179931640626
patch: final int dp = ( double ) p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 221
score: 99.43140411376953
patch: int dp = final 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 221
score: 99.413818359375
patch: r 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 222
score: 99.48490825452302
patch: final int dp = p 1 [ i ] - System . p $NUMBER$ [ i ] ;
rank: 222
score: 99.47792746803977
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ p $NUMBER$ [ i ] ;
rank: 222
score: 99.45433285361842
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] / 1 ;
rank: 222
score: 99.45121495863971
patch: final int dp = p 1 [ i ] - $STRING$ $NUMBER$ [ i ] ;
rank: 222
score: 99.44432875689338
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 222
score: 99.43179141773896
patch: final int else = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 223
score: 99.48034086681548
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] - dp $NUMBER$ [ i ] ;
rank: 223
score: 99.45415900735294
patch: final int start = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 223
score: 99.44428453947368
patch: final int dp = 0 + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 223
score: 99.41366722470238
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum . else {
rank: 224
score: 99.48399522569444
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] > 0 ) {
rank: 224
score: 99.48018973214286
patch: i += p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 224
score: 99.47783067491319
patch: final int p $NUMBER$ = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 224
score: 99.45408871299342
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] / $NUMBER$ ;
rank: 224
score: 99.45116577148437
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ++ + 1 ] ;
rank: 224
score: 99.44402313232422
patch: int $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 224
score: 99.43140366498162
patch: final int sum = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 224
score: 99.42930297851562
patch: final int dp = dp ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 224
score: 99.41340717516448
patch: m $NUMBER$ [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 225
score: 99.48018022017045
patch: final int dp = p 1 , dp += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 225
score: 99.45408325195312
patch: dp = Math . max ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 225
score: 99.43135375976563
patch: sum += ( ( int ) p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 225
score: 99.42917209201389
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] . size ;
rank: 225
score: 99.42725965711806
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ; break ; }
rank: 226
score: 99.48006184895833
patch: if ( p 1 [ i ] + p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 226
score: 99.45407443576389
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] 1 ;
rank: 226
score: 99.45111694335938
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + 1 ] ] ;
rank: 226
score: 99.43128797743056
patch: final int , dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 226
score: 99.42915424547698
patch: final int dp = int + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 226
score: 99.41218705610795
patch: final int dp = Math . sqrt ( p 1 [ i ] ) - p $NUMBER$ [ i ] ;
rank: 227
score: 99.47981770833333
patch: return p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 227
score: 99.45404730902777
patch: final int dp 0 = p 1 [ i ] - p 1 [ i ] ;
rank: 227
score: 99.45049438476562
patch: final int dp = p 1 [ i ] ; String dp = p 1 [ i ] ;
rank: 227
score: 99.44304342830883
patch: final int dp = p $NUMBER$ [ i ] + p 1 [ i ] ;
rank: 227
score: 99.43115234375
patch: final int dp = p 1 [ i 0 ] - p $NUMBER$ [ i ] ;
rank: 227
score: 99.4291240985577
patch: final int dp = p 1 [ i ] - $NUMBER$ ;
rank: 227
score: 99.42690700954861
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + 1
rank: 227
score: 99.4121624490489
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 228
score: 99.45404343377976
patch: final int dp = p 1 [ i ] >= 0 ? p 1 [ i ] : 0 ;
rank: 228
score: 99.4304443359375
patch: final int dp $NUMBER$ [ ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 228
score: 99.42689915707237
patch: final int dp = p 1 [ i ] - p $NUMBER$ : p $NUMBER$ [ i ]
rank: 228
score: 99.41183953536184
patch: g 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 229
score: 99.47658469460227
patch: final int dp = p 1 [ i ] - p $NUMBER$ , dp = p 1 [ i ] ;
rank: 229
score: 99.45346214657738
patch: final int dp = p 1 [ i ] == null ? 1 : p $NUMBER$ [ i ] ;
rank: 229
score: 99.44925729851974
patch: final int dp = p 1 [ i ] - $STRING$ - p 1 [ i ] ;
rank: 229
score: 99.4294497841283
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i * $NUMBER$ ] ;
rank: 229
score: 99.41183953536184
patch: final int dp = i + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 230
score: 99.47835964626736
patch: { final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 230
score: 99.47654030539773
patch: final int dp = Math . max ( p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ) ;
rank: 230
score: 99.44921875
patch: final int dp = p 1 [ i ] - p 1 [ i + - 1 ] ;
rank: 230
score: 99.42827012803819
patch: final int dp = p 1 [ i ] - p 1 [ i 1 ] ;
rank: 231
score: 99.47822498139881
patch: { final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 231
score: 99.476171875
patch: final int dp = p 1 [ i ] - p 1 : p $NUMBER$ [ i ] ;
rank: 231
score: 99.45263671875
patch: final int dp = p 1 [ i ] ; final int i = p 1 [ i ] ;
rank: 231
score: 99.44883968955592
patch: int dp = p 1 [ i ] ; int dp = p $NUMBER$ [ i ] ;
rank: 231
score: 99.41169819078948
patch: v 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 232
score: 99.48048909505208
patch: final int dp = p 1 [ i ] - System . $NUMBER$ [ i ] ;
rank: 232
score: 99.45231119791667
patch: final double dp = p 1 [ i ] ; final int dp = p 1 [ i ] ;
rank: 232
score: 99.44223201976104
patch: final int length = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 232
score: 99.41153564453126
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; ++ sum ;
rank: 233
score: 99.47552168996711
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i / 1 ] ;
rank: 233
score: 99.45206705729167
patch: final int dp = p 1 [ i ] == p $NUMBER$ [ i ] ? 0 : i ;
rank: 233
score: 99.44831928453948
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i * 1 ] ;
rank: 233
score: 99.44199090254934
patch: final int [ ] dp = p 1 [ i ] . p $NUMBER$ [ i ] ;
rank: 234
score: 99.47521391369048
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i ++ ] ;
rank: 234
score: 99.45205508961396
patch: final int dp = p 1 [ i ] >= p $NUMBER$ [ i ] ;
rank: 234
score: 99.44170178865132
patch: final int dp = 0 - p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 234
score: 99.42725219726563
patch: final int dp = p 1 [ i ] . get ( p $NUMBER$ [ i ] ) ;
rank: 234
score: 99.42478314568015
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] |
rank: 234
score: 99.41063168174342
patch: final int dp = Math . distance ( p 1 , p $NUMBER$ [ i ] ) ;
rank: 235
score: 99.47941284179687
patch: final int dp = p $NUMBER$ [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 235
score: 99.47772771661931
patch: long dp = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 235
score: 99.44825439453125
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i - [ i ] ;
rank: 235
score: 99.42709350585938
patch: sum += Math . sqrt ( p 1 [ i ] + p $NUMBER$ [ i ] ) ;
rank: 235
score: 99.42464447021484
patch: final int dp = p 1 [ i ] [ p $NUMBER$ [ i ]
rank: 236
score: 99.47899034288194
patch: final double dp = p 1 [ i ] - p $NUMBER$ [ i ] ; ;
rank: 236
score: 99.47743918678977
patch: for ( int i = 0 ; i <= p 1 [ i ] . length ; i ++ ) {
rank: 236
score: 99.42694091796875
patch: int dp = int [ ] + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 236
score: 99.42507755055146
patch: final int >> = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 236
score: 99.424560546875
patch: final int dp = p 1 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 236
score: 99.41000027126736
patch: final int -- i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 237
score: 99.478271484375
patch: final Big CaMeL Integer p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 237
score: 99.44790649414062
patch: final int dp = p 1 [ i ] ; if 1 = p 1 [ i ] ;
rank: 237
score: 99.44031439887152
patch: int dp = p 1 [ i ] ; dp = p 1 [ i ] ;
rank: 237
score: 99.42677612304688
patch: final int dp = distance ( p 1 [ i ] , p 1 [ i ] ) ;
rank: 237
score: 99.42502955386513
patch: int dp = p 1 + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 237
score: 99.42418148643092
patch: sum += Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ,
rank: 238
score: 99.47695090553977
patch: String dp = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 238
score: 99.4747802734375
patch: final int dp = p 1 [ i ] - p $NUMBER$ / p $NUMBER$ [ i ] ;
rank: 238
score: 99.44790167557566
patch: final int dp = p 1 [ i ] / p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 238
score: 99.43990478515624
patch: if p $NUMBER$ [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 238
score: 99.40937243009868
patch: final int dp = p 1 [ i ] - i ; sum += dp * dp ;
rank: 239
score: 99.47782759232955
patch: final int dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( $NUMBER$ ) ;
rank: 239
score: 99.47381882440476
patch: final int dp = p 1 [ i ] ; final Integer dp = p 1 [ i ] ;
rank: 239
score: 99.44778603001645
patch: final int dp = p 1 [ i ] + p 1 [ i - $NUMBER$ ] ;
rank: 239
score: 99.42411534926471
patch: final int dp = min 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 239
score: 99.42357113486842
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . length 1
rank: 239
score: 99.40890342310855
patch: m $NUMBER$ [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 240
score: 99.47744140625
patch: final int dp = p 1 [ i ] - System $NUMBER$ * p $NUMBER$ [ i ] ;
rank: 240
score: 99.47662062872024
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ; } int sum = 0 ;
rank: 240
score: 99.4735043174342
patch: final float [ ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 240
score: 99.44759368896484
patch: final int dp = p 1 [ i - p $NUMBER$ [ i ] ;
rank: 240
score: 99.43924967447917
patch: int dp = p 1 [ i ] ; dp = p $NUMBER$ [ i ] ;
rank: 240
score: 99.42571057771382
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : $STRING$ ;
rank: 240
score: 99.42342336554276
patch: sum += dp 1 : p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 241
score: 99.47566492417279
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; {
rank: 241
score: 99.45117865668402
patch: final int dp = p 1 [ i ] - p 1 [ i ] ) ;
rank: 241
score: 99.44737484580592
patch: final int dp = p 1 [ i ] + p 1 [ i + $NUMBER$ ] ;
rank: 241
score: 99.42341694078948
patch: final int dp = int ( p 1 [ i ] - p $NUMBER$ [ i ] )
rank: 241
score: 99.40870250355114
patch: int dp = p 1 [ i ] - p 1 [ i ] ; sum += dp * dp ;
rank: 242
score: 99.47730102539063
patch: final int dp = p 1 [ i ] - p 1 [ p $NUMBER$ [ i ] ;
rank: 242
score: 99.47552780877976
patch: dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 242
score: 99.47230834960938
patch: final int dp = p 1 [ i 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 242
score: 99.45103454589844
patch: float dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 242
score: 99.44691772460938
patch: final int dp = p 1 [ i ] ; Object dp = p 1 [ i ] ;
rank: 242
score: 99.43892415364583
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ; }
rank: 242
score: 99.4244613647461
patch: int dp = dp 1 [ i ] - p 1 [ i ] ;
rank: 242
score: 99.40858289930556
patch: data [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 243
score: 99.47512817382812
patch: if ( p 1 [ i ] + p $NUMBER$ [ i ] + p $NUMBER$ [ i ]
rank: 243
score: 99.44647575827206
patch: final int dp = $NUMBER$ 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 243
score: 99.43849583675987
patch: final int dp [ ] = p 1 [ i ] + p 1 [ i ] ;
rank: 243
score: 99.42417279411765
patch: int dp = ! p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 243
score: 99.42250462582237
patch: final int dp = $STRING$ - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 243
score: 99.4084705171131
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += max ;
rank: 244
score: 99.47649825246711
patch: if ( p 1 [ i ] <= p $NUMBER$ [ i ] ) { break ; }
rank: 244
score: 99.47199041193181
patch: final int dp = Double . max ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 244
score: 99.4507080078125
patch: int dp = Math . min ( p 1 [ i ] , p $NUMBER$ [ i ] ;
rank: 244
score: 99.4384521484375
patch: final int [ ] [ ] dp = p $NUMBER$ [ i ] ;
rank: 244
score: 99.4240363625919
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i $NUMBER$ ] ;
rank: 244
score: 99.42166137695312
patch: final int dp = p 1 . [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 245
score: 99.47596958705357
patch: final int dp = p 1 [ p 1 [ i ] ] - p $NUMBER$ [ i ] ;
rank: 245
score: 99.47160993303571
patch: final int [ ] [ ] dp = p 1 [ i ] - p 1 [ i ] ;
rank: 245
score: 99.45048595610119
patch: final int dp = p 1 [ i ] ; final long dp = p 1 [ i ] ;
rank: 245
score: 99.44566040039062
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ++ - 1 ] ;
rank: 245
score: 99.43821411132812
patch: final int dp = ( Integer ) p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 245
score: 99.42396304481908
patch: final int dp = p 1 p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 246
score: 99.45036878083882
patch: final int dp = p 1 [ i ] * p $NUMBER$ [ i ] . length ;
rank: 246
score: 99.42041015625
patch: sum += p 1 : p 1 : p $NUMBER$ [ i ] - p $NUMBER$ ; }
rank: 246
score: 99.40763346354167
patch: final int final 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 247
score: 99.47510928199405
patch: final int dp = p 1 [ i ] - System . $NUMBER$ + p $NUMBER$ [ i ] ;
rank: 247
score: 99.47358630952381
patch: int sum = Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 247
score: 99.47160200639205
patch: int dp = p 1 [ i ] < p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 247
score: 99.45035807291667
patch: final int dp = p 1 [ i ] == null ? 1 : p 1 [ i ] ;
rank: 247
score: 99.423095703125
patch: final int dp = int 1 [ p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 247
score: 99.40755615234374
patch: final for ( int i = 0 ; i < p 1 . length ; i ++ ) {
rank: 248
score: 99.47465376420455
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] == p 1 [ i ] ) {
rank: 248
score: 99.4715087890625
patch: final p $NUMBER$ [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 248
score: 99.44499126233552
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ $NUMBER$ - i ] ;
rank: 248
score: 99.43780517578125
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] [ 1 ] ;
rank: 248
score: 99.42012104235198
patch: sum += dp 1 [ i ] - p $NUMBER$ [ i ] ; } return sum ;
rank: 248
score: 99.41846313476563
patch: final int dp = p 1 [ i ] [ $STRING$ ] - p $NUMBER$ [ i ] ;
rank: 249
score: 99.47455388849431
patch: int dp = p 1 [ i ] + p $NUMBER$ [ i ] / p $NUMBER$ [ i ] ;
rank: 249
score: 99.47272600446429
patch: dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 249
score: 99.47149336965461
patch: final int dp = Math . p 1 [ i ] - p 1 [ i ] ;
rank: 249
score: 99.44485634251645
patch: final int dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i - 1 ] ;
rank: 249
score: 99.42216411389802
patch: p 1 [ i ] = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 249
score: 99.41839278371711
patch: final int dp = $NUMBER$ + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 249
score: 99.40690782335069
patch: final Object p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 250
score: 99.47434596011513
patch: p 1 [ i ] - p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 250
score: 99.44927368164062
patch: int dp = p 1 [ i ] == null ? 0 : p 1 [ i ] ;
rank: 250
score: 99.44402606670673
patch: final int dp = p 1 [ i + i ] ;
rank: 250
score: 99.43619577508224
patch: final int dp = p 1 [ i ] , i = p $NUMBER$ [ i ] ;
rank: 250
score: 99.42215576171876
patch: final int dp = int 1 - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 251
score: 99.47419877485795
patch: double dp = p 1 [ i ] + p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 251
score: 99.4724353608631
patch: dp [ dp 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 251
score: 99.44396362304687
patch: final final int dp = p 1 [ i ] - p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 251
score: 99.43607370476974
patch: dp [ i ] = p 1 [ i ] - p 1 [ i ] ; }
rank: 251
score: 99.41958438648896
patch: final int dp = p 1 [ i ] += p $NUMBER$ [ i ] ;
rank: 252
score: 99.47223772321429
patch: if ( dp 1 [ i ] + p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 252
score: 99.47034301757813
patch: final double dp = p 1 [ i ] - p $NUMBER$ + p $NUMBER$ [ i ] ;
rank: 252
score: 99.44902111235119
patch: final int dp = ( p 1 [ i ] - p $NUMBER$ [ i ] ) / $NUMBER$ ;
rank: 252
score: 99.42136840820312
patch: final int dp = p 1 [ i ] - new int [ p $NUMBER$ [ i ] ;
rank: 252
score: 99.41958279079861
patch: final int dp distance = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 252
score: 99.41725158691406
patch: final int dp = value [ i ] - p $NUMBER$ [ i ] ;
rank: 252
score: 99.40625
patch: double sum = Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 253
score: 99.46995142886513
patch: final int dp = p 1 [ i ] - 0 [ p $NUMBER$ [ i ] ;
rank: 253
score: 99.44881184895833
patch: final int dp = Math . max ( p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 253
score: 99.44371122472427
patch: final int dp = Math ; final int dp = p 1 [ i ] ;
rank: 253
score: 99.43585205078125
patch: int dp = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 253
score: 99.41952996504934
patch: final int dp = p 1 : p 1 [ i ] - p $NUMBER$ : i ;
rank: 253
score: 99.41692151521382
patch: final int dp = p 1 , [ ] p $NUMBER$ = p 1 [ i ] ;
rank: 253
score: 99.4061279296875
patch: s = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 254
score: 99.47319103422619
patch: final int dp = p 1 [ i ] [ p $NUMBER$ [ p $NUMBER$ [ i ] ] ;
rank: 254
score: 99.46906072443181
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i | p $NUMBER$ [ i ] ;
rank: 254
score: 99.44878540039062
patch: final int dp = p 1 [ i ] + ( int ) p $NUMBER$ [ i ] ;
rank: 254
score: 99.4206298828125
patch: int dp = p 1 [ i ] . length - p 1 [ i ] . length ;
rank: 254
score: 99.41895249310662
patch: final int dp = p 1 : p 1 : p 1 [ i ] ;
rank: 254
score: 99.4164794921875
patch: final int dp = p $NUMBER$ : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 254
score: 99.4059421705163
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum -= dp * dp ;
rank: 255
score: 99.47122628348214
patch: for ( int i = 0 - 1 ; i < p 1 . length ; i ++ ) {
rank: 255
score: 99.46870349702381
patch: this . p 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 255
score: 99.44869834498355
patch: dp 0 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 255
score: 99.44342041015625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - $NUMBER$ - 1 ;
rank: 255
score: 99.43518676757813
patch: final int [ ] [ ] dp = new int [ p 1 . length ] [ ] ;
rank: 255
score: 99.42011854383681
patch: sum += distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 255
score: 99.41879111842105
patch: distance [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 255
score: 99.405810546875
patch: c = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 256
score: 99.47274925595238
patch: dp = p 1 [ i ] + p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 256
score: 99.46852805397727
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ? p $NUMBER$ [ i ] ;
rank: 256
score: 99.44864052220395
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] . length ;
rank: 256
score: 99.44290161132812
patch: final int dp = p 1 [ i - p 1 [ i ] ;
rank: 256
score: 99.41944644325658
patch: int dp = ( int ) p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 256
score: 99.41874614514802
patch: sum += Math . sqrt ( p 1 [ i ] + p $NUMBER$ [ i ] ,
rank: 257
score: 99.47238991477273
patch: if ( p $NUMBER$ [ i ] - p $NUMBER$ [ i ] < p $NUMBER$ [ i ] ) {
rank: 257
score: 99.47107543945313
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ sum ] ;
rank: 257
score: 99.46842447916667
patch: final int dp = p 1 [ i ] ; final String dp = p 1 [ i ] ;
rank: 257
score: 99.41494269120066
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ length - $NUMBER$ ] ;
rank: 257
score: 99.40520833333333
patch: max += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 258
score: 99.44830031622024
patch: final int dp = p 1 [ i ] . length + p $NUMBER$ [ i ] . length ;
rank: 258
score: 99.43461528577302
patch: final int dp [ ] = p 1 [ i ] . p $NUMBER$ [ i ] ;
rank: 258
score: 99.41919708251953
patch: int distance = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 258
score: 99.41819763183594
patch: dp dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 258
score: 99.41490263097427
patch: * int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 258
score: 99.4051513671875
patch: z = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 259
score: 99.4721447172619
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { return - $NUMBER$ ; }
rank: 259
score: 99.47052001953125
patch: { dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 259
score: 99.46831984747024
patch: int dp = 0 ; int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 259
score: 99.44826049804688
patch: final int dp = p 1 [ p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 259
score: 99.44229929070724
patch: final int dp = p 1 [ i ] - p 1 [ i - i ] ;
rank: 259
score: 99.43441772460938
patch: final int [ ] p 1 = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 259
score: 99.41864334909539
patch: int dp = p 1 - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 259
score: 99.41775173611111
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ ++ i ] ;
rank: 259
score: 99.41476619944854
patch: final int sum = p 1 [ i ] - p 1 [ i ] ;
rank: 259
score: 99.4045639038086
patch: Double dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 260
score: 99.47181919642857
patch: final int dp = p 1 [ i ] + 1 $NUMBER$ ;
rank: 260
score: 99.47026134672619
patch: int dp = p 1 , dp += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 260
score: 99.46820746527777
patch: final int dp ++ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 260
score: 99.44810267857143
patch: final int dp = p 1 [ i ] == 1 ? 0 : p $NUMBER$ [ i ] ;
rank: 260
score: 99.44212646484375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ; final
rank: 260
score: 99.41746761924342
patch: Object dp = p 1 : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 261
score: 99.47015671502976
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] * dp $NUMBER$ [ i ] ;
rank: 261
score: 99.44051320929276
patch: final int dp = p 1 [ i ] / p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 261
score: 99.41835530598958
patch: final int dp = dp 1 [ [ i ] - p $NUMBER$ [ i ] ;
rank: 261
score: 99.40450246710526
patch: final int dp = p 1 [ i ] - ( p $NUMBER$ [ i ] ) ;
rank: 262
score: 99.47144911024306
patch: final double dp = p 1 [ i ] - p $NUMBER$ $NUMBER$ [ i ] ;
rank: 262
score: 99.43400493421052
patch: final int [ ] 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 262
score: 99.4183349609375
patch: final int sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 262
score: 99.41733127170139
patch: sum += sum * dp $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 262
score: 99.41380004882812
patch: final int dp = p 1 . [ i ] - p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 262
score: 99.40427856445312
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - p 1 ] ;
rank: 263
score: 99.47140342310855
patch: p 1 [ i ] = p 1 [ i ] - p 1 [ i ] ;
rank: 263
score: 99.46795099431819
patch: final int dp = p 1 [ i * p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 263
score: 99.44013671875
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - [ 1 ] ;
rank: 263
score: 99.43341385690789
patch: final int [ ] p $NUMBER$ = ( int [ ] ) p $NUMBER$ [ i ] ;
rank: 263
score: 99.41798706054688
patch: int dp = p 1 [ i ] 1 [ dp ] - p $NUMBER$ [ i ] ;
rank: 263
score: 99.41710140830592
patch: final int dp = p 1 [ i ] - p $NUMBER$ : 1 [ i ] ;
rank: 263
score: 99.40420871310764
patch: final int dp = p 1 [ i ] - p 1 [ i ] ; {
rank: 264
score: 99.47091238839286
patch: if ; p 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 264
score: 99.46756591796876
patch: final int dp - p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 264
score: 99.4465099516369
patch: int i = Math . min ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 264
score: 99.43992309570312
patch: final int dp = p 1 [ i ] ; int 1 = p 1 [ i ] ;
rank: 264
score: 99.41796156939338
patch: final int dp = int 1 [ i ] - p 1 [ i ] ;
rank: 264
score: 99.41703073601974
patch: double dp = p 1 [ i ] - p $NUMBER$ : p $NUMBER$ [ i ] ;
rank: 264
score: 99.41326904296875
patch: final int dp = new int [ p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 264
score: 99.40420871310764
patch: final int dp = this . distance [ i ] - p $NUMBER$ [ i ] ;
rank: 265
score: 99.47081938244048
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] . length ) { continue ; }
rank: 265
score: 99.46739612926136
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] [ i ] ;
rank: 265
score: 99.44639185855263
patch: dp $NUMBER$ [ i ] = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 265
score: 99.43315294053819
patch: int dp = 0 + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 265
score: 99.41322021484375
patch: final int dp = p 1 += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 265
score: 99.40400965073529
patch: double p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 266
score: 99.46930338541667
patch: distance += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 266
score: 99.46722966974431
patch: final int dp = 0 [ i ] - p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 266
score: 99.44625418526786
patch: if p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 266
score: 99.43938245271382
patch: final int dp = p 1 [ i ] , $STRING$ = p 1 [ i ] ;
rank: 266
score: 99.4330193014706
patch: final int dp = p $NUMBER$ [ 0 ] - p $NUMBER$ [ i ] ;
rank: 266
score: 99.41764831542969
patch: int final = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 266
score: 99.40392252604167
patch: r = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 267
score: 99.44581240699405
patch: final int dp = p 1 [ i ] == $STRING$ ? 0 : p $NUMBER$ [ i ] ;
rank: 267
score: 99.43900339226974
patch: final int dp = 0 ; final int [ ] dp = p 1 [ i ] ;
rank: 267
score: 99.43292914496527
patch: dp [ i ] = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 267
score: 99.41660670230263
patch: final int dp = p 1 : 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 267
score: 99.40367367393092
patch: final int dp = p 1 [ i ] - 1 ; sum += dp * dp ;
rank: 268
score: 99.4700039950284
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] > p 1 [ i ] ) {
rank: 268
score: 99.4683902138158
patch: return Math . sqrt ( dp 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 268
score: 99.46673874627976
patch: if = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 268
score: 99.44564964657738
patch: final double dp = p 1 [ i ] ; final int dp = p $NUMBER$ [ i ] ;
rank: 268
score: 99.43284696691177
patch: final int dp = p 1 [ i ] ^ p $NUMBER$ [ i ] ;
rank: 268
score: 99.41720377604166
patch: int dp = 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 269
score: 99.46999782986111
patch: final int dp = p 1 [ i ] [ p $NUMBER$ [ p $NUMBER$ ] ;
rank: 269
score: 99.445068359375
patch: final int dp = p 1 [ i ] != null ? p 1 [ i ] : 0 ;
rank: 269
score: 99.43848941200658
patch: final int dp += p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 269
score: 99.41603716681985
patch: final int dp = p 1 [ i ] << p $NUMBER$ [ i ] ;
rank: 269
score: 99.41111996299342
patch: final int dp = p 1 [ i & 0 ] - p $NUMBER$ [ i ] ;
rank: 270
score: 99.44504908511513
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] * 1 ;
rank: 270
score: 99.4383056640625
patch: final int dp = p 1 [ i ] - p 1 - p $NUMBER$ [ i ] ;
rank: 270
score: 99.43258666992188
patch: for p $NUMBER$ [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 270
score: 99.41111996299342
patch: int [ ] p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 270
score: 99.40272588315217
patch: final int dp = p 1 [ i ] - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 271
score: 99.46967230902777
patch: final double dp = p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 271
score: 99.44459838867188
patch: dp 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 271
score: 99.43809814453125
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 - 1 ] ;
rank: 271
score: 99.43190002441406
patch: int dp = p 1 [ i ] / p $NUMBER$ [ i ] ;
rank: 272
score: 99.46958295036765
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ 0 ] ;
rank: 272
score: 99.4657958984375
patch: final int dp = p 1 [ i ] + p $NUMBER$ + p 1 [ i ] ;
rank: 272
score: 99.4443423622533
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] + $NUMBER$ ;
rank: 272
score: 99.43799438476563
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 + $NUMBER$ ] ;
rank: 272
score: 99.43179481907895
patch: final int dp = p 1 [ i ] ? p $NUMBER$ [ i ] : 1 ;
rank: 272
score: 99.41667737458882
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - max ;
rank: 272
score: 99.41507975260417
patch: int dp = p 1 [ i + p $NUMBER$ [ i ] ;
rank: 272
score: 99.4026111421131
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . trim ( ) ;
rank: 273
score: 99.43724975585937
patch: final int dp = p 1 [ i ] - p 1 [ i ] ; dp ++ ;
rank: 273
score: 99.43161010742188
patch: final int < String > dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 273
score: 99.41627412683823
patch: final int dp = p 1 [ distance ] - p $NUMBER$ [ i ] ;
rank: 273
score: 99.40211588541666
patch: final int dp = p 1 [ i ] $NUMBER$ [ i ] ;
rank: 274
score: 99.46914493336396
patch: final int dp = p $NUMBER$ [ i ] & p $NUMBER$ [ i ] ;
rank: 274
score: 99.46690150669643
patch: final int dp = p 1 . [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 274
score: 99.4441150483631
patch: final int dp = p 1 [ i ] == p $NUMBER$ [ i ] ? 1 : 1 ;
rank: 274
score: 99.43088892886513
patch: final int [ ] dp = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 275
score: 99.46909790039062
patch: p $NUMBER$ [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 275
score: 99.44409790039063
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { return 0 ; }
rank: 275
score: 99.43683182565789
patch: final int dp = 0 - p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 276
score: 99.46674346923828
patch: for ( int i = 0 ; i >= 0 ; i ++ ) {
rank: 276
score: 99.43678685238487
patch: final int dp = p 1 [ i ] - p 1 [ i + i ] ;
rank: 276
score: 99.41416422526042
patch: sum += p 1 [ i ] - p $NUMBER$ [ i + 1 ] ; }
rank: 276
score: 99.41026000976562
patch: final int dp = p 1 | p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 277
score: 99.46657986111111
patch: return Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 277
score: 99.46431692023026
patch: final double dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 277
score: 99.43670043945312
patch: final int dp = 1 [ i ] ; final int dp = p 1 [ i ] ;
rank: 277
score: 99.43026572779605
patch: final int [ ] dp = p 1 [ i ] - p $NUMBER$ [ 1 ] ;
rank: 277
score: 99.4101806640625
patch: final int dp = p 1 [ i + - $NUMBER$ ] - p $NUMBER$ [ i ] ;
rank: 277
score: 99.40138872931985
patch: final int dp = p 1 [ i ] <= p $NUMBER$ [ i ] ;
rank: 278
score: 99.46635509672619
patch: dp = p 1 [ i ] - p $NUMBER$ [ i ] - dp $NUMBER$ [ i ] ;
rank: 278
score: 99.46429734002976
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ; ;
rank: 278
score: 99.4438232421875
patch: final int dp = p 1 [ i ] - ( int ) p 1 [ i ] ;
rank: 278
score: 99.43657684326172
patch: final int dp = 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 278
score: 99.41427273220486
patch: final int double dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 278
score: 99.4134457236842
patch: final int dp = i - dp $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 278
score: 99.41008557771382
patch: final int dp = p 1 , [ ] p $NUMBER$ = p $NUMBER$ [ i ] ;
rank: 279
score: 99.46889038085938
patch: final int dp = p 1 [ i ] - System . identity CaMeL Hash CaMeL Code ( ;
rank: 279
score: 99.46578369140624
patch: sum += p 1 [ i + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 279
score: 99.46422230113636
patch: final int dp = p 1 [ i ] - p 1 [ i / p $NUMBER$ [ i ] ;
rank: 279
score: 99.44355701264881
patch: final int dp = p 1 [ i ] - ( p $NUMBER$ [ i ] - 1 ) ;
rank: 279
score: 99.41338752297794
patch: final int dp = p 1 : p 1 [ i ] [ 1 ] ;
rank: 279
score: 99.40981158088235
patch: final int in = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 280
score: 99.46562267485119
patch: if ( p 1 [ i ] + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] )
rank: 280
score: 99.44310360863095
patch: final int dp = p 1 [ i ] > 1 ? p $NUMBER$ [ i ] : 0 ;
rank: 280
score: 99.43564967105263
patch: final int dp = p 1 [ i + i ] + p $NUMBER$ [ i ] ;
rank: 280
score: 99.42958470394737
patch: final int dp = 0 + p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 280
score: 99.41325298108552
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 : 0 ;
rank: 280
score: 99.41270345052084
patch: final int dp = p 1 [ i ] . size ( ) ;
rank: 280
score: 99.40940551757812
patch: final int dp = new double [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 281
score: 99.46403364701705
patch: int dp = p 1 [ i ] < p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 281
score: 99.44283040364583
patch: if ( p 1 [ i ] == 0 ) { continue ; }
rank: 281
score: 99.4294921875
patch: final int dp = p 1 [ 0 ] [ i ] - p $NUMBER$ [ i ] ;
rank: 281
score: 99.41259765625
patch: final int dp = p 1 [ i + ] - p $NUMBER$ [ i ] ;
rank: 281
score: 99.39977309283088
patch: float p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 282
score: 99.41188677619485
patch: sum += dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 282
score: 99.4117072610294
patch: final int dp = int $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 282
score: 99.40908203125
patch: final int dp = p 1 | p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 282
score: 99.39976742393092
patch: final int dp = p 1 [ i ] - this . p $NUMBER$ [ i ] ;
rank: 283
score: 99.4419177827381
patch: final int dp = Math . max ( p $NUMBER$ [ i ] , p $NUMBER$ [ i ] ;
rank: 283
score: 99.42867024739583
patch: int dp = 0 + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 283
score: 99.40901906866776
patch: final int dp = ( p 1 [ i ] + p $NUMBER$ [ i ] ) ;
rank: 283
score: 99.39972245065789
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . min ;
rank: 284
score: 99.46795654296875
patch: final int dp = p 1 [ i ] - 1 $NUMBER$ - p $NUMBER$ [ i ] ;
rank: 284
score: 99.46379743303571
patch: double dp = p 1 [ i + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 284
score: 99.44190615699405
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] . trim ( ) ;
rank: 284
score: 99.42851177014802
patch: final int [ ] dp = p 1 [ i ] [ p $NUMBER$ [ i ] ;
rank: 284
score: 99.41090794613487
patch: String dp = p 1 : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 284
score: 99.40900336371527
patch: final int dp = += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 285
score: 99.46793619791667
patch: int dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ] ) ;
rank: 285
score: 99.46372767857143
patch: for ( int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; ; ) {
rank: 285
score: 99.44172014508929
patch: int dp = Math . min ( p 1 [ i ] , p 1 [ i ] ) ;
rank: 285
score: 99.43515194163604
patch: final int dp = p 1 [ i ] + max $NUMBER$ [ i ] ;
rank: 285
score: 99.41083727384868
patch: final final int dp = p 1 [ [ i ] - p $NUMBER$ [ i ] ;
rank: 285
score: 99.40897409539474
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ length + $NUMBER$ ] ;
rank: 285
score: 99.39851459703948
patch: final int dp = p 1 [ i ] - start ; sum += dp * dp ;
rank: 286
score: 99.44170851934524
patch: final int dp = p 1 [ i ] . length ( ) - p $NUMBER$ [ i ] ;
rank: 286
score: 99.43514404296874
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - $NUMBER$ + 1 ;
rank: 286
score: 99.42796630859375
patch: final int [ ] p 1 = p 1 [ i ] + p 1 [ i ] ;
rank: 286
score: 99.40879991319444
patch: else final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 286
score: 99.39844912574405
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum -= dp ;
rank: 287
score: 99.46745031020221
patch: final double dp = p 1 [ i ] & p $NUMBER$ [ i ] ;
rank: 287
score: 99.46275111607143
patch: this . dp 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 287
score: 99.4416015625
patch: final int dp = p $NUMBER$ [ i ] , p $NUMBER$ = p $NUMBER$ [ i ] ;
rank: 287
score: 99.43468017578125
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i - $NUMBER$ + 1 ] ;
rank: 287
score: 99.42783717105263
patch: final int [ ] $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 287
score: 99.40858154296875
patch: int dp ; final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 288
score: 99.46729678199405
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] < p 1 [ i ] ;
rank: 288
score: 99.46312313988095
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i * p 1 [ i ] ;
rank: 288
score: 99.44155883789062
patch: long dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 288
score: 99.4345703125
patch: final int dp = 0 ; int dp = p 1 [ i ] ;
rank: 288
score: 99.40987955729166
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] +
rank: 288
score: 99.4081787109375
patch: final int dp = i ) - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 288
score: 99.39820692274306
patch: tmp [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 289
score: 99.46698552911931
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] != p $NUMBER$ [ i ] ) {
rank: 289
score: 99.4623959189967
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ 0 ] ;
rank: 289
score: 99.44081624348958
patch: final int dp = p 1 [ i ] & 0 p 1 [ i ] ;
rank: 289
score: 99.43436279296876
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; dp -- ;
rank: 290
score: 99.46690609580592
patch: final int dp = 0 [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 290
score: 99.46221923828125
patch: for ( int i = 0 ; i <= p $NUMBER$ [ i ] ; i ++ ) {
rank: 290
score: 99.4404296875
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] 1 [ i ] ;
rank: 290
score: 99.40949563419117
patch: sum += dp 1 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 290
score: 99.40882568359375
patch: final dp 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 291
score: 99.46208753083882
patch: { final int dp = p 1 . [ i ] - p $NUMBER$ [ i ] ;
rank: 291
score: 99.43374794407895
patch: final int dp = p 1 [ i ] ; if p $NUMBER$ [ i ] ++ ;
rank: 291
score: 99.40781860351562
patch: final int dp = read ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 292
score: 99.46254660866477
patch: final int dp = 0 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 292
score: 99.46198381696429
patch: i = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 292
score: 99.42683679917279
patch: final int dp = dp 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 292
score: 99.40937243009868
patch: sum += p 1 + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 292
score: 99.4083984375
patch: final int dp = p 1 [ i ] . get ( p 1 [ i ] ) ;
rank: 292
score: 99.40743215460526
patch: do { final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 292
score: 99.39762155633224
patch: final int dp = p 1 . get ( i ) - p $NUMBER$ [ i ] ;
rank: 293
score: 99.46221313476562
patch: final int dp = Math . max p 1 [ i ] - p 1 [ i ] ;
rank: 293
score: 99.44001116071429
patch: int dp = Math . max ( p $NUMBER$ [ i ] , p $NUMBER$ [ i ] ) ;
rank: 293
score: 99.4330810546875
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + i ] ;
rank: 293
score: 99.42662811279297
patch: int dp = p 1 [ i ] [ p 1 [ i ] ;
rank: 293
score: 99.40933566623264
patch: final int dp = p 1 >> [ i ] - p $NUMBER$ [ i ] ;
rank: 293
score: 99.40821597450658
patch: int dp = int $NUMBER$ [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 293
score: 99.39755859375
patch: j += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 294
score: 99.4612972861842
patch: final int dp ; sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 294
score: 99.43995303199405
patch: final int dp = p 1 [ i ] - ( p $NUMBER$ [ i ] + 1 ) ;
rank: 294
score: 99.43255004882812
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 - i ) ;
rank: 294
score: 99.42658996582031
patch: int i = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 294
score: 99.40804250616776
patch: final int dp = int - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 294
score: 99.40714946546052
patch: final int [ ] name = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 294
score: 99.39755394345238
patch: final int dp = p 1 [ i ] . length ; sum += dp * dp * dp ;
rank: 295
score: 99.46186755952381
patch: int dp = p 1 [ i ] - p $NUMBER$ , i = p $NUMBER$ [ i ] ;
rank: 295
score: 99.43227667557566
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i - 0 ] ;
rank: 295
score: 99.40711885340073
patch: final int dp = p 1 [ i ] - distance $NUMBER$ [ i ] ;
rank: 295
score: 99.39748128255208
patch: array [ i ] = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 296
score: 99.43140326605902
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ ;
rank: 296
score: 99.42571057771382
patch: final int dp = p 1 [ i ] + 0 - p $NUMBER$ [ i ] ;
rank: 296
score: 99.4089291221217
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ 1 ] ;
rank: 296
score: 99.40787999770221
patch: final int dp = int 1 [ dp ] - p $NUMBER$ [ i ] ;
rank: 296
score: 99.40695626395089
patch: return p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 297
score: 99.42544716282895
patch: final int dp = p 1 [ i ] - i + p $NUMBER$ [ i ] ;
rank: 297
score: 99.40882975260416
patch: dp = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 297
score: 99.40785047743056
patch: final int dp = p 1 [ [ i ] + p $NUMBER$ [ i ] ;
rank: 297
score: 99.4066650390625
patch: final int dp = p 1 . [ i ] - p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 297
score: 99.39646809895834
patch: max = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 298
score: 99.46554904513889
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; ;
rank: 298
score: 99.46141468394886
patch: final int dp = p 1 [ i ] - p $NUMBER$ , i : p $NUMBER$ [ i ] ;
rank: 298
score: 99.45985717773438
patch: for ( int i = 0 ; i < p 1 . length ; i ++ ) { {
rank: 298
score: 99.4087273092831
patch: final int dp = i 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 298
score: 99.4077377319336
patch: int dp += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 298
score: 99.40645751953124
patch: final int dp ; int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 299
score: 99.4654873934659
patch: int dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 299
score: 99.46140008223684
patch: int dp = p 1 [ i ] - p $NUMBER$ + p 1 [ i ] ;
rank: 299
score: 99.4596935453869
patch: dp = p 1 [ i ] - p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 299
score: 99.43040064761513
patch: final int dp = p 1 [ i ] - p 1 [ i ] + $STRING$ ;
rank: 299
score: 99.42523803710938
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] [ 0 ] ;
rank: 299
score: 99.40643920898438
patch: final int dp = p 1 >= p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 299
score: 99.39619954427083
patch: path = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 300
score: 99.46541341145833
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ $NUMBER$ [ i ] ;
rank: 300
score: 99.43857935855263
patch: try { final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 300
score: 99.42489624023438
patch: if p $NUMBER$ [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 300
score: 99.40704666940789
patch: if ( p 1 [ i ] . equals ( p $NUMBER$ [ i ] ) ) {
rank: 300
score: 99.40609130859374
patch: final int dp = p 1 , p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 300
score: 99.39617365056819
patch: final int dp = Math . sqrt ( dp 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 301
score: 99.46498018152573
patch: final String dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 301
score: 99.45944213867188
patch: for ( int dp = i - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 301
score: 99.43834867931548
patch: final int dp = Math . min ( p 1 [ i ] , p 1 [ i ] ;
rank: 301
score: 99.42982884457237
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 0 - 1 ] ;
rank: 301
score: 99.4085757606908
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] : 0 ;
rank: 301
score: 99.40689086914062
patch: final int dp = new long [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 301
score: 99.40581954152961
patch: final int chars [ ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 302
score: 99.46497866981908
patch: p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 302
score: 99.4602409811581
patch: final E dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 302
score: 99.43833414713542
patch: final int dp = p 1 [ i ] & 0 p $NUMBER$ [ i ] ;
rank: 302
score: 99.42860171669408
patch: final int dp = p 1 [ i ] [ p $NUMBER$ [ i - 1 ] ;
rank: 302
score: 99.42443237304687
patch: final int [ ] dp = p 1 [ [ i ] - p $NUMBER$ [ i ] ;
rank: 302
score: 99.40660942925348
patch: int dp = i + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 303
score: 99.43824404761905
patch: int dp = Math . abs ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 303
score: 99.42425215871711
patch: final int dp = p 1 [ i ] ? p 1 [ i ] : 0 ;
rank: 303
score: 99.40760904947916
patch: double dp = p 1 [ i ] - p $NUMBER$ [ i ]
rank: 303
score: 99.40653911389802
patch: p 1 [ i ] = dp $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 303
score: 99.40569747121711
patch: final int [ ] start = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 303
score: 99.39557206003289
patch: p $NUMBER$ [ i ] = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 304
score: 99.46429998224431
patch: final int dp = p 1 [ i ] - System . identity CaMeL Hash CaMeL Code ( p $NUMBER$ ;
rank: 304
score: 99.45852661132812
patch: dp = p 1 [ i ] - p $NUMBER$ [ i + p $NUMBER$ [ i ] ;
rank: 304
score: 99.42815399169922
patch: final int dp = 1 [ i ] - p 1 [ i ] ;
rank: 304
score: 99.40743679470486
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] $NUMBER$ ;
rank: 304
score: 99.4063720703125
patch: int dp = ( double ) p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 304
score: 99.40565795898438
patch: final int dp = p $NUMBER$ + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 304
score: 99.39553000710227
patch: final int dp = p 1 [ i ] - Math . sqrt ( p $NUMBER$ [ i ] ) ;
rank: 305
score: 99.46409970238095
patch: if ( p 1 [ i ] - p 1 [ i ] == p $NUMBER$ [ i ] ;
rank: 305
score: 99.45908425071023
patch: final int [ ] [ ] p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 305
score: 99.45847039473684
patch: if ( p 1 [ i ] == ( int ) p $NUMBER$ [ i ] ) {
rank: 305
score: 99.43771362304688
patch: int dp = p 1 [ i ] [ p $NUMBER$ [ i ] ;
rank: 305
score: 99.42374267578126
patch: final int dp = p 1 [ i ] . p $NUMBER$ [ p 1 [ i ] ;
rank: 306
score: 99.46407645089286
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { sum ++ ; } }
rank: 306
score: 99.45790318080357
patch: if ( dp 1 [ i ] + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 306
score: 99.43755812872024
patch: if ( ! p 1 [ i ] . equals ( p $NUMBER$ [ i ] ) ) continue ;
rank: 306
score: 99.40568991268383
patch: final int Math = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 306
score: 99.40492650082237
patch: final int dp = p 1 [ i ] ( ) - p $NUMBER$ [ i ] ;
rank: 307
score: 99.4635897549716
patch: double dp = p 1 [ i ] - p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 307
score: 99.45872587316177
patch: final int dp = p 1 [ i ] == p $NUMBER$ [ i ] ;
rank: 307
score: 99.45784505208333
patch: final int dp = p 1 [ i + p $NUMBER$ [ i + p $NUMBER$ [ i ] ;
rank: 307
score: 99.43717041015626
patch: if ( p 1 [ i ] == p 1 [ i ] ) { break ; } }
rank: 307
score: 99.42729106702302
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ 1 - i ] ;
rank: 307
score: 99.42344037224265
patch: final Object dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 307
score: 99.40565185546875
patch: sum += ( int ) ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 307
score: 99.40489286534927
patch: final int if = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 307
score: 99.39508611505681
patch: final int dp = p 1 . length - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 308
score: 99.4584628018466
patch: int dp = p 1 [ i ] < p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 308
score: 99.4575927734375
patch: dp p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 308
score: 99.43715122767857
patch: final int dp = p 1 [ i ] ; final long dp = p $NUMBER$ [ i ] ;
rank: 308
score: 99.42710966222427
patch: final int dp = p 1 [ i ] - p 1 [ i ) ;
rank: 308
score: 99.40482823988971
patch: final int dp = p 1 [ length ] - p $NUMBER$ [ i ] ;
rank: 309
score: 99.45751953125
patch: return ( Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ) ;
rank: 309
score: 99.42695055509868
patch: final int dp = p 1 [ i ] , max = p 1 [ i ] ;
rank: 309
score: 99.40709164268092
patch: for ( final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 310
score: 99.46299525669643
patch: for ( int i = 0 ; i < p 1 [ i ] ; i ++ ) { ;
rank: 310
score: 99.42692057291667
patch: int dp = p 1 [ i ] - p 1 [ i + 1 ] ;
rank: 310
score: 99.39476182725694
patch: args [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 311
score: 99.46292724609376
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ) { sum ++ ; }
rank: 311
score: 99.4370349702381
patch: final int dp = p 1 [ i ] == 1 ? 0 : p 1 [ i ] ;
rank: 311
score: 99.42680278577302
patch: final int dp = 0 - i ; final int dp = p 1 [ i ] ;
rank: 311
score: 99.42215768914474
patch: final int dp = p 1 [ i ] - 1 + p $NUMBER$ [ i ] ;
rank: 311
score: 99.40667403371711
patch: final int dp = p 1 [ i ] , p $NUMBER$ = p $NUMBER$ [ i ]
rank: 311
score: 99.40498046875
patch: final int dp = final ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 311
score: 99.40419407894737
patch: final int dp = p 1 [ i , p $NUMBER$ = p $NUMBER$ [ i ] ;
rank: 311
score: 99.39390804893092
patch: r 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 312
score: 99.46279761904762
patch: for ; p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 312
score: 99.42650010850694
patch: int dp = p 1 [ i ] + p $NUMBER$ [ i + 1 ] ;
rank: 312
score: 99.40643310546875
patch: sum += p 1 [ i ] + p $NUMBER$ [ i ]
rank: 312
score: 99.40488891601562
patch: final int dp = ( int ) dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 313
score: 99.45793321397569
patch: final int dp = p 1 [ -- i ] - p $NUMBER$ [ i ] ;
rank: 313
score: 99.42195434570313
patch: if p 1 [ i ] = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 313
score: 99.40636488970588
patch: int dp = p 1 [ i ] - - p $NUMBER$ [ i ] ;
rank: 313
score: 99.39375813802083
patch: n = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 314
score: 99.46240234375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ p 1 . length / $NUMBER$ ] ;
rank: 314
score: 99.42189654181985
patch: final int dp = ( i - 1 ) - p $NUMBER$ [ i ] ;
rank: 314
score: 99.40361938476562
patch: final int dp = p 1 [ final $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 315
score: 99.4623779296875
patch: for ( int i = 1 ; i < p 1 [ i ] ; i ++ ) {
rank: 315
score: 99.45780806107955
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - p 1 [ i ] ;
rank: 315
score: 99.45553588867188
patch: this . distance [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 315
score: 99.43621215820312
patch: dp 1 [ i ] = p 1 [ i ] + p $NUMBER$ [ i ] ; }
rank: 315
score: 99.40574137369792
patch: final int dp = p 1 != 0 ? p $NUMBER$ [ i ] : 0 ;
rank: 315
score: 99.40403119255515
patch: int dp = p 1 [ i ] 0 - p $NUMBER$ [ i ] ;
rank: 315
score: 99.39357688210227
patch: final int dp = Math . ceil ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 316
score: 99.46236572265624
patch: p 1 [ i ] = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ; }
rank: 316
score: 99.43602353050595
patch: if ( p 1 [ i ] == p 1 [ i ] ) { continue ; } else {
rank: 316
score: 99.42635305304276
patch: final int dp = p 1 [ i ] , $STRING$ = p $NUMBER$ [ i ] ;
rank: 316
score: 99.40505499588816
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . size 1
rank: 316
score: 99.40377197265624
patch: final final int dp = p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 316
score: 99.40283813476563
patch: final int dp = p 1 [ i ] ; final sum += dp * dp * dp ;
rank: 316
score: 99.39324629934211
patch: p 1 [ i ] = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 317
score: 99.4570079985119
patch: final int dp = 0 ; if = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 317
score: 99.45372924804687
patch: i = Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 317
score: 99.43573319284539
patch: final int dp = Math . min ( p 1 , p 1 [ i ] ) ;
rank: 317
score: 99.42625025699013
patch: final int dp = p 1 [ i ] ; if p 1 [ i ] ++ ;
rank: 317
score: 99.42061121323529
patch: final boolean dp = p 1 [ i ] - p 1 [ i ] ;
rank: 317
score: 99.40489366319444
patch: final int short dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 317
score: 99.40361192491319
patch: final int int dp = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 317
score: 99.39321067116477
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . length [ i ] ;
rank: 318
score: 99.45689697265625
patch: final int dp = p 1 [ i ] [ p 1 [ p $NUMBER$ [ i ] ;
rank: 318
score: 99.45372009277344
patch: if ( dp 1 [ i ] == p $NUMBER$ [ i ] ) {
rank: 318
score: 99.43522563733552
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] + 1 ;
rank: 318
score: 99.42562705592105
patch: final int dp = p 1 [ i ] - i $NUMBER$ [ i + 1 ] ;
rank: 318
score: 99.40481728001645
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . size $NUMBER$
rank: 318
score: 99.39259168836806
patch: S [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 319
score: 99.46198473478618
patch: final String dp = p 1 [ i ] + $STRING$ + p $NUMBER$ [ i ] ;
rank: 319
score: 99.40464381167763
patch: int dp = p $NUMBER$ : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 320
score: 99.46176629317434
patch: if ( p $NUMBER$ [ i ] < p $NUMBER$ [ i ] ) { continue ; }
rank: 320
score: 99.41997327302632
patch: final int dp = p 1 [ i ] ? p $NUMBER$ [ i ] : $NUMBER$ ;
rank: 320
score: 99.40443420410156
patch: final int dp = p 1 [ i ] - p $NUMBER$ : $NUMBER$ ;
rank: 320
score: 99.40310829564145
patch: final int dp = p 1 [ i ] . distance ( p $NUMBER$ [ i ] ,
rank: 320
score: 99.40216064453125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ max $NUMBER$ [ i ] ;
rank: 320
score: 99.39210094105114
patch: final int dp = p 1 [ i ] - p $NUMBER$ . length ; sum += dp * dp ;
rank: 321
score: 99.46172805059524
patch: final Integer dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ) ;
rank: 321
score: 99.43462844122024
patch: if - p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 321
score: 99.42481753700658
patch: final int dp = 0 ; final int dp = p 1 [ i - 1 ] ;
rank: 321
score: 99.402880859375
patch: p 1 [ [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 321
score: 99.39201216264205
patch: final int dp = p 1 . length - p 1 [ i ] ; sum += dp * dp ;
rank: 322
score: 99.45654907226563
patch: final int dp = Math . dp p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 322
score: 99.45296020507813
patch: for ( int i = 0 ; i < dp 1 [ i ] ; i ++ ) {
rank: 322
score: 99.43435187088816
patch: if ( p 1 [ i ] < p 1 [ i ] ) { break ; }
rank: 322
score: 99.42476613898026
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i + 0 ] ;
rank: 322
score: 99.41970645680146
patch: final int dp = 0 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 322
score: 99.40277099609375
patch: distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 322
score: 99.39182942708334
patch: x += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 323
score: 99.46141967773437
patch: final int dp = p 1 [ i ] - 1 $NUMBER$ * p $NUMBER$ [ i ] ;
rank: 323
score: 99.45288696289063
patch: for ( int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; ) {
rank: 323
score: 99.42460801866319
patch: final int dp i = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 323
score: 99.4027587890625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ dp ] ;
rank: 323
score: 99.40176595052084
patch: final int dp = [ i ] - p $NUMBER$ [ i ] ;
rank: 323
score: 99.39180715460526
patch: m 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 324
score: 99.4556396484375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 [ 1 ] ;
rank: 324
score: 99.45267944335937
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ length ] ;
rank: 324
score: 99.42446417557566
patch: final int dp = p 1 [ i ] - p 1 [ i + 0 ] ;
rank: 324
score: 99.41860064338235
patch: final int dp = p 1 [ 1 ] + p $NUMBER$ [ i ] ;
rank: 324
score: 99.40348307291667
patch: return p 1 [ i ] + p $NUMBER$ [ i ] ; }
rank: 324
score: 99.40184783935547
patch: int dp = p 1 [ i ] - dp $NUMBER$ [ i ] ;
rank: 324
score: 99.40150282118056
patch: final int dp = p 1 ) [ i ] - p $NUMBER$ [ i ] ;
rank: 324
score: 99.39179144965277
patch: final int dp = p 1 [ i ] - p 1 [ i ] ; double
rank: 325
score: 99.4610262784091
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ) {
rank: 325
score: 99.43381219161184
patch: if ( p 1 [ i ] >= p 1 [ i ] ) { continue ; }
rank: 325
score: 99.42405941611842
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + null ;
rank: 325
score: 99.40145070929276
patch: final int dp = p 1 [ int - i ] - p $NUMBER$ [ i ] ;
rank: 326
score: 99.46101459703948
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; if ;
rank: 326
score: 99.45213623046875
patch: for ( int dp = 0 ; dp < p 1 [ i ] ; dp ++ ) {
rank: 326
score: 99.4330990439967
patch: if ( p 1 [ i ] > p 1 [ i ] ) { continue ; }
rank: 326
score: 99.42385684742646
patch: final int dp = p 1 [ i ] - p $NUMBER$ , i ++ ;
rank: 326
score: 99.40296695106908
patch: final int dp = p 1 , dp = p 1 : p 1 [ i ] ;
rank: 326
score: 99.40113661024306
patch: final int dp = ~ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 327
score: 99.45466918945313
patch: final int dp = p 1 [ i ] [ i ] + p 1 [ i ] ;
rank: 327
score: 99.43296508789062
patch: final double dp = p 1 [ i ] , p $NUMBER$ = p $NUMBER$ [ i ] ;
rank: 327
score: 99.41798706054688
patch: int dp = p 1 [ i ] != null ? p $NUMBER$ [ i ] : null ;
rank: 327
score: 99.40107421875
patch: final int dp = p 1 : p 1 [ i ] - p 1 [ i ] ;
rank: 328
score: 99.46041709498355
patch: if ; final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 328
score: 99.45423081341912
patch: final void dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 328
score: 99.4328380766369
patch: final int i = Math . min ( p 1 [ i ] , p $NUMBER$ [ i ] ;
rank: 328
score: 99.42365858289931
patch: final int dp = 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 328
score: 99.41773817274306
patch: int dp = p 1 [ i ] ? p $NUMBER$ [ i ] : 0 ;
rank: 328
score: 99.40104370117187
patch: final int dp = p 1 * p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 328
score: 99.3908755653783
patch: final int dp = p 1 [ i + $NUMBER$ ] ; sum += dp * dp ;
rank: 329
score: 99.45985107421875
patch: final int dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ;
rank: 329
score: 99.45415649414062
patch: dp p $NUMBER$ [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 329
score: 99.40250651041667
patch: final int dp = p 1 [ i ] - p $NUMBER$ : i : i ;
rank: 329
score: 99.40052490234375
patch: final int dp = int [ ] p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 329
score: 99.40044806985294
patch: final int dp = p 1 , p 1 = p $NUMBER$ [ i ] ;
rank: 329
score: 99.39085751488095
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; sum += dp ;
rank: 330
score: 99.4596923828125
patch: int dp = Math . min ( p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 330
score: 99.45151095920139
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 330
score: 99.43254937065973
patch: final int dp = p 1 [ i ] ( p 1 [ i ] ) ;
rank: 330
score: 99.42295435855263
patch: final int dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i + 1 ] ;
rank: 330
score: 99.40244427849265
patch: final int chars = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 330
score: 99.39068603515625
patch: double sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 331
score: 99.45957318474265
patch: final long dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 331
score: 99.4321224814967
patch: int dp = p 1 [ i ] , p $NUMBER$ = p $NUMBER$ [ i ] ;
rank: 331
score: 99.42277257582721
patch: final int dp = 1 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 331
score: 99.40028686523438
patch: assert p 1 [ i ] + p $NUMBER$ [ i ] += p $NUMBER$ [ i ] ;
rank: 331
score: 99.39950561523438
patch: final dp $NUMBER$ [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 331
score: 99.39064427425987
patch: final int dp = 1 - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 332
score: 99.45107014973958
patch: if ( dp = p 1 [ i ] - p $NUMBER$ [ i ] ) {
rank: 332
score: 99.42276161595395
patch: final int dp = p 1 [ i ] * p $NUMBER$ [ i - 1 ] ;
rank: 332
score: 99.40205891927083
patch: sum += ( dp 1 [ i ] - p $NUMBER$ [ i ] ) ; }
rank: 332
score: 99.400244140625
patch: final int dp = p 1 || p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 332
score: 99.3994140625
patch: int dp = p 1 [ i ] ) - p $NUMBER$ [ i ] ;
rank: 332
score: 99.39057074652777
patch: final double p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 333
score: 99.41676089638158
patch: final int [ ] dp = ( int [ ] ] ) p 1 [ i ] ;
rank: 333
score: 99.40191291360294
patch: sum += ( p 1 [ i ] - p $NUMBER$ [ i ] ) ?
rank: 333
score: 99.39044189453125
patch: values [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 334
score: 99.45914952895221
patch: int dp = p 1 [ i ] + p $NUMBER$ $NUMBER$ [ i ] ;
rank: 334
score: 99.45325288318452
patch: final int p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 334
score: 99.45075819227431
patch: i = ( int ) p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 334
score: 99.43168640136719
patch: char dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 334
score: 99.42265239514802
patch: final int dp = get = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 334
score: 99.40147640830592
patch: int dp = dp 1 : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 334
score: 99.39911295572917
patch: final int dp = p 1 ] - p $NUMBER$ [ i ] ;
rank: 334
score: 99.39024769176136
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + p $NUMBER$ . length ] ;
rank: 335
score: 99.4532470703125
patch: final int dp = p 1 [ i ] - p $NUMBER$ + i $NUMBER$ [ i ] ;
rank: 335
score: 99.43155110677084
patch: if ( p 1 [ i ] == p 1 [ i ] ;
rank: 335
score: 99.422607421875
patch: final int dp = p 1 [ i ] - $STRING$ + p 1 [ i ] ;
rank: 335
score: 99.41658020019531
patch: final int += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 335
score: 99.40141858552632
patch: final int dp = p 1 , dp = p 1 : p $NUMBER$ [ i ] ;
rank: 335
score: 99.39869995117188
patch: int dp = int [ ] : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 335
score: 99.39857884457237
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ length - 1 ] ;
rank: 335
score: 99.39005126953126
patch: final try { final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 336
score: 99.45884486607143
patch: if ( p 1 [ i ] - p 1 [ i ] > p $NUMBER$ [ i ] ;
rank: 336
score: 99.45048217773437
patch: if ( p 1 [ i ] + p $NUMBER$ [ i ] - p $NUMBER$ [ i ]
rank: 336
score: 99.43148949032738
patch: final int dp = p 1 [ i ] < p $NUMBER$ [ i ] ? 1 : 0 ;
rank: 336
score: 99.42237613075658
patch: final int dp = p $NUMBER$ [ i ] - p 1 [ i + 1 ] ;
rank: 336
score: 99.40139770507812
patch: double distance = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 336
score: 99.39852142333984
patch: int name = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 336
score: 99.39851459703948
patch: final int [ ] Math = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 336
score: 99.38886461759868
patch: final int dp = 1 + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 337
score: 99.4587043313419
patch: final float dp = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 337
score: 99.41633875229779
patch: final boolean dp = p 1 [ i ] == p $NUMBER$ [ i ] ;
rank: 337
score: 99.39835815429687
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; i ++ ;
rank: 337
score: 99.39829711914062
patch: p 1 [ [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 338
score: 99.45858604029605
patch: if ( p 1 [ i ] != p $NUMBER$ [ i ] ) { break ; }
rank: 338
score: 99.45235595703124
patch: final int dp = p 1 [ i ] - p 1 * p $NUMBER$ [ i ] ;
rank: 338
score: 99.42213841488487
patch: final int dp = 0 ; final int dp = p 1 [ i + 1 ] ;
rank: 338
score: 99.3980712890625
patch: final int dp = p 1 [ [ i ] - p $NUMBER$ [ i ] - dp ;
rank: 339
score: 99.44951428865132
patch: { final int dp 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 339
score: 99.4302619485294
patch: final int dp = p 1 [ i ] . double CaMeL Value ( ) ;
rank: 339
score: 99.421875
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + ;
rank: 339
score: 99.41596422697368
patch: final int [ ] dp = p 1 [ i ] & p $NUMBER$ [ i ] ;
rank: 339
score: 99.40045525045956
patch: int dp = p 1 [ i ] - p $NUMBER$ 1 [ i ] ;
rank: 339
score: 99.39804559004934
patch: final int dp = p 1 [ i ] . 0 - p $NUMBER$ [ i ] ;
rank: 339
score: 99.39783935546875
patch: final int dp = p 1 >= p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 339
score: 99.38835144042969
patch: float sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 340
score: 99.45167300575658
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i * 0 ] ;
rank: 340
score: 99.44935825892857
patch: sum += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 340
score: 99.43016357421875
patch: final int dp = p 1 [ i ] - ( double ) p $NUMBER$ [ i ] ;
rank: 340
score: 99.421630859375
patch: final int dp = p 1 [ i ] * p $NUMBER$ [ i + 1 ] ;
rank: 340
score: 99.41567654079861
patch: final int dp = p 1 [ i ] { p $NUMBER$ [ i ] } ;
rank: 340
score: 99.40042917351974
patch: sum += Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 340
score: 99.39796549479166
patch: sum += dp $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 340
score: 99.39768473307292
patch: int dp = i - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 340
score: 99.38768246299342
patch: final int dp = p 1 . length [ i ] - p 1 [ i ] ;
rank: 341
score: 99.44926525297619
patch: for ( int [ ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 341
score: 99.42117648654514
patch: final int dp = p 1 [ i ] ; if p $NUMBER$ [ i ] }
rank: 341
score: 99.41549682617188
patch: int dp = p 1 [ i ] : p $NUMBER$ [ i ] ;
rank: 341
score: 99.39959716796875
patch: sum += dp 1 [ i ] - p 1 [ i ] ; }
rank: 341
score: 99.3979556435033
patch: int dp = p 1 [ i 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 341
score: 99.39741346571181
patch: final int dp = p 1 extends [ i ] - p $NUMBER$ [ i ] ;
rank: 341
score: 99.38765092329545
patch: final int dp = p 1 [ i ] - Math . sqrt ( p 1 [ i ] ) ;
rank: 342
score: 99.45796130952381
patch: final int dp = p 1 [ i ] . length - p $NUMBER$ [ i ] . length ;
rank: 342
score: 99.429296875
patch: if ( p 1 [ i ] == p 1 [ i ] ) { return 0 ; }
rank: 342
score: 99.41537314967105
patch: / * final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 342
score: 99.39715576171875
patch: sum += p 1 [ i + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 343
score: 99.45090553977273
patch: int dp = p 1 [ i ] [ p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 343
score: 99.42918701171875
patch: final int dp = p 1 [ i ] . substring ( p 1 [ i ] ) ;
rank: 343
score: 99.39940688189338
patch: final int dp = p 1 : p 1 : p $NUMBER$ [ i ] ;
rank: 343
score: 99.39745483398437
patch: final int dp = p 1 [ [ i ] - p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 343
score: 99.39708187705592
patch: else { final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 344
score: 99.45783342633929
patch: final int dp = p 1 [ i ] ] - p $NUMBER$ [ p $NUMBER$ [ i ] ;
rank: 344
score: 99.4486572265625
patch: for ( int dp = 0 ; i < p 1 [ i ] ; i ++ ) {
rank: 344
score: 99.42875591077302
patch: final int dp = p $NUMBER$ [ i ] . length - p $NUMBER$ [ i ] ;
rank: 344
score: 99.41994900173611
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i - ] ;
rank: 344
score: 99.41529541015625
patch: final int dp = p 1 [ i ] ? p $NUMBER$ [ i ] : - $NUMBER$ ;
rank: 344
score: 99.397412109375
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - [ i ] ;
rank: 345
score: 99.41473067434211
patch: final int dp = p 1 [ i ] & 1 + p $NUMBER$ [ i ] ;
rank: 345
score: 99.39914279513889
patch: sum += p 1 [ i ] - p $NUMBER$ [ 1 [ i ] ; }
rank: 345
score: 99.39737099095395
patch: final int dp = p 1 [ i ] - p 1 [ i ] - dp ;
rank: 345
score: 99.39680032169117
patch: final int dp = p 1 , [ ] - p $NUMBER$ [ i ] ;
rank: 346
score: 99.457275390625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + p $NUMBER$ ] ;
rank: 346
score: 99.42831566220238
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] . size ( ) ;
rank: 346
score: 99.41843775699013
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] - $STRING$ ;
rank: 346
score: 99.41453552246094
patch: int dp = p 1 [ i ] = p $NUMBER$ [ i ] ;
rank: 346
score: 99.39913177490234
patch: final int dp = p 1 [ i ] + p $NUMBER$ : i ;
rank: 347
score: 99.44813296669408
patch: for ( int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; {
rank: 347
score: 99.4279052734375
patch: final int dp = p 1 [ i ] . last CaMeL Index CaMeL Of ( $STRING$ ) ;
rank: 347
score: 99.41818576388889
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ] ;
rank: 347
score: 99.41372198807566
patch: final int [ ] p $NUMBER$ = ( int [ ] ) p 1 [ i ] ;
rank: 347
score: 99.39908640008224
patch: final for ( int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 347
score: 99.3970947265625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : ] ;
rank: 347
score: 99.39614868164062
patch: final int dp = p 1 [ i int - i ] - p $NUMBER$ [ i ] ;
rank: 347
score: 99.38662880345395
patch: m 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 348
score: 99.45693824404762
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ p 1 [ p $NUMBER$ ] ;
rank: 348
score: 99.45029025607639
patch: final int dp = p 1 [ i ] - p 1 [ i ] ; ;
rank: 348
score: 99.3990478515625
patch: sum += dp 1 [ i ] - p $NUMBER$ [ i ]
rank: 349
score: 99.45006742931548
patch: final final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 349
score: 99.44780040922619
patch: if ( p 1 [ i ] + p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 349
score: 99.39897717927632
patch: return Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 349
score: 99.39677991365132
patch: final int dp = p 1 [ i ] . length - dp $NUMBER$ [ i ] ;
rank: 350
score: 99.4567538174716
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ p $NUMBER$ . length / $NUMBER$ ] ;
rank: 350
score: 99.44979697779605
patch: final int dp = Math . dp $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 350
score: 99.44709858141448
patch: int [ ] dp 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 350
score: 99.41692437065973
patch: final int dp = p 1 [ i ] ; if p 1 [ i ] }
rank: 350
score: 99.41357421875
patch: int i = p 1 [ i ] - p 1 [ i ] ;
rank: 350
score: 99.39650472005208
patch: final int dp = p 1 [ i ] . [ p $NUMBER$ [ i ] ;
rank: 350
score: 99.3955437155331
patch: sum += ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 350
score: 99.38590280633224
patch: v $NUMBER$ [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 351
score: 99.45669894748264
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] < 0 ) {
rank: 351
score: 99.44952751608456
patch: final int dp = p 1 [ 1 ] - p 1 [ i ] ;
rank: 351
score: 99.44683227539062
patch: final int [ ] dp 1 = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 351
score: 99.398828125
patch: final int dp = p 1 [ i + p $NUMBER$ [ i ]
rank: 351
score: 99.39635009765625
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] 1 [ i ] ;
rank: 351
score: 99.3955078125
patch: final int byte = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 352
score: 99.45646449497768
patch: final int dp = p 1 [ i ] + p $NUMBER$ ;
rank: 352
score: 99.44667454769737
patch: dp 1 [ i ] = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 352
score: 99.42608321340461
patch: final int dp = p $NUMBER$ [ i ] . length + p $NUMBER$ [ i ] ;
rank: 352
score: 99.41606059827302
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ 0 + i ] ;
rank: 352
score: 99.41315018503289
patch: final int [ ] max = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 352
score: 99.39873303865132
patch: sum += p 1 [ i ] . distance ( p $NUMBER$ [ i ] ) ; }
rank: 352
score: 99.39609103732639
patch: int dp = p 1 [ i ] . length - p 1 [ i ] ;
rank: 352
score: 99.39545147235577
patch: final int dp = p 1 [ i ] - 0 ;
rank: 352
score: 99.3850161903783
patch: l 1 [ i ] = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 353
score: 99.44922984730114
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i - 1 ] ;
rank: 353
score: 99.42589047080592
patch: dp 1 [ i ] = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 353
score: 99.41537314967105
patch: final int dp [ ] = p 1 [ i ] - p $NUMBER$ [ 0 ] ;
rank: 353
score: 99.41311465992646
patch: final int $NUMBER$ = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 353
score: 99.39579467773437
patch: int dp = p 1 [ i ] . length - p $NUMBER$ [ i ] . size ;
rank: 353
score: 99.39509851792279
patch: final int dp = break 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 353
score: 99.38450863486842
patch: final int dp = p $NUMBER$ [ i - 1 ] - p $NUMBER$ [ i ] ;
rank: 354
score: 99.45624743009868
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; try {
rank: 354
score: 99.44536276424633
patch: { sum += p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 354
score: 99.41532175164474
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ) + $STRING$ ;
rank: 354
score: 99.41290893554688
patch: final int [ ] dp = p 1 [ i ] - p $NUMBER$ $NUMBER$ [ i ] ;
rank: 354
score: 99.39838723575367
patch: final int dp = p 1 : p 1 [ i ] [ 0 ] ;
rank: 354
score: 99.39575913373162
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i + ] ;
rank: 355
score: 99.44912880345395
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ ] ;
rank: 355
score: 99.4255012063419
patch: final int dp = p 1 [ i ] . char CaMeL Value ( ) ;
rank: 355
score: 99.41437530517578
patch: final int dp = p 1 [ i ] ; int dp = 0 ;
rank: 355
score: 99.41286333869485
patch: final double dp = p 1 [ i ] + p 1 [ i ] ;
rank: 355
score: 99.39560418379934
patch: int dp = p 1 [ i $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 355
score: 99.39481811523437
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ $STRING$ ] ;
rank: 355
score: 99.3835693359375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; ++ dp ;
rank: 356
score: 99.44905395507813
patch: final Integer dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 356
score: 99.44499860491071
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ - 1 ] ;
rank: 356
score: 99.42513427734374
patch: int dp = Math . max ( p 1 [ i ] , p $NUMBER$ [ i ] ;
rank: 356
score: 99.41404322574013
patch: final int dp = p 1 [ i ] + $STRING$ - p 1 [ i ] ;
rank: 356
score: 99.39801989103618
patch: final int dp = p 1 . 0 [ i ] - p $NUMBER$ [ i ] ;
rank: 356
score: 99.39523797286184
patch: final int dp = int + dp $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 356
score: 99.39469186883224
patch: final int [ ] in = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 356
score: 99.38314819335938
patch: final int dp = p 1 [ i ] - name [ i ] ;
rank: 357
score: 99.4251220703125
patch: if ( p 1 [ i ] < p 1 [ i ] ) { break ; } }
rank: 357
score: 99.41388617621527
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ; final
rank: 357
score: 99.41276469983552
patch: final int [ ] dp = ( int [ ] ] ) p $NUMBER$ [ i ] ;
rank: 357
score: 99.395166015625
patch: sum += Math . sqrt ( dp 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 357
score: 99.3939568014706
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ name ] ;
rank: 357
score: 99.38293987771739
patch: final float dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 358
score: 99.44864501953126
patch: final int dp = p 1 [ i ] + p $NUMBER$ : p $NUMBER$ [ i ] ;
rank: 358
score: 99.44492885044643
patch: final int dp 1 = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 358
score: 99.42503356933594
patch: final int dp [ ] = new int [ p 1 [ i ] ;
rank: 358
score: 99.41376053659539
patch: final int dp = p 1 [ i ] ; this = p 1 [ i ] ;
rank: 358
score: 99.39774322509766
patch: sum = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 359
score: 99.4448009672619
patch: for ( int i = 0 ; i < p $NUMBER$ [ i ] ; i ++ ) { {
rank: 359
score: 99.42466227213542
patch: final double dp 0 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 359
score: 99.41331651475694
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i - i ] ;
rank: 359
score: 99.3975894325658
patch: final int dp = p 1 [ i + p $NUMBER$ : p $NUMBER$ [ i ] ;
rank: 359
score: 99.39487033420139
patch: int dp = p 1 [ i - $NUMBER$ ] - p $NUMBER$ [ i ] ;
rank: 360
score: 99.45457821800595
patch: final int dp = p 1 [ i ] - System . err . to CaMeL String ( ) ;
rank: 360
score: 99.44854125976562
patch: final int dp = p 1 [ i ] [ p 1 [ p 1 [ i ] ;
rank: 360
score: 99.42459445529514
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] + 1 ;
rank: 360
score: 99.41321739783653
patch: final int dp = p 1 [ i ] + $STRING$ ;
rank: 360
score: 99.4120232077206
patch: final int dp = - 1 [ i ] - p 1 [ i ] ;
rank: 360
score: 99.39748806423611
patch: final int dp = p 1 : p 1 [ i ] [ p $NUMBER$ ] ;
rank: 360
score: 99.39459549753289
patch: int dp = p 1 [ i ] . distance ( p 1 [ i ] ) ;
rank: 361
score: 99.45421645220588
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ) continue ;
rank: 361
score: 99.44746704101563
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 [ 0 ] ;
rank: 361
score: 99.4132015830592
patch: final int dp += p 1 [ i ] - p $NUMBER$ [ i + 1 ] ;
rank: 361
score: 99.41195678710938
patch: final int dp = p 1 [ i ] ; int max = p $NUMBER$ [ i ] ;
rank: 361
score: 99.39453125
patch: final int dp = p 1 [ [ i ] - p $NUMBER$ [ i ] : 0 ;
rank: 361
score: 99.39265747070313
patch: final int dp = new Object [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 362
score: 99.447021484375
patch: final int dp = p 1 [ i ] [ 0 ] + p $NUMBER$ [ i ] ;
rank: 362
score: 99.44457289751838
patch: try { dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 362
score: 99.41163394325658
patch: final int dp = p 1 [ i ] - 0 + p 1 [ i ] ;
rank: 362
score: 99.39231363932292
patch: final int float dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 363
score: 99.42432250976563
patch: dp $NUMBER$ [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 363
score: 99.3961181640625
patch: sum += p 1 + p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 363
score: 99.39415218955592
patch: int dp = final ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 363
score: 99.39200439453126
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ length - [ i ] ;
rank: 363
score: 99.38236919202302
patch: p $NUMBER$ [ i ] = p 1 [ i ] - p 1 [ i ] ;
rank: 364
score: 99.45285034179688
patch: p 1 [ i ] = p 1 [ i ] - p 1 [ i ] ; }
rank: 364
score: 99.44683159722223
patch: final int dp = p 1 [ ++ i ] - p $NUMBER$ [ i ] ;
rank: 364
score: 99.44414992559524
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 364
score: 99.41263156467014
patch: int dp = p 1 [ i ] - p 1 [ i - 1 ] ;
rank: 364
score: 99.39584189967105
patch: final int dp = p 1 1 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 364
score: 99.39395302220395
patch: final dp [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 364
score: 99.38232421875
patch: final int dp = p $NUMBER$ [ i + 1 ] - p $NUMBER$ [ i ] ;
rank: 365
score: 99.45281372070312
patch: long dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ) ;
rank: 365
score: 99.44673295454545
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i * p $NUMBER$ [ i ] ;
rank: 365
score: 99.3938849954044
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 366
score: 99.42405790441177
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) break ;
rank: 366
score: 99.41102294921875
patch: final int dp = p 1 [ i ] ; dp = p 1 [ i ] ; }
rank: 366
score: 99.3956298828125
patch: final int dp , dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 366
score: 99.39370245682566
patch: int dp = distance ( dp 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 366
score: 99.38177168996711
patch: final int dp = p 1 [ i ] - p 1 [ i ] ; else {
rank: 367
score: 99.45253208705357
patch: final int dp = p 1 [ i ] [ p $NUMBER$ [ p 1 [ i ] ] ;
rank: 367
score: 99.44659423828125
patch: final int dp = p 1 [ i ] - p 1 [ i ] [ 1 ] ;
rank: 367
score: 99.39559133429276
patch: final int dp = p 1 : p 1 : i - p $NUMBER$ [ i ] ;
rank: 367
score: 99.39350328947368
patch: final int int dp = p 1 [ [ i ] - p $NUMBER$ [ i ] ;
rank: 367
score: 99.38140258789062
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum . else
rank: 368
score: 99.45224144345238
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ p $NUMBER$ [ i ] ] ;
rank: 368
score: 99.44656982421876
patch: final int dp = p 1 [ i ] < p $NUMBER$ + p $NUMBER$ [ i ] ;
rank: 368
score: 99.44257202148438
patch: final int dp 1 [ ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 368
score: 99.39071494654605
patch: final int dp = p 1 . [ [ i ] - p $NUMBER$ [ i ] ;
rank: 369
score: 99.45183771306819
patch: final int dp = p 1 [ i ] - System . identity CaMeL Hash CaMeL Code ( ] ) ;
rank: 369
score: 99.44631958007812
patch: final int dp = p 1 [ i ] [ 1 ] + p $NUMBER$ [ i ] ;
rank: 369
score: 99.4424072265625
patch: if ( p 1 [ i ] . length <= p $NUMBER$ [ i ] . length ) {
rank: 369
score: 99.41036184210526
patch: final String [ ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 369
score: 99.39285888671876
patch: final final int [ ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 369
score: 99.38132611443015
patch: final int static = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 370
score: 99.4517822265625
patch: if ( p $NUMBER$ [ i ] < p $NUMBER$ [ i ] ) {
rank: 370
score: 99.39533996582031
patch: sum += dp 1 [ i ] / p $NUMBER$ [ i ] ; }
rank: 370
score: 99.39274597167969
patch: int start = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 370
score: 99.39041748046876
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - * dp ;
rank: 371
score: 99.45168169806985
patch: String p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 371
score: 99.44213104248047
patch: int dp = p 1 [ 1 ] - p $NUMBER$ [ i ] ;
rank: 371
score: 99.42262896369485
patch: int dp $NUMBER$ = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 371
score: 99.41069592927632
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - $NUMBER$ ) ;
rank: 371
score: 99.41017552425987
patch: final int [ ] dp = p 1 [ i ] = p $NUMBER$ [ i ] ;
rank: 371
score: 99.39529622395834
patch: return dp 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 371
score: 99.38087293836806
patch: final int dp = p 1 [ i ] - - p 1 [ i ] ;
rank: 372
score: 99.45147383840461
patch: p $NUMBER$ [ i ] = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 372
score: 99.44209369860198
patch: return Math . sqrt ( p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ) ;
rank: 372
score: 99.41007272820724
patch: final int dp = 0 + p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 372
score: 99.39507697610294
patch: final int dp = p 1 1 [ i ] - p $NUMBER$ [ i ]
rank: 372
score: 99.390283203125
patch: final int dp = p 1 [ i ] [ start ] - p $NUMBER$ [ i ] ;
rank: 372
score: 99.3807601928711
patch: Integer dp = p 1 [ i ] - p 1 [ i ] ;
rank: 373
score: 99.45133463541667
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ) { return - 1 ; }
rank: 373
score: 99.44591703869048
patch: final int dp = p 1 [ i - 1 ] - p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 373
score: 99.44189453125
patch: int [ ] dp $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 373
score: 99.42215768914474
patch: if ( p 1 [ i ] <= p 1 [ i ] ) { continue ; }
rank: 373
score: 99.40965511924342
patch: final int [ ] min = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 373
score: 99.3942935341283
patch: sum += dp 1 + p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 373
score: 99.39169650607639
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i + i ] ;
rank: 373
score: 99.39021570542279
patch: final int out = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 374
score: 99.41000027126736
patch: final int dp = - 1 ; final int dp = p 1 [ i ] ;
rank: 374
score: 99.4096320657169
patch: final int dp = p 1 [ i ] = p 1 [ i ] ;
rank: 374
score: 99.39426676432292
patch: return Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ,
rank: 374
score: 99.38990614149306
patch: final int long dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 374
score: 99.38026529947916
patch: x = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 375
score: 99.4507068452381
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ p $NUMBER$ [ p 1 ] ;
rank: 375
score: 99.44560314360119
patch: dp ( p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 375
score: 99.44152250744048
patch: if ( p 1 [ i ] + p $NUMBER$ [ i ] + p $NUMBER$ [ i ] )
rank: 375
score: 99.421630859375
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ) { return 0 ; }
rank: 375
score: 99.40973221628289
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ $NUMBER$ + i ] ;
rank: 375
score: 99.39406866776316
patch: final int dp = i - p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 375
score: 99.39163411458334
patch: int dp = p 1 [ i ] - $NUMBER$ [ i ] ;
rank: 376
score: 99.44547311883224
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i / 0 ] ;
rank: 376
score: 99.42152806332237
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] * $NUMBER$ ;
rank: 376
score: 99.40959087171052
patch: final int dp = p 1 [ i ] - max $NUMBER$ [ i + 1 ] ;
rank: 376
score: 99.40953979492187
patch: final int [ ] dp = ( int [ ] - $NUMBER$ ) p 1 [ i ] ;
rank: 377
score: 99.44544893152573
patch: protected int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 377
score: 99.40943739149306
patch: final int dp = p 1 [ i ] ; final int dp = i ] ;
rank: 377
score: 99.40922241210937
patch: if p 1 [ i ] = p 1 [ i ] - p 1 [ i ] ;
rank: 377
score: 99.39091796875
patch: final final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : 0 ;
rank: 377
score: 99.38981628417969
patch: final int dp = chars [ i ] - p $NUMBER$ [ i ] ;
rank: 377
score: 99.37982855902777
patch: area [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 378
score: 99.4093081825658
patch: final int dp = 0 ; final int dp = p 1 [ i - $NUMBER$ ] ;
rank: 378
score: 99.4091064453125
patch: final int [ ] dp = ( int [ ] - $NUMBER$ ) p $NUMBER$ [ i ] ;
rank: 378
score: 99.39373101128473
patch: final int dp = p 1 > i ? p $NUMBER$ [ i ] : 0 ;
rank: 378
score: 99.39064331054688
patch: final final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . length ;
rank: 378
score: 99.3896728515625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - - $NUMBER$ ;
rank: 378
score: 99.37979789402173
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp + dp ;
rank: 379
score: 99.45049758184524
patch: final int dp = p 1 [ i ] . index CaMeL Of ( p $NUMBER$ [ i ] ;
rank: 379
score: 99.4452392578125
patch: final long dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 379
score: 99.40908474392361
patch: final int p 1 = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 379
score: 99.39361893503289
patch: sum += ( int ) p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 379
score: 99.39034231085526
patch: int dp = new long [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 379
score: 99.3894287109375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - + $NUMBER$ ] ;
rank: 379
score: 99.37946111505681
patch: long dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 380
score: 99.45035400390626
patch: int dp = p $NUMBER$ [ i ] - System . current CaMeL Time CaMeL Millis ( ) ;
rank: 380
score: 99.44498483758224
patch: final float dp = p 1 [ i ] - p $NUMBER$ [ i + 1 ] ;
rank: 380
score: 99.40849223889802
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ ) ;
rank: 380
score: 99.39348401521382
patch: final int dp int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 380
score: 99.39002749794408
patch: final int dp = sum + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 381
score: 99.44489489103618
patch: int dp = p 1 [ i ] - p 1 [ i ] [ i ] ;
rank: 381
score: 99.40815286075367
patch: final int dp += p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 381
score: 99.38994397615132
patch: final final final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 381
score: 99.37877836681548
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; distance += dp ;
rank: 382
score: 99.44009219898896
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ 1 ] ;
rank: 382
score: 99.420458984375
patch: if ( p 1 [ i ] . equals ( p $NUMBER$ [ i ] ) ) continue ;
rank: 382
score: 99.40857696533203
patch: final int dp = p 1 [ i ] + 0 [ i ] ;
rank: 382
score: 99.40798468338816
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; dp }
rank: 382
score: 99.39341976768092
patch: sum += Math . sqrt ( p 1 [ i ] + p $NUMBER$ [ i ] +
rank: 383
score: 99.449072265625
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { return i ; }
rank: 383
score: 99.4443692294034
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ p 1 [ i ] ;
rank: 383
score: 99.42027372472427
patch: float dp $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 383
score: 99.40847778320312
patch: int dp = p 1 [ i ] - p $NUMBER$ [ $NUMBER$ ] ;
rank: 383
score: 99.39329698350694
patch: final int dp = p 1 [ i ] ++ - p $NUMBER$ [ i ] ;
rank: 383
score: 99.3896728515625
patch: final int dp = distance ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 383
score: 99.38896627987133
patch: final int return = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 383
score: 99.37814812911184
patch: final int i = p 1 [ i ] - p $NUMBER$ [ i + 1 ] ;
rank: 384
score: 99.44903009588069
patch: final int dp = p $NUMBER$ [ i ] - System . current CaMeL Time CaMeL Millis ( ] ) ;
rank: 384
score: 99.44395446777344
patch: dp i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 384
score: 99.43865288628473
patch: distance [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 384
score: 99.4081967002467
patch: final int [ ] 0 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 384
score: 99.40748948317308
patch: final int dp = p 1 [ i + $NUMBER$ ] ;
rank: 384
score: 99.39304070723684
patch: sum += p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 384
score: 99.38941865808823
patch: final int dp = int 1 [ 1 ] - p $NUMBER$ [ i ] ;
rank: 384
score: 99.38833438648896
patch: final int sum = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 384
score: 99.37784476902173
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . length ; sum += dp ;
rank: 385
score: 99.4489990234375
patch: int dp = p 1 [ i ] - p $NUMBER$ [ p $NUMBER$ [ p $NUMBER$ ] ;
rank: 385
score: 99.44385875355114
patch: final int dp = p 1 [ i / p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 385
score: 99.43851725260417
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - ;
rank: 385
score: 99.41994757401316
patch: dp $NUMBER$ [ i ] = p 1 [ i ] - p 1 [ i ] ;
rank: 385
score: 99.40811767578126
patch: final int dp = p 1 [ i ] ; dp = p $NUMBER$ [ i ] ; }
rank: 385
score: 99.40684678819444
patch: final int dp dp = p 1 [ i ] - p 1 [ i ] ;
rank: 385
score: 99.39267865349265
patch: double dp = p 1 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 385
score: 99.37678608141448
patch: final int dp = $STRING$ + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 386
score: 99.4434481534091
patch: final int dp = 0 ; int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 386
score: 99.4197998046875
patch: for ( int i = 0 ; i < p 1 [ 0 ] ; i ++ ) {
rank: 386
score: 99.40797825863487
patch: final int dp = p 1 [ i ] + 1 + p $NUMBER$ [ i ] ;
rank: 386
score: 99.40670615748355
patch: final int dp = p 1 [ i ] + $STRING$ + p 1 [ i ] ;
rank: 386
score: 99.39229583740234
patch: final int dp = dp 1 [ i ] - p $NUMBER$ [ i ]
rank: 386
score: 99.37667846679688
patch: final int dp = p 1 [ i - p 1 ] - p $NUMBER$ [ i ] ;
rank: 387
score: 99.44893188476563
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ) { break ; } }
rank: 387
score: 99.4383609169408
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; { {
rank: 387
score: 99.40784369574652
patch: int dp [ ] = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 387
score: 99.3891242532169
patch: int int dp = p 1 [ i ] - p 1 [ i ] ;
rank: 387
score: 99.38750143612133
patch: int dp = p 1 $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 387
score: 99.3764404296875
patch: final int dp = p 1 . equals ( p $NUMBER$ ) + p $NUMBER$ [ i ] ;
rank: 388
score: 99.40753851996527
patch: final int dp = p 1 [ i ] - p 1 [ i ] ; }
rank: 388
score: 99.38747687088816
patch: int dp = p 1 [ i + [ i ] - p $NUMBER$ [ i ] ;
rank: 388
score: 99.37640935724431
patch: final int dp = p 1 [ i + p $NUMBER$ . length ] - p $NUMBER$ [ i ] ;
rank: 389
score: 99.44283621651786
patch: final int p 1 = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 389
score: 99.43783230251736
patch: int dp = p 1 [ 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 389
score: 99.40693495008681
patch: int dp = 0 - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 389
score: 99.40614947150735
patch: final int dp < p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 389
score: 99.3887875205592
patch: int dp = dp ] - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 389
score: 99.3760124655331
patch: this . sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 390
score: 99.44821346507354
patch: final int dp = p $NUMBER$ [ i ] - start $NUMBER$ [ i ] ;
rank: 390
score: 99.40693495008681
patch: int [ ] dp = p 1 [ i ] - p 1 [ i ] ;
rank: 390
score: 99.40603798314145
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; dp ++ ;
rank: 390
score: 99.3754947060033
patch: final int dp = start + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 391
score: 99.43726870888158
patch: for ( int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 391
score: 99.41886632582721
patch: final double dp = p 1 [ i ] [ p $NUMBER$ [ i ] ;
rank: 391
score: 99.40677490234376
patch: final int dp = p 1 [ p 1 [ i ] - p 1 [ i ] ;
rank: 391
score: 99.40596731085526
patch: final int dp = 0 - p 1 [ i ] - p 1 [ i ] ;
rank: 391
score: 99.39156943873355
patch: final int dp = p 1 [ i ] - p $NUMBER$ : i - p $NUMBER$ ;
rank: 391
score: 99.38799085115132
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + dp ;
rank: 391
score: 99.37517989309211
patch: final int dp ( ) = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 392
score: 99.4476382606908
patch: int dp = p 1 [ i ] + p $NUMBER$ [ i ] [ i ] ;
rank: 392
score: 99.44259643554688
patch: final int dp = Double . max p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 392
score: 99.40561147836539
patch: final int dp = 0 - p $NUMBER$ [ i ] ;
rank: 392
score: 99.39130602384868
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + p $NUMBER$ ,
rank: 392
score: 99.38678942228618
patch: final int dp = p 1 [ i [ i ] - p $NUMBER$ [ i ] ;
rank: 392
score: 99.37501284950658
patch: v $NUMBER$ [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 393
score: 99.44256913034539
patch: final int dp = p 1 [ i ] - 0 [ p 1 [ i ] ;
rank: 393
score: 99.40651983963816
patch: final int dp = p 1 [ i ] ; for = p $NUMBER$ [ i ] ;
rank: 393
score: 99.40549045138889
patch: final int dp = p 1 [ i ] ; p $NUMBER$ [ i ] -- ;
rank: 393
score: 99.39122178819444
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : 1
rank: 393
score: 99.38671196831598
patch: final int dp = p 1 [ i ] - * p $NUMBER$ [ i ] ;
rank: 393
score: 99.37481689453125
patch: area [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 394
score: 99.44754638671876
patch: final int p 1 [ ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 394
score: 99.43669782366071
patch: if ( p 1 [ i ] + p $NUMBER$ [ i ] / p $NUMBER$ [ i ] ;
rank: 394
score: 99.4182373046875
patch: final int dp = p 1 [ i ] . trim ( ) ;
rank: 394
score: 99.4052670127467
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - dp ] ;
rank: 394
score: 99.39114379882812
patch: dp += p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 394
score: 99.37480725740132
patch: final int dp = p 1 [ i ] - $STRING$ [ p $NUMBER$ [ i ] ;
rank: 395
score: 99.44240435431985
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ length ] ;
rank: 395
score: 99.4063720703125
patch: final int double = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 395
score: 99.40526058799342
patch: final int dp = p 1 [ i ] , max = p $NUMBER$ [ i ] ;
rank: 395
score: 99.3869873046875
patch: final int dp = p 1 [ i ] - new long [ p 1 [ i ] ;
rank: 395
score: 99.37479831861413
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; distance += dp * dp ;
rank: 396
score: 99.4062564247533
patch: final int dp = p 1 [ i ] ; for = p 1 [ i ] ;
rank: 396
score: 99.39094543457031
patch: final int dp = p 1 [ i ] <= p $NUMBER$ [ i ]
rank: 396
score: 99.38669305098684
patch: final int dp = p 1 [ i ] , p $NUMBER$ [ i ] : 0 ;
rank: 396
score: 99.37450009300595
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + p 1 . length ;
rank: 397
score: 99.44715294471153
patch: final int dp = p 1 [ i ] - start ;
rank: 397
score: 99.40614013671875
patch: final int dp = ( i - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 397
score: 99.40495219983552
patch: final int dp ; if = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 397
score: 99.39002749794408
patch: sum += distance ( p 1 [ i ] - p $NUMBER$ [ i ] ) ; }
rank: 397
score: 99.38642321134868
patch: int dp = ( int ) dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 397
score: 99.37422107514881
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; System . else {
rank: 398
score: 99.44708251953125
patch: double dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ) ;
rank: 398
score: 99.44156901041667
patch: final int dp = ( p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 398
score: 99.40607766544117
patch: final double dp = p 1 [ 0 ] - p $NUMBER$ [ i ] ;
rank: 398
score: 99.4049072265625
patch: final int dp = p 1 [ i - i ] - p 1 [ i ] ;
rank: 398
score: 99.3897640830592
patch: final int dp = p 1 : p 1 [ i ] . length - p $NUMBER$ ;
rank: 399
score: 99.44630191200658
patch: final int dp = p 1 [ i ] + 1 - p $NUMBER$ [ i ] ;
rank: 399
score: 99.44146118164062
patch: final int dp = p 1 [ i ] + p 1 + p $NUMBER$ [ i ] ;
rank: 399
score: 99.43597702752976
patch: if ( p 1 [ i ] + p $NUMBER$ [ i ] += p $NUMBER$ [ i ] ;
rank: 399
score: 99.4047915810033
patch: final int dp = p 1 [ i + $NUMBER$ ] + p $NUMBER$ [ i ] ;
rank: 399
score: 99.38938395182292
patch: final int dp = p 1 [ i ] >> - p $NUMBER$ [ i ] ;
rank: 399
score: 99.38615112304687
patch: final int dp = new int [ dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 399
score: 99.38613409745066
patch: final int dp = p 1 [ final - i ] - p $NUMBER$ [ i ] ;
rank: 399
score: 99.37385828354779
patch: final int dp += p 1 [ i ] - p 1 [ i ] ;
rank: 400
score: 99.44612260298295
patch: int dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ) / $NUMBER$ ;
rank: 400
score: 99.44087357954545
patch: final int dp = p 1 [ i * p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 400
score: 99.41754150390625
patch: final int dp = p 1 [ i ] - ( float ) p $NUMBER$ [ i ] ;
rank: 400
score: 99.40569747121711
patch: final int [ ] dp += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 400
score: 99.38573608398437
patch: final int dp = byte ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 400
score: 99.38528442382812
patch: final int dp = int ( dp 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 400
score: 99.37379214638158
patch: r $NUMBER$ [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 401
score: 99.44609518612133
patch: final int dp = p 1 [ i ] *= p $NUMBER$ [ i ] ;
rank: 401
score: 99.41728973388672
patch: if ( p 1 [ i ] != p 1 [ i ] ) {
rank: 401
score: 99.40457956414474
patch: dp [ i ] = p 1 [ i ] + p $NUMBER$ [ i ] ; }
rank: 401
score: 99.3889095908717
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : null ;
rank: 401
score: 99.3855712890625
patch: if ( p 1 [ i ] != 0 ) { sum += p 1 [ i ] ;
rank: 401
score: 99.37375806725544
patch: final int dp = p 1 [ i ] [ p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 402
score: 99.4459228515625
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ) { return i ; }
rank: 402
score: 99.40535695929276
patch: final int dp = p 1 [ i ] + 0 + p 1 [ i ] ;
rank: 402
score: 99.4044189453125
patch: final int dp = p 1 [ i ] + 1 [ i ] ;
rank: 402
score: 99.3852603310033
patch: int dp ; int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 403
score: 99.405322265625
patch: final int dp = 0 ; if p 1 [ i ] = p $NUMBER$ [ i ] ;
rank: 403
score: 99.40389211554276
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + dp ] ;
rank: 403
score: 99.38821750217014
patch: final String dp = p 1 . [ i ] - p $NUMBER$ [ i ] ;
rank: 403
score: 99.37368292557566
patch: r $NUMBER$ [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 404
score: 99.4455233487216
patch: int dp = p 1 [ i ] * p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 404
score: 99.44025213068181
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i + $NUMBER$ ] ;
rank: 404
score: 99.41654459635417
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ) ;
rank: 404
score: 99.40514373779297
patch: int dp = - 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 404
score: 99.38798014322917
patch: int dp = p 1 : i - p $NUMBER$ [ i ] ;
rank: 404
score: 99.38511256167763
patch: final int dp = p 1 [ } - i ] - p $NUMBER$ [ i ] ;
rank: 405
score: 99.4453357514881
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] == p $NUMBER$ [ i ] )
rank: 405
score: 99.43993530273437
patch: final int dp = p 1 [ i ] - p $NUMBER$ <= p $NUMBER$ [ i ] ;
rank: 405
score: 99.4337158203125
patch: dp ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 405
score: 99.40450710720486
patch: int dp = 0 - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 405
score: 99.40352136948529
patch: final int dp = p $NUMBER$ [ i ] / p $NUMBER$ [ i ] ;
rank: 406
score: 99.43966514185855
patch: dp ++ [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 406
score: 99.41592068142361
patch: final int dp 0 = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 406
score: 99.40296766493056
patch: final int dp = p 1 [ i ] ; if p $NUMBER$ [ i ] :
rank: 406
score: 99.3878173828125
patch: sum += p 1 [ i ] & - p $NUMBER$ [ i ] ; }
rank: 406
score: 99.38403930664063
patch: final final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - dp ;
rank: 406
score: 99.3728915127841
patch: final int dp = p 1 [ i ] - $STRING$ . equals ( p 1 [ i ] ) ;
rank: 407
score: 99.44526599702381
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] <= p $NUMBER$ [ i ] ;
rank: 407
score: 99.43965229235198
patch: int dp = p 1 [ i ] - p $NUMBER$ * p $NUMBER$ [ i ] ;
rank: 407
score: 99.43361206054688
patch: distance = Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 407
score: 99.38763427734375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ) ?
rank: 407
score: 99.38444249770221
patch: final int dp = p 1 [ i ] - p 1 [ 1 ] ;
rank: 407
score: 99.38385009765625
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - start ;
rank: 407
score: 99.37278053977273
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + p $NUMBER$ . i ] ;
rank: 408
score: 99.43339611235119
patch: for ( int dp = ( int ) p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 408
score: 99.41486672794117
patch: final int 1 = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 408
score: 99.40171412417763
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 1 + 1 ] ;
rank: 408
score: 99.37255859375
patch: final int dp = p 1 [ start ] - p $NUMBER$ [ i ] ;
rank: 409
score: 99.43954613095238
patch: final int dp ; try { dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 409
score: 99.40158562911184
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ 1 + i ] ;
rank: 409
score: 99.38743591308594
patch: sum += p 1 : dp 1 [ i ] - p $NUMBER$ ; }
rank: 409
score: 99.38380833675987
patch: for ( int i = 0 ; i < dp 1 . length ; i ++ ) {
rank: 409
score: 99.37209743923611
patch: Math . sqrt ( p 1 [ i ] - p 1 [ i ] ) ;
rank: 410
score: 99.43946475074405
patch: final int dp = p 1 [ i - $NUMBER$ ] - p $NUMBER$ [ i - 1 ] ;
rank: 410
score: 99.43309384300595
patch: if ( p 1 [ i ] + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 410
score: 99.41455841064453
patch: if ( p 1 [ i ] == - 1 ) { continue ; }
rank: 410
score: 99.40152138157895
patch: final int dp = p 1 [ 0 ] - p $NUMBER$ [ i - 1 ] ;
rank: 410
score: 99.38706568667763
patch: sum = Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ,
rank: 410
score: 99.38410186767578
patch: final int dp = p 1 [ ] - p $NUMBER$ [ i ] ;
rank: 410
score: 99.3836734169408
patch: final int dp = dp 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 411
score: 99.44475997121711
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { return ; }
rank: 411
score: 99.43939208984375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 $NUMBER$ ] ;
rank: 411
score: 99.43302837171052
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; ) {
rank: 411
score: 99.41449846540179
patch: final int dp = p 1 [ p 1 [ i ] ;
rank: 411
score: 99.40372507195724
patch: final int dp = p 1 [ i ] + 0 . p $NUMBER$ [ i ] ;
rank: 411
score: 99.40146771599265
patch: final int dp = p 1 [ i ] + $STRING$ $NUMBER$ [ i ] ;
rank: 411
score: 99.38690544577206
patch: return dp = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 411
score: 99.38368853400735
patch: sum += p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 411
score: 99.38355848524306
patch: int dp = dp + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 411
score: 99.37167019314236
patch: for ( int i = 0 ; i < p $NUMBER$ . length ; i ++ )
rank: 412
score: 99.444677734375
patch: if ( p 1 [ i ] > p $NUMBER$ [ i ] ) { sum ++ ; }
rank: 412
score: 99.43938530815973
patch: final int dp = p 1 [ i ] - p 1 [ i ++ ] ;
rank: 412
score: 99.41438123914931
patch: final double p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 412
score: 99.38365478515625
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] [ 1 ] ;
rank: 412
score: 99.38355210248162
patch: final int list = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 412
score: 99.3714958639706
patch: final Object dp = p 1 [ i ] - p 1 [ i ] ;
rank: 413
score: 99.44453568892045
patch: if ( p 1 [ i ] - p 1 [ i ] < p 1 [ i ] ) {
rank: 413
score: 99.40142501027961
patch: final int dp = dp 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 413
score: 99.38633219401042
patch: final int dp = p 1 [ i ] - p $NUMBER$ : [ i ] ;
rank: 413
score: 99.38315158420139
patch: int dp = p 1 [ i ] - p 1 [ i + $NUMBER$ ] ;
rank: 414
score: 99.4013427734375
patch: final int dp [ ] = p 1 [ i + 1 ] ;
rank: 414
score: 99.38624331825658
patch: sum = Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] )
rank: 414
score: 99.37140447443181
patch: final int dp = p 1 . length + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 415
score: 99.4437744140625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ p $NUMBER$ . length ] ;
rank: 415
score: 99.43901624177632
patch: int dp = p 1 [ i ] - p $NUMBER$ : p 1 [ i ] ;
rank: 415
score: 99.43240517064145
patch: final int < int i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 415
score: 99.4130126953125
patch: int dp = p 1 [ i ] == null ? 0 : p $NUMBER$ [ i ] ;
rank: 415
score: 99.40121941817434
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i / $NUMBER$ ] ;
rank: 415
score: 99.38340928819444
patch: final int ++ dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 416
score: 99.44363403320312
patch: if ( p 1 [ i ] != p $NUMBER$ [ i ] ) { sum ++ ; }
rank: 416
score: 99.41226016773896
patch: double dp $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 416
score: 99.40251721833882
patch: final int dp = p 1 [ i ] + i + p $NUMBER$ [ i ] ;
rank: 416
score: 99.40117444490132
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i 1 - i ] ;
rank: 416
score: 99.38506758840461
patch: sum += dp 1 [ i ] - p $NUMBER$ [ i 1 [ i ] ; }
rank: 416
score: 99.38297954358552
patch: int dp = new int [ p 1 . length ] - p $NUMBER$ [ i ] ;
rank: 416
score: 99.3828986672794
patch: final int dp = i - [ i ] - p $NUMBER$ [ i ] ;
rank: 416
score: 99.37135145399306
patch: max [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 417
score: 99.44353637695312
patch: p 1 [ i ] - p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ; }
rank: 417
score: 99.43888346354167
patch: int dp = Math . p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 417
score: 99.43204752604167
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 417
score: 99.40070543791118
patch: final int dp [ ] = p 1 [ i ] / p $NUMBER$ [ i ] ;
rank: 417
score: 99.38290405273438
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp
rank: 417
score: 99.38275756835938
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - + $NUMBER$ ;
rank: 418
score: 99.44330388849431
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { return 1 . 0 ; }
rank: 418
score: 99.43887939453126
patch: final int dp = p 1 [ i ] [ p $NUMBER$ + p $NUMBER$ [ i ] ;
rank: 418
score: 99.43173828125
patch: sum = ( int ) ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 418
score: 99.40204264322917
patch: dp = p 1 [ i ] - p 1 [ i ] ;
rank: 418
score: 99.400634765625
patch: final int dp = p 1 [ i ] - this [ i ] ;
rank: 418
score: 99.38473350123355
patch: final int dp = p 1 : p 1 [ i ] ; sum += dp * dp
rank: 418
score: 99.38287353515625
patch: final int dp = < p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 418
score: 99.37020874023438
patch: for ( int i = 0 ; i < p 1 . length ; i ++ ) { final
rank: 419
score: 99.443115234375
patch: int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ p $NUMBER$ [ i ] ;
rank: 419
score: 99.43887329101562
patch: final int dp = Math . max p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 419
score: 99.43162626378677
patch: final int dp = sum 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 419
score: 99.38455200195312
patch: final int dp = int [ 1 ] - p $NUMBER$ [ i ] ;
rank: 419
score: 99.38242059004934
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - value ;
rank: 420
score: 99.43881370907738
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i / $NUMBER$ [ i ] ;
rank: 420
score: 99.41138305664063
patch: if ( p 1 [ i ] != 0 && p $NUMBER$ [ i ] != 0 ) {
rank: 420
score: 99.4002685546875
patch: final int dp = p 1 [ i ) - p $NUMBER$ [ i ] ;
rank: 420
score: 99.38431803385417
patch: final int dp = p 1 != 0 ? p 1 [ i ] : 0 ;
rank: 420
score: 99.38257514105902
patch: int dp = p 1 [ i ] - $STRING$ + p $NUMBER$ [ i ] ;
rank: 421
score: 99.41123962402344
patch: final int dp = p 1 . length - p $NUMBER$ [ i ] ;
rank: 421
score: 99.38420952690973
patch: sum * int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 422
score: 99.4414794921875
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; break ; }
rank: 422
score: 99.43079833984375
patch: for ( int dp = 0 ; dp < p 1 [ i ] ; i ++ ) {
rank: 422
score: 99.39996016652961
patch: final int dp >= 0 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 422
score: 99.3841616981908
patch: sum += dp 1 : p 1 : p 1 [ i ] - p $NUMBER$ ; }
rank: 422
score: 99.38242059004934
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - true ;
rank: 422
score: 99.36931016710069
patch: final int dp = ! p 1 [ i ] - p 1 [ i ] ;
rank: 423
score: 99.4093505859375
patch: final int dp = p 1 [ i ] . substring ( p $NUMBER$ [ i ] ) ;
rank: 423
score: 99.40070258246527
patch: final int [ ] [ ] dp = new int [ p 1 [ i ] ;
rank: 423
score: 99.3840103149414
patch: sum += dp 1 [ i ] - dp $NUMBER$ [ i ] ; }
rank: 423
score: 99.36929984714673
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * max ;
rank: 424
score: 99.44132690429687
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + 1 $NUMBER$ ;
rank: 424
score: 99.43009440104167
patch: this . distance [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 424
score: 99.4091064453125
patch: if p 1 [ i ] = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 424
score: 99.3997866981908
patch: final int dp ; dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 425
score: 99.44105931332237
patch: dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ) ;
rank: 425
score: 99.43788452148438
patch: final int dp = ( p 1 [ i ] < p $NUMBER$ [ i ] ) ] ;
rank: 425
score: 99.43001062729779
patch: sum += sum * dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 425
score: 99.4090576171875
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] / 1 ;
rank: 425
score: 99.39960075827206
patch: final int dp = i ; final int dp = p 1 [ i ] ;
rank: 425
score: 99.3836669921875
patch: final int dp = p 1 : i - p 1 [ i ] ;
rank: 425
score: 99.36921037946429
patch: final int dp = p 1 [ i ] - p 1 [ i - p $NUMBER$ . length ;
rank: 426
score: 99.4409912109375
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] $NUMBER$ [ i ] ) {
rank: 426
score: 99.43743896484375
patch: final int dp = p 1 [ i ] - p 1 : p 1 [ i ] ;
rank: 426
score: 99.42981567382813
patch: for ( int dp = 0 - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 426
score: 99.40883917557566
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] + i ;
rank: 426
score: 99.3995297080592
patch: final int dp = Math + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 426
score: 99.38199655633224
patch: final int dp = p 1 [ i ] . i - p $NUMBER$ [ i ] ;
rank: 426
score: 99.38174599095395
patch: final int dp = p 1 [ i ] , sum += p $NUMBER$ [ i ] ;
rank: 426
score: 99.3687160326087
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 427
score: 99.44021267361111
patch: final float dp = p 1 [ i ] ] - p $NUMBER$ [ i ] ;
rank: 427
score: 99.43738555908203
patch: final int dp = 0 [ i ] + p $NUMBER$ [ i ] ;
rank: 427
score: 99.4086181640625
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ;
rank: 427
score: 99.39919146369485
patch: final int dp = p 1 [ i ] ; if p $NUMBER$ [ i ]
rank: 427
score: 99.38351779513889
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] : 1 ;
rank: 427
score: 99.3816650390625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i
rank: 427
score: 99.36837607935855
patch: final int dp = Arrays . equals ( p 1 , p $NUMBER$ [ i ] ) ;
rank: 428
score: 99.4401522549716
patch: p 1 [ p 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 428
score: 99.43733354048295
patch: final int dp = Math . p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 428
score: 99.40845404730902
patch: final int dp = p 1 [ i ] . index CaMeL Of ( $STRING$ ) ;
rank: 428
score: 99.38190307617188
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 ] - dp ;
rank: 428
score: 99.38156609786184
patch: final int dp = p $NUMBER$ [ i + $NUMBER$ ] - p $NUMBER$ [ i ] ;
rank: 428
score: 99.36753743489584
patch: d = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 429
score: 99.43971761067708
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] . length ) {
rank: 429
score: 99.43720160590277
patch: final final float dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 429
score: 99.42855495876736
patch: dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 429
score: 99.39994812011719
patch: final int dp = p 1 [ i ] + $NUMBER$ [ i ] ;
rank: 429
score: 99.39898003472223
patch: final int dp [ ] = p 1 [ i + p $NUMBER$ [ i ] ;
rank: 429
score: 99.38336859809027
patch: final int dp = p 1 : p 1 [ i ] - p $NUMBER$ $NUMBER$ ;
rank: 429
score: 99.3818000344669
patch: int dp = p 1 [ [ i ] - p 1 [ i ] ;
rank: 429
score: 99.38132838199013
patch: final long [ ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 429
score: 99.36722819010417
patch: v [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 430
score: 99.43967895507812
patch: final double dp = p 1 [ i ] + p $NUMBER$ [ i ] [ i ] ;
rank: 430
score: 99.4279552641369
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] )
rank: 430
score: 99.39972686767578
patch: final int [ ] [ ] p 1 = p 1 [ i ] ;
rank: 430
score: 99.39888723273026
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i - i ] ;
rank: 430
score: 99.38176526521382
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - null ;
rank: 430
score: 99.3671542080966
patch: final int dp = Math . sqrt ( p 1 [ i ] + p $NUMBER$ [ i ] ) ;
rank: 431
score: 99.408056640625
patch: if ( p 1 [ i ] != 0 ) { continue ; }
rank: 431
score: 99.39970179966518
patch: final int dp = p 1 [ i ] [ 0 ] ;
rank: 431
score: 99.39856635199652
patch: final int dp dp += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 431
score: 99.38250732421875
patch: dp = p 1 [ i ] - p $NUMBER$ [ i ]
rank: 431
score: 99.38120404411765
patch: final int dp = p 1 [ i ] - $NUMBER$ $NUMBER$ [ i ] ;
rank: 431
score: 99.36706012228261
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * $NUMBER$ ;
rank: 432
score: 99.4268798828125
patch: final int dp = p 1 . [ i ] [ p $NUMBER$ [ i ] ;
rank: 432
score: 99.4077617938702
patch: dp 1 [ i ] = p 1 [ i ] ;
rank: 432
score: 99.38241238064236
patch: final int dp = ( p 1 [ i ] - p $NUMBER$ [ i ] )
rank: 432
score: 99.38117065429688
patch: final int dp = p 1 [ i ] - p $NUMBER$ + dp $NUMBER$ [ i ] ;
rank: 433
score: 99.43901134672619
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { break ; } else {
rank: 433
score: 99.40736219618056
patch: final int dp $NUMBER$ = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 433
score: 99.39947150735294
patch: final int $NUMBER$ = p 1 [ i ] - p 1 [ i ] ;
rank: 434
score: 99.43894556949013
patch: if ( p 1 [ i ] > p $NUMBER$ [ i ] [ i ] ) {
rank: 434
score: 99.40693495008681
patch: final int dp $NUMBER$ = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 434
score: 99.39923095703125
patch: int [ ] dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 434
score: 99.38177168996711
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ; }
rank: 434
score: 99.38114013671876
patch: int dp = p 1 [ i ] . size ( ) + p $NUMBER$ [ i ] ;
rank: 434
score: 99.38086615668402
patch: final int dp = p 1 [ i - ] - p $NUMBER$ [ i ] ;
rank: 435
score: 99.43891834077381
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; if ; else {
rank: 435
score: 99.43587239583333
patch: final int dp = p 1 [ i + 1 ] - p $NUMBER$ [ i - 1 ] ;
rank: 435
score: 99.39900716145833
patch: int [ ] dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 435
score: 99.39804559004934
patch: final int dp = p $NUMBER$ [ i ] - p 1 [ i - 1 ] ;
rank: 435
score: 99.38166246916118
patch: final int dp = p 1 : i - p $NUMBER$ [ i + p $NUMBER$ ] ;
rank: 435
score: 99.38085259331598
patch: final int dp = p 1 [ i ] - p $NUMBER$ , dp = dp ;
rank: 435
score: 99.38065592447917
patch: final int dp = p 1 [ int [ ] - p $NUMBER$ [ i ] ;
rank: 435
score: 99.36639694940476
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum < dp ;
rank: 436
score: 99.43584883840461
patch: int dp = p 1 [ i ] - p 1 + p $NUMBER$ [ i ] ;
rank: 436
score: 99.42633928571429
patch: for ( int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 436
score: 99.40657348632813
patch: if ( p 1 [ i ] != null && p $NUMBER$ [ i ] != null ) {
rank: 436
score: 99.39875873766448
patch: final int dp = p 1 [ i ] ; dp += p $NUMBER$ [ i ] ;
rank: 436
score: 99.39799669053819
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i - 1 ;
rank: 436
score: 99.38138834635417
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] 1 [
rank: 436
score: 99.36590576171875
patch: args [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 437
score: 99.43874640213816
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] [ i ] ) {
rank: 437
score: 99.42632735402961
patch: dp $NUMBER$ [ i ] = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 437
score: 99.40605083264802
patch: final int dp = Math [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 437
score: 99.39875623914931
patch: int dp [ ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 437
score: 99.39793636924342
patch: final int dp = p 1 [ i ] ; p $NUMBER$ [ i ] = 0 ;
rank: 437
score: 99.38117811414931
patch: final int dp = dp 1 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 437
score: 99.38062808388158
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : dp ;
rank: 437
score: 99.38039143880208
patch: final int dp = + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 437
score: 99.36572983685662
patch: Point p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 438
score: 99.43848941200658
patch: if ( p 1 [ i ] > p $NUMBER$ [ i ] ) { break ; }
rank: 438
score: 99.40599149816177
patch: final int min = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 438
score: 99.39866807725694
patch: dp [ i ] = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 438
score: 99.36572943793402
patch: array [ i ] = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 439
score: 99.43804610402961
patch: for ( int dp = p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 439
score: 99.4355236235119
patch: int dp = p 1 [ i ] - p $NUMBER$ , dp = p $NUMBER$ [ i ] ;
rank: 439
score: 99.42599326685855
patch: int sum = distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 439
score: 99.40575493706598
patch: final int dp $NUMBER$ = p 1 [ i ] + p 1 [ i ] ;
rank: 439
score: 99.39846962376645
patch: / * final int dp = p 1 [ i ] - p 1 [ i ] ;
rank: 439
score: 99.36567826704545
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; return 0 . 0 ;
rank: 440
score: 99.43787202380952
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] >= p $NUMBER$ [ i ] ;
rank: 440
score: 99.39811197916667
patch: final int [ ] += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 440
score: 99.39699419806985
patch: final int dp = p 1 [ i ] ; if p 1 [ i ]
rank: 440
score: 99.38047960069444
patch: return dp ( p 1 [ i ] - p $NUMBER$ [ i ] ) ; }
rank: 440
score: 99.379931640625
patch: final int int dp = p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 440
score: 99.37923391241776
patch: int dp = p 1 [ p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 440
score: 99.36551242404514
patch: buffer [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 441
score: 99.42536272321429
patch: dp = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ 1 ] ;
rank: 441
score: 99.39692239200367
patch: final int dp = p 1 [ i ] ; final int dp = i ;
rank: 441
score: 99.37981214021382
patch: final final int p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 441
score: 99.36522674560547
patch: double i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 442
score: 99.43729073660714
patch: int dp = p 1 [ i ] - System . current CaMeL Time CaMeL Millis ( ) ; ;
rank: 442
score: 99.43501362047698
patch: final Integer dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 442
score: 99.40445963541667
patch: final int dp = p 1 [ i ] ) + p $NUMBER$ [ i ] ;
rank: 442
score: 99.39799948299633
patch: final int dp = p 1 [ 0 ] - p $NUMBER$ [ 0 ] ;
rank: 442
score: 99.39651649876645
patch: final int dp = p 1 [ 1 ] - p $NUMBER$ [ i - 1 ] ;
rank: 442
score: 99.38044819078948
patch: final int dp = p 1 [ i ] , dp += p 1 [ i ] ;
rank: 442
score: 99.378662109375
patch: final int dp = name 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 442
score: 99.36518998579545
patch: final int dp = Math . sqrt ( p 1 [ i ] ) ; sum += dp * dp ;
rank: 443
score: 99.42508273654514
patch: { final int dp = p 1 [ i ] - p 1 [ i ] ;
rank: 443
score: 99.40440673828125
patch: dp $NUMBER$ [ i ] = p 1 [ i ] + p $NUMBER$ [ i ] ; }
rank: 443
score: 99.39784240722656
patch: boolean dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 443
score: 99.39626736111111
patch: final int dp 1 += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 443
score: 99.37940171185662
patch: final int dp = p 1 [ dp ] - p $NUMBER$ [ i ] ;
rank: 443
score: 99.37851969401042
patch: sum += p 1 + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 443
score: 99.364990234375
patch: m [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 444
score: 99.43683416193181
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ) { return 0 . 0 ; }
rank: 444
score: 99.4246337890625
patch: for ( int i = 0 ; i == p 1 [ i ] ; i ++ ) {
rank: 444
score: 99.39613743832237
patch: final int dp = p 1 [ i ] - p 1 [ i - 0 ] ;
rank: 444
score: 99.37831517269737
patch: final final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 ] ;
rank: 444
score: 99.36494276258681
patch: tmp [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 445
score: 99.4366390830592
patch: if ( p 1 [ i ] <= p $NUMBER$ [ i ] [ i ] ) {
rank: 445
score: 99.43486095610119
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i int ( i ] ) ;
rank: 445
score: 99.40428402549342
patch: for ( int i = 0 ; i < p $NUMBER$ [ i ] ; i ++ )
rank: 445
score: 99.39739026521382
patch: final int dp = p 1 [ i ] ? p $NUMBER$ [ i ] : null ;
rank: 445
score: 99.39598931206598
patch: final int dp = 0 ; try { dp = p 1 [ i ] ; }
rank: 445
score: 99.37937298943015
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ; ; }
rank: 445
score: 99.3649014559659
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; return Math . sqrt (
rank: 446
score: 99.43662623355263
patch: / * final double dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 446
score: 99.42388916015625
patch: for ( int dp = p 1 [ i ] - p $NUMBER$ [ i ] - $NUMBER$ ;
rank: 446
score: 99.40428402549342
patch: if ( dp 1 [ i ] < p $NUMBER$ [ i ] ) { continue ; }
rank: 446
score: 99.37902153862848
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + $NUMBER$
rank: 446
score: 99.37815348307292
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i + 0 ] ;
rank: 447
score: 99.43660481770833
patch: final p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 447
score: 99.43414015997024
patch: final int dp = p 1 [ i ] [ p 1 [ p 1 [ i ] ] ;
rank: 447
score: 99.42304920014881
patch: for ( int dp ; dp = p 1 [ i ] - p $NUMBER$ [ i ] ) {
rank: 447
score: 99.40405883789063
patch: if ( p 1 [ i ] < p 1 [ i ] ) { return 0 ; }
rank: 447
score: 99.39591710707721
patch: int dp = ( p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 447
score: 99.37897692228618
patch: sum += distance ( p 1 [ i ] , p 1 [ i ] ) ; }
rank: 447
score: 99.36429172092014
patch: items [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 448
score: 99.43653061810662
patch: final int size = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 448
score: 99.42300618489584
patch: i = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 448
score: 99.4039794921875
patch: final int dp = p 1 [ i ] 1 [ i ] ;
rank: 448
score: 99.3956657858456
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] .
rank: 448
score: 99.37851849724265
patch: final int switch = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 448
score: 99.3775570518092
patch: int dp = p 1 [ i ] - new int [ p 1 [ i ] ;
rank: 448
score: 99.36414337158203
patch: - 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 449
score: 99.43641572840073
patch: final Double dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 449
score: 99.43366350446429
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + 0 . 1 ;
rank: 449
score: 99.42266524465461
patch: p $NUMBER$ [ i ] = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 449
score: 99.40367296006944
patch: final int dp = p 1 [ i ] - >= p $NUMBER$ [ i ] ;
rank: 449
score: 99.3956234580592
patch: int dp = p 1 [ i ] - p $NUMBER$ - p $NUMBER$ [ i ] ;
rank: 449
score: 99.39504523026316
patch: final int [ ] dp = p 1 [ i ] - p $NUMBER$ [ $NUMBER$ ] ;
rank: 449
score: 99.37847900390625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ ]
rank: 449
score: 99.37740928248355
patch: final int dp = start + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 449
score: 99.36366271972656
patch: long dp = p 1 [ i ] - p 1 [ i ] ;
rank: 450
score: 99.43634588068181
patch: double dp = p 1 [ i ] + p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 450
score: 99.42262573242188
patch: sum += p 1 [ i ] - p $NUMBER$ [ i + p $NUMBER$ [ i ] ;
rank: 450
score: 99.40337813527961
patch: final int dp = ( p 1 [ i ] * p $NUMBER$ [ i ] ) ;
rank: 450
score: 99.39548211348684
patch: final int dp = p 1 [ i ] [ p $NUMBER$ [ i + 1 ] ;
rank: 450
score: 99.37832302517361
patch: sum += ( p 1 [ i ] * p $NUMBER$ [ i ] ) ; }
rank: 450
score: 99.37725830078125
patch: final int dp = p 1 [ i ] - += p $NUMBER$ [ i ] ;
rank: 451
score: 99.43633069490132
patch: p 1 [ i ] += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 451
score: 99.37824249267578
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 1 ]
rank: 452
score: 99.42249213324652
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ ;
rank: 452
score: 99.4027099609375
patch: final int = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 452
score: 99.39507735402961
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 0 + $NUMBER$ ] ;
rank: 452
score: 99.3631591796875
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum
rank: 453
score: 99.40236944901316
patch: final int dp = 1 [ p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 453
score: 99.394775390625
patch: final int dp = ( p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 453
score: 99.37808566623264
patch: final int dp = p 1 : i - p $NUMBER$ [ i ] . length ;
rank: 454
score: 99.4329898231908
patch: final int dp = p 1 [ i ] < p $NUMBER$ [ i ] + 0 ;
rank: 454
score: 99.39451599121094
patch: int dp = 0 ; final int dp = p 1 [ i ] ;
rank: 454
score: 99.37778727213542
patch: sum += sum * p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 454
score: 99.37607293379934
patch: final byte [ ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 454
score: 99.36297200520833
patch: f = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 455
score: 99.435546875
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] == p 1 [ i ] ;
rank: 455
score: 99.4328125
patch: final float dp = p 1 [ i ] - p 1 [ i ] [ i ] ;
rank: 456
score: 99.43237982855902
patch: final int dp = compare p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 456
score: 99.39408605238971
patch: final int dp = 1 ; final int dp = p 1 [ i ] ;
rank: 456
score: 99.39340389476104
patch: final int dp = - $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 456
score: 99.37763414884868
patch: return Math . sqrt ( p 1 [ i ] + p $NUMBER$ [ i ] ; }
rank: 457
score: 99.40182976973684
patch: final int dp = p 1 [ i ] - p 1 [ i ] - 1 ;
rank: 457
score: 99.39397834329044
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i 1 ;
rank: 457
score: 99.39305877685547
patch: final int [ ] dp = p 1 [ i ] [ i ] ;
rank: 457
score: 99.37711334228516
patch: dp = p 1 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 457
score: 99.3759406594669
patch: final int package = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 457
score: 99.3757568359375
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] . length - dp ;
rank: 457
score: 99.3627068014706
patch: final int dp = distance ( p 1 [ i ] , p $NUMBER$ ) ;
rank: 458
score: 99.43490261501736
patch: final double dp = p 1 [ i ] + p $NUMBER$ $NUMBER$ [ i ] ;
rank: 458
score: 99.43207397460938
patch: final int dp = p 1 [ i ] - p $NUMBER$ != p $NUMBER$ [ i ] ;
rank: 458
score: 99.39298502604167
patch: int dp = 0 [ i ] - p $NUMBER$ [ i ] ;
rank: 458
score: 99.37647247314453
patch: final int dp = p 1 : p $NUMBER$ [ i ] . length ;
rank: 458
score: 99.37495930989583
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] . i ;
rank: 459
score: 99.4343994140625
patch: final int dp = p 1 [ i ] - start $NUMBER$ [ p $NUMBER$ [ i ] ;
rank: 459
score: 99.40145263671874
patch: double dp = Math . min ( p 1 [ i ] , p $NUMBER$ [ i ] ;
rank: 459
score: 99.39340049342105
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ 0 + 1 ] ;
rank: 459
score: 99.39274088541667
patch: final int dp = p 1 [ - 1 ] - p $NUMBER$ [ i ] ;
rank: 459
score: 99.37577989366319
patch: final int dp = p 1 distance [ i ] - p $NUMBER$ [ i ] ;
rank: 459
score: 99.37476870888158
patch: final int dp = p 1 [ [ i ] - p $NUMBER$ [ i 1 ] ;
rank: 459
score: 99.36253356933594
patch: float sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 460
score: 99.43437267485119
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { return - i ; }
rank: 460
score: 99.42163696289063
patch: for ( int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; ; }
rank: 460
score: 99.39337479440789
patch: final int dp = p 1 [ i ] , i = p 1 [ i ] ;
rank: 460
score: 99.3927001953125
patch: final int dp = p $NUMBER$ [ i ] [ p 1 [ i ] ;
rank: 460
score: 99.37473754882812
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ [ i ] ;
rank: 461
score: 99.43434448242188
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] + p $NUMBER$ ;
rank: 461
score: 99.40001220703125
patch: if ( p 1 [ i ] > p $NUMBER$ [ i ] ) { break ; } }
rank: 461
score: 99.39331732855902
patch: final int dp 1 = p 1 [ i ] - p $NUMBER$ [ 0 ] ;
rank: 461
score: 99.37620544433594
patch: final int dp = p 1 [ i ] - p 1 [ i ]
rank: 461
score: 99.374462890625
patch: final int p 1 = p 1 [ i ] - p $NUMBER$ [ i ] : 0 ;
rank: 461
score: 99.36180579144022
patch: final double dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 462
score: 99.3929443359375
patch: final int dp = p 1 [ i ] ; dp -- ;
rank: 462
score: 99.37592909071181
patch: final int dp = p 1 . 1 [ i ] - p $NUMBER$ [ i ]
rank: 462
score: 99.374267578125
patch: return distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 462
score: 99.36140950520833
patch: final int dp = p 1 [ i ] - Math . sqrt ( dp ) ;
rank: 463
score: 99.43421020507813
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ] ) { continue ; }
rank: 463
score: 99.43138485863095
patch: int dp = p 1 [ i ] - p $NUMBER$ , i = p 1 [ i ] ;
rank: 463
score: 99.39972245065789
patch: final int dp = p 1 [ i ] . size - p $NUMBER$ [ i ] ;
rank: 463
score: 99.392333984375
patch: final int dp = 0 ; final double dp = p 1 [ i ] ;
rank: 463
score: 99.37400987413194
patch: final int dp = p 1 [ i 1 ] - p 1 [ i ] ;
rank: 463
score: 99.36116166548295
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum . return dp ;
rank: 464
score: 99.43401022518383
patch: final int dp = p 1 [ i ] - Double . Na CaMeL N ;
rank: 464
score: 99.39963107638889
patch: final float dp $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 464
score: 99.39183044433594
patch: final int dp = p 1 [ i ] + $STRING$ [ i ] ;
rank: 464
score: 99.37560356987848
patch: sum += dp * p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 464
score: 99.37459988064236
patch: final int dp = i - $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 464
score: 99.37399773848684
patch: final int dp = dp + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 464
score: 99.36086018880208
patch: final int dp ( p 1 [ i ] - p 1 [ i ] ) ;
rank: 465
score: 99.42084350585938
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 1 ] [ i ] ;
rank: 465
score: 99.39176218133224
patch: final int dp = p 1 [ i ] - $NUMBER$ [ p 1 [ i ] ;
rank: 465
score: 99.37541368272569
patch: int dp = p 1 : p 1 [ i ] - p $NUMBER$ [ i ]
rank: 466
score: 99.3990837545956
patch: if ( p 1 [ i ] == p 1 [ i ] ) break ;
rank: 466
score: 99.3913933249081
patch: final int dp = p 1 [ i ] - p $NUMBER$ - i ] ;
rank: 466
score: 99.3754021139706
patch: final int dp = p 1 . [ i + p $NUMBER$ [ i ] ;
rank: 467
score: 99.43358656939338
patch: final float dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 467
score: 99.4306640625
patch: dp [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 467
score: 99.39849853515625
patch: final int dp = p 1 [ i ] [ 1 ] ;
rank: 467
score: 99.39146592881944
patch: final int dp = ( p 1 [ i ] - p 1 [ i ] ;
rank: 467
score: 99.37521701388889
patch: sum += dp 1 . distance [ i ] - p $NUMBER$ [ i ] ; }
rank: 467
score: 99.37360975477431
patch: int dp = dp - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 467
score: 99.37337239583333
patch: sum += p 1 [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 468
score: 99.43346586681548
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ p 1 [ p 1 ] ;
rank: 468
score: 99.39130401611328
patch: dp = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 468
score: 99.39118395353618
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] + 0 ;
rank: 468
score: 99.37344520970395
patch: int dp = distance ( p 1 [ i ] , p 1 [ i ] ) ;
rank: 468
score: 99.37322998046875
patch: final int dp = p 1 [ i ] - -- p $NUMBER$ [ i ] ;
rank: 468
score: 99.35986328125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += true ;
rank: 469
score: 99.43319881663604
patch: final int dp = p 1 [ i ] - i $NUMBER$ [ 0 ] ;
rank: 469
score: 99.4197509765625
patch: for ( int dp = 0 ; i < p $NUMBER$ [ i ] ; i ++ ) {
rank: 469
score: 99.37343878495066
patch: int dp = new int [ dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 470
score: 99.43309110753677
patch: final int dp = p 1 [ i ] - System . [ i ] ;
rank: 470
score: 99.37336168791118
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ ,
rank: 470
score: 99.37297620271382
patch: final int dp = p 1 [ i ] - $NUMBER$ [ p $NUMBER$ [ i ] ;
rank: 470
score: 99.35967658547794
patch: final int dp += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 471
score: 99.43295467601104
patch: int dp = p 1 [ i ] + p $NUMBER$ [ i ] ; ;
rank: 471
score: 99.43024002878289
patch: / ; final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 471
score: 99.41959421258224
patch: dp 1 [ i ] = dp $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 471
score: 99.39790424547698
patch: dp 1 [ i ] = p 1 [ i ] / p $NUMBER$ [ i ] ;
rank: 471
score: 99.39101048519737
patch: final int dp [ ] = p 1 [ i ] - p $NUMBER$ [ i ) ;
rank: 471
score: 99.39063856336806
patch: final int dp = p 1 [ i ] . - p 1 [ i ] ;
rank: 471
score: 99.37452456825658
patch: final int dp = p 1 : p 1 [ i ] + p $NUMBER$ [ i ]
rank: 471
score: 99.37313039679276
patch: int dp = p 1 [ i ] . get ( p $NUMBER$ [ i ] ) ;
rank: 471
score: 99.35952419704861
patch: final int dp = p 1 [ i + p 1 . length - 1 ] ;
rank: 472
score: 99.43003627232143
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ 1 $NUMBER$ ] ;
rank: 472
score: 99.4195556640625
patch: if ( p 1 [ i ] + p $NUMBER$ [ i ] == 0 ) {
rank: 472
score: 99.39779052734374
patch: final int dp = p 1 [ i ] ? p $NUMBER$ [ i ] : - 1 ;
rank: 472
score: 99.37449815538194
patch: final int dp = p 1 TYPE [ i ] - p $NUMBER$ [ i ] ;
rank: 472
score: 99.37310791015625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - (
rank: 472
score: 99.35943312872024
patch: final int dp = p 1 [ i ] - p 1 [ i + p $NUMBER$ . length ;
rank: 473
score: 99.41929408482143
patch: for ( int i = 0 ; i < p 1 [ i ] - p $NUMBER$ [ i ]
rank: 473
score: 99.39678955078125
patch: final double int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 473
score: 99.39013671875
patch: final int dp = p 1 [ i ] ; int dp = i ] ;
rank: 473
score: 99.37399631076389
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ]
rank: 473
score: 99.37296977796052
patch: final int dp = p 1 [ i + dp ] - p $NUMBER$ [ i ] ;
rank: 473
score: 99.37220523231908
patch: final int [ ] break = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 474
score: 99.43278198242187
patch: if ( p 1 [ i ] <= p $NUMBER$ [ i ] ) { sum ++ ; }
rank: 474
score: 99.4190673828125
patch: { sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 474
score: 99.39667825137867
patch: final int dp = p 1 [ i ] , p $NUMBER$ [ i ] ;
rank: 474
score: 99.37220523231908
patch: final int dp = ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 475
score: 99.39650364925987
patch: final int dp = Math . max ( p 1 , p 1 [ i ] ) ;
rank: 475
score: 99.38976372612848
patch: final int p 1 = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 475
score: 99.3895263671875
patch: final int dp i = p 1 [ i ] - p 1 [ i ] ;
rank: 475
score: 99.373779296875
patch: dp distance [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 475
score: 99.3726742393092
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - dp ] ;
rank: 475
score: 99.37191951976104
patch: final int dp = p 1 [ i ] - sum $NUMBER$ [ i ] ;
rank: 476
score: 99.43258056640624
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] % p $NUMBER$ ;
rank: 476
score: 99.42965698242188
patch: final float dp = 0 [ i ] - p $NUMBER$ [ i ] ;
rank: 476
score: 99.41778273809524
patch: if ( dp 1 [ i ] + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] )
rank: 476
score: 99.39629163240132
patch: if ( dp 1 [ i ] == p 1 [ i ] ) { continue ; }
rank: 476
score: 99.37249145507812
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - $STRING$ + dp ;
rank: 476
score: 99.37154812282986
patch: final int dp = p 1 [ i ] ; final sum += dp * dp ;
rank: 477
score: 99.43255905877976
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + p $NUMBER$ i ;
rank: 477
score: 99.39573041130515
patch: final int dp *= p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 477
score: 99.38936614990234
patch: final int < p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 477
score: 99.37360582853618
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ 1 ]
rank: 477
score: 99.37236022949219
patch: int max = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 477
score: 99.37139892578125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - else
rank: 477
score: 99.35828354779412
patch: final int mod = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 478
score: 99.41744384765624
patch: return Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ] ) ;
rank: 478
score: 99.39512005974265
patch: final double dp = p 1 [ i ] / p $NUMBER$ [ i ] ;
rank: 478
score: 99.37354278564453
patch: sum = p 1 [ i ] + p $NUMBER$ [ i ] ; }
rank: 478
score: 99.37130033052884
patch: final int dp = i - p $NUMBER$ [ i ] ;
rank: 479
score: 99.4322150735294
patch: if ( p 1 [ i ] <= p $NUMBER$ [ i ] ) continue ;
rank: 479
score: 99.41726202713816
patch: if ( p 1 [ i ] . equals ( p 1 [ i ] ) ) {
rank: 479
score: 99.39492797851562
patch: final int dp $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] + 1 ;
rank: 479
score: 99.38841488486842
patch: final int [ ] dp = new int [ 1 ] - p $NUMBER$ [ i ] ;
rank: 479
score: 99.37223735608552
patch: final int dp = dp 1 [ i ] - p $NUMBER$ [ i ] : 0 ;
rank: 479
score: 99.37116442228618
patch: final int dp = p 1 [ i , p $NUMBER$ = p 1 [ i ] ;
rank: 480
score: 99.43221028645833
patch: if ( p 1 [ i ] <= p $NUMBER$ [ i ] ) { return - 1 ; }
rank: 480
score: 99.41722196691177
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] {
rank: 480
score: 99.39483642578125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ) + 1 ;
rank: 480
score: 99.38841417100694
patch: final int dp 1 = p 1 [ i ] + p 1 [ i ] ;
rank: 480
score: 99.37332153320312
patch: sum += p $NUMBER$ : p 1 [ i ] - p $NUMBER$ ; }
rank: 481
score: 99.4321224814967
patch: final Big CaMeL Integer dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 481
score: 99.42948190789474
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i << 1 ] ;
rank: 481
score: 99.39449734157986
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] 1 ;
rank: 481
score: 99.38814290364583
patch: int dp = p 1 [ i ] + p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 481
score: 99.38795301649306
patch: int dp = 0 + p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 481
score: 99.37311150045956
patch: final int i = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 481
score: 99.37215169270833
patch: int dp = p 1 [ i ] - $STRING$ - p $NUMBER$ [ i ] ;
rank: 481
score: 99.37051552220395
patch: final int dp = $NUMBER$ : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 481
score: 99.35757300967262
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += $NUMBER$ ;
rank: 482
score: 99.43191867404514
patch: for final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 482
score: 99.42937155330883
patch: final int dp = abs 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 482
score: 99.41670532226563
patch: for ( int dp ; dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 482
score: 99.39447985197368
patch: dp 1 [ i ] = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 482
score: 99.38776506696429
patch: final int dp = ( int ) p 1 [ i ] ;
rank: 483
score: 99.43187866210937
patch: for ( int i = 1 ; i < p $NUMBER$ [ i ] ; i ++ ) {
rank: 483
score: 99.42902221679688
patch: final String dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 483
score: 99.41663208007813
patch: for ( int dp = 0 ; dp < p $NUMBER$ [ i ] ; dp ++ ) {
rank: 483
score: 99.39427425986842
patch: final int dp = p 1 [ i ] + p 1 [ i ] . length ;
rank: 483
score: 99.38764784071181
patch: final int dp = p 1 [ i ] - p 1 [ i + 1 ;
rank: 483
score: 99.3715087890625
patch: final int dp = p 1 [ [ i ] - p $NUMBER$ [ i ] . length ;
rank: 483
score: 99.36991373697917
patch: final int dp = p 1 [ int 0 ] - p $NUMBER$ [ i ] ;
rank: 484
score: 99.43183336759868
patch: final int dp = p 1 [ i ] + i - p $NUMBER$ [ i ] ;
rank: 484
score: 99.4289794921875
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - $NUMBER$ $NUMBER$ ] ;
rank: 484
score: 99.41640625
patch: return Math . sqrt ( p 1 . [ i ] - p $NUMBER$ [ i ] ) ;
rank: 484
score: 99.38773890904018
patch: final int < Integer > dp = p 1 [ i ] ;
rank: 484
score: 99.38741048177083
patch: final int dp = 1 [ i ] - p $NUMBER$ [ i + 1 ] ;
rank: 484
score: 99.37134467230902
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i $STRING$ ] ;
rank: 484
score: 99.36980879934211
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i - [ i ] ;
rank: 484
score: 99.35663519965277
patch: final final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 485
score: 99.43171522352431
patch: final int dp = p 1 [ i ] - p 1 $NUMBER$ [ i ] ;
rank: 485
score: 99.41631758840461
patch: try { final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 485
score: 99.38772922092014
patch: int dp [ ] = p 1 [ i ] - p 1 [ i ] ;
rank: 485
score: 99.38724557976974
patch: final int dp = 0 ; try { final int dp = p 1 [ i ] ;
rank: 485
score: 99.37261962890625
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] . length ; }
rank: 485
score: 99.371337890625
patch: final int ++ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 485
score: 99.35638427734375
patch: final int dp = ! p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 486
score: 99.39290578741776
patch: final int dp = p 1 [ i ] [ p 1 . length - 1 ] ;
rank: 486
score: 99.37131076388889
patch: int dp = i + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 487
score: 99.42881469726562
patch: final int dp = p 1 [ i ] - p 1 | p $NUMBER$ [ i ] ;
rank: 487
score: 99.41586143092105
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; } }
rank: 487
score: 99.392529296875
patch: dp 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 487
score: 99.38750861672794
patch: final int dp = ( i - $NUMBER$ ) - p $NUMBER$ [ i ] ;
rank: 487
score: 99.386962890625
patch: final int dp = p 1 [ i ] ; if p 1 [ i ] :
rank: 487
score: 99.37110659950658
patch: final int dp = int + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 487
score: 99.36916632401316
patch: final int dp = p 1 extends 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 488
score: 99.39242393092105
patch: final int i = p 1 [ i ] - p $NUMBER$ [ i ] . length ;
rank: 488
score: 99.38746643066406
patch: int 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 488
score: 99.37109375
patch: int dp = p 1 [ i ] - $STRING$ : p $NUMBER$ [ i ] ;
rank: 488
score: 99.3559802827381
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . length - dp ;
rank: 489
score: 99.39240180121527
patch: final double dp $NUMBER$ = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 489
score: 99.3722915649414
patch: final int i = p 1 [ i ] - p $NUMBER$ [ i ]
rank: 489
score: 99.35587565104167
patch: j = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 490
score: 99.43084161931819
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] < p $NUMBER$ [ i ] ) ;
rank: 490
score: 99.39235325863487
patch: final int dp = p 1 [ i ] [ p $NUMBER$ . length - 1 ] ;
rank: 490
score: 99.37067614103618
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i double $NUMBER$ ] ;
rank: 491
score: 99.43047774465461
patch: if ( p 1 [ i ] >= p $NUMBER$ [ i ] ) { break ; }
rank: 491
score: 99.428564453125
patch: final int p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 491
score: 99.41545104980469
patch: if ( dp 1 [ i ] < p $NUMBER$ [ i ] ) {
rank: 491
score: 99.38695610894098
patch: int dp = 0 + p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 491
score: 99.35557556152344
patch: float i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 492
score: 99.43044026692708
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ p $NUMBER$ ] ;
rank: 492
score: 99.42851819490132
patch: final int dp = compare = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 492
score: 99.39218139648438
patch: dp 0 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 492
score: 99.3862368935033
patch: final int dp = p 1 [ i ] - p 1 [ 0 + i ] ;
rank: 492
score: 99.37187364366319
patch: Math . sqrt ( p 1 [ i ] * p $NUMBER$ [ i ] ) ;
rank: 492
score: 99.3704833984375
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - dp * dp ;
rank: 492
score: 99.36680094401042
patch: final int dp = ) p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 493
score: 99.39205129523026
patch: final int dp = 1 + p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 493
score: 99.3717041015625
patch: final int dp = p 1 [ i ] + p $NUMBER$ 1 [ i ] ;
rank: 493
score: 99.35545438878677
patch: final if ( p 1 [ i ] == p $NUMBER$ [ i ] ) {
rank: 494
score: 99.42830200195313
patch: final int dp = p 1 [ i ] [ p $NUMBER$ [ p 1 [ i ] ;
rank: 494
score: 99.415283203125
patch: final int i = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 494
score: 99.38619192023026
patch: final int dp = Math * p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 494
score: 99.38577473958334
patch: final int dp = p 1 [ i ] + 0 . $NUMBER$ ;
rank: 494
score: 99.37126159667969
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] [
rank: 494
score: 99.3702033547794
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; final
rank: 495
score: 99.42991807725694
patch: result [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 495
score: 99.42830033735795
patch: dp ( p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ) ;
rank: 495
score: 99.39153731496711
patch: final double dp = p 1 [ i ] - p $NUMBER$ [ i ] + 1 ;
rank: 495
score: 99.38597347861842
patch: final int dp = p 1 [ i ] - Double + p $NUMBER$ [ i ] ;
rank: 495
score: 99.37107447574013
patch: return Math . sqrt ( p 1 [ i ] * p $NUMBER$ [ i ] ) ;
rank: 495
score: 99.37015109592014
patch: int dp = int - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 495
score: 99.35527487362133
patch: final int dp = p 1 [ i ] -- p $NUMBER$ [ i ] ;
rank: 496
score: 99.42950148809524
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ p $NUMBER$ [ p $NUMBER$ ] ;
rank: 496
score: 99.39126407398896
patch: final int dp = p 1 [ i ] + dp $NUMBER$ [ i ] ;
rank: 496
score: 99.38580643503289
patch: final int dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 496
score: 99.37107340494792
patch: sum += p 1 [ i ] - p $NUMBER$ [ i - 1 ] ; }
rank: 496
score: 99.36998833550348
patch: int dp = p 1 [ i ] - p 1 [ i ] : 0 ;
rank: 496
score: 99.35525333180146
patch: long p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 497
score: 99.42948986235119
patch: if ( p 1 [ i ] < p 1 [ i ] ) { return - 1 ; }
rank: 497
score: 99.42722389914773
patch: final int dp = p 1 [ i ] - p 1 , i = p $NUMBER$ [ i ] ;
rank: 497
score: 99.41519019717262
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] += p $NUMBER$ [ i ] ;
rank: 497
score: 99.38534545898438
patch: final int dp = p 1 [ i ] - p $NUMBER$ - i ;
rank: 497
score: 99.38529146634616
patch: final int dp = p 1 [ i ] + $NUMBER$ ;
rank: 497
score: 99.37106662326389
patch: sum += p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ ] ; }
rank: 497
score: 99.3655646829044
patch: final int dp = value 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 497
score: 99.35516764322917
patch: inst = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 498
score: 99.39112613075658
patch: dp 0 [ i ] = p 1 [ i ] - p 1 [ i ] ;
rank: 498
score: 99.38486199629934
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] >> $NUMBER$ ;
rank: 498
score: 99.36989458869485
patch: final int char = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 498
score: 99.36543354235198
patch: final int dp = p 1 [ i & 1 ] - p $NUMBER$ [ i ] ;
rank: 499
score: 99.42686767578125
patch: final int dp = p 1 [ i ] - p $NUMBER$ & i $NUMBER$ [ i ] ;
rank: 499
score: 99.39110565185547
patch: float dp = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 499
score: 99.38449578536184
patch: final int dp = p 1 [ i ] [ 1 + p $NUMBER$ [ i ] ;
rank: 499
score: 99.3707211143092
patch: sum += dp 1 [ i ] . distance ( p $NUMBER$ [ i ] ) ; }
rank: 499
score: 99.3649966591283
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - false ;
rank: 499
score: 99.35426839192708
patch: final float p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 500
score: 99.41466000205592
patch: for ( int i = 0 ; i <= p 1 . length ; i ++ ) {
rank: 500
score: 99.391015625
patch: final int dp $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] . length ;
rank: 500
score: 99.38396538628473
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i + ] ;
rank: 500
score: 99.37021998355263
patch: sum += Math . sqrt ( p 1 [ i ] + p $NUMBER$ [ i ] )
rank: 500
score: 99.36467542146382
patch: final int sum = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 500
score: 99.35399034288194
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + p $NUMBER$
rank: 501
score: 99.42890857514881
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] > p 1 [ i ] ;
rank: 501
score: 99.42646620008681
patch: final int < Integer : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 501
score: 99.41458290501645
patch: final int dp 1 = p 1 . [ i ] - p $NUMBER$ [ i ] ;
rank: 501
score: 99.39088270399306
patch: final int int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 501
score: 99.3839175575658
patch: final int dp = p 1 [ i ] - new Integer p $NUMBER$ [ i ] ;
rank: 501
score: 99.37020713404605
patch: final int dp = p 1 : p 1 [ i ] [ p $NUMBER$ $NUMBER$ ] ;
rank: 501
score: 99.36444450827206
patch: final int dp |= p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 501
score: 99.35375298394098
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; int
rank: 502
score: 99.428466796875
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { continue ; } else {
rank: 502
score: 99.42630440848214
patch: int dp = p 1 [ i ] - p $NUMBER$ , dp = p 1 [ i ] ;
rank: 502
score: 99.41444156044408
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ; } return 0 ;
rank: 502
score: 99.39068244485294
patch: final int dp = p 1 [ i ] . long CaMeL Value ( ) ;
rank: 502
score: 99.37010362413194
patch: final int dp = p 1 [ i ] >> + p $NUMBER$ [ i ] ;
rank: 502
score: 99.36955430772569
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - key ;
rank: 502
score: 99.36367458767361
patch: final int dp = int CaMeL Value [ i ] - p $NUMBER$ [ i ] ;
rank: 502
score: 99.3536376953125
patch: final int dp = new float [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 503
score: 99.42594401041667
patch: final int dp = p 1 [ i ] - p $NUMBER$ + p $NUMBER$ [ i ] ; ;
rank: 503
score: 99.41439208984374
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ - $NUMBER$ ] ;
rank: 503
score: 99.38371007582721
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ $NUMBER$ ] ;
rank: 503
score: 99.37006293402777
patch: sum += dp 1 [ i ] - p $NUMBER$ [ i ] ; break ; }
rank: 503
score: 99.3635612936581
patch: final int dp = p 1 , p 1 = p 1 [ i ] ;
rank: 504
score: 99.42839612458882
patch: final int dp = p 1 [ i ] - start - p $NUMBER$ [ i ] ;
rank: 504
score: 99.42591552734375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i / - $NUMBER$ ] ;
rank: 504
score: 99.38971557617188
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . length ; ;
rank: 504
score: 99.38340357730263
patch: final int dp = p 1 [ i ] - p 1 [ 0 - i ] ;
rank: 504
score: 99.36980523003473
patch: return Math . sqrt ( p 1 [ i ] + p $NUMBER$ [ i ] ,
rank: 504
score: 99.36349826388889
patch: int dp = p 1 [ i - i ] - p $NUMBER$ [ i ] ;
rank: 505
score: 99.42561645507813
patch: final int dp = p 1 [ 1 ] - p $NUMBER$ [ i ] [ i ] ;
rank: 505
score: 99.38970588235294
patch: int dp 0 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 505
score: 99.36967387952302
patch: sum Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 505
score: 99.36884901258681
patch: final int dp = int 1 [ [ i ] - p $NUMBER$ [ i ] ;
rank: 505
score: 99.35339886209239
patch: final int i = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 506
score: 99.42555147058823
patch: final int dp = p 1 [ i ] >> p $NUMBER$ [ i ] ;
rank: 506
score: 99.38966279871323
patch: final int dp = p 1 [ i ] % p 1 [ i ] ;
rank: 506
score: 99.38298034667969
patch: final int dp = p 1 [ i ] - p $NUMBER$ . 0 ;
rank: 506
score: 99.36964925130208
patch: final int dp = p 1 State [ i ] - p $NUMBER$ [ i ] ;
rank: 506
score: 99.3687385110294
patch: int dp = dp 1 [ [ i ] - p $NUMBER$ [ i ] ;
rank: 506
score: 99.36259909237133
patch: final int exp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 506
score: 99.35337320963542
patch: values [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 507
score: 99.42802159926471
patch: final int dp = p 1 [ i ] - 1 $NUMBER$ [ i ] ;
rank: 507
score: 99.3695068359375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i -- ] ;
rank: 508
score: 99.42512592516448
patch: dp ++ [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 508
score: 99.38957663143383
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ) break ;
rank: 508
score: 99.38176413143383
patch: final double dp = p 1 [ i ] - p $NUMBER$ [ 0 ] ;
rank: 508
score: 99.36921961167279
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] _
rank: 508
score: 99.36863878038194
patch: final final int dp = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 509
score: 99.42797173394098
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { * /
rank: 509
score: 99.42493785511364
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i + 0 ] ;
rank: 509
score: 99.38253445095486
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ++ ;
rank: 509
score: 99.38172671669408
patch: final int dp = p 1 [ i ] ? p $NUMBER$ [ i ] : $STRING$ ;
rank: 509
score: 99.36841538373162
patch: final int sum = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 509
score: 99.35289091222427
patch: final p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 510
score: 99.42487127130681
patch: final float dp = p 1 [ i ] - p $NUMBER$ [ i * p $NUMBER$ [ i ] ;
rank: 510
score: 99.413623046875
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] [ 0 ] ;
rank: 510
score: 99.38924560546874
patch: if ( ! p 1 [ i ] . equals ( p $NUMBER$ [ i ] ) ) {
rank: 510
score: 99.38229031032986
patch: final int dp = p 1 [ i ] ; return p 1 [ i ] ;
rank: 510
score: 99.36869049072266
patch: double dp = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 510
score: 99.36066032858456
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ ++ ] ;
rank: 510
score: 99.35272216796875
patch: final for ( int i = 0 ; i < p $NUMBER$ . length ; i ++ ) {
rank: 511
score: 99.42765669389205
patch: int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 511
score: 99.42484907670455
patch: int dp = 0 ; final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 511
score: 99.38226639597039
patch: final int dp = 0 ; final int dp = p 1 [ i + $NUMBER$ ] ;
rank: 511
score: 99.36830049402573
patch: sum int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 512
score: 99.41319580078125
patch: for ( int dp = i - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 512
score: 99.38209443933823
patch: final int dp = p 1 [ i ] ; final int dp = Math ;
rank: 513
score: 99.38904622395833
patch: if ( p 1 [ i ] < p 1 [ i ] ;
rank: 513
score: 99.382080078125
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i + 1 ;
rank: 513
score: 99.38102213541667
patch: final int dp = p 1 [ i ] + 0 . 1 ;
rank: 513
score: 99.36806126644737
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : false ;
rank: 513
score: 99.36020914713542
patch: final int dp = p 1 [ i ] - p $NUMBER$ distance [ i ] ;
rank: 513
score: 99.35110294117646
patch: final int continue = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 514
score: 99.42745971679688
patch: String dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 514
score: 99.4245272549716
patch: int dp = p 1 [ i ] < p $NUMBER$ [ i ] / p $NUMBER$ [ i ] ;
rank: 514
score: 99.41312866210937
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ]
rank: 514
score: 99.36799059416118
patch: final int dp = p 1 [ i ] , p $NUMBER$ = p 1 [ i ]
rank: 514
score: 99.35106259300595
patch: final int dp = p 1 [ i ] $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 515
score: 99.41289961965461
patch: int sum = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 515
score: 99.3817074424342
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + false ;
rank: 515
score: 99.36796569824219
patch: final int dp = p 1 [ i ] ; sum += dp * dp
rank: 515
score: 99.3678466796875
patch: sum += dp 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 515
score: 99.35993787977431
patch: sum += p 1 : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 515
score: 99.35091145833333
patch: children [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 516
score: 99.42719116210938
patch: p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 516
score: 99.38157252261513
patch: final int dp = dp 1 [ i ] - p $NUMBER$ [ i + 1 ] ;
rank: 516
score: 99.38016764322917
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ [ i ] ;
rank: 516
score: 99.36749945746527
patch: Math . sqrt ( p 1 [ i ] + p $NUMBER$ [ i ] ) ;
rank: 516
score: 99.35980224609375
patch: final int throws i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 516
score: 99.35048130580357
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ double 1 ] ;
rank: 517
score: 99.42439350328948
patch: final float dp = p 1 [ i ] - p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 517
score: 99.38852410567434
patch: int dp = p 1 [ i ] , p 1 = p $NUMBER$ [ i ] ;
rank: 517
score: 99.38111707899306
patch: final int dp = p 1 [ i - p $NUMBER$ [ i - 1 ] ;
rank: 517
score: 99.36772717927632
patch: final int dp = dp 1 [ i ] - p $NUMBER$ [ i ] . length ;
rank: 517
score: 99.36741236636513
patch: final int dp = p 1 : p 1 [ i ] - p $NUMBER$ . length ;
rank: 518
score: 99.42694854736328
patch: double dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 518
score: 99.42433568050987
patch: final int dp = p 1 [ i - 1 ] [ p $NUMBER$ [ i ] ;
rank: 518
score: 99.41230010986328
patch: long sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 518
score: 99.38843383789063
patch: final int dp = p 1 [ i ] ; float dp = p 1 [ i ] ;
rank: 518
score: 99.38097466362848
patch: final int dp dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 518
score: 99.36751708984374
patch: final int int dp = p 1 [ i ] - p $NUMBER$ [ i ] : 0 ;
rank: 518
score: 99.36732393152573
patch: sum += dp 1 . [ i ] - p $NUMBER$ [ i ] ; }
rank: 518
score: 99.35954204358552
patch: final int dp = ( p 1 [ i ] - p 1 [ i ] ) ;
rank: 518
score: 99.35011121961806
patch: buffer [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 519
score: 99.42681329900569
patch: if ( p $NUMBER$ [ i ] - p $NUMBER$ [ i ] > p $NUMBER$ [ i ] ) {
rank: 519
score: 99.38839561060855
patch: final int i = p 1 [ i ] - p $NUMBER$ [ i ] + 1 ;
rank: 519
score: 99.367431640625
patch: for ( int dp = 0 ; dp < p 1 . length ; dp ++ ) {
rank: 519
score: 99.36714002821181
patch: sum += p 1 [ i ] . distance - p $NUMBER$ [ i ] ; }
rank: 519
score: 99.35008544921875
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; return dp ;
rank: 520
score: 99.38783665707237
patch: int dp = p 1 [ i ] , p $NUMBER$ = p 1 [ i ] ;
rank: 520
score: 99.36686706542969
patch: final int dp = p 1 [ i ] > p $NUMBER$ [ i ]
rank: 520
score: 99.35891544117646
patch: final int ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 521
score: 99.4266357421875
patch: if ( p $NUMBER$ [ i ] - p $NUMBER$ [ i ] == p $NUMBER$ [ i ] ) {
rank: 521
score: 99.4241455078125
patch: final float dp = p 1 [ i ] - p $NUMBER$ [ i ] [ 1 ] ;
rank: 521
score: 99.41217362253289
patch: for ( int i = 1 ; i < p 1 . length ; i ++ ) {
rank: 521
score: 99.3878238075658
patch: final int dp = p 1 [ i ] . to CaMeL Lower CaMeL Case ( ) ;
rank: 521
score: 99.38067626953125
patch: final int dp = 0 ; final int p $NUMBER$ = p 1 [ i ] ;
rank: 521
score: 99.37847900390625
patch: int dp = p 1 [ i ] - 0 + p $NUMBER$ [ i ] ;
rank: 521
score: 99.3670590049342
patch: final int dp = p 1 [ [ [ i ] - p $NUMBER$ [ i ] ;
rank: 521
score: 99.35867470189145
patch: final int dp = ( p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ) ;
rank: 522
score: 99.38760986328126
patch: float dp = Math . min ( p 1 [ i ] , p $NUMBER$ [ i ] ;
rank: 522
score: 99.380615234375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + true ;
rank: 522
score: 99.3668212890625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : sum ;
rank: 522
score: 99.36642937911184
patch: sum += double ( p 1 [ i ] - p $NUMBER$ [ i ] ) ; }
rank: 522
score: 99.3498202237216
patch: Integer dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp . max ;
rank: 523
score: 99.4262362393466
patch: p 1 [ p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 523
score: 99.38035673253677
patch: final int dp = p 1 [ i ] : p 1 [ i ] ;
rank: 523
score: 99.37837488511029
patch: final int dp = exp 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 523
score: 99.36627604166667
patch: final int dp = int [ ] - p $NUMBER$ [ i ] ;
rank: 523
score: 99.34970272288604
patch: Double p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 524
score: 99.42377030222039
patch: final int dp = Double . p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 524
score: 99.41130913628473
patch: final int dp = p 1 . [ i ] - p $NUMBER$ [ 1 ] ;
rank: 524
score: 99.37796724759616
patch: final int dp = p 1 [ i ] >> $NUMBER$ ;
rank: 524
score: 99.36624948601974
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . length )
rank: 524
score: 99.36619059244792
patch: sum += p 1 [ i ] . distance ( p $NUMBER$ [ i ] ) ;
rank: 524
score: 99.34968836167279
patch: final byte dp = p 1 [ i ] - p 1 [ i ] ;
rank: 525
score: 99.37965223524306
patch: final int dp = p 1 [ i - p 1 [ i - 1 ] ;
rank: 525
score: 99.37778727213542
patch: final int p 1 = p 1 [ i ] + p 1 [ i ] ;
rank: 525
score: 99.36613633897569
patch: sum += p 1 : i - p $NUMBER$ [ i ] - p $NUMBER$ ; }
rank: 525
score: 99.36611758961396
patch: int dp = < p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 525
score: 99.34931873139881
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += min ;
rank: 526
score: 99.42610248766448
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] > - 1 ) {
rank: 526
score: 99.42284545898437
patch: final int dp = p 1 [ 0 ] - p $NUMBER$ [ i ] [ i ] ;
rank: 526
score: 99.41041395399306
patch: { final int i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 526
score: 99.38738692434211
patch: if ( dp 1 [ i ] == p $NUMBER$ [ i ] ) { continue ; }
rank: 526
score: 99.37913111636513
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ) - $STRING$ ;
rank: 526
score: 99.35718451605902
patch: final int dp = p 1 [ i ] - : p $NUMBER$ [ i ] ;
rank: 527
score: 99.42607565487133
patch: final float dp = p 1 [ i ] & p $NUMBER$ [ i ] ;
rank: 527
score: 99.38716430664063
patch: if ( p 1 [ i ] == null || p $NUMBER$ [ i ] == null ) {
rank: 527
score: 99.34898792613636
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - p $NUMBER$ . length ] ;
rank: 528
score: 99.42588177849265
patch: final int dp = p 1 [ i ] - i $NUMBER$ [ $NUMBER$ ] ;
rank: 528
score: 99.42252807617187
patch: final int p 1 = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 528
score: 99.40982666015626
patch: for ( int dp = 0 - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 528
score: 99.38706341911765
patch: final int i = p 1 [ i ] + p 1 [ i ] ;
rank: 528
score: 99.378173828125
patch: final int dp = p 1 [ i ] + $STRING$ $NUMBER$ ;
rank: 528
score: 99.37691921657986
patch: final int dp = this . dp [ i ] - p $NUMBER$ [ i ] ;
rank: 528
score: 99.36559380425348
patch: final int dp = p 1 dp [ i ] - p $NUMBER$ [ i ] ;
rank: 528
score: 99.35694037543402
patch: final int dp = p 1 [ i ] [ + p $NUMBER$ [ i ] ;
rank: 529
score: 99.3868767233456
patch: final float dp = p 1 [ i ] [ p $NUMBER$ [ i ] ;
rank: 529
score: 99.37688131893383
patch: final int dp = p 1 [ $NUMBER$ ] + p $NUMBER$ [ i ] ;
rank: 529
score: 99.34873334099265
patch: final int dp = p 1 [ i ] - mod 1 [ i ] ;
rank: 530
score: 99.4256591796875
patch: final int dp = p $NUMBER$ [ i ] + p $NUMBER$ $NUMBER$ [ i ] ;
rank: 530
score: 99.42239815848214
patch: final int dp = p 1 [ i ] [ p 1 [ p $NUMBER$ [ i ] ] ;
rank: 530
score: 99.40969848632812
patch: for ( int dp = 0 ; dp < p 1 [ i ] ; sum ++ ) {
rank: 530
score: 99.38673802425987
patch: if ( p 1 [ i ] != p 1 [ i ] ) { break ; }
rank: 530
score: 99.37582576976104
patch: int p 1 = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 530
score: 99.36541748046875
patch: dp = p 1 [ i ] - p $NUMBER$ : p $NUMBER$ [ i ] ;
rank: 531
score: 99.424853515625
patch: p $NUMBER$ [ i ] = p 1 [ i ] + p $NUMBER$ [ i ] ; }
rank: 531
score: 99.42197779605263
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + start ;
rank: 531
score: 99.38673095703125
patch: if ( p 1 [ i ] != p 1 [ i ] ) { break ; } }
rank: 531
score: 99.37787543402777
patch: final int dp = p 1 [ i ] ] / p $NUMBER$ [ i ] ;
rank: 531
score: 99.36480034722223
patch: final int dp = p 1 [ i ] - p 1 [ [ i ] ;
rank: 532
score: 99.4247185202206
patch: String p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 532
score: 99.42180432771382
patch: final int dp = p 1 [ i ] - p 1 [ i ] + 0 ;
rank: 532
score: 99.37775336371527
patch: final int dp [ ] = p 1 [ i + p 1 [ i ] ;
rank: 532
score: 99.37509591238839
patch: final int [ ] p $NUMBER$ = p $NUMBER$ [ i ] ;
rank: 532
score: 99.36468184621711
patch: final int dp = sum - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 532
score: 99.36449432373047
patch: sum += p 1 [ i ] [ p $NUMBER$ [ i ] ; }
rank: 532
score: 99.35623329564145
patch: final int dp = p 1 , p $NUMBER$ = i - p $NUMBER$ [ i ] ;
rank: 532
score: 99.34771173650569
patch: int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 533
score: 99.377197265625
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ - i ] ;
rank: 533
score: 99.37487114800348
patch: final int [ ] dp = p 1 [ i ] - $NUMBER$ [ i ] ;
rank: 533
score: 99.34762573242188
patch: < p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 534
score: 99.42448874080883
patch: final double dp = p 1 [ i ] - start $NUMBER$ [ i ] ;
rank: 534
score: 99.4092025756836
patch: i += p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 534
score: 99.385009765625
patch: final int i = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 534
score: 99.3746696920956
patch: int p 1 = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 534
score: 99.36448759191177
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] ] ;
rank: 534
score: 99.3642578125
patch: sum += i * dp 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 534
score: 99.34758444393383
patch: final short dp = p 1 [ i ] - p 1 [ i ] ;
rank: 535
score: 99.40905151367187
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] + p $NUMBER$ [ i ]
rank: 535
score: 99.36444769965277
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - max ;
rank: 535
score: 99.3557357788086
patch: final int dp = p 1 [ i ] - 1 [ 1 ] ;
rank: 536
score: 99.42440795898438
patch: int dp = p 1 [ i ] - i $NUMBER$ [ i ] ;
rank: 536
score: 99.42146809895833
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + 0 . 0 ;
rank: 536
score: 99.38494262695312
patch: final int dp = p 1 [ i ] . equals ( p 1 [ i ] ) ;
rank: 536
score: 99.3764712685033
patch: final int dp = p 1 [ i ] ] - p $NUMBER$ [ i - 1 ;
rank: 536
score: 99.37372185202206
patch: final int dp = p 1 [ 0 ] + p 1 [ i ] ;
rank: 536
score: 99.36427935431985
patch: int p 1 = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 536
score: 99.35555691189236
patch: final int dp = p 1 $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 536
score: 99.34720187717014
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i length ] ;
rank: 537
score: 99.42135009765624
patch: final int dp = p 1 [ i ] - p 1 [ i ] [ 0 ] ;
rank: 537
score: 99.40838944284539
patch: double dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 537
score: 99.37640739889706
patch: final int dp = true ; final int dp = p 1 [ i ] ;
rank: 537
score: 99.36390787760416
patch: sum += p 1 : p 1 [ i ] - p $NUMBER$ ;
rank: 537
score: 99.3555549172794
patch: sum += p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 538
score: 99.37591145833333
patch: final int dp = Math . dp = p 1 [ i ] ;
rank: 538
score: 99.3731689453125
patch: int dp = 0 - p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 538
score: 99.36410861545139
patch: final int dp = ! p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 538
score: 99.34664577907986
patch: my [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 539
score: 99.42087916324013
patch: int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 539
score: 99.40807495117187
patch: return Math . distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ; }
rank: 539
score: 99.3844058388158
patch: dp 1 [ i ] = p 1 [ i ] [ p $NUMBER$ [ i ] ;
rank: 539
score: 99.37303402549342
patch: final int dp [ ] = p 1 [ i ] [ p 1 [ i ] ;
rank: 539
score: 99.3635482788086
patch: sum += dp 1 : dp 1 [ i ] - p $NUMBER$ ; }
rank: 539
score: 99.34654169497283
patch: final int dp ; for ( int i = 0 ; i < p 1 . length ; i ++ ) {
rank: 540
score: 99.42386881510417
patch: if ( p 1 [ i ] <= p $NUMBER$ [ i ] ;
rank: 540
score: 99.42085404829545
patch: final int [ ] dp = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 540
score: 99.38428412543402
patch: final double dp 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 540
score: 99.3757553100586
patch: final int dp = p 1 [ i ] - start [ i ] ;
rank: 540
score: 99.364013671875
patch: int dp = ( long ) p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 540
score: 99.36330279181985
patch: sum += p 1 $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 540
score: 99.34581801470588
patch: Point p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 541
score: 99.42347412109375
patch: int dp = p 1 [ i ] - System . identity CaMeL Hash CaMeL Code ( ) ;
rank: 541
score: 99.42072088068181
patch: final int dp = p 1 [ i / p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 541
score: 99.384033203125
patch: System . arraycopy ( p 1 [ i ] , 0 , p $NUMBER$ [ i ] ) ;
rank: 541
score: 99.37291195518092
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] - $NUMBER$ ;
rank: 541
score: 99.3638916015625
patch: int dp = p 1 [ i ] - p 1 [ i ] - dp ;
rank: 541
score: 99.36299856085526
patch: sum += Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] +
rank: 541
score: 99.35536295572916
patch: final int dp = p 1 i - p $NUMBER$ [ i ] ;
rank: 541
score: 99.34539184570312
patch: int dp = p 1 [ i ] - p 1 [ i ] ; sum += dp ;
rank: 542
score: 99.42285970052083
patch: final int dp = p 1 [ i ] - p $NUMBER$ i ;
rank: 542
score: 99.40737915039062
patch: if ( dp 1 [ i ] >= p $NUMBER$ [ i ] ) {
rank: 542
score: 99.38402035361842
patch: dp $NUMBER$ [ i ] = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 542
score: 99.37555609809027
patch: int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 542
score: 99.37255859375
patch: final int 0 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 542
score: 99.36292317708333
patch: sum += p 1 [ i + p $NUMBER$ [ i ] ; }
rank: 542
score: 99.34521484375
patch: list [ i ] = p 1 [ i ] - p 1 [ i ] ;
rank: 543
score: 99.37538057215073
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i - ;
rank: 543
score: 99.37238905164931
patch: final int dp [ ] = ( int [ ] ) p $NUMBER$ [ i ] ;
rank: 543
score: 99.36283605238971
patch: sum sum += p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 543
score: 99.36276424632354
patch: final int abs = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 543
score: 99.35462103949652
patch: final * int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 543
score: 99.34495907738095
patch: final int dp += p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp ;
rank: 544
score: 99.4073486328125
patch: return Math . sqrt ( p 1 [ i ] - p 1 [ i ] ) ;
rank: 544
score: 99.38396139705883
patch: final int dp = p 1 [ i ] . hash CaMeL Code ( ) ;
rank: 544
score: 99.3752505653783
patch: final int dp = p 1 [ i ] - p 1 [ i + 1 ) ;
rank: 544
score: 99.36278618706598
patch: final int dp 1 = p 1 : p 1 [ i ] - p $NUMBER$ ;
rank: 544
score: 99.36258951822917
patch: int dp = p 1 [ i + i ] - p $NUMBER$ [ i ] ;
rank: 544
score: 99.35422650505515
patch: final int stream = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 544
score: 99.34452311197917
patch: tmp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 545
score: 99.41981201171875
patch: final int dp = p 1 [ i ] - p $NUMBER$ < p $NUMBER$ [ i ] ;
rank: 545
score: 99.40731008429276
patch: for ( int i = 0 ; i < p 1 [ i ] - p $NUMBER$ ,
rank: 545
score: 99.38393683182566
patch: final int int dp 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 545
score: 99.37519073486328
patch: final int dp = p 1 [ i / p $NUMBER$ [ i ] ;
rank: 545
score: 99.37215169270833
patch: final int [ ] dp = dp [ i ] - p $NUMBER$ [ i ] ;
rank: 545
score: 99.3624496459961
patch: int sum += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 546
score: 99.41966552734375
patch: final float dp = p 1 [ i ] - p $NUMBER$ : p $NUMBER$ [ i ] ;
rank: 546
score: 99.37195587158203
patch: final int [ ] dp = new int [ p $NUMBER$ [ i ] ;
rank: 546
score: 99.36241149902344
patch: sum += dp 1 [ i ] [ p $NUMBER$ [ i ] ; }
rank: 546
score: 99.34438069661458
patch: entries [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 547
score: 99.42184109157986
patch: do { int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 547
score: 99.40697021484375
patch: final int dp = p 1 . [ i ] - p $NUMBER$ [ i + 1 ] ;
rank: 547
score: 99.37174479166667
patch: final int dp = 0 ; final int p 1 = p 1 [ i ] ;
rank: 547
score: 99.36231231689453
patch: distance += p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 547
score: 99.36228541324013
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ $NUMBER$ ] ;
rank: 547
score: 99.34405517578125
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; final
rank: 548
score: 99.4218017578125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ p 1 . length ] ;
rank: 548
score: 99.40693969726563
patch: return dp 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 548
score: 99.38353207236842
patch: final int dp = p 1 [ i ] [ p $NUMBER$ [ i ] + 1 ;
rank: 548
score: 99.3621890419408
patch: final int dp = p 1 [ i ] * p $NUMBER$ [ i ] : 0 ;
rank: 548
score: 99.36128315172698
patch: final int dp = p 1 [ int 1 ] - p $NUMBER$ [ int $NUMBER$ ] ;
rank: 548
score: 99.34397977941177
patch: final int max = p 1 [ i ] - p 1 [ i ] ;
rank: 549
score: 99.42150065104167
patch: if ( p 1 [ i ] > p $NUMBER$ [ i ] ;
rank: 549
score: 99.41946847098214
patch: final int dp = Math . max ( p 1 [ i ] , p 1 [ i ] ;
rank: 549
score: 99.40687866210938
patch: if ( p 1 [ i ] . length >= p $NUMBER$ [ i ] . length ) {
rank: 549
score: 99.38335418701172
patch: double dp = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 549
score: 99.37365044487848
patch: final int dp = p 1 [ i ] - p 1 [ i + ] ;
rank: 549
score: 99.36214406866776
patch: sum += dp ( p 1 [ i ] , p $NUMBER$ [ i ] ) ; }
rank: 549
score: 99.36116027832031
patch: int sum = p 1 [ i ] - p 1 [ i ] ;
rank: 549
score: 99.35209825303819
patch: final int dp = : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 549
score: 99.34378390842014
patch: names [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 550
score: 99.41945929276316
patch: final * final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 550
score: 99.40642700195312
patch: { final int dp = p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 550
score: 99.38327365451389
patch: int dp = p 1 [ i ] . length + p $NUMBER$ [ i ] ;
rank: 550
score: 99.3708431846217
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] >> 1 ;
rank: 551
score: 99.40594161184211
patch: return Math . distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 551
score: 99.38314016241776
patch: final int i = ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 551
score: 99.36183675130208
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ -- i ] ;
rank: 551
score: 99.3610107421875
patch: int dp = p 1 [ i ] - p $NUMBER$ . length ;
rank: 551
score: 99.35109456380208
patch: final int dp = p 1 1 [ i ] - p 1 [ i ] ;
rank: 551
score: 99.3434814453125
patch: final return p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 552
score: 99.4210205078125
patch: long dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 552
score: 99.41922800164474
patch: int dp = p 1 [ i ] + p $NUMBER$ + p $NUMBER$ [ i ] ;
rank: 552
score: 99.37337917751736
patch: final int dp = p 1 [ i ] - p 1 [ i - 1 ;
rank: 552
score: 99.37046412417763
patch: final int dp = p 1 [ i ] || p $NUMBER$ [ i ] == null ;
rank: 552
score: 99.35094536675348
patch: final int dp = p 1 > 0 ? p $NUMBER$ [ i ] : 0 ;
rank: 553
score: 99.42053985595703
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] > ;
rank: 553
score: 99.3608757467831
patch: int int dp = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 553
score: 99.34307502297794
patch: final double sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 554
score: 99.40521918402777
patch: sum += distance ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 554
score: 99.37306123621323
patch: final int dp = p 1 [ i ] + p 1 [ 0 ] ;
rank: 554
score: 99.37022489659927
patch: final int [ ] p 1 = new int [ p 1 [ i ] ;
rank: 555
score: 99.42047119140625
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] [ $NUMBER$ ] ;
rank: 555
score: 99.41893421519886
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + 1 ] [ i ] ;
rank: 555
score: 99.40517171223958
patch: { final int dp = p 1 [ i ] - p $NUMBER$ [ 1 ] ;
rank: 555
score: 99.37284342447917
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i / 1 ;
rank: 555
score: 99.3612289428711
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ]
rank: 555
score: 99.36079487047698
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - name ;
rank: 556
score: 99.42028090533088
patch: final int dp = p 1 [ i ] - Double . MAX _ VALUE ;
rank: 556
score: 99.41888834635417
patch: dp -= p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 556
score: 99.40497504340277
patch: System . i ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 556
score: 99.38175241570724
patch: final int dp $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 556
score: 99.36116536458333
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + count
rank: 556
score: 99.36057739257812
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - dp ) ;
rank: 556
score: 99.34280215992646
patch: final int compare = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 557
score: 99.41870727539063
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i * - $NUMBER$ ] ;
rank: 557
score: 99.36929141773896
patch: final int i = p 1 [ 0 ] - p $NUMBER$ [ i ] ;
rank: 557
score: 99.36114180715461
patch: sum += int ( p 1 [ i ] + p $NUMBER$ [ i ] ) ; }
rank: 557
score: 99.34974500868056
patch: final int dp = p 1 SIZE [ i ] - p $NUMBER$ [ i ] ;
rank: 557
score: 99.34278506324405
patch: final int dp = p 1 [ i ] - $STRING$ ; sum += dp * dp * dp ;
rank: 558
score: 99.38119346217105
patch: final int dp = Math . min ( dp 1 , p $NUMBER$ [ i ] ) ;
rank: 558
score: 99.36923217773438
patch: final int [ ] [ ] p $NUMBER$ = p 1 [ i ] ;
rank: 558
score: 99.36098761307566
patch: sum = Math . sqrt ( p 1 [ i ] + p $NUMBER$ [ i ] ,
rank: 558
score: 99.3602294921875
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] : - $NUMBER$ ;
rank: 558
score: 99.34955797697368
patch: int dp = p 1 [ i ] [ 1 ] - p $NUMBER$ [ i ] ;
rank: 559
score: 99.3811099403783
patch: for ( int i = 0 ; i < p 1 [ i ] ; i ++ ;
rank: 559
score: 99.3609683388158
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + p $NUMBER$ +
rank: 559
score: 99.35990825452302
patch: final int dp = dp - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 559
score: 99.34926350911458
patch: final int dp = ( p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 559
score: 99.34238009982639
patch: vals [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 560
score: 99.41995578342014
patch: final int dp = p 1 [ i ] - new p $NUMBER$ [ i ] ;
rank: 560
score: 99.41852361505681
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i * p $NUMBER$ [ i ] ;
rank: 560
score: 99.4034912109375
patch: { for ( int i = 0 ; i < p 1 . length ; i ++ ) {
rank: 560
score: 99.37196858723958
patch: final int dp = 1 [ i ] - p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 560
score: 99.36083984375
patch: final int dp = p 1 : [ i ] - p $NUMBER$ [ i ] ;
rank: 560
score: 99.35986328125
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] : $STRING$ ;
rank: 560
score: 99.342041015625
patch: final int p 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 561
score: 99.4198486328125
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ; if ( ;
rank: 561
score: 99.38084501378677
patch: final int max = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 561
score: 99.37181260850694
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ; dp
rank: 561
score: 99.36912184495192
patch: int dp = p 1 [ i ] [ i ] ;
rank: 561
score: 99.36081271701389
patch: return Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] )
rank: 561
score: 99.34189675071023
patch: final int dp = p 1 [ i ] - p $NUMBER$ . i ; sum += dp * dp ;
rank: 562
score: 99.41969209558823
patch: final Comparable dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 562
score: 99.40345594618056
patch: for ( int dp = p 1 [ i ] - p 1 [ i ] ;
rank: 562
score: 99.37171128216912
patch: final int dp = p 1 [ i ] ; final int dp = null ;
rank: 562
score: 99.36911010742188
patch: dp 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 562
score: 99.3607113486842
patch: return Math . sqrt ( p 1 [ i ] / p $NUMBER$ [ i ] ) ;
rank: 562
score: 99.34888413373162
patch: final int arraycopy = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 563
score: 99.37149386935764
patch: final int dp = p 1 [ i + p $NUMBER$ [ i - 1 ] ;
rank: 563
score: 99.36880258413461
patch: final double [ ] dp = p 1 [ i ] ;
rank: 563
score: 99.3487189797794
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ]
rank: 563
score: 99.34162055121527
patch: buf [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 564
score: 99.41943359375
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ) {
rank: 564
score: 99.41780170641448
patch: final int dp = mod . p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 564
score: 99.40301154641544
patch: { double dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 564
score: 99.38037827435662
patch: if ( p 1 [ i ] < p 1 [ i ] ) break ;
rank: 564
score: 99.37146674262152
patch: final int dp = p 1 [ i ] - p 1 [ i ] ] ;
rank: 564
score: 99.36858452690973
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ++ ] ;
rank: 564
score: 99.3415771484375
patch: n += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 565
score: 99.41766967773438
patch: final int dp = p 1 [ i ] + p $NUMBER$ : p 1 [ i ] ;
rank: 565
score: 99.36845846737133
patch: final int dp = p 1 [ 0 ] - p $NUMBER$ [ 1 ] ;
rank: 565
score: 99.35820569490132
patch: int dp = p 1 [ i ] . get ( p 1 [ i ] ) ;
rank: 565
score: 99.34857177734375
patch: final int dp = p $NUMBER$ 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 566
score: 99.41935424804687
patch: if ( p 1 [ i ] < p 1 [ i ] ) { sum ++ ; }
rank: 566
score: 99.4175961143092
patch: final int dp = Math . dp 1 [ i ] - p 1 [ i ] ;
rank: 566
score: 99.40283203125
patch: int dp = p 1 [ i ] - p $NUMBER$ [ - i ] ;
rank: 566
score: 99.37097886029412
patch: final int dp = new int [ i ] - p $NUMBER$ [ i ] ;
rank: 566
score: 99.36817932128906
patch: int i = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 566
score: 99.35987764246323
patch: final double dp = p 1 : p 1 [ i ] - p $NUMBER$ ;
rank: 566
score: 99.35786518297698
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . to CaMeL
rank: 566
score: 99.34852359169408
patch: return ( ( int ) p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 566
score: 99.34147135416667
patch: start += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 567
score: 99.41927761501736
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { ; }
rank: 567
score: 99.40261358963816
patch: if ( p 1 [ i ] == ( int ) p 1 [ i ] ) {
rank: 567
score: 99.38004985608552
patch: final int dp = p 1 [ i ] && p $NUMBER$ [ i ] > 0 ;
rank: 567
score: 99.37093777126736
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] } ;
rank: 567
score: 99.35987613075658
patch: final int dp = p 1 [ i + p $NUMBER$ : p 1 [ i ] ;
rank: 567
score: 99.35772705078125
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] : i ;
rank: 567
score: 99.34822351792279
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ $STRING$ ] ;
rank: 568
score: 99.4189453125
patch: if ( p $NUMBER$ [ i ] - p 1 [ i ] < p $NUMBER$ [ i ] ) {
rank: 568
score: 99.41753791360294
patch: private int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 568
score: 99.37984426398026
patch: if ( p $NUMBER$ [ i ] == p 1 [ i ] ) { continue ; }
rank: 568
score: 99.3675537109375
patch: p 1 = p 1 [ i ] - p 1 [ i ] ;
rank: 568
score: 99.35737047697368
patch: int dp = int 1 [ p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 568
score: 99.34791395399306
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 ) ;
rank: 568
score: 99.34144422743056
patch: temp [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 569
score: 99.40239122178819
patch: if ( p 1 [ i ] . length >= p $NUMBER$ [ i ] ) {
rank: 569
score: 99.37905544704861
patch: final int dp = p 1 [ i ] 1 [ p 1 [ i ] ;
rank: 569
score: 99.37023111979167
patch: final int dp [ ] = p 1 [ i + $NUMBER$ ] ;
rank: 569
score: 99.36750344669117
patch: int p 1 = p 1 [ i ] - p 1 [ i ] ;
rank: 569
score: 99.34778510199652
patch: final int dp = i - 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 569
score: 99.34131920855978
patch: final int dp = p $NUMBER$ [ i ] - p 1 [ i ] ; sum += dp * dp ;
rank: 570
score: 99.41871402138158
patch: final int dp = p 1 [ i ] - p $NUMBER$ p $NUMBER$ [ i ] ;
rank: 570
score: 99.3787841796875
patch: if ( p 1 [ i ] >= p 1 [ i ] ) {
rank: 570
score: 99.36978585379464
patch: final int dp = p 1 [ i ] - $STRING$ $NUMBER$ ;
rank: 570
score: 99.3591244346217
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : true ;
rank: 570
score: 99.35700426603618
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ ;
rank: 570
score: 99.3477718955592
patch: final int dp = p 1 , [ ] p 1 = p $NUMBER$ [ i ] ;
rank: 570
score: 99.34126112196181
patch: final int dp = p 1 [ i ] - p 1 [ i ] ; else
rank: 571
score: 99.41856689453125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; continue ; }
rank: 571
score: 99.37772623697917
patch: final int dp = p 1 [ i ] - ( p $NUMBER$ [ i ] ;
rank: 571
score: 99.36972384982639
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ length 1 ] ;
rank: 571
score: 99.36641652960526
patch: dp [ i ] = p $NUMBER$ [ i ] - p 1 [ i ] ; }
rank: 571
score: 99.3591244346217
patch: return Math . sqrt ( p 1 [ i ] + p $NUMBER$ [ i ] ) ?
rank: 571
score: 99.35671099494485
patch: int dp = p 1 [ i ] . - p $NUMBER$ [ i ] ;
rank: 571
score: 99.34102006392045
patch: final int dp = p 1 . [ i ] - p $NUMBER$ [ i ] ; sum += dp ;
rank: 572
score: 99.41853162977431
patch: final float dp = p 1 [ i ] - p $NUMBER$ [ i ] ; ;
rank: 572
score: 99.35654025607639
patch: sum += distance ( dp 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 572
score: 99.34759880514706
patch: final int dp = max $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 573
score: 99.41679302014802
patch: int dp = Math . max p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 573
score: 99.36902618408203
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ) ;
rank: 573
score: 99.35847024356617
patch: final int dp = p 1 . [ i ] - p $NUMBER$ : i ;
rank: 573
score: 99.34759200246711
patch: final int sum = p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 574
score: 99.41814630681819
patch: if ( p 1 [ i ] - p 1 [ i ] >= p $NUMBER$ [ i ] ) {
rank: 574
score: 99.4165103310033
patch: final double dp = p 1 [ i ] - p $NUMBER$ [ i + 1 ] ;
rank: 574
score: 99.35801866319444
patch: int dp = p 1 [ i ] , dp = p $NUMBER$ [ i ] ;
rank: 574
score: 99.355712890625
patch: final int int dp = p 1 [ i ] - p $NUMBER$ [ i 1 ] ;
rank: 574
score: 99.34743923611111
patch: final int , sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 574
score: 99.34066109035327
patch: array [ i ] = Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 575
score: 99.41773745888158
patch: p 1 [ i ] += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 575
score: 99.401318359375
patch: m = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 575
score: 99.37721880744485
patch: if ( p 1 [ i ] == p 1 [ i ] ) continue ;
rank: 575
score: 99.36813693576389
patch: final int dp = p 1 [ i + p 1 [ i - 1 ] ;
rank: 575
score: 99.35785271139706
patch: final int dp = p 1 . - i - p $NUMBER$ [ i ] ;
rank: 575
score: 99.35569361636513
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - distance ;
rank: 575
score: 99.34715511924342
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ name - i ] ;
rank: 575
score: 99.3405230978261
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum . ++ * dp ;
rank: 576
score: 99.41748046875
patch: if ( p 1 [ i ] + p $NUMBER$ [ i ] < p $NUMBER$ [ i ] ) {
rank: 576
score: 99.3772036903783
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] * 1 ;
rank: 576
score: 99.36801486545139
patch: final final int dp = 0 ; final int dp = p 1 [ i ] ;
rank: 576
score: 99.36595961626838
patch: final int dp = p 1 [ 0 ] & p $NUMBER$ [ i ] ;
rank: 576
score: 99.34709616268383
patch: final int dp = SIZE 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 576
score: 99.34051513671875
patch: v [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 577
score: 99.41704245174633
patch: final double dp = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 577
score: 99.40092163085937
patch: if ( dp 1 [ i ] . length < p $NUMBER$ [ i ] . length ) {
rank: 577
score: 99.36782497829861
patch: final int dp = p 1 [ i ] - $STRING$ $NUMBER$ $NUMBER$ [ i ] ;
rank: 577
score: 99.34693100873162
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ value ] ;
rank: 577
score: 99.34033881293402
patch: final int dp = p 1 [ i ] 1 - p 1 [ i ] ;
rank: 578
score: 99.4167839499081
patch: final Object dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 578
score: 99.41579302619485
patch: final int dp = p 1 [ i ] != p $NUMBER$ [ i ] ;
rank: 578
score: 99.40081787109375
patch: 0 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 578
score: 99.37653350830078
patch: final int dp = Math . abs ( p 1 [ i ] ) ;
rank: 578
score: 99.36746920072116
patch: final int dp = Math + p 1 [ i ] ;
rank: 578
score: 99.35482449001736
patch: int dp = p 1 [ i ] - 0 - p $NUMBER$ [ i ] ;
rank: 578
score: 99.34646267361111
patch: final int dp = p 1 [ i ] static - p $NUMBER$ [ i ] ;
rank: 578
score: 99.34019403872283
patch: final long dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 579
score: 99.416748046875
patch: if ( p 1 [ i ] - p 1 [ i ] <= p $NUMBER$ [ i ] ) {
rank: 579
score: 99.41539916992187
patch: final int dp = p 1 [ i ] * p $NUMBER$ [ i ] [ i ] ;
rank: 579
score: 99.40071614583333
patch: i = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 579
score: 99.36712646484375
patch: final final int dp = p 1 [ i ] - p $NUMBER$ [ 0 ] ;
rank: 579
score: 99.36536362591912
patch: final int dp = 0 ; for p 1 = p 1 [ i ] ;
rank: 579
score: 99.35441509046052
patch: int dp = p 1 [ i ] - new int [ p $NUMBER$ [ i ] ;
rank: 579
score: 99.34640163845486
patch: final int dp = p 1 [ i ] - p $NUMBER$ . size ( ) ;
rank: 580
score: 99.41631758840461
patch: result [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 580
score: 99.40064239501953
patch: , dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 580
score: 99.37555609809027
patch: final float dp 0 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 580
score: 99.36682942708333
patch: final int dp [ - i ] = p 1 [ i ] ;
rank: 580
score: 99.36510467529297
patch: final int [ ] dp = new int [ p 1 . length ] ;
rank: 580
score: 99.3574282997533
patch: return Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) +
rank: 580
score: 99.35416666666667
patch: final int dp = dp 1 [ i ] - p $NUMBER$ [ i 1 ] ;
rank: 580
score: 99.34621175130208
patch: final int ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 580
score: 99.33953498391544
patch: final int ceil = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 581
score: 99.37529161241319
patch: final float dp = p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 581
score: 99.36680501302084
patch: final int dp [ ] = p 1 [ i - 1 ] ;
rank: 581
score: 99.36469582950367
patch: final int dp = p 1 [ i ] . p 1 [ i ] ;
rank: 581
score: 99.35738932291666
patch: final int dp = p 1 . i - p $NUMBER$ : i ;
rank: 581
score: 99.3538754111842
patch: final int dp = p 1 [ i ] - p 1 [ i ] - $STRING$ ;
rank: 581
score: 99.33949788411458
patch: buf [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 582
score: 99.41593627929687
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - i $NUMBER$ ;
rank: 582
score: 99.4150623139881
patch: final int dp = Double . max ( p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 582
score: 99.40015462239583
patch: dp = p 1 [ i ] - p $NUMBER$ [ 1 ] ;
rank: 582
score: 99.37525132123162
patch: final char dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 582
score: 99.36642795138889
patch: final int dp = p 1 ; final int dp = p 1 [ i ] ;
rank: 582
score: 99.36408996582031
patch: int value = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 582
score: 99.35724555121527
patch: final int dp = p 1 [ i ] & - p $NUMBER$ [ i ] ;
rank: 582
score: 99.34545180376838
patch: final int log = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 582
score: 99.33936903211806
patch: final int dp = p 1 [ i ] - p 1 . [ i ] ;
rank: 583
score: 99.41573757595486
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] != 0 ) {
rank: 583
score: 99.40013970269098
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; {
rank: 583
score: 99.37491861979167
patch: if ( p 1 [ i ] . equals ( p $NUMBER$ [ i ] ) )
rank: 583
score: 99.36405944824219
patch: int dp = p 1 [ 0 ] + p $NUMBER$ [ i ] ;
rank: 583
score: 99.35722520616319
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + 1 ]
rank: 583
score: 99.35377332899306
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] : dp ;
rank: 584
score: 99.4146728515625
patch: final int dp = 0 ; if p $NUMBER$ [ i ] < p $NUMBER$ [ i ] ;
rank: 584
score: 99.3998794555664
patch: if ( dp 1 [ i ] <= p $NUMBER$ [ i ] ) {
rank: 584
score: 99.3746337890625
patch: final int dp = Integer . parse CaMeL Int ( p 1 [ i ] ) ;
rank: 584
score: 99.36396340762867
patch: final int dp = p 1 [ i ] - $NUMBER$ [ [ i ] ;
rank: 584
score: 99.35717010498047
patch: sum += p 1 [ i ] & p $NUMBER$ [ i ] ; }
rank: 584
score: 99.3451904296875
patch: final int dp = p 1 [ i ] [ - $NUMBER$ ] ;
rank: 584
score: 99.33928888494319
patch: final int dp ; for ( int i = 0 ; i < p 1 . length ; i ++ )
rank: 585
score: 99.41553548177083
patch: temp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 585
score: 99.39974814967105
patch: return ( int ) ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 585
score: 99.37436092601104
patch: if ( p 1 [ i ] < p 1 [ i ] ) continue ;
rank: 585
score: 99.36510552300348
patch: final int dp = p 1 [ i ] ; int dp = i + 1 ;
rank: 585
score: 99.36387634277344
patch: int dp = p 1 [ i ] % p $NUMBER$ [ i ] ;
rank: 585
score: 99.3570492393092
patch: sum += ( ( int ) p 1 [ i ] - p $NUMBER$ [ i ] )
rank: 585
score: 99.35331726074219
patch: int min = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 585
score: 99.34517728365384
patch: final int dp = i - p 1 [ i ] ;
rank: 586
score: 99.41546952097039
patch: final Big CaMeL Integer dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 586
score: 99.37432391826923
patch: final int dp = 1 [ p 1 [ i ] ;
rank: 586
score: 99.36440700954861
patch: final int dp = p 1 [ i ] ] * p $NUMBER$ [ i ] ;
rank: 586
score: 99.35639105902777
patch: sum = sum * dp 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 586
score: 99.34476964613971
patch: final int err = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 586
score: 99.3382209329044
patch: final int dp = mod $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 587
score: 99.41403680098684
patch: final int dp = Double . p 1 [ i ] - p 1 [ i ] ;
rank: 587
score: 99.39920847039474
patch: for ( int dp = 0 ; i < p 1 . length ; i ++ ) {
rank: 587
score: 99.3742740028783
patch: final int dp = p 1 [ i ] & p $NUMBER$ [ i ] - 1 ;
rank: 587
score: 99.36432562934027
patch: final int dp = p 1 [ i ] - ! p $NUMBER$ [ i ] ;
rank: 587
score: 99.36379825367646
patch: for p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 587
score: 99.3528060913086
patch: int sum = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 587
score: 99.34448920355902
patch: final int dp = p 1 [ i i ] - p $NUMBER$ [ i ] ;
rank: 587
score: 99.338134765625
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; int
rank: 588
score: 99.41521344866071
patch: final int dp = p 1 [ i ] & p $NUMBER$ ;
rank: 588
score: 99.41376953125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + 1 $NUMBER$ ] ;
rank: 588
score: 99.37405395507812
patch: float dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 588
score: 99.36343044704861
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i 1 ] ;
rank: 588
score: 99.35230777138158
patch: p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] -
rank: 588
score: 99.34440343520221
patch: final int sqrt = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 589
score: 99.4147884971217
patch: p 1 [ i ] = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 589
score: 99.41366577148438
patch: final int dp = p $NUMBER$ [ i ] - p 1 [ i ] [ i ] ;
rank: 589
score: 99.39894409179688
patch: if ( p 1 [ i ] . length < p 1 [ i ] . length ) {
rank: 589
score: 99.36333869485294
patch: final int dp = list 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 589
score: 99.36316636029412
patch: final int dp = p 1 [ i ] || p $NUMBER$ [ i ] ;
rank: 589
score: 99.3560791015625
patch: sum = Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 589
score: 99.35228814019098
patch: final int dp = p 1 [ i ] . [ p 1 [ i ] ;
rank: 589
score: 99.3379794034091
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ p $NUMBER$ . length ;
rank: 590
score: 99.41455078125
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ; * /
rank: 590
score: 99.37382238051471
patch: if int dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 590
score: 99.3631232766544
patch: final int [ ] [ ] [ ] dp = p 1 [ i ] ;
rank: 590
score: 99.35601128472223
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . MAX
rank: 590
score: 99.35227338005515
patch: int dp = p 1 [ i ] - p 1 [ i 1 ] ;
rank: 590
score: 99.3442318564967
patch: final int i = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 590
score: 99.33794487847223
patch: final int i = p 1 [ i ] - p $NUMBER$ [ i ] ; int
rank: 591
score: 99.41355494449013
patch: final int dp = compare = p 1 [ i ] - p 1 [ i ] ;
rank: 591
score: 99.37379857113487
patch: final int dp = p 1 [ i ] [ p $NUMBER$ [ i ] - 1 ;
rank: 591
score: 99.36305236816406
patch: int dp = p 1 [ i ] + p $NUMBER$ [ 0 ] ;
rank: 591
score: 99.36287434895833
patch: final int dp = p 1 [ i ] - p 1 [ i - ] ;
rank: 591
score: 99.35596988075658
patch: final int i = p 1 [ i ] - p $NUMBER$ [ i ] : 0 ;
rank: 592
score: 99.41429985894098
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] != null ) {
rank: 592
score: 99.39840537623355
patch: final int dp = p 1 . [ i ] - p $NUMBER$ [ i ] ; {
rank: 592
score: 99.36264377170139
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - ) ;
rank: 592
score: 99.35541449652777
patch: sum += this . p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 592
score: 99.35135904947917
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - i ;
rank: 592
score: 99.33755696614584
patch: hierarchy = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 593
score: 99.41331722861842
patch: int dp = p 1 [ i ] [ i ] + p $NUMBER$ [ i ] ;
rank: 593
score: 99.39839252672698
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i << $NUMBER$ ] ;
rank: 593
score: 99.36299856085526
patch: final int dp = p 1 [ i ] ? p 1 [ i ] : i ;
rank: 593
score: 99.36250574448529
patch: final int dp = p 1 [ i ] && p $NUMBER$ [ i ] ;
rank: 593
score: 99.35129908511513
patch: final double dp = p 1 [ i ] - p $NUMBER$ [ i ] - dp ;
rank: 594
score: 99.39837036132812
patch: for ( int dp = p 1 [ i ] ; sum += dp * dp * dp ;
rank: 594
score: 99.37320963541667
patch: final int dp 0 = p 1 [ i ] + p 1 [ i ] ;
rank: 594
score: 99.35528564453125
patch: final int dp = p 1 . i - p 1 [ i ] ;
rank: 594
score: 99.35125373391544
patch: int dp ++ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 594
score: 99.33725807883523
patch: Integer dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 595
score: 99.41394721137152
patch: int dp = p 1 [ i ] + $STRING$ + p $NUMBER$ [ i ] ;
rank: 595
score: 99.37312397203948
patch: final int dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] . length ;
rank: 595
score: 99.36196719898896
patch: final int dp = start 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 595
score: 99.36191813151042
patch: final int dp 1 = p 1 [ i ] - p $NUMBER$ [ i ) ;
rank: 595
score: 99.35504509420956
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] . length
rank: 595
score: 99.3434829711914
patch: final int dp = SIZE [ i ] - p $NUMBER$ [ i ] ;
rank: 595
score: 99.33720846737133
patch: final int dp = p 1 [ i ] -= p $NUMBER$ [ i ] ;
rank: 596
score: 99.4137824563419
patch: final int dp = p 1 [ i ] - System . $NUMBER$ . 0 ;
rank: 596
score: 99.3550048828125
patch: sum = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 596
score: 99.35088790090461
patch: for ( int dp = p 1 [ i ] - p $NUMBER$ [ i ] ) {
rank: 596
score: 99.3371826171875
patch: final int dp = ( int ) p 1 [ i ] - p 1 [ i ] ;
rank: 597
score: 99.41340467664931
patch: int dp = 0 [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 597
score: 99.39781996783088
patch: sum += p 1 [ 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 597
score: 99.36163330078125
patch: final int dp = 0 ; final final int dp = p 1 [ i ] ;
rank: 597
score: 99.35489230685764
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + i
rank: 597
score: 99.33715006510417
patch: cur = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 598
score: 99.41336059570312
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] > 0 . $NUMBER$ ) {
rank: 598
score: 99.37179744944854
patch: final int float = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 598
score: 99.36113823784723
patch: final int dp = p 1 [ i ] { p 1 [ i ] } ;
rank: 598
score: 99.34295654296875
patch: final int i = p 1 . [ i ] - p $NUMBER$ [ i ] ;
rank: 598
score: 99.33690592447917
patch: h += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 599
score: 99.37168974034927
patch: for int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 599
score: 99.35475158691406
patch: sum += distance 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 599
score: 99.3502197265625
patch: int dp = p 1 [ i ] - $NUMBER$ - p $NUMBER$ [ i ] ;
rank: 599
score: 99.34278700086806
patch: / * int sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 599
score: 99.33639393682066
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 600
score: 99.41236029730902
patch: final int dp = Math . dp [ i ] - p $NUMBER$ [ i ] ;
rank: 600
score: 99.39697875976563
patch: for ( int dp = p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 600
score: 99.37154812282986
patch: final int dp = p 1 [ i ] + p 1 [ i ] ) ;
rank: 600
score: 99.36072495404412
patch: final int dp = p 1 [ i ] - p 1 [ $NUMBER$ ] ;
rank: 600
score: 99.35470760569854
patch: sum += p 1 [ i ] 1 [ p $NUMBER$ [ i ] ; }
rank: 600
score: 99.33629261363636
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum = dp * dp ;
rank: 601
score: 99.41261121961806
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] + $STRING$ ;
rank: 601
score: 99.41230854235198
patch: final float dp [ ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 601
score: 99.3968570106908
patch: if ( p 1 : p 1 [ i ] - p $NUMBER$ [ i ] ) {
rank: 601
score: 99.37138928865132
patch: final int dp = p 1 [ i ] . equals ( p $NUMBER$ [ i ] ;
rank: 601
score: 99.36082628038194
patch: final int dp = p 1 [ i ] ; p $NUMBER$ [ i ] ++ ;
rank: 601
score: 99.36035834418402
patch: dp [ i ] = p 1 [ i ] - p $NUMBER$ [ 0 ] ;
rank: 601
score: 99.35469563802083
patch: dp = p 1 [ i ] - p $NUMBER$ [ i 1 [ i ] ;
rank: 601
score: 99.34264458550348
patch: final int ++ i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 601
score: 99.33628216911765
patch: final float sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 602
score: 99.41216750372024
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + i + 1 ;
rank: 602
score: 99.36006433823529
patch: final String dp = p 1 [ i ] + p 1 [ i ] ;
rank: 602
score: 99.34959581163194
patch: final int Integer dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 602
score: 99.33587036132812
patch: Integer dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp ;
rank: 603
score: 99.41191663240132
patch: final int dp = ( int p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 603
score: 99.41165161132812
patch: p 1 [ i ] = p $NUMBER$ [ i ] - p 1 [ i ] ; }
rank: 603
score: 99.39581620065789
patch: { distance [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 603
score: 99.35450654871323
patch: final int dp = p 1 : p 1 [ i ] [ i ] ;
rank: 603
score: 99.349365234375
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i + p 1 ] ;
rank: 604
score: 99.4118408203125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ; ;
rank: 604
score: 99.39547909007354
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$
rank: 604
score: 99.3598273782169
patch: final int [ ] [ ] dp = new int [ 1 ] [ ] ;
rank: 604
score: 99.35413315716912
patch: final int dp = p 1 [ i ] - p $NUMBER$ : - $NUMBER$ ;
rank: 604
score: 99.33480171535327
patch: final int dp = dp 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 605
score: 99.41181383634868
patch: int dp = p 1 [ i ] - p $NUMBER$ | p $NUMBER$ [ i ] ;
rank: 605
score: 99.41121215820313
patch: if ( p 1 [ i ] <= p $NUMBER$ [ i ] ) { break ; } }
rank: 605
score: 99.37009684244792
patch: int dp = ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 605
score: 99.35959041819854
patch: final int dp = p 1 [ i ] & - $NUMBER$ [ i ] ;
rank: 605
score: 99.35398463199013
patch: final int dp = p 1 : i - p $NUMBER$ [ i ] - p $NUMBER$ ;
rank: 605
score: 99.34880514705883
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ dp ] ;
rank: 605
score: 99.33424974524456
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ p $NUMBER$ [ i ] ;
rank: 606
score: 99.41112563189338
patch: final int dp = p 1 [ i ] + i $NUMBER$ [ $NUMBER$ ] ;
rank: 606
score: 99.39520263671875
patch: sum = distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 606
score: 99.37007863898026
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { } else {
rank: 606
score: 99.35947552849265
patch: final int dp = p 1 [ i ] + - $NUMBER$ [ i ] ;
rank: 606
score: 99.35348849826389
patch: sum += ( dp 1 [ i ] + p $NUMBER$ [ i ] ) ; }
rank: 606
score: 99.34874131944444
patch: sum += dp 1 [ i ] . distance ( p $NUMBER$ [ i ] ) ;
rank: 606
score: 99.34240044487848
patch: final int dp = p $NUMBER$ $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 606
score: 99.33416193181819
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] [ p 1 . length ;
rank: 607
score: 99.41094649465461
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . value ;
rank: 607
score: 99.35953776041667
patch: final int dp = p 1 [ i ] - 1 [ i + 1 ] ;
rank: 607
score: 99.35939025878906
patch: final int [ ] p 1 = this . p 1 [ i ] ;
rank: 607
score: 99.3341064453125
patch: Integer dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp . length ;
rank: 608
score: 99.41094292534723
patch: int dp = 1 [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 608
score: 99.3695004111842
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] * $STRING$ ;
rank: 608
score: 99.35939534505208
patch: final int dp 1 = p 1 [ i ] / p $NUMBER$ [ i ] ;
rank: 608
score: 99.35261615953948
patch: sum += Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] *
rank: 608
score: 99.33377511160714
patch: final int dp = p 1 [ i ] $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 609
score: 99.41134207589286
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; final int dp ;
rank: 609
score: 99.41072998046874
patch: final int dp = p 1 [ i ] [ p $NUMBER$ [ p $NUMBER$ . length ] ;
rank: 609
score: 99.35875651041667
patch: final int dp [ ] = p 1 [ i - $NUMBER$ ] ;
rank: 609
score: 99.35210104549633
patch: sum += distance = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 609
score: 99.3336871603261
patch: final int dp = p 1 [ i ] - p 1 [ i ] ; sum = dp * dp ;
rank: 610
score: 99.41131950827206
patch: final int dp = E 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 610
score: 99.41008843315973
patch: final String p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 610
score: 99.39482116699219
patch: Object sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 610
score: 99.35904269748264
patch: final int dp = p 1 [ i ] ; return p $NUMBER$ [ i ] ;
rank: 610
score: 99.35190943667763
patch: final int dp = p 1 : p $NUMBER$ [ i ] [ - p $NUMBER$ ] ;
rank: 610
score: 99.34807990579044
patch: final int append = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 610
score: 99.34189022288604
patch: final int dp = package 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 611
score: 99.35847024356617
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ) ;
rank: 611
score: 99.35190158420139
patch: final int dp = p 1 [ i ] - p $NUMBER$ . length : 0 ;
rank: 611
score: 99.34744698660714
patch: int dp = [ i ] - p $NUMBER$ [ i ] ;
rank: 611
score: 99.3332290649414
patch: m ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 612
score: 99.40987141927083
patch: int dp = p 1 [ i ] - 1 - p $NUMBER$ [ i ] ;
rank: 612
score: 99.35170611213235
patch: sum += p 1 [ i ] - p $NUMBER$ [ i + 1 ] ;
rank: 612
score: 99.33319702148438
patch: final else { final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 613
score: 99.41067940848214
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ? p $NUMBER$ [ i ] ;
rank: 613
score: 99.40955352783203
patch: if ( p 1 [ i ] <= p 1 [ i ] ) {
rank: 613
score: 99.35788302951389
patch: final int [ ] [ ] p 1 = this . p 1 [ i ] ;
rank: 613
score: 99.3515625
patch: final int dp = p 1 : p $NUMBER$ : p 1 [ i ] ;
rank: 613
score: 99.34138319227431
patch: int dp = p 1 [ i ] ; sum += dp * dp * dp ;
rank: 613
score: 99.33254076086956
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp << dp ;
rank: 614
score: 99.4095523231908
patch: if ( p $NUMBER$ [ i ] < p $NUMBER$ [ i ] ) { break ; }
rank: 614
score: 99.39408151726974
patch: for ( int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; int
rank: 614
score: 99.35749897203948
patch: final int dp = p 1 [ i ] && p $NUMBER$ [ i ] == null ;
rank: 614
score: 99.35673522949219
patch: final int dp = p 1 [ i ] - i [ i ] ;
rank: 614
score: 99.35152435302734
patch: sum += dp 1 : p $NUMBER$ [ i ] - p $NUMBER$ ; }
rank: 614
score: 99.34689170435855
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] - dp ;
rank: 614
score: 99.3323390794837
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum . else sum . else
rank: 615
score: 99.40935601128473
patch: final int dp = p 1 [ i ] [ p 1 [ p $NUMBER$ ] ;
rank: 615
score: 99.3939453125
patch: sum += p 1 [ i ] - p $NUMBER$ [ 1 ] ;
rank: 615
score: 99.35672760009766
patch: p 1 = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 615
score: 99.35589240579044
patch: final int dp = p 1 [ i ] - abs $NUMBER$ [ i ] ;
rank: 615
score: 99.35123697916667
patch: final int dp = p 1 . [ i ] - p $NUMBER$ [ i ] +
rank: 615
score: 99.33168723366477
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp ; }
rank: 616
score: 99.41015625
patch: final int dp = p 1 [ i ] < p $NUMBER$ [ i ] - 0 ;
rank: 616
score: 99.39387592516448
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ; } return distance ;
rank: 617
score: 99.40996350740132
patch: final int dp = copy = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 617
score: 99.35663805509868
patch: final int dp = p 1 [ i ] - p 1 [ i ] + $NUMBER$ ;
rank: 617
score: 99.35467888327206
patch: final int dp -= p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 617
score: 99.34094916449652
patch: final int -- dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 617
score: 99.33098810369319
patch: Integer dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp . sum ;
rank: 618
score: 99.40984143708882
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - $STRING$ ] ;
rank: 618
score: 99.40812413832721
patch: double dp = p 1 [ i ] ] - p $NUMBER$ [ i ] ;
rank: 618
score: 99.3936767578125
patch: if ( p 1 [ i ] , p $NUMBER$ [ i ] ) {
rank: 618
score: 99.35424086626838
patch: final int dp dp = 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 618
score: 99.34986029730902
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] != 0
rank: 618
score: 99.34059053308823
patch: final int case = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 619
score: 99.40791015625
patch: result = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 619
score: 99.35420989990234
patch: final int dp = p 1 [ i / p 1 [ i ] ;
rank: 619
score: 99.34984066611842
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . length $NUMBER$
rank: 619
score: 99.34602864583333
patch: double dp = p 1 [ i ] - p $NUMBER$ [ i ] - dp ;
rank: 620
score: 99.4097541360294
patch: final int dp = p 1 [ i ] - p $NUMBER$ + i ] ;
rank: 620
score: 99.40785725911458
patch: results [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 620
score: 99.39326307508681
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] == 0 ) {
rank: 620
score: 99.3557880108173
patch: / * final int dp = p 1 [ i ] ;
rank: 620
score: 99.35360514322916
patch: final int dp [ ] = p 1 [ i + i ] ;
rank: 620
score: 99.3496955422794
patch: final int dp = p 1 : p 1 + p $NUMBER$ [ i ] ;
rank: 620
score: 99.34588623046875
patch: int dp = p 1 [ i ] - p 1 [ i ] . length ;
rank: 620
score: 99.34016927083333
patch: final int dp = && p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 620
score: 99.329931640625
patch: < p 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 621
score: 99.40957159745066
patch: final int dp = p 1 [ i ] < p $NUMBER$ [ i ] + $STRING$ ;
rank: 621
score: 99.40779383042279
patch: final int dp = p 1 [ i ] - float $NUMBER$ [ i ] ;
rank: 621
score: 99.36695620888158
patch: if ( p 1 [ i ] == null || p $NUMBER$ [ i ] == null )
rank: 621
score: 99.35342172475961
patch: dp [ i ] = p 1 [ i ] ; }
rank: 621
score: 99.3397216796875
patch: * final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 621
score: 99.32963634672619
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += false ;
rank: 622
score: 99.34943590666118
patch: final int dp = p 1 [ i ] . equals ( p $NUMBER$ [ i ] )
rank: 622
score: 99.3457390280331
patch: int dp = dp - 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 622
score: 99.33940972222223
patch: final int dp = p 1 [ i -- ] - p $NUMBER$ [ i ] ;
rank: 622
score: 99.32960045855978
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * min ;
rank: 623
score: 99.40946044921876
patch: final int dp = p 1 [ i ] [ p $NUMBER$ [ p $NUMBER$ [ i ] ;
rank: 623
score: 99.40752495659723
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . ;
rank: 623
score: 99.35108947753906
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ;
rank: 623
score: 99.34930060891544
patch: final int dp = p 1 : p $NUMBER$ [ i + p $NUMBER$ ] ;
rank: 623
score: 99.34555233226104
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] }
rank: 623
score: 99.32953239889706
patch: Double p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 624
score: 99.4074642783717
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] + $STRING$ ;
rank: 624
score: 99.36638047960069
patch: final int dp $NUMBER$ = p 1 [ i ] / p $NUMBER$ [ i ] ;
rank: 624
score: 99.35540093315973
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 624
score: 99.34923598345588
patch: sum distance = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 624
score: 99.34549713134766
patch: int dp = int $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 624
score: 99.32913643973214
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum = dp ;
rank: 625
score: 99.40943545386905
patch: final int dp = 0 ; if ( p 1 [ i ] == p $NUMBER$ [ i ] ;
rank: 625
score: 99.39041940789474
patch: { final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; {
rank: 625
score: 99.3552490234375
patch: dp += p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 625
score: 99.34906768798828
patch: final int dp = p 1 : p 1 [ i ] - 1 ;
rank: 625
score: 99.34545180376838
patch: final int dp = int $NUMBER$ [ 1 ] - p $NUMBER$ [ i ] ;
rank: 625
score: 99.33893500434027
patch: final int dp >> = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 625
score: 99.32883619225544
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + p 1 [ i ] ;
rank: 626
score: 99.40705023871527
patch: Big CaMeL Integer dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 626
score: 99.34960219439338
patch: final int dp = p 1 [ i ] - break $NUMBER$ [ i ] ;
rank: 626
score: 99.34523638556985
patch: final int dp = final 1 [ i ] - p 1 [ i ] ;
rank: 626
score: 99.32852172851562
patch: Integer dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 627
score: 99.4092953330592
patch: final long dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 627
score: 99.38962809244792
patch: final int dp 1 = p 1 [ i ] - p $NUMBER$ [ 1 ] ;
rank: 627
score: 99.35468401227679
patch: final int < int > dp = p 1 [ i ] ;
rank: 627
score: 99.34943498883929
patch: final int dp 1 = p 1 [ i - 1 ] ;
rank: 627
score: 99.34889622738487
patch: final int dp = p 1 [ i ] - p $NUMBER$ + p $NUMBER$ [ i ]
rank: 627
score: 99.34468841552734
patch: int key = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 627
score: 99.32848011363636
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ . length ;
rank: 628
score: 99.38862609863281
patch: Level dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 628
score: 99.36544799804688
patch: if ( p 1 [ i ] > p 1 [ i ] ) {
rank: 628
score: 99.35383157169117
patch: final double dp = p 1 [ i ] [ p 1 [ i ] ;
rank: 628
score: 99.3493293313419
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ++ ;
rank: 628
score: 99.34873962402344
patch: final int dp = p 1 , dp += p 1 [ i ] ;
rank: 628
score: 99.33803839432566
patch: final int dp = p 1 [ i ] - p 1 [ i ] - $NUMBER$ ;
rank: 629
score: 99.4068539268092
patch: int dp = p 1 [ i ] + p $NUMBER$ [ p $NUMBER$ [ i ] ;
rank: 629
score: 99.38844058388158
patch: if ( dp 1 [ i ] . equals ( p $NUMBER$ [ i ] ) ) {
rank: 629
score: 99.35377412683823
patch: final int 1 = p 1 [ i ] - p 1 [ i ] ;
rank: 629
score: 99.34869706003289
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + p $NUMBER$ :
rank: 629
score: 99.34420437282986
patch: int dp = sum + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 629
score: 99.3281582919034
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp ] ;
rank: 630
score: 99.40663775275735
patch: final int dp = p 1 [ i ] - Double . MIN _ VALUE ;
rank: 630
score: 99.36525472005208
patch: final int dp Math = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 630
score: 99.34868915264423
patch: int dp = p 1 : p $NUMBER$ [ i ] ;
rank: 630
score: 99.34860026041666
patch: final int dp = 0 ; dp = p 1 [ i ] ;
rank: 630
score: 99.3380126953125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - break ;
rank: 630
score: 99.328076171875
patch: r += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 631
score: 99.40856255425348
patch: int dp = Math . dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 631
score: 99.40613606770833
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 631
score: 99.38816833496094
patch: for ( int [ ] p 1 : p 1 [ i ] ) {
rank: 631
score: 99.3535385131836
patch: int length = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 631
score: 99.34843175551471
patch: final int dp 1 = 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 631
score: 99.34392632378473
patch: dp = ( int ) p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 632
score: 99.40608045789931
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] [ i ] ;
rank: 632
score: 99.35334123883929
patch: final int dp = p 1 [ i ] [ $NUMBER$ ] ;
rank: 632
score: 99.34797668457031
patch: final int dp = p 1 [ i + dp 1 [ i ] ;
rank: 632
score: 99.32750883556548
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum [ dp ;
rank: 633
score: 99.40559656479779
patch: int dp = p 1 [ i ] ] + p $NUMBER$ [ i ] ;
rank: 633
score: 99.36429172092014
patch: final float int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 633
score: 99.35332288240132
patch: final double dp = p 1 [ i ] ; dp = p 1 [ i ] ;
rank: 633
score: 99.34840223524306
patch: final int dp = p 1 : p 1 [ i ] - - p $NUMBER$ ;
rank: 633
score: 99.34738159179688
patch: final int dp = p 1 [ i ] + this [ i ] ;
rank: 634
score: 99.4082095497533
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i / i ] ;
rank: 634
score: 99.36341010199652
patch: final int i = p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 634
score: 99.34827378216912
patch: final int i = p 1 [ i ] - p $NUMBER$ [ i ] +
rank: 634
score: 99.34683048023896
patch: final int dp = false ; final int dp = p 1 [ i ] ;
rank: 634
score: 99.32747802734374
patch: final int dp = p 1 [ i ] - p 1 [ i ] ; sum ++ ;
rank: 635
score: 99.40807427300348
patch: final int dp -- : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 635
score: 99.40507956112133
patch: final Long dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 635
score: 99.34797219669117
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] >>
rank: 635
score: 99.32733561197917
patch: max += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 636
score: 99.40505499588816
patch: if ( p 1 [ i ] >= p $NUMBER$ [ i ] [ i ] ) {
rank: 636
score: 99.34764268663194
patch: Math . sqrt ( dp 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 636
score: 99.32724144345238
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum >= dp ;
rank: 637
score: 99.40477230674342
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] != - 1 ) {
rank: 637
score: 99.386962890625
patch: if ( p 1 [ i ] == ( int ) dp $NUMBER$ [ i ] ) {
rank: 637
score: 99.3522705078125
patch: final int dp = p 1 [ i ] - 0 . $NUMBER$ ;
rank: 637
score: 99.34470502068015
patch: final int dp = p 1 [ i ) - p 1 [ i ] ;
rank: 637
score: 99.34341091579861
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] + $NUMBER$ ;
rank: 637
score: 99.33624626608456
patch: final int ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 637
score: 99.3269679857337
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 638
score: 99.36173502604167
patch: if ( p 1 [ i ] . equals ( p $NUMBER$ [ i ] ) ;
rank: 638
score: 99.32675568953805
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; return += dp * dp ;
rank: 639
score: 99.40754780016448
patch: final int dp = 0 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 639
score: 99.40410698784723
patch: final double dp = p 1 [ i ] - p $NUMBER$ [ i ] ] ;
rank: 639
score: 99.38663736979167
patch: final int dp = p 1 . size ( ) - p $NUMBER$ [ i ] ;
rank: 639
score: 99.36172049386161
patch: final int dp = p 1 [ p $NUMBER$ [ i ] ;
rank: 639
score: 99.34667250689338
patch: return ( p 1 [ i ] - p $NUMBER$ [ i ] ) ; }
rank: 639
score: 99.34400132123162
patch: final int dp <= p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 639
score: 99.34330240885417
patch: final long p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 639
score: 99.33561197916667
patch: final int dp = $STRING$ - i - p $NUMBER$ [ i ] ;
rank: 639
score: 99.32668169806985
patch: final int dp = mod 1 [ i ] - p 1 [ i ] ;
rank: 640
score: 99.40390912224265
patch: final Double dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 640
score: 99.36162651909723
patch: final double dp 0 = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 640
score: 99.34651947021484
patch: sum += distance $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 640
score: 99.34385770909927
patch: final int dp = $NUMBER$ 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 640
score: 99.34326850043402
patch: dp = distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 640
score: 99.3354851217831
patch: final int dp = p 1 [ i ] - else $NUMBER$ [ i ] ;
rank: 640
score: 99.32644473805146
patch: final int dp = p 1 [ i ] - E $NUMBER$ [ i ] ;
rank: 641
score: 99.40716552734375
patch: final int dp = p 1 [ i ] - p $NUMBER$ ? p $NUMBER$ [ i ] ;
rank: 641
score: 99.3517837524414
patch: int double = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 641
score: 99.34634060329861
patch: final int dp = p 1 [ i ] - = p $NUMBER$ [ i ] ;
rank: 641
score: 99.33542351973684
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1 1 ] ;
rank: 641
score: 99.326416015625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; return sum * dp ;
rank: 642
score: 99.40334065755208
patch: final int dp = p 1 [ i ] + p $NUMBER$ . [ i ] ;
rank: 642
score: 99.38612874348958
patch: return distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ; }
rank: 642
score: 99.34627278645833
patch: for ( int dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 642
score: 99.32604217529297
patch: VM i = p 1 [ i ] - p 1 [ i ] ;
rank: 643
score: 99.40292197779605
patch: final String dp = p 1 [ i ] - p $NUMBER$ [ i ] + $STRING$ ;
rank: 643
score: 99.38590494791667
patch: { { int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 643
score: 99.34623448988971
patch: sum ( dp 1 [ i ] - p $NUMBER$ [ i ] ) ; }
rank: 643
score: 99.3427375344669
patch: final int dp = p 1 [ i ] ? p $NUMBER$ [ i ] ;
rank: 643
score: 99.32568359375
patch: s += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 644
score: 99.40660095214844
patch: final int dp = p 1 [ i ] - p $NUMBER$ + i ;
rank: 644
score: 99.4025519875919
patch: final int dp = p 1 [ i ] - System $NUMBER$ [ i ] ;
rank: 644
score: 99.38562774658203
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ; else
rank: 644
score: 99.35108139935662
patch: final boolean dp = p 1 [ i ] & p $NUMBER$ [ i ] ;
rank: 644
score: 99.34593290441177
patch: final int dp = p 1 : p 1 [ i ] [ $NUMBER$ ] ;
rank: 644
score: 99.34266764322916
patch: final int dp = p 1 [ int 1 ] - p $NUMBER$ [
rank: 644
score: 99.34252115885417
patch: final int dp ; final int dp = p 1 [ i ] ;
rank: 645
score: 99.38554382324219
patch: for ( int i = 0 ; i > 0 ; i ++ ) {
rank: 645
score: 99.35951741536458
patch: final int dp = ( p 1 [ i ] > p $NUMBER$ [ i ] ;
rank: 645
score: 99.35099029541016
patch: final int dp = ( Integer - 1 ) p 1 [ i ] ;
rank: 645
score: 99.34587097167969
patch: final int dp = p 1 [ i ] == p $NUMBER$ [ i ]
rank: 645
score: 99.34240004595588
patch: final int [ ] p 1 = new int [ p 1 . length ] ;
rank: 645
score: 99.334228515625
patch: final int , sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 645
score: 99.325439453125
patch: float dp = p 1 [ i ] - p 1 [ i ] ; sum += dp * dp ;
rank: 646
score: 99.38545057508681
patch: new final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 646
score: 99.35098605685764
patch: final int [ ] [ ] p 1 = new int [ 1 ] [ ] ;
rank: 646
score: 99.32533482142857
patch: final int dp = p 1 [ i ] ; sum += dp * dp * dp * dp ;
rank: 647
score: 99.4016582782452
patch: p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 647
score: 99.38529459635417
patch: i = distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 647
score: 99.35824584960938
patch: if ( p 1 [ i ] == null ) { return 0 ; }
rank: 647
score: 99.35054738898026
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . $NUMBER$ ;
rank: 647
score: 99.34583333333333
patch: int dp = p 1 [ i ] - p $NUMBER$ : 0 ;
rank: 648
score: 99.40616607666016
patch: final int dp = random [ i ] - p $NUMBER$ [ i ] ;
rank: 648
score: 99.40151798023896
patch: final int dp = p 1 [ i ] - i $NUMBER$ [ 1 ] ;
rank: 648
score: 99.35809685202206
patch: final int start = p 1 [ i ] - p 1 [ i ] ;
rank: 648
score: 99.35054285386029
patch: final int dp : p 1 [ i ] = p $NUMBER$ [ i ] ;
rank: 648
score: 99.34568876378677
patch: sum += p 1 [ i ] ] - p $NUMBER$ [ i ] ; }
rank: 648
score: 99.34191176470588
patch: final int dp = p 1 [ ) ] - p $NUMBER$ [ i ] ;
rank: 648
score: 99.32512872869319
patch: Point dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp . max ;
rank: 649
score: 99.38521082261029
patch: sum += dp 1 [ i ] - p $NUMBER$ [ i ] ; } }
rank: 649
score: 99.35768636067708
patch: final int dp = p $NUMBER$ [ i ] 1 [ p $NUMBER$ [ i ] ;
rank: 649
score: 99.3503353721217
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] - i ;
rank: 649
score: 99.34567440257354
patch: sum += ( p 1 [ i ] + p $NUMBER$ [ i ] ) ?
rank: 649
score: 99.34178331163194
patch: int [ ] sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 649
score: 99.3338623046875
patch: sum += p 1 [ [ i ] - p $NUMBER$ [ i ] ;
rank: 649
score: 99.32509765625
patch: l = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 650
score: 99.40138244628906
patch: int dp = p 1 [ i ] + i $NUMBER$ [ i ] ;
rank: 650
score: 99.38481588924633
patch: final int dp = p $NUMBER$ [ 1 ] - p $NUMBER$ [ i ] ;
rank: 650
score: 99.34148810891544
patch: int dp = ! p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 650
score: 99.34074132582721
patch: final int dp = new int [ 1 ] - p $NUMBER$ [ i ] ;
rank: 650
score: 99.33383358226104
patch: static int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 650
score: 99.32481317934783
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum *= dp * dp ;
rank: 651
score: 99.38479434742646
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - $NUMBER$
rank: 651
score: 99.35697937011719
patch: float dp = p 1 [ i ] [ p $NUMBER$ [ i ] ;
rank: 651
score: 99.35004625822368
patch: final int [ ] [ ] p $NUMBER$ = new int [ p 1 [ i ] ;
rank: 651
score: 99.34552764892578
patch: final int dp = p 1 : p 1 : i - p $NUMBER$ ;
rank: 651
score: 99.34103054470486
patch: int dp = p 1 [ i ] . distance ( p $NUMBER$ [ i ] ,
rank: 651
score: 99.34037017822266
patch: final int dp = p 1 [ i ] - p 1 [ i ;
rank: 651
score: 99.32472139246323
patch: this . sum += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 652
score: 99.40590306332237
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . 1 ;
rank: 652
score: 99.40015933388158
patch: p $NUMBER$ [ i ] = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 652
score: 99.35695393880208
patch: final int dp = p 1 [ i ] + p 1 [ i ] ; ;
rank: 652
score: 99.349609375
patch: p 1 = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 652
score: 99.34539116753473
patch: final int dp = p 1 1 : p 1 [ i ] - p $NUMBER$ ;
rank: 652
score: 99.34023868336396
patch: final int dp = p 1 [ i ] / p $NUMBER$ [ 0 ] ;
rank: 652
score: 99.33346396998355
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i & 0 ] ;
rank: 652
score: 99.324658203125
patch: b = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 653
score: 99.40589735243056
patch: / * float dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 653
score: 99.39952895220588
patch: final int dp = p 1 [ i ] + i $NUMBER$ [ 0 ] ;
rank: 653
score: 99.3840267783717
patch: if ( dp 1 [ i ] == ( int ) p $NUMBER$ [ i ] ) {
rank: 653
score: 99.3563232421875
patch: double dp $NUMBER$ = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 653
score: 99.34954474954044
patch: int dp = p 1 [ i ] + p $NUMBER$ [ i ] ; }
rank: 653
score: 99.34537179129464
patch: sum += p 1 [ i ] * p $NUMBER$ [ i ]
rank: 653
score: 99.3404605263158
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - ) ;
rank: 653
score: 99.33344184027777
patch: final int dp = p 1 [ i + p $NUMBER$ [ i ] - $NUMBER$ ;
rank: 653
score: 99.32423311121323
patch: final int i = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 654
score: 99.3834228515625
patch: { for ( int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 654
score: 99.35621553308823
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] +
rank: 654
score: 99.34937959558823
patch: final int dp = ( i - i ) - p $NUMBER$ [ i ] ;
rank: 654
score: 99.34513854980469
patch: final int dp = p 1 , dp += p $NUMBER$ [ i ] ;
rank: 654
score: 99.33990119485294
patch: final int dp = this ; final int dp = p 1 [ i ] ;
rank: 654
score: 99.32407924107143
patch: final int p 1 [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 655
score: 99.39950400904605
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ) { return ; }
rank: 655
score: 99.38311767578125
patch: Object dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 655
score: 99.3560791015625
patch: if ( p 1 [ i ] == p 1 [ i ] )
rank: 655
score: 99.34933132595486
patch: final int p 1 = p 1 [ i ] - p $NUMBER$ [ 0 ] ;
rank: 655
score: 99.34432644314236
patch: final int dp = p 1 [ i ] - p $NUMBER$ : i . length ;
rank: 655
score: 99.33952062270221
patch: final int dp = p 1 . distance ( p $NUMBER$ [ i ] ) ;
rank: 655
score: 99.32389692826705
patch: double dp = p 1 [ i ] - p 1 [ i ] ; sum += dp * dp ;
rank: 656
score: 99.40510828354779
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ++ ] ;
rank: 656
score: 99.3988101356908
patch: p 1 [ i ] += p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 656
score: 99.38289388020833
patch: for ( int i = 0 - $NUMBER$ ; i >= 0 ; i ++ ) {
rank: 656
score: 99.35600280761719
patch: byte dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 656
score: 99.34933035714286
patch: final int dp = ( Integer ) p 1 [ i ] ;
rank: 656
score: 99.33949110243056
patch: int dp = int + p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 656
score: 99.33757672991071
patch: final int dp = p 1 [ i 1 - i ] ;
rank: 657
score: 99.38253623560855
patch: final int [ ] dp 1 = ( int [ ] ) p 1 [ i ] ;
rank: 657
score: 99.35577392578125
patch: final int dp $NUMBER$ = p 1 [ i ] [ p $NUMBER$ [ i ] ;
rank: 657
score: 99.34922162224265
patch: final int dp = ( i - 1 ) - p 1 [ i ] ;
rank: 657
score: 99.32364555027173
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp . length ;
rank: 658
score: 99.3485171669408
patch: final int dp = p $NUMBER$ [ i ] ? p $NUMBER$ [ i ] : 0 ;
rank: 658
score: 99.34383138020833
patch: final int dp = ( p 1 [ i ] + p $NUMBER$ [ i ] )
rank: 658
score: 99.33944881663604
patch: int dp = p 1 [ i 0 ] - p $NUMBER$ [ i ] ;
rank: 658
score: 99.33753159466912
patch: final int dp = 0 ; try { dp = p 1 [ i ] ;
rank: 658
score: 99.32353283110119
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; System . System .
rank: 659
score: 99.40448961759868
patch: final String dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 659
score: 99.35564507378473
patch: final int dp 0 = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 659
score: 99.34850356158088
patch: final int dp = p $NUMBER$ [ i ] = p $NUMBER$ [ i ] ;
rank: 659
score: 99.33746807391827
patch: final int dp = Math = p 1 [ i ] ;
rank: 660
score: 99.40431315104166
patch: final int dp = p 1 [ i ] - p $NUMBER$ ) ;
rank: 660
score: 99.39723036024306
patch: if ( p 1 [ i ] - 1 > p $NUMBER$ [ i ] ) {
rank: 660
score: 99.34828096277573
patch: int dp = p 1 [ i ] - p $NUMBER$ [ - 1 ] ;
rank: 660
score: 99.34343804253473
patch: final int dp = p 1 > i ? p 1 [ i ] : 0 ;
rank: 660
score: 99.33738798253677
patch: final int dp = null ; final int dp = p $NUMBER$ [ i ] ;
rank: 660
score: 99.32310267857143
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ; sum += dp ;
rank: 661
score: 99.40412340666118
patch: / * final float dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 661
score: 99.39707545230263
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] > - $NUMBER$ ) {
rank: 661
score: 99.38197236902573
patch: dp = p 1 [ i ] - p $NUMBER$ [ i + 1 ] ;
rank: 661
score: 99.35479058159723
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ; {
rank: 661
score: 99.34821633731617
patch: final int dp = ( 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 661
score: 99.33209549753289
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - scale ;
rank: 661
score: 99.32302024147727
patch: Point dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp . dp ;
rank: 662
score: 99.40411086309524
patch: final int dp = ( int ] - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 662
score: 99.39698079427083
patch: final int dp = p 1 [ i ] - p $NUMBER$ ] ;
rank: 662
score: 99.34312337239584
patch: sum += p 1 : i - p $NUMBER$ [ i ] ; }
rank: 662
score: 99.33888154871323
patch: final int dp = p 1 . distance ( p 1 [ i ] ) ;
rank: 662
score: 99.33720128676471
patch: final int dp = p 1 [ i ) + p $NUMBER$ [ i ] ;
rank: 662
score: 99.33199055989583
patch: final int dp = p 1 [ i ] - ++ p $NUMBER$ [ i ] ;
rank: 662
score: 99.32275390625
patch: final int dp = p 1 [ i ] - double $NUMBER$ [ i ] ;
rank: 663
score: 99.39674595424107
patch: final int dp = p 1 [ i ] + i $NUMBER$ ;
rank: 663
score: 99.38141832853618
patch: if ( p 1 , p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ) {
rank: 663
score: 99.35439724392361
patch: final int dp 0 = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 663
score: 99.33177992876838
patch: final int distance = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 663
score: 99.32258406929348
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; final int sum = 0 ;
rank: 664
score: 99.40353875411184
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i >> 1 ] ;
rank: 664
score: 99.38080512152777
patch: final int dp = p 1 [ i ] - << p $NUMBER$ [ i ] ;
rank: 664
score: 99.34722493489583
patch: int dp = $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 664
score: 99.34266572840073
patch: dp int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 664
score: 99.33663940429688
patch: final int dp = p 1 [ i ] + start [ i ] ;
rank: 664
score: 99.32242484714673
patch: final String dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 665
score: 99.40347900390626
patch: final int dp = p 1 [ i ] - p $NUMBER$ == p 1 [ i ] ;
rank: 665
score: 99.39541786595395
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] > 0 $NUMBER$ ) {
rank: 665
score: 99.34709087171052
patch: final int [ ] [ ] p 1 = new int [ p 1 [ i ] ;
rank: 665
score: 99.34217834472656
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] *
rank: 665
score: 99.33126670435855
patch: if ( p 1 [ i ] == 0 ) sum += dp 1 [ i ] ;
rank: 665
score: 99.32179857336956
patch: final int dp = Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ] ) ;
rank: 666
score: 99.40339098478618
patch: final int dp = 0 - p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 666
score: 99.39535701976104
patch: if ( p 1 [ i ] != p $NUMBER$ [ i ] ) continue ;
rank: 666
score: 99.3532470703125
patch: final int dp = p 1 [ i ] . length ( ) ;
rank: 666
score: 99.34708404541016
patch: final int [ ] [ ] p 1 = p $NUMBER$ [ i ] ;
rank: 666
score: 99.33843672902961
patch: p 1 [ i ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] -
rank: 666
score: 99.33428192138672
patch: final int dp = p 1 , i = p 1 [ i ] ;
rank: 666
score: 99.33125385485198
patch: if ( p 1 [ i ] != 0 ) sum += p 1 [ i ] ;
rank: 667
score: 99.35321723090277
patch: final int dp = Math . min ( p 1 , p $NUMBER$ [ i ] ;
rank: 667
score: 99.34168243408203
patch: final int i = p 1 [ i ] - p $NUMBER$ : i ;
rank: 667
score: 99.3216796875
patch: e = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 668
score: 99.39529079861111
patch: final int dp = p 1 [ i ] [ p $NUMBER$ [ p 1 ] ;
rank: 668
score: 99.35319688585069
patch: b [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 668
score: 99.34163172104779
patch: final final int dp = p 1 [ i ] - p $NUMBER$ [ i ]
rank: 668
score: 99.33309173583984
patch: final int dp = p 1 [ i ] + p $NUMBER$ . length ;
rank: 669
score: 99.39518229166667
patch: p 1 [ ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 669
score: 99.37973361545139
patch: for ( double dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 669
score: 99.35294283353366
patch: final int dp = p $NUMBER$ [ i ] - 1 ;
rank: 669
score: 99.34650017233456
patch: final int dp = p $NUMBER$ [ 0 ] + p $NUMBER$ [ i ] ;
rank: 669
score: 99.34159342447917
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + break
rank: 669
score: 99.33758223684211
patch: final int dp = p 1 [ i ] - p 1 [ i ] . size ;
rank: 669
score: 99.33287138097427
patch: final int dp = p 1 [ i ] - p $NUMBER$ , 0 ++ ;
rank: 669
score: 99.33109283447266
patch: final int dp = p 1 [ i ] - distance [ i ] ;
rank: 669
score: 99.32135772705078
patch: Offset dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 670
score: 99.40275065104167
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i - 0 ] ;
rank: 670
score: 99.352783203125
patch: final int dp = p $NUMBER$ [ i ] % p $NUMBER$ [ i ] ;
rank: 670
score: 99.33279622395834
patch: final int dp [ ] = p 1 [ i - i ] ;
rank: 671
score: 99.40243191189236
patch: / final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 671
score: 99.39371744791667
patch: final double dp = p 1 [ i ] + p $NUMBER$ [ i ] ; ;
rank: 671
score: 99.37948269314236
patch: distance [ i ] = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 671
score: 99.35269927978516
patch: double dp = p 1 [ i ] + p 1 [ i ] ;
rank: 671
score: 99.33704969618056
patch: final int dp = p 1 int [ i ] - p $NUMBER$ [ i ] ;
rank: 671
score: 99.3327167217548
patch: final int dp = p 1 [ i ] - null ;
rank: 672
score: 99.39369201660156
patch: if ( p $NUMBER$ [ i ] == p $NUMBER$ [ i ] ) {
rank: 672
score: 99.33247644761029
patch: final int dp = max 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 672
score: 99.32050115411931
patch: short dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 673
score: 99.39353434244792
patch: final int dp = p 1 [ i ] & p $NUMBER$ $NUMBER$ [ i ] ;
rank: 673
score: 99.34599304199219
patch: final int < double [ ] > dp = p 1 [ i ] ;
rank: 673
score: 99.34082709418402
patch: final int dp = p 1 . [ i ] * p $NUMBER$ [ i ] ;
rank: 673
score: 99.33653428819444
patch: final double dp = p 1 [ [ i ] - p $NUMBER$ [ i ] ;
rank: 673
score: 99.33080240885417
patch: final int dp = p 1 ) - p 1 [ i ] ;
rank: 674
score: 99.4016177528783
patch: final int dp = p 1 [ i + 1 ] [ p $NUMBER$ [ i ] ;
rank: 674
score: 99.34564971923828
patch: final int dp = ( Integer - 1 ) p $NUMBER$ [ i ] ;
rank: 674
score: 99.33652072482639
patch: int int dp = p 1 [ [ i ] - p $NUMBER$ [ i ] ;
rank: 674
score: 99.33073156020221
patch: final Short dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 674
score: 99.32016389266305
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 0 ] ; sum += dp * dp ;
rank: 675
score: 99.40098812705592
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i * i ] ;
rank: 675
score: 99.39302332261029
patch: final String dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 675
score: 99.3786685341283
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] * dp ;
rank: 675
score: 99.3521369485294
patch: int dp 1 = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 675
score: 99.34545180376838
patch: final int $NUMBER$ = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 675
score: 99.34054226345486
patch: final int dp = p 1 : p 1 [ i ] . size ( ) ;
rank: 675
score: 99.33039008246527
patch: final int dp = p 1 [ i , dp = p $NUMBER$ [ i ] ;
rank: 675
score: 99.31989852241848
patch: final int dp += p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 676
score: 99.40090460526316
patch: dp $NUMBER$ [ i ] = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 676
score: 99.39289293791118
patch: p 1 [ i ] - p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 676
score: 99.35195025275735
patch: final int dp = p 1 [ i ] >= p 1 [ i ] ;
rank: 676
score: 99.34053548177083
patch: final int dp = p 1 [ i ] - p $NUMBER$ : i - 1 ;
rank: 676
score: 99.33622911241319
patch: int dp = p 1 p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 676
score: 99.33013916015625
patch: final int dp = p 1 [ i ] i - p $NUMBER$ [ i ] ;
rank: 677
score: 99.40090460526316
patch: final int dp = abs = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 677
score: 99.35137580422794
patch: final float dp = p 1 [ i ] / p $NUMBER$ [ i ] ;
rank: 677
score: 99.34046128216912
patch: sum += p 1 [ i ] - - p $NUMBER$ [ i ] ; }
rank: 677
score: 99.33618842230902
patch: final final int sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 677
score: 99.33106904871323
patch: final final int dp = 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 677
score: 99.3196688565341
patch: Point dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp . sum ;
rank: 678
score: 99.40080261230469
patch: dp ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 678
score: 99.37815455386513
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ; } return true ;
rank: 678
score: 99.3361752158717
patch: int dp = int ( dp 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 678
score: 99.33087517233456
patch: final int dp = p 1 [ i ] + p $NUMBER$ , i ++ ;
rank: 678
score: 99.31940569196429
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum <= dp ;
rank: 679
score: 99.39204915364583
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] > max ) {
rank: 679
score: 99.35101677389706
patch: final float dp = p 1 [ i ] + p 1 [ i ] ;
rank: 679
score: 99.34499782986111
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ [ 1 ] ;
rank: 679
score: 99.33963775634766
patch: sum += p 1 [ i ] - p $NUMBER$ [ 1 ] ; }
rank: 679
score: 99.32947455512152
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i 1 ] ;
rank: 679
score: 99.3185806274414
patch: double sum = p 1 [ i ] - p 1 [ i ] ;
rank: 680
score: 99.37753475413604
patch: dp ; dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 680
score: 99.32945421006944
patch: final int dp = p 1 [ i + p $NUMBER$ [ i ] - 1 ;
rank: 680
score: 99.31850298713235
patch: final float i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 681
score: 99.39969675164474
patch: final int dp = p 1 [ i ] < p $NUMBER$ [ i - 1 ] ;
rank: 681
score: 99.34487479073661
patch: final int dp = p $NUMBER$ [ i ] [ i ] ;
rank: 681
score: 99.3392693014706
patch: dp = p 1 : i - p $NUMBER$ [ i ] - p $NUMBER$ ;
rank: 681
score: 99.33549499511719
patch: final sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 681
score: 99.3287109375
patch: final int dp = Math . max = p 1 [ i ] ;
rank: 682
score: 99.39935913085938
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + p 1 ;
rank: 682
score: 99.39119037828948
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] < 0 $NUMBER$ ) {
rank: 682
score: 99.35043514476104
patch: final short dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 682
score: 99.3391845703125
patch: sum += dp 1 [ i ] - p $NUMBER$ [ i ] +
rank: 682
score: 99.33527688419117
patch: final int name = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 682
score: 99.31778617527173
patch: final int dp = p 1 [ i ] - p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 683
score: 99.35038926866319
patch: int dp = p 1 [ i ] + p $NUMBER$ [ i ] . length ;
rank: 683
score: 99.3284553079044
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ size ] ;
rank: 683
score: 99.32805319393383
patch: int dp dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 683
score: 99.3177131204044
patch: final int hash = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 684
score: 99.37651624177632
patch: { final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 684
score: 99.35032743566177
patch: int dp = p 1 [ i ] + p $NUMBER$ [ i ] ) ;
rank: 684
score: 99.33473307291666
patch: final int dp = int [ ] + p $NUMBER$ [ i ] ;
rank: 684
score: 99.32832166883681
patch: Math . distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 684
score: 99.32789829799107
patch: final int dp = p 1 [ i - [ i ] ;
rank: 684
score: 99.31766764322917
patch: other = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 685
score: 99.39898322610294
patch: final int dp = p 1 [ i ] < p 1 [ i ] ;
rank: 685
score: 99.39104260896382
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ p 1 . length ;
rank: 685
score: 99.37593078613281
patch: for ( int [ ] p $NUMBER$ : p 1 [ i ] ) {
rank: 685
score: 99.35000610351562
patch: char dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 685
score: 99.34431966145833
patch: for = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 685
score: 99.33838653564453
patch: sum += p 1 [ i ] - p $NUMBER$ [ 0 ] ; }
rank: 685
score: 99.32766723632812
patch: final int dp = p 1 [ i ] - max [ i ] ;
rank: 685
score: 99.31723420516305
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] { p $NUMBER$ [ i ] ;
rank: 686
score: 99.39063936121323
patch: final Integer dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 686
score: 99.34999593098958
patch: final int dp = p 1 [ i ] * p $NUMBER$ [ i ] ; ;
rank: 686
score: 99.34430694580078
patch: final int dp = p 1 [ i ] p 1 [ i ] ;
rank: 686
score: 99.32763671875
patch: final int dp = p 1 [ i ] + 0 ;
rank: 686
score: 99.31720525568181
patch: float dp = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 687
score: 99.39063936121323
patch: int double dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 687
score: 99.34965245863971
patch: float dp 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 687
score: 99.34423065185547
patch: int dp = p 1 [ i ] & p 1 [ i ] ;
rank: 687
score: 99.33810604319854
patch: Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 687
score: 99.32676188151042
patch: final int dp 1 = p 1 [ i ] ;
rank: 687
score: 99.31688639322917
patch: a = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 688
score: 99.39863416883681
patch: / ; int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 688
score: 99.37495252821181
patch: System . ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 688
score: 99.34961615668402
patch: final int dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ; ;
rank: 688
score: 99.34423014322917
patch: final int [ ] dp = this . p 1 [ i ] ;
rank: 688
score: 99.33800591362848
patch: int dp = p 1 [ i ] , dp = p 1 [ i ] ;
rank: 688
score: 99.32327270507812
patch: final int dp = p 1 [ i ] - value [ i ] ;
rank: 688
score: 99.31675720214844
patch: float distance = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 689
score: 99.3984734030331
patch: final ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 689
score: 99.37494574652777
patch: if ( p 1 [ i ] . length > p $NUMBER$ [ i ] ) {
rank: 689
score: 99.34901258680556
patch: final int int dp = p 1 [ i ] + p 1 [ i ] ;
rank: 689
score: 99.34342447916667
patch: int dp = p 1 [ i ] ? p $NUMBER$ [ i ] : i ;
rank: 689
score: 99.33787626378677
patch: final int dp = p 1 , dp $NUMBER$ = p 1 [ i ] ;
rank: 689
score: 99.3342644186581
patch: int final 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 689
score: 99.31624603271484
patch: Point dp = p 1 [ i ] - p 1 [ i ] ;
rank: 690
score: 99.39771792763158
patch: final float dp = p 1 [ i - 1 ] - p $NUMBER$ [ i ] ;
rank: 690
score: 99.34892721737133
patch: if ( p 1 [ i ] > p $NUMBER$ [ i ] ) break ;
rank: 690
score: 99.33777618408203
patch: sum dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 690
score: 99.33406829833984
patch: int dp = int 1 [ i ] - p 1 [ i ] ;
rank: 690
score: 99.32268524169922
patch: final int dp = p 1 [ i ] ; int dp = i ;
rank: 690
score: 99.31611965013587
patch: final int dp = p 1 [ i ] - p 1 [ i ] - p 1 [ i ] ;
rank: 691
score: 99.37482367621527
patch: super . distance ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 691
score: 99.34873046875
patch: if ( p 1 [ i ] == null ) { break ; }
rank: 691
score: 99.34320068359375
patch: int dp = p 1 [ i ] - p 1 [ 0 ] ;
rank: 691
score: 99.33772786458333
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] : 0 ; }
rank: 691
score: 99.33397081163194
patch: int dp = p 1 [ i ] . length - dp $NUMBER$ [ i ] ;
rank: 691
score: 99.31596447172619
patch: final int i = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp ;
rank: 692
score: 99.3893181295956
patch: final double dp = p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 692
score: 99.37462660845588
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + 1
rank: 692
score: 99.34856818704044
patch: float dp $NUMBER$ = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 692
score: 99.34291585286458
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ - 1 ] ;
rank: 692
score: 99.33772108289931
patch: sum += dp 1 [ i ] - p $NUMBER$ [ i + 1 ] ; }
rank: 692
score: 99.31587357954545
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum ( dp ) ;
rank: 693
score: 99.38923196231617
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { }
rank: 693
score: 99.3745476217831
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ; } ;
rank: 693
score: 99.34852430555556
patch: final int dp = p 1 [ i ] == - 1 ? 1 : 0 ;
rank: 693
score: 99.34290364583333
patch: dp += p 1 [ i ] - p 1 [ i ] ;
rank: 693
score: 99.33334350585938
patch: int dp = int 1 [ dp ] - p $NUMBER$ [ i ] ;
rank: 694
score: 99.38916693793402
patch: if ; int dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 694
score: 99.37440400965073
patch: final int Character = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 694
score: 99.33717854817708
patch: final int dp = p 1 [ i ] ; sum += dp * dp ; }
rank: 694
score: 99.31887381417411
patch: final int dp 1 = p 1 [ i - $NUMBER$ ] ;
rank: 694
score: 99.315185546875
patch: final int dp = this . p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp ;
rank: 695
score: 99.37422180175781
patch: for ( int i = 0 ; i < 0 ; i ++ ) {
rank: 695
score: 99.347509765625
patch: if ( p 1 [ i ] == $STRING$ ) { continue ; }
rank: 695
score: 99.34248657226563
patch: int dp = p 1 [ i ] ;
rank: 695
score: 99.31868743896484
patch: final int dp = p 1 [ i ] + p $NUMBER$ . i ;
rank: 695
score: 99.31436820652173
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += 0 . 0 ;
rank: 696
score: 99.38856416590073
patch: final Iterator dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 696
score: 99.37413872612848
patch: i = p 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 696
score: 99.34243594898896
patch: final double dp = p 1 [ i ] = p $NUMBER$ [ i ] ;
rank: 696
score: 99.33677571614584
patch: dp = p 1 [ i ] - p $NUMBER$ [ i ] +
rank: 696
score: 99.33319450827206
patch: final int p 1 = 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 697
score: 99.38837028952206
patch: int dp = p $NUMBER$ [ i ] ] - p $NUMBER$ [ i ] ;
rank: 697
score: 99.37364366319444
patch: { final int sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 697
score: 99.34214154411765
patch: final int i = p 1 [ i ] & p $NUMBER$ [ i ] ;
rank: 697
score: 99.33672417534723
patch: sum += p 1 [ i ] - p $NUMBER$ [ i 1 [ i ] ;
rank: 697
score: 99.3331298828125
patch: final int dp = distance ( p 1 [ i ] , p $NUMBER$ [ i ] ,
rank: 697
score: 99.32610762746711
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] - $NUMBER$ ;
rank: 698
score: 99.38829888237848
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ] ;
rank: 698
score: 99.33664279513889
patch: sum += ( p 1 [ i ] / p $NUMBER$ [ i ] ) ; }
rank: 698
score: 99.33311631944444
patch: int dp = final - p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 698
score: 99.31315811820652
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp - dp ;
rank: 699
score: 99.39485437729779
patch: final int dp = p 1 [ i ] - p $NUMBER$ . i ] ;
rank: 699
score: 99.38819037543402
patch: try { int dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 699
score: 99.34696451822917
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] )
rank: 699
score: 99.33647325303819
patch: final int dp = p 1 . [ i ] - p $NUMBER$ [ i ] [
rank: 699
score: 99.3330078125
patch: final int dp = p 1 . length - p 1 [ i ] ;
rank: 699
score: 99.31313907398896
patch: double p 1 = p 1 [ i ] - p 1 [ i ] ;
rank: 700
score: 99.39399157072368
patch: final int dp = ( p 1 [ i ] - p $NUMBER$ [ i ] ] ;
rank: 700
score: 99.38817641314338
patch: double dp = p 1 [ i ] - p $NUMBER$ [ i ] ; ;
rank: 700
score: 99.37322034333882
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . distance ;
rank: 700
score: 99.34665814568015
patch: if ( p 1 [ i ] . equals ( p $NUMBER$ [ i ] ;
rank: 700
score: 99.33612060546875
patch: sum += dp 1 : p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 700
score: 99.3324951171875
patch: sum += dp 1 [ i ] - p 1 [ i ] ;
rank: 701
score: 99.37314967105263
patch: return Math . sqrt ( p 1 [ i ] - p $NUMBER$ [ 1 ] ) ;
rank: 701
score: 99.3250732421875
patch: if ( p 1 [ i ] == 0 ) sum += p 1 [ i ] ;
rank: 701
score: 99.31402180989583
patch: final int dp = p 1 [ i - 1 - i ] ;
rank: 701
score: 99.31306596235795
patch: Integer dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp . min ;
rank: 702
score: 99.38788519965277
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ) { * /
rank: 702
score: 99.3727668313419
patch: dp = p 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 702
score: 99.3409423828125
patch: final double dp = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 702
score: 99.3358154296875
patch: sum += p 1 [ [ i ] - p $NUMBER$ [ i ] ; }
rank: 702
score: 99.33229064941406
patch: final int += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 702
score: 99.31361389160156
patch: final int < p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 702
score: 99.31294389204545
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp ) ;
rank: 703
score: 99.38755170036765
patch: final long dp = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 703
score: 99.34503851996527
patch: final int dp = p 1 [ i ] + >= p $NUMBER$ [ i ] ;
rank: 703
score: 99.33221794577206
patch: int dp = p 1 [ i $NUMBER$ ] - p $NUMBER$ [ i ] ;
rank: 703
score: 99.32464278371711
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - this ;
rank: 703
score: 99.31263020833333
patch: start = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 704
score: 99.37246864720395
patch: for ( int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; ;
rank: 704
score: 99.34480554917279
patch: final int i = p 1 [ i ] [ p $NUMBER$ [ i ] ;
rank: 704
score: 99.33550666360294
patch: sum ( p 1 [ i ] - p $NUMBER$ [ i ] ) ; }
rank: 704
score: 99.33217366536458
patch: final final long dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 704
score: 99.32456341911765
patch: final int dp = scale 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 704
score: 99.31255696614583
patch: final int dp = p 1 [ i + 1 - i ] ;
rank: 704
score: 99.31247877038044
patch: final int dp 1 = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp 1 ;
rank: 705
score: 99.38694254557292
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] > $NUMBER$ ) {
rank: 705
score: 99.33544243706598
patch: sum += p 1 : p 1 : p 1 [ i ] - p $NUMBER$ ;
rank: 705
score: 99.32423159950658
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] - 1 ;
rank: 705
score: 99.31228841145834
patch: final int dp [ - i ] = p $NUMBER$ [ i ] ;
rank: 706
score: 99.38648139105902
patch: final double dp = p 1 [ i ] ] + p $NUMBER$ [ i ] ;
rank: 706
score: 99.3441521139706
patch: if ( p 1 [ i ] == null ) { continue ; } else {
rank: 706
score: 99.34024386935764
patch: final int [ ] [ ] p $NUMBER$ = this . p 1 [ i ] ;
rank: 706
score: 99.33542767693015
patch: final String dp = p 1 : p 1 [ i ] - p $NUMBER$ ;
rank: 706
score: 99.33149270450367
patch: final int dp = final $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 707
score: 99.34007917131696
patch: final int dp = p 1 [ i ] & - $NUMBER$ ;
rank: 707
score: 99.335205078125
patch: dp = p 1 : p $NUMBER$ [ i ] - p $NUMBER$ ;
rank: 707
score: 99.33115641276042
patch: int dp = dp 1 [ i ] - p $NUMBER$ [ i + $NUMBER$ ] ;
rank: 707
score: 99.3233642578125
patch: final int short = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 707
score: 99.31227213541666
patch: key = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 708
score: 99.38607627467105
patch: if ( p 1 [ i ] . compare CaMeL To ( p $NUMBER$ [ i ] ;
rank: 708
score: 99.33943445542279
patch: for p 1 : p 1 [ i ] = p $NUMBER$ [ i ] ;
rank: 708
score: 99.33479817708333
patch: sum += p 1 [ i ] + p $NUMBER$ [ i ] +
rank: 708
score: 99.33110495174633
patch: final int long = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 708
score: 99.312158203125
patch: my = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 708
score: 99.31019592285156
patch: final int dp = p 1 [ i ] ? p $NUMBER$ [ i ]
rank: 709
score: 99.38602992466518
patch: final int dp = p 1 [ i ] % p $NUMBER$ ;
rank: 709
score: 99.34378051757812
patch: double dp = p 1 [ i ] [ p $NUMBER$ [ i ] ;
rank: 709
score: 99.33447943793402
patch: final int [ ] dp = p 1 [ i ] - p $NUMBER$ [ i ]
rank: 709
score: 99.33097330729167
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i Number ] ;
rank: 709
score: 99.30957794189453
patch: final int dp = 1 [ i ] + p 1 [ i ] ;
rank: 710
score: 99.39226331208882
patch: final int dp = p 1 [ i ] < p $NUMBER$ [ i ] >> $NUMBER$ ;
rank: 710
score: 99.38597196691177
patch: final Math dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 710
score: 99.33447265625
patch: final int dp = dp 1 : p 1 [ i ] - p $NUMBER$ ;
rank: 710
score: 99.33095974392361
patch: int dp = p 1 [ i + 0 ] - p $NUMBER$ [ i ] ;
rank: 710
score: 99.32256401909723
patch: double dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 710
score: 99.31185913085938
patch: final int dp = int 1 [ ] - p $NUMBER$ [ i ] ;
rank: 710
score: 99.30908203125
patch: final int dp = p 1 [ i ] - p $NUMBER$ . 1 ;
rank: 711
score: 99.39221954345703
patch: final int dp = p 1 [ i ] - p 1 . i ;
rank: 711
score: 99.38520893297698
patch: final int dp = p 1 [ i ] ] - p $NUMBER$ [ i ] ; ;
rank: 711
score: 99.34364947150735
patch: final int size = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 711
score: 99.33854675292969
patch: final int dp = start [ i ] - p $NUMBER$ [ i ] ;
rank: 711
score: 99.33444552951389
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i : 1 ;
rank: 711
score: 99.32222254136029
patch: final long sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 711
score: 99.31146795099431
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp
rank: 712
score: 99.38516235351562
patch: String dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 712
score: 99.37103630514706
patch: System . length = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 712
score: 99.34361436631944
patch: final int dp = p 1 [ i ] [ p $NUMBER$ [ i ] ; ;
rank: 712
score: 99.33775419347427
patch: final int dp = p 1 [ 0 ] * p $NUMBER$ [ i ] ;
rank: 712
score: 99.33430989583333
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - $NUMBER$ ]
rank: 712
score: 99.3304443359375
patch: final int dp = int 1 [ 0 ] - p $NUMBER$ [ i ] ;
rank: 713
score: 99.38509971217105
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] / i ;
rank: 713
score: 99.3707504272461
patch: int dp = p 1 [ i ] - max $NUMBER$ [ i ] ;
rank: 713
score: 99.3433837890625
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] )
rank: 713
score: 99.33026123046875
patch: int dp = ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 713
score: 99.32042694091797
patch: final int dp = p $NUMBER$ [ i + p $NUMBER$ [ i ] ;
rank: 713
score: 99.30463409423828
patch: final int dp = p 1 [ i - p 1 . i ] ;
rank: 714
score: 99.34220064603366
patch: dp $NUMBER$ [ i ] = p 1 [ i ] ;
rank: 714
score: 99.33406829833984
patch: sum += p 1 [ i ] * p 1 [ i ] ; }
rank: 714
score: 99.33010864257812
patch: int dp = p 1 [ i ] > p $NUMBER$ [ i ] ;
rank: 714
score: 99.31006969105114
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += += dp ;
rank: 714
score: 99.3038330078125
patch: final int dp = p 1 [ i - i - 1 ] ;
rank: 715
score: 99.38473690257354
patch: if ( p 1 [ i ] > p $NUMBER$ [ i ] ) continue ;
rank: 715
score: 99.34218462775735
patch: if ( p 1 [ i ] >= p $NUMBER$ [ i ] ) break ;
rank: 715
score: 99.33381652832031
patch: sum += ( p 1 [ i ] - p $NUMBER$ [ i ] )
rank: 715
score: 99.3299560546875
patch: sum += ( p 1 [ i ] + p $NUMBER$ [ i ] ) ;
rank: 715
score: 99.30982881433823
patch: final char dp = p 1 [ i ] - p 1 [ i ] ;
rank: 716
score: 99.38454718338816
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { sum ++ ;
rank: 716
score: 99.34120686848958
patch: if ( ! p 1 [ i ] . equals ( p $NUMBER$ [ i ] ;
rank: 716
score: 99.33699253627232
patch: final int [ ] dp 1 = p 1 [ i ] ;
rank: 716
score: 99.32004681755515
patch: final int dp = command 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 716
score: 99.309814453125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . length - p 1 ;
rank: 716
score: 99.3031005859375
patch: final int dp = p 1 [ i ] ; p $NUMBER$ [ i ]
rank: 717
score: 99.39093695746527
patch: final int dp = p 1 [ length 1 ] - p $NUMBER$ [ i ] ;
rank: 717
score: 99.38429888556985
patch: final int dp = p 1 [ i ] - new $NUMBER$ [ i ] ;
rank: 717
score: 99.34079877068015
patch: if ( p 1 [ i ] != p 1 [ i ] ) break ;
rank: 717
score: 99.33374701605902
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : $NUMBER$
rank: 717
score: 99.3095474243164
patch: final int dp = list [ i ] - p 1 [ i ] ;
rank: 717
score: 99.3029556274414
patch: final int dp = Math [ i ] - p $NUMBER$ [ i ] ;
rank: 718
score: 99.39087632123162
patch: final int dp = p 1 [ i ] [ p $NUMBER$ . i ] ;
rank: 718
score: 99.3842709189967
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] ; if ;
rank: 718
score: 99.3401107788086
patch: final int dp = p 1 . length + p $NUMBER$ [ i ] ;
rank: 718
score: 99.33623504638672
patch: final int dp = i [ i ] - p $NUMBER$ [ i ] ;
rank: 718
score: 99.33368598090277
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i : $NUMBER$ ;
rank: 718
score: 99.31943230879934
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum *
rank: 718
score: 99.30232747395833
patch: final int [ ] dp = p 1 [ i - 1 ] ;
rank: 719
score: 99.38412136501736
patch: if final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 719
score: 99.36958582261029
patch: int ! dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 719
score: 99.33600212545956
patch: final int length = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 719
score: 99.32889811197917
patch: final int dp 1 = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 719
score: 99.31910615808823
patch: final int distance = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 719
score: 99.30926920572917
patch: i += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 719
score: 99.3013916015625
patch: final int dp 1 = p 1 [ i - i ] ;
rank: 720
score: 99.39026596966912
patch: final int dp -= p 1 [ i ] - p 1 [ i ] ;
rank: 720
score: 99.38406711154514
patch: final int dp = p 1 [ i ] ] - p $NUMBER$ [ 0 ] ;
rank: 720
score: 99.33575080422794
patch: final double dp = p 1 [ i ] - p $NUMBER$ [ 1 ] ;
rank: 720
score: 99.33342428768383
patch: dp = p 1 [ i ] - p $NUMBER$ [ i ] : 0 ;
rank: 720
score: 99.32883029513889
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] : ] ;
rank: 720
score: 99.30913947610294
patch: long p $NUMBER$ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 720
score: 99.30106353759766
patch: final int dp = 0 ; int dp = p $NUMBER$ [ i ] ;
rank: 721
score: 99.3389663696289
patch: float dp = p 1 [ i ] / p $NUMBER$ [ i ] ;
rank: 721
score: 99.33539177389706
patch: final int [ ] p $NUMBER$ = new int [ p 1 [ i ] ;
rank: 721
score: 99.3332275390625
patch: return dp 1 [ i ] + p $NUMBER$ [ i ] ; }
rank: 721
score: 99.32868787977431
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] + dp ;
rank: 721
score: 99.30909264605978
patch: final int dp 1 = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp $NUMBER$ ;
rank: 721
score: 99.30096990411931
patch: final int dp = p $NUMBER$ [ i ] ;
rank: 722
score: 99.3331787109375
patch: return p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 722
score: 99.32834041819854
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i 0 ] ;
rank: 722
score: 99.30903957201087
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 722
score: 99.30023956298828
patch: final int dp = p 1 [ i - dp 1 - i ] ;
rank: 723
score: 99.3384650735294
patch: float dp = p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 723
score: 99.33478546142578
patch: int dp = p 1 [ 0 ] - p 1 [ i ] ;
rank: 723
score: 99.33312270220588
patch: final int dp = p 1 : p $NUMBER$ [ i ] [ 1 ] ;
rank: 723
score: 99.31740208675987
patch: if ( p 1 [ i ] != 0 ) sum += dp 1 [ i ] ;
rank: 723
score: 99.30881666100544
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] = p $NUMBER$ [ i ] ;
rank: 723
score: 99.29988919771634
patch: final int dp = get = p 1 [ i ] ;
rank: 724
score: 99.38309733072917
patch: final String p 1 = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 724
score: 99.36861165364583
patch: sum += dp 1 [ i ] - p $NUMBER$ [ i ] [ i ] ;
rank: 724
score: 99.33463832310268
patch: final int < ? > dp = p 1 [ i ] ;
rank: 724
score: 99.2996826171875
patch: final int [ ] dp = p 1 [ i + 1 ] ;
rank: 725
score: 99.38221740722656
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) ;
rank: 725
score: 99.3683837890625
patch: distance = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 725
score: 99.33758185891544
patch: if ( p 1 [ i ] != p $NUMBER$ [ i ] ) break ;
rank: 725
score: 99.31690889246323
patch: dp = p 1 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 725
score: 99.29830932617188
patch: final int dp = p 1 [ i ] - p $NUMBER$ . $NUMBER$ ;
rank: 726
score: 99.38213034237133
patch: final int format = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 726
score: 99.33732335707721
patch: float dp 0 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 726
score: 99.33408490349265
patch: final int dp = p 1 [ 0 ] - p $NUMBER$ [ $NUMBER$ ] ;
rank: 726
score: 99.33246612548828
patch: sum += p 1 [ i ] + p 1 [ i ] ; }
rank: 726
score: 99.32606336805556
patch: sum += sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 726
score: 99.3085578469669
patch: float p 1 = p 1 [ i ] - p 1 [ i ] ;
rank: 726
score: 99.29827880859375
patch: final int dp = 0 ; final int dp = 1 [ i ] ;
rank: 727
score: 99.38202582465277
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { continue ;
rank: 727
score: 99.3373161764706
patch: final int substring = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 727
score: 99.32604302300348
patch: int [ ] i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 727
score: 99.31630045572916
patch: final int dp = p 1 [ i ] - [ $NUMBER$ ] ;
rank: 727
score: 99.30854348575367
patch: final int dp = distance ( p 1 , p $NUMBER$ [ i ] ) ;
rank: 727
score: 99.29600524902344
patch: final int dp = max [ i ] - p $NUMBER$ [ i ] ;
rank: 728
score: 99.36774758731617
patch: [ i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 728
score: 99.32598198784723
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] : (
rank: 728
score: 99.30829264322917
patch: 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 728
score: 99.29595540364583
patch: int < p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 729
score: 99.38144259982639
patch: final double dp = p 1 [ i ] . - p $NUMBER$ [ i ] ;
rank: 729
score: 99.3676513671875
patch: i += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 729
score: 99.33365885416667
patch: dp += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 729
score: 99.31540096507354
patch: final int dp = distance $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 729
score: 99.3082608309659
patch: final int dp = p 1 [ i ] - p 1 [ i ] ; return dp * dp ;
rank: 730
score: 99.38134087456598
patch: if ( p 1 [ i ] - start > p $NUMBER$ [ i ] ) {
rank: 730
score: 99.33346993582589
patch: final int dp = ( int ) p $NUMBER$ [ i ] ;
rank: 730
score: 99.33108181423611
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] == 0
rank: 730
score: 99.32538918887867
patch: final int this = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 730
score: 99.30788352272727
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; else sum += dp ;
rank: 730
score: 99.29447174072266
patch: final int dp = null ; int dp = p 1 [ i ] ;
rank: 731
score: 99.38106043198529
patch: final int dp = p 1 [ i ] + start $NUMBER$ [ i ] ;
rank: 731
score: 99.366796875
patch: distance = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 731
score: 99.33542049632354
patch: final int i = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 731
score: 99.31504193474265
patch: final int default = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 731
score: 99.3078384399414
patch: Point i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 731
score: 99.29398287259616
patch: final int dp = p 1 [ i ] ; try {
rank: 732
score: 99.38608269942434
patch: final int dp = p 1 [ i ] - p $NUMBER$ , p $NUMBER$ : i ;
rank: 732
score: 99.3666633157169
patch: i double dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 732
score: 99.3315788717831
patch: final int dp = p 1 [ i ] - 0 $NUMBER$ [ i ] ;
rank: 732
score: 99.33079618566177
patch: sum += p $NUMBER$ . [ i ] - p $NUMBER$ [ i ] ; }
rank: 732
score: 99.32524557674633
patch: int dp = p 1 [ [ i ] + p $NUMBER$ [ i ] ;
rank: 732
score: 99.3146110983456
patch: final int dp = p 1 [ name ] - p $NUMBER$ [ i ] ;
rank: 733
score: 99.3808234719669
patch: final float dp = p 1 [ i ] - start $NUMBER$ [ i ] ;
rank: 733
score: 99.3307113647461
patch: double dp = p 1 : p $NUMBER$ [ i ] - p $NUMBER$ ;
rank: 733
score: 99.32523600260417
patch: int dp = dp 1 [ i ] - p $NUMBER$ [ i ] : 0 ;
rank: 733
score: 99.31450338924633
patch: sum += p 1 [ i ] - p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 734
score: 99.38560575597427
patch: final int dp : p 1 [ i ] - p 1 [ i ] ;
rank: 734
score: 99.38016183035714
patch: p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 734
score: 99.33501434326172
patch: float dp = p 1 [ i ] + p 1 [ i ] ;
rank: 734
score: 99.3306884765625
patch: int dp = p 1 . [ i ] + p $NUMBER$ [ i ] ;
rank: 734
score: 99.33037971047794
patch: final boolean dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 734
score: 99.31386990017361
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] static ;
rank: 734
score: 99.30719757080078
patch: Int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 735
score: 99.38544464111328
patch: int dp = p 1 [ i ] < p $NUMBER$ [ i ] ;
rank: 735
score: 99.3662971047794
patch: sum += sum * dp $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 735
score: 99.33408490349265
patch: final int i = p 1 [ i ] / p $NUMBER$ [ i ] ;
rank: 735
score: 99.31384995404412
patch: final int dp = arraycopy 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 736
score: 99.33367919921875
patch: double dp = p 1 [ i ] / p $NUMBER$ [ i ] ;
rank: 736
score: 99.33032944623162
patch: final int copy = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 736
score: 99.29243977864583
patch: final int dp = p 1 [ i ] ; if = 0 ;
rank: 737
score: 99.38511827256944
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] + 0 ;
rank: 737
score: 99.37932671440973
patch: final int dp = p $NUMBER$ [ i ] . - p $NUMBER$ [ i ] ;
rank: 737
score: 99.36616516113281
patch: { sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 737
score: 99.33364868164062
patch: if ( p 1 [ i ] == - 1 ) { break ; }
rank: 737
score: 99.3302001953125
patch: int dp = p 1 . i - p $NUMBER$ [ i ] ;
rank: 737
score: 99.32893371582031
patch: int dp = p 1 [ i ] . p $NUMBER$ [ i ] ;
rank: 737
score: 99.32457059972427
patch: int dp = p 1 [ i + ] - p $NUMBER$ [ i ] ;
rank: 737
score: 99.30614420572917
patch: prev = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 737
score: 99.29236602783203
patch: final int dp = p 1 [ i ] ; int dp = Math ;
rank: 738
score: 99.37921905517578
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ] < ;
rank: 738
score: 99.3332160500919
patch: double dp = p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 738
score: 99.32982042100694
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] . max
rank: 738
score: 99.32875689338235
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ $NUMBER$ ] ;
rank: 738
score: 99.30605681046195
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i + p $NUMBER$ . length i ] ;
rank: 738
score: 99.29208374023438
patch: final int dp = Math ; int dp = p 1 [ i ] ;
rank: 739
score: 99.38506401909723
patch: final int dp = p 1 [ i ] ; if p $NUMBER$ [ i ] ;
rank: 739
score: 99.33297909007354
patch: int dp = p 1 [ i ] 1 [ p $NUMBER$ [ i ] ;
rank: 739
score: 99.32874298095703
patch: double Math = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 739
score: 99.3243408203125
patch: final int dp = dp [ i ] - p 1 [ i ] ;
rank: 739
score: 99.29173177083334
patch: final int dp = p 1 [ i - i + 1 ] ;
rank: 740
score: 99.37831467848558
patch: int dp = p 1 [ i ] - 1 $NUMBER$ ;
rank: 740
score: 99.3653564453125
patch: for ( int max = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 740
score: 99.33282829733456
patch: int dp 0 = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 740
score: 99.32821994357639
patch: final int [ ] [ ] p $NUMBER$ = new int [ 1 ] [ ] ;
rank: 740
score: 99.30591634114583
patch: point = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 740
score: 99.29158238002232
patch: final int dp = p 1 [ i ] ; i ++ ;
rank: 741
score: 99.38474408318015
patch: final int dp = max 1 [ i ] - p 1 [ i ] ;
rank: 741
score: 99.37816569010417
patch: if ( p 1 [ i ] >= p $NUMBER$ [ i ] ;
rank: 741
score: 99.33207433363971
patch: final byte dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 741
score: 99.32816314697266
patch: int dp = p $NUMBER$ [ i ] + p 1 [ i ] ;
rank: 741
score: 99.32783777573529
patch: final int dp = int [ ] [ ] - p $NUMBER$ [ i ] ;
rank: 741
score: 99.3233642578125
patch: int dp = p 1 ] - p $NUMBER$ [ i ] ;
rank: 741
score: 99.3120476217831
patch: final int dp = sum $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 741
score: 99.3057528409091
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp . ;
rank: 741
score: 99.29110013521634
patch: final int dp = 1 - p 1 [ i ] ;
rank: 742
score: 99.32780905330883
patch: sum ( p 1 [ i ] , p $NUMBER$ [ i ] ) ; }
rank: 742
score: 99.32779366629464
patch: final int < String > dp = p 1 [ i ] ;
rank: 742
score: 99.32329963235294
patch: final int name = p 1 [ i ] - p 1 [ i ] ;
rank: 742
score: 99.3055419921875
patch: VM i = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 742
score: 99.29064178466797
patch: final int dp = p 1 [ i ] - trim [ i ] ;
rank: 743
score: 99.3313849954044
patch: final int dp = p 1 [ i ] > p 1 [ i ] ;
rank: 743
score: 99.32776557074652
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 1 1 ] ;
rank: 743
score: 99.31147317325367
patch: final int distance = p 1 [ i ] - p 1 [ i ] ;
rank: 744
score: 99.38394325657895
patch: final int dp = p 1 [ i ] + p $NUMBER$ [ i ] - 0 ;
rank: 744
score: 99.37788660386029
patch: final Integer dp = p 1 [ i ] . int CaMeL Value ( ) ;
rank: 744
score: 99.36478678385417
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ; } else {
rank: 744
score: 99.32773006663604
patch: sum += p 1 [ i ] ) - p $NUMBER$ [ i ] ; }
rank: 744
score: 99.31145562065973
patch: sum += dp ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 744
score: 99.30495287024456
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += $NUMBER$ * dp ;
rank: 745
score: 99.36478000217014
patch: return Math . sqrt ( p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 745
score: 99.30425470525569
patch: Integer dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp . dp ;
rank: 745
score: 99.2892074584961
patch: final int dp = p 1 [ i ] - break [ i ] ;
rank: 746
score: 99.38332790798611
patch: final int dp = p 1 [ i ] - p $NUMBER$ , i = 0 ;
rank: 746
score: 99.37721082899306
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] + ;
rank: 746
score: 99.3264389038086
patch: int $NUMBER$ = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 746
score: 99.32225844439338
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] - (
rank: 746
score: 99.31051815257354
patch: final int dp = p 1 [ i ] - value $NUMBER$ [ i ] ;
rank: 746
score: 99.30412153764205
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * NEGATIVE
rank: 746
score: 99.28887532552083
patch: final int dp = 0 - i - p 1 [ i ] ;
rank: 747
score: 99.32718234592014
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] , 1
rank: 747
score: 99.32215118408203
patch: int dp = dp 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 747
score: 99.31038665771484
patch: sum += p 1 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 747
score: 99.3036776455966
patch: final int dp = list [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 747
score: 99.28842163085938
patch: final int dp = p 1 [ i ] - p 1 . 0 ;
rank: 748
score: 99.37714029947917
patch: final int dp = p $NUMBER$ [ i ] - System . $NUMBER$ ;
rank: 748
score: 99.36444450827206
patch: if ( p 1 [ i ] >> < p $NUMBER$ [ i ] ) {
rank: 748
score: 99.32905129825367
patch: double dp 0 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 748
score: 99.32713407628677
patch: sum += p 1 [ i ] - p $NUMBER$ 1 [ i ] ; }
rank: 748
score: 99.3258056640625
patch: final int [ ] dp [ ] = p 1 [ i ] ;
rank: 748
score: 99.32183478860294
patch: int dp = p 1 [ i ] . [ p $NUMBER$ [ i ] ;
rank: 748
score: 99.30353190104167
patch: o = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 748
score: 99.28762817382812
patch: final int dp = p 1 [ i + p 1 . i ] ;
rank: 749
score: 99.37701416015625
patch: if ( p 1 [ i ] - p 1 [ i ] > 0 ) {
rank: 749
score: 99.28676060267857
patch: final int dp = p 1 - p $NUMBER$ [ i ] ;
rank: 750
score: 99.377001953125
patch: dp = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 750
score: 99.36428653492646
patch: final int dp = p 1 [ i ] - short $NUMBER$ [ i ] ;
rank: 750
score: 99.32881433823529
patch: if ( p 1 [ i ] == 0 ) { continue ; } else {
rank: 750
score: 99.32672119140625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] - 0
rank: 750
score: 99.32159830729167
patch: sum += p 1 [ i ] - dp $NUMBER$ [ i ] ;
rank: 750
score: 99.28618621826172
patch: final int dp = p 1 [ i ] + i [ i ] ;
rank: 751
score: 99.37697466681985
patch: final int dp = p 1 [ i ] - this $NUMBER$ [ i ] ;
rank: 751
score: 99.3287841796875
patch: if ( p 1 [ i ] != p 1 [ i ] ;
rank: 751
score: 99.32648064108456
patch: final int dp = p 1 : p 1 [ i ] - dp $NUMBER$ ;
rank: 751
score: 99.32535552978516
patch: final int [ ] dp = p 1 [ p 1 [ i ] ;
rank: 751
score: 99.30928308823529
patch: final int REMOVED = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 751
score: 99.30320046164773
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; int sum = 0 ;
rank: 751
score: 99.28468424479166
patch: final int dp = Math , dp = p 1 [ i ] ;
rank: 752
score: 99.38079833984375
patch: final ? int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 752
score: 99.326416015625
patch: sum += p 1 [ i ] < p $NUMBER$ [ i ]
rank: 752
score: 99.30314127604167
patch: member = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 753
score: 99.38064914279514
patch: final int dp = ( p 1 [ i ] < p $NUMBER$ [ i ] ;
rank: 753
score: 99.32014973958333
patch: sum += dp 1 [ i ] - dp $NUMBER$ [ i ] ;
rank: 753
score: 99.302978515625
patch: final Object dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 754
score: 99.37608924278847
patch: final int dp = p 1 [ i ] + i ;
rank: 754
score: 99.36376190185547
patch: Int ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 754
score: 99.32613796657986
patch: final int dp = p 1 . i - p $NUMBER$ [ i ] . length ;
rank: 754
score: 99.31997501148896
patch: final int read = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 755
score: 99.38022286551339
patch: final int dp = p 1 [ i ] - p 1 ;
rank: 755
score: 99.36302897135417
patch: i < p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 755
score: 99.32728486902573
patch: double dp 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 755
score: 99.3255844116211
patch: sum += dp $NUMBER$ [ i ] + p $NUMBER$ [ i ] ; }
rank: 755
score: 99.31996783088235
patch: final int -- = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 755
score: 99.28308919270833
patch: int dp = p 1 [ i ] - 1 [ i ] ;
rank: 756
score: 99.37516515395221
patch: final long dp = p 1 [ i ] - start $NUMBER$ [ i ] ;
rank: 756
score: 99.32539367675781
patch: final int dp = p 1 : p 1 [ i ] - $NUMBER$ ;
rank: 756
score: 99.32434800091912
patch: p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 756
score: 99.31949615478516
patch: distance ( dp 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 756
score: 99.30184273097827
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp < dp ;
rank: 756
score: 99.28245326450893
patch: final final int [ ] dp = p 1 [ i ] ;
rank: 757
score: 99.37473958333334
patch: if ( p 1 [ i ] != p $NUMBER$ [ i ] ;
rank: 757
score: 99.32693301930146
patch: if ( p 1 [ i ] >= p $NUMBER$ [ i ] ) continue ;
rank: 757
score: 99.3252814797794
patch: final int dp = p 1 1 [ i + p $NUMBER$ [ i ] ;
rank: 757
score: 99.32414027622768
patch: if p 1 [ i ] = p $NUMBER$ [ i ] ;
rank: 757
score: 99.30132697610294
patch: float p 1 = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 757
score: 99.28165690104167
patch: final int dp = p 1 [ i + 1 + 1 ] ;
rank: 758
score: 99.37913682725694
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i * $STRING$ ;
rank: 758
score: 99.37419782366071
patch: final int dp = p 1 [ i ] & 0 $NUMBER$ ;
rank: 758
score: 99.36284323299633
patch: final int dp = read 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 758
score: 99.32645909926471
patch: final int dp = p $NUMBER$ [ i ] . int CaMeL Value ( ) ;
rank: 758
score: 99.31856043198529
patch: int dp ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 758
score: 99.30114215353261
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * true ;
rank: 758
score: 99.28141276041667
patch: final int dp = 0 - i - p $NUMBER$ [ i ] ;
rank: 759
score: 99.37384033203125
patch: final Integer dp = p 1 [ i ] - p $NUMBER$ [ i ] ; ;
rank: 759
score: 99.36241239659927
patch: sum = sum * dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 759
score: 99.32488250732422
patch: final int dp = p 1 [ i ] < p 1 [ i ]
rank: 759
score: 99.322265625
patch: final int dp = p 1 [ i ] >> 1 ;
rank: 759
score: 99.31847381591797
patch: int dp = p 1 [ distance ] - p $NUMBER$ [ i ] ;
rank: 759
score: 99.30720071231617
patch: final int dp = case 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 759
score: 99.30049641927083
patch: entry = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 759
score: 99.28060477120536
patch: final int dp = new Integer = p 1 [ i ] ;
rank: 760
score: 99.36196001838235
patch: { Object dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 760
score: 99.3262580422794
patch: if ( p 1 [ i ] != p 1 [ i ] ) continue ;
rank: 760
score: 99.32188415527344
patch: final int [ ] dp = p 1 [ i ] . p $NUMBER$ ;
rank: 760
score: 99.318359375
patch: final int dp = p 1 [ i ] - new int [ $NUMBER$ ] ;
rank: 760
score: 99.27965494791667
patch: final int dp = p 1 [ i + i - 1 ] ;
rank: 761
score: 99.37883843315973
patch: final int dp ] = p 1 [ i ] - p 1 [ i ] ;
rank: 761
score: 99.32465676700367
patch: sum += = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 761
score: 99.32085104549633
patch: final int dp = p 1 [ 1 ] - p $NUMBER$ [ 0 ] ;
rank: 762
score: 99.3245849609375
patch: final int dp = p 1 + i - p 1 [ i ] ;
rank: 762
score: 99.29981578480114
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; final dp += dp ;
rank: 762
score: 99.2781982421875
patch: final int dp = p 1 [ i ] ; dp }
rank: 763
score: 99.37257295496323
patch: ; int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 763
score: 99.36045837402344
patch: for ( int [ ] p 1 : p $NUMBER$ [ i ] ) {
rank: 763
score: 99.32551843979779
patch: final int dp *= p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 763
score: 99.32051086425781
patch: String dp = p 1 [ i ] - p 1 [ i ] ;
rank: 763
score: 99.31782801011029
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ distance ] ;
rank: 763
score: 99.30656881893383
patch: final int dp = default 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 763
score: 99.29973288143383
patch: double p 1 = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 763
score: 99.27757975260417
patch: final int dp = p 1 [ i - $NUMBER$ - i ] ;
rank: 764
score: 99.37793646918402
patch: final int p $NUMBER$ = p 1 [ i ] [ p $NUMBER$ [ i ] ;
rank: 764
score: 99.37164665670956
patch: final int dp = p 1 [ i ] * p $NUMBER$ [ 0 ] ;
rank: 764
score: 99.35944281684027
patch: sum += int ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 764
score: 99.32466394761029
patch: final int dp = p 1 [ i ] . to CaMeL String ( ) ;
rank: 764
score: 99.3241325827206
patch: final Class dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 764
score: 99.32033404181985
patch: int dp = p 1 [ i ] - p 1 [ i ] ; }
rank: 764
score: 99.30638212316177
patch: final int dp = p 1 [ i ] , sum += dp * dp ;
rank: 764
score: 99.27718098958333
patch: final int [ ] dp = p 1 [ i + i ] ;
rank: 765
score: 99.3715591430664
patch: int dp = p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ;
rank: 765
score: 99.32403205422794
patch: final int command = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 765
score: 99.30628967285156
patch: final int dp = p 1 , sum += p 1 [ i ] ;
rank: 765
score: 99.29916381835938
patch: final int dp = p 1 [ i ] - list [ i ] ;
rank: 765
score: 99.27701009114584
patch: final int [ ] dp = p 1 [ i - i ] ;
rank: 766
score: 99.37107220818015
patch: int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; ;
rank: 766
score: 99.35936737060547
patch: distance dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 766
score: 99.3240105124081
patch: sum += dp 1 [ i ] & - p $NUMBER$ [ i ] ; }
rank: 766
score: 99.31507065716912
patch: final int dp = p 1 [ i ] - new int [ dp ] ;
rank: 766
score: 99.30628159466912
patch: final int dp : p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 766
score: 99.27578299386161
patch: final int dp = p 1 [ i + [ i ] ;
rank: 767
score: 99.37786865234375
patch: final final double dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 767
score: 99.3592529296875
patch: { int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 767
score: 99.32399088541666
patch: final int dp = p 1 [ i ] - p $NUMBER$ . length
rank: 767
score: 99.32372283935547
patch: final int = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 767
score: 99.29897891773896
patch: Long p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 767
score: 99.27545166015625
patch: final int dp 1 = p 1 [ i + 1 ] ;
rank: 768
score: 99.32356770833333
patch: sum += distance [ i ] - p $NUMBER$ [ i ] ; }
rank: 768
score: 99.31517615685097
patch: final int [ ] dp = p 1 [ 0 ] ;
rank: 768
score: 99.3056999655331
patch: sum += p 1 [ i - i ] - p $NUMBER$ [ i ] ;
rank: 768
score: 99.29871715198864
patch: Point dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp . length ;
rank: 768
score: 99.2747314453125
patch: final int dp [ ] = p $NUMBER$ [ i - 1 ] ;
rank: 769
score: 99.32325846354166
patch: final int dp = int [ ] - p 1 [ i ] ;
rank: 769
score: 99.31438802083333
patch: final int dp = p 1 [ i ] - 0 . 1 ;
rank: 769
score: 99.3142448874081
patch: final int scale = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 769
score: 99.30552673339844
patch: static i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 769
score: 99.27414376395089
patch: final int dp = p 1 [ i ] - $NUMBER$ $NUMBER$ ;
rank: 770
score: 99.37767118566177
patch: final float dp = p 1 [ 1 ] - p $NUMBER$ [ i ] ;
rank: 770
score: 99.35899522569444
patch: if ( p 1 [ i ] . length <= p $NUMBER$ [ i ] ) {
rank: 770
score: 99.32318474264706
patch: final int dp = p 1 [ i ] < p $NUMBER$ [ i ] ?
rank: 770
score: 99.29846722146739
patch: final int dp = p 1 [ i ] - p 1 [ i ] ; sum -= dp * dp ;
rank: 771
score: 99.37038748604911
patch: final int dp = p 1 [ i ] & 0 ] ;
rank: 771
score: 99.32295227050781
patch: final int dp = p 1 [ i ] == p 1 [ i ]
rank: 771
score: 99.31387149586396
patch: return distance ( dp 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 771
score: 99.30467987060547
patch: final int dp = p 1 [ i ] - 1 [ 0 ] ;
rank: 771
score: 99.27322591145834
patch: final int dp = p 1 [ i + i + 1 ] ;
rank: 772
score: 99.37741427951389
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i / $STRING$ ;
rank: 772
score: 99.3586784811581
patch: final int start = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 772
score: 99.31381405101104
patch: sum += ( dp 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 772
score: 99.31324768066406
patch: final int [ ] [ ] p $NUMBER$ = p $NUMBER$ [ i ] ;
rank: 772
score: 99.2970458984375
patch: h += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 772
score: 99.2721698467548
patch: final int dp = p 1 [ i + 0 ] ;
rank: 773
score: 99.35859949448529
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - 1
rank: 773
score: 99.32234954833984
patch: sum += p 1 [ i ] + dp $NUMBER$ [ i ] ; }
rank: 773
score: 99.3203876201923
patch: final int dp = p 1 [ i ] & i ;
rank: 773
score: 99.31378173828125
patch: int sum = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 773
score: 99.3130111694336
patch: final if = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 773
score: 99.29701232910156
patch: K dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 773
score: 99.27170973557692
patch: final int dp = 0 ; final int dp = 0 ;
rank: 774
score: 99.36946614583333
patch: if ( p 1 [ i ] > p $NUMBER$ [ i ] ) { ; }
rank: 774
score: 99.35852728949652
patch: ( ( int ) p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 774
score: 99.31370544433594
patch: final int [ ] sum = new int [ p 1 . length ] ;
rank: 774
score: 99.31264822823661
patch: final double dp = p 1 [ i ] [ i ] ;
rank: 774
score: 99.29695638020833
patch: k = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 775
score: 99.31325396369485
patch: final int reverse = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 775
score: 99.30364631204044
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ sum ] ;
rank: 775
score: 99.26949637276786
patch: final int dp = p 1 - p 1 [ i ] ;
rank: 776
score: 99.37555609809027
patch: final final int dp = p 1 [ i ] [ p $NUMBER$ [ i ] ;
rank: 776
score: 99.3676025390625
patch: final double dp = p 1 [ i ] - System . $NUMBER$ ;
rank: 776
score: 99.3215560913086
patch: final int dp = p 1 : p 1 [ i ] - 0 ;
rank: 776
score: 99.3179931640625
patch: final int dp = p 1 [ i ] & 0 [ i ] ;
rank: 776
score: 99.3131462545956
patch: final int sum += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 776
score: 99.31148587740384
patch: final int [ ] dp = dp 1 [ i ] ;
rank: 776
score: 99.29664147418478
patch: double sum = 0 ; for ( int i = 0 ; i < p 1 . length ; i ++ )
rank: 776
score: 99.2691162109375
patch: final int dp = p 1 [ i ] + $STRING$ + i ;
rank: 777
score: 99.36751062729779
patch: final Float dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 777
score: 99.35821174172794
patch: this . distance = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 777
score: 99.31751251220703
patch: int min = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 777
score: 99.29657537286931
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum -= dp * dp ;
rank: 777
score: 99.26834542410714
patch: final final int dp [ ] = p 1 [ i ] ;
rank: 778
score: 99.36702234604779
patch: String p 1 = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 778
score: 99.35813275505515
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ) { {
rank: 778
score: 99.32098747702206
patch: sum += ( dp 1 [ i ] - p $NUMBER$ [ i ] ) ?
rank: 778
score: 99.31668294270834
patch: if ( p 1 [ i ] > 0 ) { continue ; }
rank: 778
score: 99.30305032169117
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ null ] ;
rank: 778
score: 99.29649286684783
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] , p $NUMBER$ [ i ] ;
rank: 778
score: 99.26729642427884
patch: final int dp = p 1 [ i - 0 ] ;
rank: 779
score: 99.35780244715073
patch: System . i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 779
score: 99.32050637637867
patch: sum sqrt ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 779
score: 99.29635487432066
patch: final int dp = p 1 [ i ] * p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 779
score: 99.2665264423077
patch: final int dp = p 1 [ i ] + null ;
rank: 780
score: 99.36614990234375
patch: if ( p 1 [ i ] & p $NUMBER$ [ i ] ) {
rank: 780
score: 99.32009887695312
patch: sum += p 1 [ i ] += p $NUMBER$ [ i ] ; }
rank: 780
score: 99.31475360576923
patch: dp 1 [ i ] = p $NUMBER$ [ i ] ;
rank: 780
score: 99.31263643152573
patch: final double dp = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 780
score: 99.26642252604167
patch: final int dp = p 1 [ i - 1 + 1 ] ;
rank: 781
score: 99.374755859375
patch: final int dp = p 1 [ i ++ ] - p 1 [ i ] ;
rank: 781
score: 99.36528184678819
patch: if ( p 1 [ i ] == p $NUMBER$ [ i ] ) { ; }
rank: 781
score: 99.32009708180146
patch: final int dp = p 1 : p $NUMBER$ [ i ] [ 0 ] ;
rank: 781
score: 99.31472981770834
patch: if ( p 1 [ i ] != null ) { continue ; }
rank: 781
score: 99.31252872242646
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ this ] ;
rank: 781
score: 99.31075286865234
patch: int $NUMBER$ = p 1 [ i ] - p 1 [ i ] ;
rank: 781
score: 99.26634114583334
patch: final int dp = p 1 [ i - 1 + i ] ;
rank: 782
score: 99.37440999348958
patch: final int dp ] = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 782
score: 99.36513384650735
patch: int p $NUMBER$ = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 782
score: 99.3574447631836
patch: if ( dp 1 [ i ] > p $NUMBER$ [ i ] ) {
rank: 782
score: 99.31993192784927
patch: final int dp = p 1 [ i ] - p $NUMBER$ 1 [ i ]
rank: 782
score: 99.314697265625
patch: final int dp = p 1 [ i ] . length - 1 ;
rank: 782
score: 99.31249281939338
patch: final int final = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 782
score: 99.29593912760417
patch: t = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 782
score: 99.26627894810268
patch: final int dp = p $NUMBER$ [ i ] ; dp ++ ;
rank: 783
score: 99.36469582950367
patch: int dp = p 1 [ i ] - System . $NUMBER$ [ i ] ;
rank: 783
score: 99.3567756204044
patch: final int i = p 1 [ i ] - p $NUMBER$ [ 1 ] ;
rank: 783
score: 99.31935221354166
patch: int dp = p 1 [ i ] - p $NUMBER$ : 1 ;
rank: 783
score: 99.3123420266544
patch: int int dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 783
score: 99.29550568953805
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i - p $NUMBER$ . length i ] ;
rank: 783
score: 99.26569010416667
patch: int dp = p 1 [ i + p 1 [ i ] ;
rank: 784
score: 99.31901999080883
patch: sum += ( p 1 [ i ] - p $NUMBER$ [ i ] ) +
rank: 784
score: 99.31196863511029
patch: final int dp = p 1 [ i ] - int $NUMBER$ [ i ] ;
rank: 784
score: 99.30103302001953
patch: final int dp = p 1 [ i ] - 1 [ $NUMBER$ ] ;
rank: 784
score: 99.29541015625
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum ++ * dp ;
rank: 784
score: 99.26565755208334
patch: int dp = 1 [ i ] - p 1 [ i ] ;
rank: 785
score: 99.37313842773438
patch: final int dp = p 1 [ i * p $NUMBER$ [ i ] ;
rank: 785
score: 99.3189926147461
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] ?
rank: 785
score: 99.3067398071289
patch: int dp = p 1 [ i ] ^ p $NUMBER$ [ i ] ;
rank: 785
score: 99.30011664496527
patch: final int dp = p 1 == 0 ? 0 : p $NUMBER$ [ i ] ;
rank: 785
score: 99.29435929008152
patch: final int i = p 1 [ i ] - p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 785
score: 99.26551164899554
patch: final int dp = p 1 [ i - 1 ] ] ;
rank: 786
score: 99.36355411305146
patch: final long dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 786
score: 99.31877136230469
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i +
rank: 786
score: 99.2999496459961
patch: final int dp = p 1 , sum += p $NUMBER$ [ i ] ;
rank: 786
score: 99.2941006747159
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += - dp ;
rank: 787
score: 99.37255859375
patch: final Integer dp = p 1 [ i ] [ p $NUMBER$ [ i ] ;
rank: 787
score: 99.30624389648438
patch: final int dp = $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 787
score: 99.2940340909091
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ ] ; sum += dp * dp ;
rank: 787
score: 99.26495361328125
patch: final int dp = new int [ p 1 [ i ] ;
rank: 788
score: 99.37250434027777
patch: final int dp = 0 [ i ] - p $NUMBER$ [ i - 1 ] ;
rank: 788
score: 99.31823012408088
patch: final int dp 1 = p 1 [ i ] - p $NUMBER$ [ i ]
rank: 788
score: 99.31248474121094
patch: float dp = p 1 [ i ] & p $NUMBER$ [ i ] ;
rank: 788
score: 99.3111931295956
patch: final int iterator = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 788
score: 99.30619812011719
patch: int dp = p 1 [ i ] + p $NUMBER$ [ 1 ] ;
rank: 788
score: 99.29953182444854
patch: final int extends = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 788
score: 99.29403023097827
patch: final short dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 788
score: 99.2634746844952
patch: final int dp = p 1 [ i ] - false ;
rank: 789
score: 99.318115234375
patch: final int dp = p 1 [ i ] + p $NUMBER$ : 0 ;
rank: 789
score: 99.31202697753906
patch: short dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 789
score: 99.31105041503906
patch: final sum += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 789
score: 99.30448150634766
patch: final int [ ] dp = p 1 [ i ] [ 0 ] ;
rank: 789
score: 99.29948156020221
patch: final int dp = continue 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 789
score: 99.2936782836914
patch: final if ( p 1 [ i ] == p $NUMBER$ [ i ] )
rank: 789
score: 99.26327078683036
patch: dp $NUMBER$ [ i ] = p 1 [ i ] ; }
rank: 790
score: 99.37184771369485
patch: final float dp = p 1 [ 0 ] - p $NUMBER$ [ i ] ;
rank: 790
score: 99.35527487362133
patch: { long dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 790
score: 99.3180908203125
patch: sum += p 1 [ i ] / p $NUMBER$ [ i ] ;
rank: 790
score: 99.31055405560662
patch: final int set = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 790
score: 99.262744140625
patch: final int dp [ ] = p $NUMBER$ [ i + 1 ] ;
rank: 791
score: 99.36213902064732
patch: final int dp = p 1 [ i ] - 1 ] ;
rank: 791
score: 99.35466851128473
patch: for ( int i = 0 ; i < i - $NUMBER$ ; i ++ ) {
rank: 791
score: 99.31785673253677
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] : 0
rank: 791
score: 99.31188151041667
patch: final int dp = p 1 [ i ] ? 1 : 0 ;
rank: 791
score: 99.30401611328125
patch: final int dp = $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 791
score: 99.29306030273438
patch: final int dp = p 1 [ i ] - ( int ) dp ;
rank: 791
score: 99.26222737630208
patch: final final int dp = p 1 [ i ] ;
rank: 792
score: 99.36208208869485
patch: final int dp = p 1 [ i ] - exp $NUMBER$ [ i ] ;
rank: 792
score: 99.317626953125
patch: sum += dp 1 [ i ] - p $NUMBER$ [ i ] ; ; }
rank: 792
score: 99.3098614032452
patch: p 1 [ i ] = p 1 [ i ] ;
rank: 792
score: 99.29258034446023
patch: final int dp = p 1 [ i ] - ( p $NUMBER$ [ i ] - p $NUMBER$ ) ;
rank: 792
score: 99.26166178385417
patch: final int dp [ ] = p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 793
score: 99.37134552001953
patch: final int dp = $STRING$ [ i ] - p $NUMBER$ [ i ] ;
rank: 793
score: 99.36203900505515
patch: final Integer dp = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 793
score: 99.35357666015625
patch: int dp = p 1 [ i ] - min $NUMBER$ [ i ] ;
rank: 793
score: 99.30379813058036
patch: final int [ ] dp = p 1 [ [ i ] ;
rank: 793
score: 99.29257600203805
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 1 ] ; sum += dp * dp ;
rank: 793
score: 99.26066080729167
patch: final int dp = 0 ; if = p 1 [ i ] ;
rank: 794
score: 99.37104348575367
patch: final int dp = length 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 794
score: 99.36194565716912
patch: double dp = p 1 [ i ] - p $NUMBER$ $NUMBER$ [ i ] ;
rank: 794
score: 99.30952453613281
patch: dp $NUMBER$ [ p 1 [ i ] = p 1 [ i ] ;
rank: 794
score: 99.3036358173077
patch: final int dp = 0 + p $NUMBER$ [ i ] ;
rank: 794
score: 99.29808044433594
patch: final int dp = min [ i ] - p $NUMBER$ [ i ] ;
rank: 794
score: 99.2923916903409
patch: final int dp = p 1 [ i ] - $STRING$ [ i ] ; sum += dp * dp ;
rank: 795
score: 99.36193033854167
patch: dp = p 1 [ i ] & p $NUMBER$ [ i ] ;
rank: 795
score: 99.35312787224265
patch: sum += sum * p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 795
score: 99.26005045572917
patch: final int dp = null ; dp = p 1 [ i ] ;
rank: 796
score: 99.3699089499081
patch: final int dp = p 1 [ i ] - dp 1 [ i ] ;
rank: 796
score: 99.36126349954044
patch: final int dp = p $NUMBER$ [ i ] - i $NUMBER$ [ i ] ;
rank: 796
score: 99.31668853759766
patch: double dp = p 1 [ i ] - dp $NUMBER$ [ i ] ;
rank: 796
score: 99.30734252929688
patch: int dp = final $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 796
score: 99.30271693638393
patch: final int < ] > dp = p 1 [ i ] ;
rank: 796
score: 99.29128099524456
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp . dp ;
rank: 796
score: 99.2594482421875
patch: final int dp [ ] = p 1 [ i ] - $STRING$ ;
rank: 797
score: 99.3528191061581
patch: final Boolean dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 797
score: 99.30842808314732
patch: final int dp $NUMBER$ = p 1 [ i ] - 1 ;
rank: 797
score: 99.30696375229779
patch: int dp ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 797
score: 99.30267333984375
patch: int dp = exp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 797
score: 99.29119318181819
patch: Point dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp . min ;
rank: 797
score: 99.25877028245192
patch: final int dp = p 1 [ i ] ; break ;
rank: 798
score: 99.3695297241211
patch: final int dp = mod [ i ] - p $NUMBER$ [ i ] ;
rank: 798
score: 99.31630572150735
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ) ; }
rank: 798
score: 99.30684661865234
patch: int dp = dp 0 [ i ] - p $NUMBER$ [ i ] ;
rank: 798
score: 99.30256652832031
patch: int dp = - 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 798
score: 99.29663803998162
patch: final int dp = min $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 798
score: 99.29098510742188
patch: long i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 798
score: 99.2584698016827
patch: int dp = p 1 [ i ] ; dp ++ ;
rank: 799
score: 99.31597541360294
patch: final int dp = p $NUMBER$ : p 1 [ i ] - p $NUMBER$ ;
rank: 799
score: 99.3082275390625
patch: final int i = p 1 [ i ] - 1 ;
rank: 799
score: 99.30669088924633
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ==
rank: 799
score: 99.3018329326923
patch: final int dp = p 1 [ i ] & 1 ;
rank: 799
score: 99.29097747802734
patch: final i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 799
score: 99.2578857421875
patch: final int dp = p 1 [ i ] - $STRING$ + i ;
rank: 800
score: 99.35926011029412
patch: final int dp = p 1 [ i ] - get $NUMBER$ [ i ] ;
rank: 800
score: 99.31595052083334
patch: sum += dp [ i ] - p $NUMBER$ [ i ] ; }
rank: 800
score: 99.30699744591347
patch: if ( p 1 [ i ] == null ) continue ;
rank: 800
score: 99.30182354266827
patch: final int [ ] i = p 1 [ i ] ;
rank: 800
score: 99.29521833147321
patch: return dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 800
score: 99.25771658761161
patch: final int dp dp = p 1 [ i - 1 ] ;
rank: 801
score: 99.31546456473214
patch: sum += dp 1 [ i ] + p $NUMBER$ [ i ]
rank: 801
score: 99.30580049402573
patch: final int dp = p 1 [ i ] . distance ( p 1 ) ;
rank: 801
score: 99.30168151855469
patch: int dp = p $NUMBER$ [ i ] - p $NUMBER$ [ 0 ] ;
rank: 801
score: 99.2949577780331
patch: final int dp = stream 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 801
score: 99.29080332880434
patch: final byte dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 801
score: 99.25762939453125
patch: final int dp , p 1 = p 1 [ i ] ;
rank: 802
score: 99.35098087086396
patch: dp ; sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 802
score: 99.3150405883789
patch: sum = p 1 : p 1 [ i ] - p $NUMBER$ ; }
rank: 802
score: 99.30554917279412
patch: final int dp = int $NUMBER$ [ dp ] - p $NUMBER$ [ i ] ;
rank: 802
score: 99.30110168457031
patch: double dp = p 1 [ i ] - p $NUMBER$ [ 0 ] ;
rank: 802
score: 99.29490443638393
patch: return p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 802
score: 99.290771484375
patch: final int dp = p 1 [ i ] - [ i ] ;
rank: 802
score: 99.25757774939903
patch: final int dp = Math + p $NUMBER$ [ i ] ;
rank: 803
score: 99.35869598388672
patch: while ( p 1 [ i ] < p $NUMBER$ [ i ] ) {
rank: 803
score: 99.31478118896484
patch: sum += p 1 [ i ] % p $NUMBER$ [ i ] ; }
rank: 803
score: 99.305419921875
patch: double int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 803
score: 99.30398559570312
patch: if ( p 1 [ i ] == 0 ) { return 0 ; }
rank: 803
score: 99.30066680908203
patch: for 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 803
score: 99.2903719815341
patch: int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp . dp ;
rank: 803
score: 99.25730678013393
patch: final int dp = p 1 [ i ) - i ] ;
rank: 804
score: 99.35855102539062
patch: if ( p $NUMBER$ [ i ] <= p $NUMBER$ [ i ] ) {
rank: 804
score: 99.31441497802734
patch: sum += p 1 [ i ] * dp $NUMBER$ [ i ] ; }
rank: 804
score: 99.30513269761029
patch: final int dp = double 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 804
score: 99.30333658854167
patch: if ( p 1 [ i ] < 0 ) { continue ; }
rank: 804
score: 99.30044320913461
patch: final String dp [ ] = p 1 [ i ] ;
rank: 804
score: 99.29470825195312
patch: final int dp = p 1 [ i ] , p $NUMBER$ = i ;
rank: 804
score: 99.25722830636161
patch: final int dp = p 1 [ i ] - $STRING$ ] ;
rank: 805
score: 99.35042572021484
patch: distance sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 805
score: 99.31422424316406
patch: sum += p $NUMBER$ [ i ] - p 1 [ i ] ; }
rank: 805
score: 99.30419203814338
patch: final int dp = int 1 [ dp ] - p 1 [ i ] ;
rank: 805
score: 99.3031234741211
patch: String name = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 805
score: 99.30034528459821
patch: if p 1 [ i ] = p 1 [ i ] ;
rank: 805
score: 99.29449103860294
patch: final int dp = break $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 805
score: 99.25657552083334
patch: final int dp = p 1 [ i - 1 - 1 ] ;
rank: 806
score: 99.3138068704044
patch: sum ( dp 1 [ i ] , p $NUMBER$ [ i ] ) ; }
rank: 806
score: 99.30272623697917
patch: if ( p 1 [ i ] > p 1 [ i ] ;
rank: 806
score: 99.29022216796875
patch: Point sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 807
score: 99.35789579503677
patch: / * dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 807
score: 99.3500114889706
patch: this . dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 807
score: 99.31377814797794
patch: sum dp = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 807
score: 99.30250549316406
patch: final int dp = Math . round ( p 1 [ i ] ) ;
rank: 807
score: 99.3000732421875
patch: final int dp = p 1 [ i ] [ - 1 ] ;
rank: 808
score: 99.31371256510417
patch: sum += p 1 [ i ] < p $NUMBER$ [ i ] ?
rank: 808
score: 99.29976712740384
patch: final String [ ] dp = p 1 [ i ] ;
rank: 808
score: 99.2931267233456
patch: int dp = p 1 [ int 1 ] - p $NUMBER$ [ i ] ;
rank: 808
score: 99.2888820482337
patch: final int p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp $NUMBER$ ;
rank: 808
score: 99.25489908854166
patch: final int dp = p 1 [ i ] ; p 1 ++ ;
rank: 809
score: 99.36735983455883
patch: final float dp = p 1 [ i ] - p $NUMBER$ [ 1 ] ;
rank: 809
score: 99.3569107055664
patch: double dp = p 1 [ i ] & p $NUMBER$ [ i ] ;
rank: 809
score: 99.30218912760417
patch: if ( p 1 [ i ] == 0 ) { break ; }
rank: 809
score: 99.29879760742188
patch: final int dp = ( Integer - $NUMBER$ ) p 1 [ i ] ;
rank: 809
score: 99.29264068603516
patch: final int dp = directory [ i ] - p $NUMBER$ [ i ] ;
rank: 809
score: 99.25476946149554
patch: final int dp = p 1 [ i ] + $STRING$ ] ;
rank: 810
score: 99.3016357421875
patch: dp 1 [ i ] = ( int ) p 1 [ i ] ;
rank: 810
score: 99.29847935267857
patch: final int dp = p 1 [ 0 ] [ i ] ;
rank: 810
score: 99.28842995383523
patch: Double dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp . max ;
rank: 811
score: 99.36710851332721
patch: final float dp = p 1 [ i ] - p $NUMBER$ [ 0 ] ;
rank: 811
score: 99.35671997070312
patch: if ( p $NUMBER$ [ i ] > p $NUMBER$ [ i ] ) {
rank: 811
score: 99.31060028076172
patch: sum += dp 1 [ i ] & p $NUMBER$ [ i ] ; }
rank: 811
score: 99.30251177619485
patch: final double sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 811
score: 99.29766082763672
patch: final int [ ] dp = p 1 - p $NUMBER$ [ i ] ;
rank: 811
score: 99.29261779785156
patch: Class dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 811
score: 99.25226299579327
patch: dp $NUMBER$ [ i ] = p $NUMBER$ [ i ] ;
rank: 812
score: 99.31029510498047
patch: int dp = p 1 : p $NUMBER$ [ i ] - p $NUMBER$ ;
rank: 812
score: 99.3023681640625
patch: int dp = p 1 [ i ] - p 1 [ [ i ] ;
rank: 812
score: 99.30152994791666
patch: if ( p $NUMBER$ [ i ] == null ) { continue ; }
rank: 812
score: 99.29690551757812
patch: final int dp [ ] = p 1 [ i ] [ i ] ;
rank: 812
score: 99.29209798177084
patch: distance = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 812
score: 99.28810716711956
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; System . System . else {
rank: 812
score: 99.25138346354167
patch: final int dp = 0 - p 1 [ i + 1 ] ;
rank: 813
score: 99.30927276611328
patch: distance = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 813
score: 99.30207375919117
patch: final int final = p 1 [ i ] - p 1 [ i ] ;
rank: 813
score: 99.30008951822917
patch: max = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 813
score: 99.28783118206522
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * ceil ;
rank: 813
score: 99.25053187779018
patch: final int dp = p 1 [ i ] + $NUMBER$ $NUMBER$ ;
rank: 814
score: 99.36553955078125
patch: final int dp = p 1 [ i ] ; if p 1 [ i ] ;
rank: 814
score: 99.30179036458334
patch: int dp = dp [ i ] - p 1 [ i ] ;
rank: 814
score: 99.2998275756836
patch: int dp = p 1 [ i ] * p 1 [ i ] ;
rank: 814
score: 99.29144646139706
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ SIZE ] ;
rank: 814
score: 99.28761291503906
patch: Float dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 814
score: 99.2499248798077
patch: final int dp = p $NUMBER$ [ i - 1 ] ;
rank: 815
score: 99.36552159926471
patch: final int dp = p 1 [ i ] - mod $NUMBER$ [ i ] ;
rank: 815
score: 99.35593548943015
patch: final int dp = p 1 [ i ] - Integer . MAX _ VALUE ;
rank: 815
score: 99.30874197823661
patch: return dp [ i ] - p $NUMBER$ [ i ] ; }
rank: 815
score: 99.29931640625
patch: dp 1 [ p 1 [ i ] = p 1 [ i ] ;
rank: 815
score: 99.29280090332031
patch: int dp = p 1 [ $NUMBER$ ] - p $NUMBER$ [ i ] ;
rank: 815
score: 99.28756510416666
patch: min += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 815
score: 99.24874674479166
patch: int dp = p 1 [ i ] - 0 [ i ] ;
rank: 816
score: 99.35592830882354
patch: final int dp = p 1 [ i ] - Double . POSITIVE _ INFINITY ;
rank: 816
score: 99.30760192871094
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ; *
rank: 816
score: 99.29879760742188
patch: if ( p 1 [ i ] != - 1 ) { continue ; }
rank: 816
score: 99.29231262207031
patch: final int dp = p $NUMBER$ [ i ] - $NUMBER$ [ i ] ;
rank: 816
score: 99.28742980957031
patch: double sum += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 816
score: 99.24820149739584
patch: final int [ ] dp = p 1 [ i - $NUMBER$ ] ;
rank: 817
score: 99.30742645263672
patch: sum += p $NUMBER$ [ i ] * p $NUMBER$ [ i ] ; }
rank: 817
score: 99.29911804199219
patch: final int dp = p 1 [ i ] . distance ( dp ) ;
rank: 817
score: 99.29210611979167
patch: if = p 1 [ i ] - p 1 [ i ] ;
rank: 817
score: 99.28708814538044
patch: final int dp = mod 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp * dp ;
rank: 817
score: 99.24805559430804
patch: final int dp 1 = p 1 [ i + i ] ;
rank: 818
score: 99.36445886948529
patch: int p $NUMBER$ = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 818
score: 99.35539245605469
patch: int dp = p $NUMBER$ [ i ] & p $NUMBER$ [ i ] ;
rank: 818
score: 99.30735778808594
patch: final int dp = p 1 [ i ] >= p $NUMBER$ [ i ]
rank: 818
score: 99.29805755615234
patch: final int dp $NUMBER$ = p 1 [ i ] [ p $NUMBER$ ] ;
rank: 818
score: 99.28972981770833
patch: final int dp = 0 ; for = p 1 [ i ] ;
rank: 818
score: 99.28703507133152
patch: final int p 1 = p 1 [ i ] - p $NUMBER$ [ i ] ; sum += dp 1 ;
rank: 818
score: 99.24803815569196
patch: final int dp = p 1 [ i - - 1 ] ;
rank: 819
score: 99.35498809814453
patch: p 1 [ p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 819
score: 99.30728149414062
patch: final String dp = p 1 [ i ] - p $NUMBER$ [ i ]
rank: 819
score: 99.29704145951705
patch: final double dp = p 1 [ i ] ;
rank: 819
score: 99.28978056066177
patch: final int dp = p 1 [ i ] - and $NUMBER$ [ i ] ;
rank: 819
score: 99.289404296875
patch: final int dp = p 1 [ i ] - i + $NUMBER$ ;
rank: 819
score: 99.28550720214844
patch: Integer sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 819
score: 99.24790736607143
patch: final int dp = p 1 [ i ) - 1 ] ;
rank: 820
score: 99.34795065487133
patch: this . sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 820
score: 99.30726623535156
patch: return dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 820
score: 99.29833221435547
patch: static null = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 820
score: 99.29689378004808
patch: final int dp = p 1 [ i ] . length ;
rank: 820
score: 99.28933715820312
patch: sum += p 1 $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 820
score: 99.24750627790179
patch: final int dp = p 1 [ i 1 [ i ] ;
rank: 821
score: 99.29647827148438
patch: if ( dp 1 [ i ] == p 1 [ i ] ) {
rank: 821
score: 99.28850848858173
patch: final int dp = p 1 [ i ] & $NUMBER$ ;
rank: 821
score: 99.2844970703125
patch: z += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 821
score: 99.24598795572916
patch: final int dp = p 1 [ i ] - $STRING$ $NUMBER$ $NUMBER$ ;
rank: 822
score: 99.30619303385417
patch: int dp = p 1 [ i ] < p $NUMBER$ [ i ]
rank: 822
score: 99.29631042480469
patch: int dp = p 1 [ i ] | p $NUMBER$ [ i ] ;
rank: 822
score: 99.29572296142578
patch: int dp = p 1 [ dp ] - p $NUMBER$ [ i ] ;
rank: 822
score: 99.28830392020089
patch: final int dp = ( Integer ) p $NUMBER$ [ i ] ;
rank: 822
score: 99.28440856933594
patch: I dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 822
score: 99.24581705729166
patch: final int dp = p 1 [ i + $NUMBER$ - i ] ;
rank: 823
score: 99.34728285845588
patch: new double dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 823
score: 99.30606079101562
patch: final int dp = p 1 [ i ] - p 1 : i ;
rank: 823
score: 99.29629516601562
patch: final int dp = p 1 [ i ] & 0 [ 0 ] ;
rank: 823
score: 99.29436492919922
patch: int dp = p 1 [ i ] <= p $NUMBER$ [ i ] ;
rank: 823
score: 99.28726196289062
patch: int dp = p 1 [ i ] = p 1 [ i ] ;
rank: 823
score: 99.28396606445312
patch: float ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 823
score: 99.24568684895833
patch: int dp = 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 824
score: 99.34675149356617
patch: { int sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 824
score: 99.29385375976562
patch: final double dp = Math . abs ( p 1 [ i ] ) ;
rank: 824
score: 99.28825378417969
patch: final int dp = p 1 [ i ] - $NUMBER$ [ 0 ] ;
rank: 824
score: 99.28717447916667
patch: int dp = list [ i ] - p $NUMBER$ [ i ] ;
rank: 824
score: 99.28345489501953
patch: VM i = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 824
score: 99.24557291666666
patch: final int dp = p 1 [ i - $NUMBER$ + 1 ] ;
rank: 825
score: 99.3462158203125
patch: i = p 1 [ i ] - p 1 [ i ] ;
rank: 825
score: 99.29302571614583
patch: if ( p 1 [ i ] >= p 1 [ i ] ;
rank: 825
score: 99.28628540039062
patch: final int [ ] p $NUMBER$ = this . p 1 [ i ] ;
rank: 825
score: 99.2813720703125
patch: head = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 825
score: 99.2450927734375
patch: final int dp = p 1 [ i ] ; final int dp ;
rank: 826
score: 99.351708984375
patch: final Iterator dp = p 1 [ i ] . iterator ( ) ;
rank: 826
score: 99.3461052389706
patch: { sum += dp 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 826
score: 99.3038558959961
patch: sum += p $NUMBER$ [ i ] - dp $NUMBER$ [ i ] ; }
rank: 826
score: 99.29132486979167
patch: dp = p 1 [ i ] [ p $NUMBER$ [ i ] ;
rank: 826
score: 99.28065490722656
patch: double ( p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 826
score: 99.24505208333333
patch: final int dp [ ] = p $NUMBER$ [ i - i ] ;
rank: 827
score: 99.34967803955078
patch: result = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 827
score: 99.34499224494485
patch: final int dp = p 1 [ i + - p $NUMBER$ [ i ] ;
rank: 827
score: 99.30380859375
patch: int dp = p 1 [ i ] + p $NUMBER$ [ i ]
rank: 827
score: 99.28513881138393
patch: final int [ ] dp = p 1 [ i ] ; }
rank: 827
score: 99.28055826822917
patch: pos = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 828
score: 99.280517578125
patch: T dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 828
score: 99.2447509765625
patch: dp [ i ] = p 1 [ i - i ] ;
rank: 829
score: 99.29029083251953
patch: int Math = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 829
score: 99.28922526041667
patch: final int dp = p 1 [ i ] [ p 1 ] ;
rank: 829
score: 99.28641510009766
patch: final int dp = p 1 [ i | p $NUMBER$ [ i ] ;
rank: 829
score: 99.283203125
patch: final double dp [ ] = p 1 [ i ] ;
rank: 829
score: 99.24414876302083
patch: final int dp = p 1 [ i - i - $NUMBER$ ] ;
rank: 830
score: 99.35986328125
patch: final int dp = p 1 [ i ] - p $NUMBER$ , i ;
rank: 830
score: 99.34733581542969
patch: ] dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 830
score: 99.34471130371094
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i -
rank: 830
score: 99.30289713541667
patch: final int dp = p 1 . i - p $NUMBER$ [ i ]
rank: 830
score: 99.28915405273438
patch: long sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 830
score: 99.2811279296875
patch: final int [ ] dp = new int [ i ] ;
rank: 830
score: 99.243896484375
patch: final int dp = 0 + p 1 [ i ] ;
rank: 831
score: 99.34669494628906
patch: Dimension dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 831
score: 99.30250651041666
patch: int dp = p 1 [ i ] * p $NUMBER$ [ i ]
rank: 831
score: 99.27963053385416
patch: v = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 831
score: 99.24329427083333
patch: int dp = 0 ; int dp = p 1 [ i ] ;
rank: 832
score: 99.35919952392578
patch: final double dp = 0 [ i ] - p $NUMBER$ [ i ] ;
rank: 832
score: 99.28822428385416
patch: if ( p 1 [ i ] < p 1 [ i ] )
rank: 832
score: 99.27925618489583
patch: id = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 832
score: 99.27894005408653
patch: final int [ ] dp = new int [ 1 ] ;
rank: 832
score: 99.24314528245192
patch: dp [ i ] = p $NUMBER$ [ i ] ; }
rank: 833
score: 99.34588623046875
patch: dp = p 1 [ i ] - p $NUMBER$ $NUMBER$ [ i ] ;
rank: 833
score: 99.28822326660156
patch: byte dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 833
score: 99.27893880208333
patch: static = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 833
score: 99.23933919270833
patch: int dp = p 1 [ i - p 1 [ i ] ;
rank: 834
score: 99.28819274902344
patch: int dp = final 1 [ i ] - p 1 [ i ] ;
rank: 834
score: 99.2881851196289
patch: final int dp [ ] = new int [ p $NUMBER$ [ i ] ;
rank: 834
score: 99.27862548828125
patch: i ] = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 834
score: 99.27862079326923
patch: final Object [ ] dp = p 1 [ i ] ;
rank: 835
score: 99.35833381204044
patch: public float dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 835
score: 99.34323299632354
patch: int dp = p $NUMBER$ . [ i ] - p $NUMBER$ [ i ] ;
rank: 835
score: 99.30159214564732
patch: sum += p $NUMBER$ [ i ] - p $NUMBER$ [ i ]
rank: 835
score: 99.28077915736607
patch: return p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 835
score: 99.27833658854166
patch: state = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 835
score: 99.27703387920673
patch: final int dp = i + p $NUMBER$ [ i ] ;
rank: 835
score: 99.23877766927083
patch: final int dp = p 1 [ i ] + $STRING$ $NUMBER$ $NUMBER$ ;
rank: 836
score: 99.30142974853516
patch: final int dp = p 1 : p $NUMBER$ : i - p $NUMBER$ ;
rank: 836
score: 99.28740692138672
patch: int max = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 836
score: 99.2857666015625
patch: sum += p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 836
score: 99.27819010416667
patch: header = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 837
score: 99.34119466145833
patch: query = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 837
score: 99.30128580729166
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] *
rank: 837
score: 99.27928161621094
patch: int dp = p 1 [ i ] ; sum += dp * dp ;
rank: 837
score: 99.27814483642578
patch: Object i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 837
score: 99.2743408203125
patch: int dp = 0 [ i ] + p $NUMBER$ [ i ] ;
rank: 837
score: 99.23744303385416
patch: dp [ i ] = p 1 [ i ] ; break ; }
rank: 838
score: 99.3423080444336
patch: double sum = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 838
score: 99.3409423828125
patch: if ( p $NUMBER$ [ i ] != p $NUMBER$ [ i ] ) {
rank: 838
score: 99.30077362060547
patch: final double dp = p 1 [ i ] - p $NUMBER$ [ i ]
rank: 838
score: 99.28562709263393
patch: int dp = int [ ] + p $NUMBER$ [ i ] ;
rank: 838
score: 99.27774810791016
patch: short dp = p 1 [ i ] - p 1 [ i ] ;
rank: 838
score: 99.23705240885417
patch: int dp = p 1 [ i - p $NUMBER$ [ i ] ;
rank: 839
score: 99.34200032552083
patch: sum = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 839
score: 99.34072875976562
patch: dp = p 1 [ i ] - p $NUMBER$ [ i ] ) ;
rank: 839
score: 99.28553009033203
patch: final int dp = p 1 [ i ] . get ( dp ) ;
rank: 839
score: 99.28495025634766
patch: if ( p $NUMBER$ [ i ] == p 1 [ i ] ) {
rank: 839
score: 99.278564453125
patch: int break = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 839
score: 99.27752278645833
patch: node = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 839
score: 99.27314453125
patch: final int dp = [ 1 ] - p $NUMBER$ [ i ] ;
rank: 840
score: 99.29950714111328
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ : i ;
rank: 840
score: 99.28499603271484
patch: int i = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 840
score: 99.28419846754808
patch: try { final int dp = p 1 [ i ] ;
rank: 840
score: 99.27774047851562
patch: final static = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 840
score: 99.23597005208333
patch: int dp = p 1 [ i ] - $STRING$ [ i ] ;
rank: 841
score: 99.28489583333334
patch: final int dp = p 1 ] - p 1 [ i ] ;
rank: 841
score: 99.28313802083333
patch: final int dp = p 1 [ i ] 1 [ $NUMBER$ ] ;
rank: 841
score: 99.27657877604166
patch: j += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 841
score: 99.271728515625
patch: final int [ ] dp = p 1 1 [ i ] ;
rank: 841
score: 99.235546875
patch: final int dp = Math . dp = p $NUMBER$ [ i ] ;
rank: 842
score: 99.35678998161765
patch: final Float dp = p 1 [ i ] - p 1 [ i ] ;
rank: 842
score: 99.298828125
patch: dp = p 1 : i - p $NUMBER$ [ i ] ;
rank: 842
score: 99.28128255208334
patch: if ( p 1 [ i ] == 1 ) { continue ; }
rank: 842
score: 99.2767562866211
patch: final distance = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 842
score: 99.2764663696289
patch: S dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 842
score: 99.23489815848214
patch: final int dp = i ] - p $NUMBER$ [ i ] ;
rank: 843
score: 99.33995819091797
patch: dp = p 1 [ i ] ] - p $NUMBER$ [ i ] ;
rank: 843
score: 99.2842025756836
patch: int dp = p 1 [ i ] - p $NUMBER$ [ length ] ;
rank: 843
score: 99.28021709735577
patch: final int dp = 1 [ p $NUMBER$ [ i ] ;
rank: 843
score: 99.27610778808594
patch: distance distance = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 843
score: 99.27559407552083
patch: tmp += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 843
score: 99.26707356770834
patch: int dp = p 1 [ i ] p $NUMBER$ [ i ] ;
rank: 843
score: 99.23483072916666
patch: final int dp = 0 - p 1 [ i - 1 ] ;
rank: 844
score: 99.35608628216912
patch: final float dp += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 844
score: 99.33983503069196
patch: final int dp = p 1 [ i ] & - 1 ;
rank: 844
score: 99.298583984375
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ 0 ]
rank: 844
score: 99.28414212740384
patch: p 1 [ i ] = p $NUMBER$ [ i ] ;
rank: 844
score: 99.2785175030048
patch: if ( p 1 [ i ] == 0 ) continue ;
rank: 844
score: 99.2760009765625
patch: final int dp = p 1 [ i ] - $NUMBER$ [ 1 ] ;
rank: 844
score: 99.264453125
patch: int dp = p 1 [ i ] + $NUMBER$ [ i ] ;
rank: 844
score: 99.23441859654018
patch: final int dp = p 1 [ i ] ; if 1 ;
rank: 845
score: 99.2979507446289
patch: sum += p 1 [ i ] < p $NUMBER$ [ i ] ; }
rank: 845
score: 99.27748460036058
patch: switch ( p 1 [ i ] ) { case 1 :
rank: 845
score: 99.27442169189453
patch: Number dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 845
score: 99.2642822265625
patch: final int [ ] p 1 = dp 1 [ i ] ;
rank: 845
score: 99.23418782552083
patch: final int dp dp = p 1 [ i ] ; dp ++ ;
rank: 846
score: 99.3560431985294
patch: / int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 846
score: 99.34007263183594
patch: , sum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 846
score: 99.33744812011719
patch: long dp = p 1 [ i ] - start $NUMBER$ [ i ] ;
rank: 846
score: 99.29786028180804
patch: if ( p 1 [ i ] + p $NUMBER$ [ i ]
rank: 846
score: 99.282275390625
patch: int dp = value [ i ] - p $NUMBER$ [ i ] ;
rank: 846
score: 99.27738444010417
patch: if ( p 1 [ i ] <= p 1 [ i ] ;
rank: 846
score: 99.2739990234375
patch: val = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 846
score: 99.26402180989584
patch: final int dp = 0 . 1 - p $NUMBER$ [ i ] ;
rank: 846
score: 99.23409830729166
patch: final int dp = p 1 [ i + dp - i ] ;
rank: 847
score: 99.35600011488971
patch: final String dp = p 1 [ i ] [ p $NUMBER$ [ i ] ;
rank: 847
score: 99.3369369506836
patch: long dp = p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 847
score: 99.29761614118304
patch: final int dp = dp 1 : p 1 [ i ] ;
rank: 847
score: 99.27778625488281
patch: int dp = int 1 [ 1 ] - p $NUMBER$ [ i ] ;
rank: 847
score: 99.27637532552083
patch: if ( dp 1 [ i ] == null ) { continue ; }
rank: 847
score: 99.27342936197917
patch: l += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 848
score: 99.33942009420956
patch: if ( p 1 [ i ] < p $NUMBER$ [ i ] ) { {
rank: 848
score: 99.33570098876953
patch: Integer dp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 848
score: 99.27445220947266
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ } ;
rank: 848
score: 99.27352701822916
patch: dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 848
score: 99.2733154296875
patch: final int dp = p 1 [ i ] - p 1 [ ] ;
rank: 848
score: 99.23323567708333
patch: final int dp = p 1 [ i - $NUMBER$ + i ] ;
rank: 849
score: 99.35470760569854
patch: final int dp = substring 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 849
score: 99.29666137695312
patch: final int dp = p 1 * i - p $NUMBER$ [ i ] ;
rank: 849
score: 99.27652740478516
patch: int dp = p 1 [ i ] - p $NUMBER$ [ dp ] ;
rank: 849
score: 99.27301432291667
patch: j += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 849
score: 99.26012369791667
patch: final int dp = p 1 [ i ] + i + $NUMBER$ ;
rank: 849
score: 99.23318684895834
patch: dp [ i ] = p 1 [ i - i ] ; }
rank: 850
score: 99.3389030905331
patch: distance int dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 850
score: 99.29612731933594
patch: final int -= p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 850
score: 99.27638244628906
patch: int dp = list 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 850
score: 99.27442220052083
patch: sum += p 1 [ i ] + p 1 [ i ] ;
rank: 850
score: 99.23258754185268
patch: final int dp = p 1 [ i ] ; if 1 }
rank: 851
score: 99.29598999023438
patch: final int dp = p 1 . i - dp $NUMBER$ [ i ] ;
rank: 851
score: 99.272509765625
patch: max += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 851
score: 99.26878255208334
patch: if ( p $NUMBER$ [ i ] == 0 ) { continue ; }
rank: 851
score: 99.23125348772321
patch: final int dp = p 1 [ i - - i ] ;
rank: 852
score: 99.35408020019531
patch: int dp = max 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 852
score: 99.3382568359375
patch: Word dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 852
score: 99.29560198102679
patch: final int dp = p 1 : p 1 [ i ] [
rank: 852
score: 99.27205403645833
patch: bounds += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 852
score: 99.259375
patch: final int [ ] dp = p 1 [ i ] . length ;
rank: 852
score: 99.2308837890625
patch: final int dp = p 1 [ i ] ; dp i ++ ;
rank: 853
score: 99.33254568917411
patch: final int dp = p $NUMBER$ [ i ] - 1 $NUMBER$ ;
rank: 853
score: 99.29541015625
patch: final int dp = p 1 [ i ] - p $NUMBER$ : i ?
rank: 853
score: 99.27447916666667
patch: final int dp = int [ ] + p 1 [ i ] ;
rank: 853
score: 99.271875
patch: curr = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 853
score: 99.25921223958333
patch: final int [ ] dp [ ] = p $NUMBER$ [ i ] ;
rank: 853
score: 99.23070475260417
patch: final int dp [ ] = p $NUMBER$ [ i + i ] ;
rank: 854
score: 99.29536946614583
patch: sum += p 1 [ i ] * p $NUMBER$ [ i ] ;
rank: 854
score: 99.27175903320312
patch: final int dp = key [ i ] - p $NUMBER$ [ i ] ;
rank: 854
score: 99.27137858072916
patch: selected = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 854
score: 99.26785714285714
patch: dp 1 [ i ] = p 1 [ i ] ; }
rank: 854
score: 99.25875651041666
patch: final int [ ] dp = this . p $NUMBER$ [ i ] ;
rank: 854
score: 99.23024088541666
patch: final int dp [ - 1 ] = p 1 [ i ] ;
rank: 855
score: 99.33092447916667
patch: final int dp = p 1 [ i ] + p $NUMBER$ ] ;
rank: 855
score: 99.27024841308594
patch: VM i += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 855
score: 99.26773274739584
patch: z = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 855
score: 99.25746506911058
patch: final int [ ] $NUMBER$ = p 1 [ i ] ;
rank: 855
score: 99.22989327566964
patch: final int dp = p 1 [ i ] == p $NUMBER$ ;
rank: 856
score: 99.33051300048828
patch: if ( p $NUMBER$ [ i ] < p 1 [ i ] ) {
rank: 856
score: 99.27044677734375
patch: @ size = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 856
score: 99.26983235677083
patch: result += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 856
score: 99.2673809344952
patch: final int dp = p $NUMBER$ [ i ] - i ;
rank: 856
score: 99.25696672712054
patch: final int [ ] dp dp = p 1 [ i ] ;
rank: 857
score: 99.35210104549633
patch: final int dp >= p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 857
score: 99.3351058959961
patch: dp ( p 1 [ i ] , p $NUMBER$ [ i ] ) ;
rank: 857
score: 99.26972961425781
patch: byte i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 857
score: 99.25584193638393
patch: final int dp = p 1 [ i ] == p 1 ;
rank: 857
score: 99.22923787434895
patch: final int dp dp = p 1 [ i ] ;
rank: 858
score: 99.33507537841797
patch: Object dp = p 1 [ i ] - p $NUMBER$ [ 1 ] ;
rank: 858
score: 99.32978057861328
patch: long dp = p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 858
score: 99.29458618164062
patch: int dp = p 1 . [ i ] - p $NUMBER$ [ i ]
rank: 858
score: 99.2694580078125
patch: actual = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 858
score: 99.26624474158653
patch: if ( p 1 [ i ] == - 1 ) {
rank: 858
score: 99.22904750279018
patch: dp $NUMBER$ [ i ] = p $NUMBER$ [ i ] ; }
rank: 859
score: 99.33403015136719
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ i 1
rank: 859
score: 99.26997375488281
patch: final int dp = int $NUMBER$ [ ] - p $NUMBER$ [ i ] ;
rank: 859
score: 99.26937103271484
patch: Member dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 859
score: 99.26612955729166
patch: if ( dp 1 [ i ] < p $NUMBER$ [ i ] ;
rank: 859
score: 99.22887311662946
patch: final int dp - p 1 = p 1 [ i ] ;
rank: 860
score: 99.3287353515625
patch: dp = p 1 [ i ] - p $NUMBER$ [ i ] ; ;
rank: 860
score: 99.2942626953125
patch: dp = p 1 [ i ] - dp $NUMBER$ [ i ] ;
rank: 860
score: 99.2698745727539
patch: final int dp = final [ i ] - p $NUMBER$ [ i ] ;
rank: 860
score: 99.26918029785156
patch: final int dp = p $NUMBER$ [ i + p 1 [ i ] ;
rank: 860
score: 99.26880645751953
patch: double sum += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 860
score: 99.25228177584134
patch: final int [ ] 1 = p 1 [ i ] ;
rank: 860
score: 99.2283184344952
patch: final int dp = p 1 [ i ] - true ;
rank: 861
score: 99.33375549316406
patch: Rectangle dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 861
score: 99.29378255208333
patch: sum += dp 1 [ i + p $NUMBER$ [ i ] ; }
rank: 861
score: 99.26792907714844
patch: Long dp = p 1 [ i ] - p 1 [ i ] ;
rank: 861
score: 99.26279994419643
patch: final int int dp = p 1 [ i ] - 1 ;
rank: 862
score: 99.33308410644531
patch: int dp = sum 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 862
score: 99.32776641845703
patch: int dp = p 1 [ i ] *= p $NUMBER$ [ i ] ;
rank: 862
score: 99.29291534423828
patch: final int dp = p 1 + i + p $NUMBER$ [ i ] ;
rank: 862
score: 99.2693862915039
patch: int final = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 862
score: 99.26158040364584
patch: if ( dp 1 [ i ] == p 1 [ i ] ;
rank: 862
score: 99.25078125
patch: final int dp = p 1 [ i ] + i + 1 ;
rank: 862
score: 99.22671944754464
patch: final int dp dp = p 1 [ i - $NUMBER$ ] ;
rank: 863
score: 99.29244232177734
patch: sum distance = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 863
score: 99.2664794921875
patch: final int dp = E [ i ] - p $NUMBER$ [ i ] ;
rank: 863
score: 99.25057547433036
patch: final double [ ] p 1 = p 1 [ i ] ;
rank: 863
score: 99.22594275841347
patch: final int dp = p 1 [ i ] ; System ;
rank: 864
score: 99.33213704427084
patch: i < p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 864
score: 99.324951171875
patch: if ( p $NUMBER$ [ i ] >= p $NUMBER$ [ i ] ) {
rank: 864
score: 99.26747233072916
patch: int dp = distance [ i ] - p $NUMBER$ [ i ] ;
rank: 864
score: 99.26572265625
patch: a += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 864
score: 99.26071401742789
patch: dp 0 [ i ] = p 1 [ i ] ;
rank: 864
score: 99.25056675502232
patch: final Object [ ] p 1 = p 1 [ i ] ;
rank: 864
score: 99.22467510516827
patch: final int dp = Math : p 1 [ i ] ;
rank: 865
score: 99.26776885986328
patch: int dp = dp $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 865
score: 99.26506805419922
patch: Integer i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 865
score: 99.26068987165179
patch: final int dp = p 1 [ i ] - 1 ; ;
rank: 865
score: 99.22382061298077
patch: final final int dp 1 = p 1 [ i ] ;
rank: 866
score: 99.34979607077206
patch: public int dp = p 1 [ i ] - p 1 [ i ] ;
rank: 866
score: 99.32455240885416
patch: cmp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 866
score: 99.29058074951172
patch: final int dp = p 1 [ i ] * p 1 [ i ]
rank: 866
score: 99.26721954345703
patch: int dp = i 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 866
score: 99.26622772216797
patch: final int dp = p 1 , i = p $NUMBER$ [ i ] ;
rank: 866
score: 99.26473236083984
patch: l 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 866
score: 99.24993896484375
patch: final String [ ] p 1 = p 1 [ i ] ;
rank: 866
score: 99.22339739118304
patch: final int dp = p 1 [ i + 1 ] ] ;
rank: 867
score: 99.32449544270834
patch: result += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 867
score: 99.28974914550781
patch: final int dp = p 1 : p 1 [ i ] . distance ;
rank: 867
score: 99.22332763671875
patch: final int dp = p 1 [ i + - 1 ] ;
rank: 868
score: 99.34958783318015
patch: final int dp = PI 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 868
score: 99.3282699584961
patch: int sum = p 1 [ i ] - p $NUMBER$ [ 1 ] ;
rank: 868
score: 99.32415301983173
patch: int dp = p 1 [ i ] - p $NUMBER$ ;
rank: 868
score: 99.26647186279297
patch: int chars = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 868
score: 99.26396484375
patch: retval += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 868
score: 99.249267578125
patch: int [ ] [ ] dp = p 1 [ i ] ;
rank: 868
score: 99.22317270132211
patch: final int dp = 0 - dp 1 [ i ] ;
rank: 869
score: 99.34909237132354
patch: int dp 1 = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 869
score: 99.32781219482422
patch: for ( int [ ] p $NUMBER$ : p $NUMBER$ [ i ] ) {
rank: 869
score: 99.26604461669922
patch: final dp = p 1 [ i ] - p 1 [ i ] ;
rank: 869
score: 99.2577880859375
patch: if ( p 1 [ i ] != 0 ) { break ; }
rank: 869
score: 99.24922688802083
patch: final int dp = p 1 [ i ] + 0 . 0 ;
rank: 870
score: 99.288818359375
patch: sum = dp 1 [ i ] + p $NUMBER$ [ i ] ; }
rank: 870
score: 99.260693359375
patch: final int dp = $STRING$ - i - p 1 [ i ] ;
rank: 870
score: 99.25742750901442
patch: final int dp = p 1 [ i ] & 0 ;
rank: 870
score: 99.2484619140625
patch: final int dp = p 1 [ i ] & i - $NUMBER$ ;
rank: 870
score: 99.22260393415179
patch: final int dp = p 1 [ i ] - i ] ;
rank: 871
score: 99.34857940673828
patch: final int dp = Comparable [ i ] - p $NUMBER$ [ i ] ;
rank: 871
score: 99.31996256510416
patch: final int dp = p 1 [ i ] + p $NUMBER$ i ;
rank: 871
score: 99.26314544677734
patch: float sum += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 871
score: 99.25704752604166
patch: final int dp = p 1 [ i ] [ p $NUMBER$ ] ;
rank: 871
score: 99.22055489676339
patch: final int dp = p 1 [ i + - i ] ;
rank: 872
score: 99.32600911458333
patch: dp = p 1 [ i ] - p $NUMBER$ [ 0 ] ;
rank: 872
score: 99.264892578125
patch: int dp = p 1 . distance ( p $NUMBER$ [ i ] ) ;
rank: 872
score: 99.26313781738281
patch: Point dp = p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 872
score: 99.2597412109375
patch: distance = p 1 [ i ] - p 1 [ i ] ;
rank: 872
score: 99.220458984375
patch: final int dp = $STRING$ - p 1 [ i ] ;
rank: 873
score: 99.34834289550781
patch: final int dp = 0 [ i ] + p 1 [ i ] ;
rank: 873
score: 99.26448822021484
patch: int sum += p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 873
score: 99.2630615234375
patch: double sum += p 1 [ i ] - p 1 [ i ] ;
rank: 873
score: 99.25966796875
patch: sum += p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 873
score: 99.255712890625
patch: if ( p 1 [ i ] > p $NUMBER$ [ i ] )
rank: 873
score: 99.246337890625
patch: final int [ ] dp = p 1 [ 1 ] ;
rank: 873
score: 99.22028057391827
patch: final int dp = compare = p 1 [ i ] ;
rank: 874
score: 99.28754069010417
patch: int dp = p 1 , dp = p 1 [ i ] ;
rank: 874
score: 99.2644271850586
patch: final int dp = p 1 [ i ] - $NUMBER$ [ dp ] ;
rank: 874
score: 99.25481770833333
patch: if ( p 1 [ i ] != p 1 [ i ] )
rank: 874
score: 99.2429443359375
patch: final int dp = p 1 [ i ] + i - $NUMBER$ ;
rank: 874
score: 99.2197735126202
patch: final int dp , dp = p 1 [ i ] ;
rank: 875
score: 99.32568359375
patch: double dp = p 1 [ i ] - p $NUMBER$ [ 1 ] ;
rank: 875
score: 99.26304626464844
patch: final int dp = p 1 [ i ] - p $NUMBER$ , dp ;
rank: 875
score: 99.26272583007812
patch: Weak dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 875
score: 99.21876743861607
patch: final int dp = p 1 = p 1 [ i ] ;
rank: 876
score: 99.34756290211396
patch: final float dp = p $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 876
score: 99.32564544677734
patch: Iterator i = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 876
score: 99.31801060267857
patch: final int dp = p $NUMBER$ [ i ] - p $NUMBER$ ;
rank: 876
score: 99.26266479492188
patch: Long sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 876
score: 99.24224384014423
patch: p $NUMBER$ [ i ] = p 1 [ i ] ;
rank: 876
score: 99.21844482421875
patch: final final int dp = p 1 [ i - 1 ] ;
rank: 877
score: 99.31741536458334
patch: final int dp = p 1 [ i ] - System . out ;
rank: 877
score: 99.28631998697917
patch: final int dp = p 1 [ i + p 1 [ i ]
rank: 877
score: 99.26238250732422
patch: int list = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 877
score: 99.2579574584961
patch: Element dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 877
score: 99.24176494891827
patch: final int dp = p 1 [ i ] ; continue ;
rank: 877
score: 99.21806117466518
patch: final int dp dp [ ] = p 1 [ i ] ;
rank: 878
score: 99.32516276041666
patch: i = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 878
score: 99.26136067708333
patch: series = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 878
score: 99.26083374023438
patch: for ( int i = 0 ; i < i ; i ++ ) {
rank: 878
score: 99.25782775878906
patch: final int dp = name [ i ] - p 1 [ i ] ;
rank: 878
score: 99.24076334635417
patch: final int [ ] dp = p 1 [ i ] - $NUMBER$ ;
rank: 878
score: 99.21795654296875
patch: final int dp = - 1 - p 1 [ i ] ;
rank: 879
score: 99.34576775045956
patch: int p $NUMBER$ = p 1 [ i ] - p 1 [ i ] ;
rank: 879
score: 99.28529575892857
patch: dp = p 1 [ i ] - p $NUMBER$ : i ;
rank: 879
score: 99.26122233072917
patch: g = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 879
score: 99.2569808959961
patch: final int dp = p 1 [ i + dp $NUMBER$ [ i ] ;
rank: 879
score: 99.25183919270833
patch: final int dp = p 1 [ i ] - i + 1 ;
rank: 879
score: 99.24040876116071
patch: final int dp = p 1 [ i ] & 0 1 ;
rank: 879
score: 99.21764264787946
patch: final int dp 1 = p 1 [ i + $NUMBER$ ] ;
rank: 880
score: 99.34576056985294
patch: final T dp = p 1 [ i ] - p 1 [ i ] ;
rank: 880
score: 99.32376098632812
patch: int dp = distance 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 880
score: 99.31491524832589
patch: final double dp = p 1 [ i ] - p $NUMBER$ ;
rank: 880
score: 99.28528645833333
patch: sum += dp 1 : p 1 [ i ] - p $NUMBER$ ;
rank: 880
score: 99.25989583333333
patch: peer = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 880
score: 99.25678253173828
patch: final int dp = distance [ i ] - p 1 [ i ] ;
rank: 880
score: 99.2517333984375
patch: result = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 880
score: 99.23999895368304
patch: return p 1 [ i ] - p 1 [ i ] ;
rank: 880
score: 99.21671236478366
patch: final int dp = p 1 [ i ] + false ;
rank: 881
score: 99.31073404947917
patch: q = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 881
score: 99.283251953125
patch: int dp = p 1 + i - p $NUMBER$ [ i ] ;
rank: 881
score: 99.2513427734375
patch: final Integer dp = ( Integer ) p 1 [ i ] ;
rank: 881
score: 99.23955829326923
patch: final int [ ] max = p 1 [ i ] ;
rank: 881
score: 99.21629920372597
patch: final int dp = 1 - p $NUMBER$ [ i ] ;
rank: 882
score: 99.3221435546875
patch: for ( int [ ] dp 1 : p 1 [ i ] ) {
rank: 882
score: 99.30852864583333
patch: final int dp = p 1 [ i ] + System . $NUMBER$ ;
rank: 882
score: 99.2823486328125
patch: return p 1 [ i ] * p $NUMBER$ [ i ] ; }
rank: 882
score: 99.25930786132812
patch: final int dp = p 1 [ i ] - Number [ i ] ;
rank: 882
score: 99.25115559895833
patch: if ( p 1 [ i ] >= p $NUMBER$ [ i ] )
rank: 882
score: 99.23953683035714
patch: final int [ ] dp 1 = p $NUMBER$ [ i ] ;
rank: 882
score: 99.21616036551339
patch: final int dp i = p 1 [ i - 1 ] ;
rank: 883
score: 99.30781773158482
patch: final int dp = p 1 [ i ] - start $NUMBER$ ;
rank: 883
score: 99.28202311197917
patch: final int dp = p 1 [ i + p $NUMBER$ : i ;
rank: 883
score: 99.25921223958333
patch: view = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 883
score: 99.25050571986607
patch: final int dp $NUMBER$ [ ] = p 1 [ i ] ;
rank: 883
score: 99.23902239118304
patch: final int dp = ( double ) p 1 [ i ] ;
rank: 884
score: 99.30765787760417
patch: final int dp = p $NUMBER$ [ i ] - System . ] ;
rank: 884
score: 99.281103515625
patch: final int dp = p 1 : i - p $NUMBER$ [ i ]
rank: 884
score: 99.25892740885416
patch: h = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 884
score: 99.25513458251953
patch: final int dp = p 1 [ i ] - chars [ i ] ;
rank: 884
score: 99.25331333705357
patch: int dp = int [ ] - p $NUMBER$ [ i ] ;
rank: 884
score: 99.24950358072917
patch: if ( dp 1 [ i ] == p $NUMBER$ [ i ] ;
rank: 884
score: 99.23854282924107
patch: final int i = p 1 [ i ] [ i ] ;
rank: 885
score: 99.2804931640625
patch: sum += p 1 : p $NUMBER$ [ i ] - p $NUMBER$ ;
rank: 885
score: 99.2587661743164
patch: m 1 = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 885
score: 99.25469207763672
patch: final int dp = p 1 [ i ] - 0 [ 1 ] ;
rank: 885
score: 99.25323079427083
patch: final int dp = p 1 [ i ] 1 [ dp ] ;
rank: 885
score: 99.24883563701923
patch: if ( p 1 [ i ] == null ) break ;
rank: 885
score: 99.2383544921875
patch: final int p 1 = p 1 [ i ] [ i ] ;
rank: 885
score: 99.2111065204327
patch: final int dp = p 1 [ i ] ; this ;
rank: 886
score: 99.34124755859375
patch: final int dp = p 1 [ i ] - p $NUMBER$ + 0 ;
rank: 886
score: 99.32071940104167
patch: sum += p 1 [ i ] - p $NUMBER$ [ 0 ] ;
rank: 886
score: 99.30705915178571
patch: final int dp = p 1 [ i ] + i ] ;
rank: 886
score: 99.27987234933036
patch: sum += dp 1 [ i ] < p $NUMBER$ [ i ]
rank: 886
score: 99.25867513020833
patch: axis = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 887
score: 99.306591796875
patch: if ( p 1 [ i ] - p 1 [ i ] ;
rank: 887
score: 99.27904459635417
patch: sum += p 1 [ i + p 1 [ i ] ; }
rank: 887
score: 99.2580078125
patch: b += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 887
score: 99.2515869140625
patch: int dp = p 1 [ ] - p $NUMBER$ [ i ] ;
rank: 887
score: 99.24751790364583
patch: if ( p 1 [ i ] != p $NUMBER$ [ i ] )
rank: 887
score: 99.23650251116071
patch: final int < Integer > dp = p $NUMBER$ [ i ] ;
rank: 887
score: 99.2108154296875
patch: final int dp = p 1 [ i $NUMBER$ [ i ] ;
rank: 888
score: 99.306396484375
patch: if ( p $NUMBER$ [ i ] < p $NUMBER$ [ i ] ;
rank: 888
score: 99.27891438802084
patch: final int dp = p 1 [ i ] - p $NUMBER$ : 0
rank: 888
score: 99.25146484375
patch: final int dp = p 1 [ i ] . length - $NUMBER$ ;
rank: 888
score: 99.21059744698661
patch: final int dp $NUMBER$ = p 1 [ i - 1 ] ;
rank: 889
score: 99.30496419270834
patch: final int dp = p 1 [ i ] % p $NUMBER$ $NUMBER$ ;
rank: 889
score: 99.25696614583333
patch: retval += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 889
score: 99.25367736816406
patch: final int dp = p 1 [ i * p 1 [ i ] ;
rank: 889
score: 99.23433743990384
patch: final int [ ] list = p 1 [ i ] ;
rank: 889
score: 99.20997837611607
patch: final int dp 1 = i - p 1 [ i ] ;
rank: 890
score: 99.3193130493164
patch: boolean sum = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 890
score: 99.27801106770833
patch: double dp = p 1 [ i + p $NUMBER$ [ i ] ;
rank: 890
score: 99.25672200520833
patch: pref = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 890
score: 99.24479166666667
patch: fg = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 890
score: 99.23366873604911
patch: final String dp = ( int ) p 1 [ i ] ;
rank: 890
score: 99.20900181361607
patch: final int dp = p 1 [ i 1 + i ] ;
rank: 891
score: 99.31910705566406
patch: Boolean dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 891
score: 99.24916294642857
patch: sum += dp [ i ] - p $NUMBER$ [ i ] ;
rank: 891
score: 99.23353928786058
patch: final int [ ] dp = - 1 [ i ] ;
rank: 892
score: 99.29632975260417
patch: final int dp = p 1 [ i ] & p $NUMBER$ ] ;
rank: 892
score: 99.27687174479166
patch: if ( p 1 [ i ] + p $NUMBER$ [ i ] /
rank: 892
score: 99.25614929199219
patch: Byte dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 892
score: 99.24853515625
patch: final int dp = [ i ] - p 1 [ i ] ;
rank: 892
score: 99.24129231770833
patch: if ( p 1 [ i ] <= 0 ) { continue ; }
rank: 892
score: 99.20673479352679
patch: final int dp = new int [ p $NUMBER$ [ i ] ;
rank: 893
score: 99.31840515136719
patch: { sum += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 893
score: 99.29599233774039
patch: int dp = p 1 [ i ] + p $NUMBER$ ;
rank: 893
score: 99.2751220703125
patch: final int dp = p 1 . : p 1 [ i ] ;
rank: 893
score: 99.25578308105469
patch: float sum = p 1 [ i ] - p 1 [ i ] ;
rank: 893
score: 99.24837239583333
patch: int dp = final [ i ] - p $NUMBER$ [ i ] ;
rank: 893
score: 99.2404033954327
patch: final int dp = 1 + p 1 [ i ] ;
rank: 893
score: 99.23334209735577
patch: int dp = ( int ) p 1 [ i ] ;
rank: 893
score: 99.20632699819711
patch: final int dp = p $NUMBER$ [ i ] - $STRING$ ;
rank: 894
score: 99.295751953125
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ ;
rank: 894
score: 99.27450125558036
patch: dp = p 1 [ i + p $NUMBER$ [ i ] ;
rank: 894
score: 99.254052734375
patch: pos += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 894
score: 99.25186920166016
patch: final int dp = p 1 [ i ] - $NUMBER$ [ $NUMBER$ ] ;
rank: 894
score: 99.24836948939732
patch: int dp = p 1 [ i ] 1 [ i ] ;
rank: 894
score: 99.23897298177083
patch: final Iterator i = p 1 [ i ] . iterator ( ) ;
rank: 894
score: 99.20590645926339
patch: final int dp = p 1 [ i ] - 0 $NUMBER$ ;
rank: 895
score: 99.31668294270834
patch: i = p 1 [ i ] - p $NUMBER$ [ 1 ] ;
rank: 895
score: 99.29370930989583
patch: temp = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 895
score: 99.27348981584821
patch: sum += dp 1 [ i ] * p $NUMBER$ [ i ]
rank: 895
score: 99.25402018229167
patch: arg = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 895
score: 99.2385986328125
patch: if ( dp 1 [ i ] == 0 ) { continue ; }
rank: 895
score: 99.23239571707589
patch: final int dp = p 1 [ i ] >> - $NUMBER$ ;
rank: 895
score: 99.20504995492789
patch: final int dp = p 1 [ i ] - this ;
rank: 896
score: 99.31623840332031
patch: Date dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 896
score: 99.27093912760417
patch: for ( int dp = p 1 : p 1 [ i ] ;
rank: 896
score: 99.25365397135417
patch: max += p 1 [ i ] - p 1 [ i ] ;
rank: 896
score: 99.2379150390625
patch: if ( p 1 [ i ] == 0 ) break ;
rank: 896
score: 99.23129069010416
patch: final int [ ] dp = p 1 [ i ] + $NUMBER$ ;
rank: 896
score: 99.20468575613839
patch: final int dp = p 1 [ i ] / p $NUMBER$ ;
rank: 897
score: 99.3160629272461
patch: final int ! p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 897
score: 99.2928955078125
patch: final double dp = p 1 [ i ] - System . ] ;
rank: 897
score: 99.27029622395834
patch: final int dp = p 1 1 : p 1 [ i ] ;
rank: 897
score: 99.24942779541016
patch: final int dp = static [ i ] - p $NUMBER$ [ i ] ;
rank: 897
score: 99.24156901041667
patch: final int dp = p 1 [ int $NUMBER$ ] - p $NUMBER$ [
rank: 897
score: 99.237890625
patch: j = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 897
score: 99.23099459134616
patch: p $NUMBER$ [ i ] = p $NUMBER$ [ i ] ;
rank: 897
score: 99.20409284319196
patch: final int dp = p 1 [ i ) - $NUMBER$ ] ;
rank: 898
score: 99.31559753417969
patch: Object dp = p 1 [ i ] - p 1 [ i ] ;
rank: 898
score: 99.26953125
patch: sum += p 1 [ i ] * p $NUMBER$ [ i ] +
rank: 898
score: 99.25342610677083
patch: split = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 898
score: 99.24138997395833
patch: final int dp = int i ] - p $NUMBER$ [ i ] ;
rank: 898
score: 99.237255859375
patch: dp = p 1 [ i ] + p 1 [ i ] ;
rank: 898
score: 99.20166015625
patch: final int dp = p 1 [ i - $NUMBER$ ] ] ;
rank: 899
score: 99.31513671875
patch: distance += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 899
score: 99.26937430245536
patch: final int dp = p 1 [ i ] - p $NUMBER$ :
rank: 899
score: 99.25325775146484
patch: double sum = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 899
score: 99.240478515625
patch: final int dp = int 1 ] - p $NUMBER$ [ i ] ;
rank: 899
score: 99.23702566964286
patch: final int dp 0 = p 1 [ i ] - 1 ;
rank: 899
score: 99.20067487444196
patch: dp [ i ] = p 1 [ i ] ; break ;
rank: 900
score: 99.3272705078125
patch: final float dp = 0 [ i ] - p 1 [ i ] ;
rank: 900
score: 99.25231119791667
patch: x += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 900
score: 99.24909973144531
patch: final int dp = arraycopy [ i ] - p $NUMBER$ [ i ] ;
rank: 900
score: 99.23645833333333
patch: min = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 900
score: 99.22777381310097
patch: final long [ ] dp = p 1 [ i ] ;
rank: 900
score: 99.20066481370192
patch: final int dp = p 1 [ i ] ; dp else
rank: 901
score: 99.3143310546875
patch: i = p 1 [ i ] - p $NUMBER$ [ i ] ; }
rank: 901
score: 99.26712239583334
patch: return p 1 : p 1 [ i ] - p $NUMBER$ ; }
rank: 901
score: 99.25204264322916
patch: if ( p 1 [ i ] <= p $NUMBER$ [ i ] )
rank: 901
score: 99.23536783854166
patch: if ( p $NUMBER$ [ i ] != 0 ) { continue ; }
rank: 901
score: 99.19980093149039
patch: final int dp = p $NUMBER$ [ i - $NUMBER$ ] ;
rank: 902
score: 99.25186360677084
patch: i += p 1 [ i ] - p 1 [ i ] ;
rank: 902
score: 99.23929036458334
patch: final int dp = p 1 [ i ] . get ( ) ;
rank: 902
score: 99.22419084821429
patch: final int dp = p 1 [ i ] + - $NUMBER$ ;
rank: 902
score: 99.19889613560268
patch: final int dp dp = p 1 [ i - i ] ;
rank: 903
score: 99.32618713378906
patch: int dp -= p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 903
score: 99.28668212890625
patch: = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 903
score: 99.25155436197916
patch: w = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 903
score: 99.23905436197917
patch: int dp = p 1 . length - p 1 [ i ] ;
rank: 903
score: 99.23211669921875
patch: if ( p 1 [ i ] instanceof int [ ] ) {
rank: 903
score: 99.19786725725446
patch: final final int dp = p 1 [ i + 1 ] ;
rank: 904
score: 99.3134765625
patch: final int dp = p 1 [ i : p $NUMBER$ [ i ] ;
rank: 904
score: 99.28526204427084
patch: final float dp = p 1 [ i ] - System . $NUMBER$ ;
rank: 904
score: 99.26263897235577
patch: int dp = p 1 + p $NUMBER$ [ i ] ;
rank: 904
score: 99.23896484375
patch: final int dp = p 1 [ double 1 ] - p $NUMBER$ [
rank: 904
score: 99.22317068917411
patch: final int dp = p 1 [ i ] + 0 $NUMBER$ ;
rank: 905
score: 99.32444763183594
patch: final Integer dp = 0 [ i ] - p $NUMBER$ [ i ] ;
rank: 905
score: 99.2850811298077
patch: final int dp = p $NUMBER$ [ i ] + 1 ;
rank: 905
score: 99.26229654947916
patch: final int dp = p 1 [ i ] ; sum += dp *
rank: 905
score: 99.25005696614583
patch: me = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 905
score: 99.244140625
patch: sum += distance $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 905
score: 99.23765462239584
patch: int dp = p 1 . length - p $NUMBER$ [ i ] ;
rank: 905
score: 99.23207194010416
patch: double dp = Math . abs ( p 1 [ i ] ) ;
rank: 905
score: 99.22224934895833
patch: final int p 1 = p 1 [ i ] ;
rank: 906
score: 99.28415352957589
patch: final int dp = p 1 [ i ] ] - 1 ;
rank: 906
score: 99.24996185302734
patch: float sum += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 906
score: 99.23187662760417
patch: final int dp = p $NUMBER$ [ i ] . size ( ) ;
rank: 907
score: 99.31242370605469
patch: if ( p 1 [ i ] >= dp $NUMBER$ [ i ] ) {
rank: 907
score: 99.26142229352679
patch: sum += p 1 [ i ] $NUMBER$ [ i ] ; }
rank: 907
score: 99.24984537760416
patch: c = p 1 [ i ] - p 1 [ i ] ;
rank: 907
score: 99.23435756138393
patch: int dp = p 1 [ int 1 ] - p $NUMBER$ [
rank: 907
score: 99.22011155348558
patch: final int [ ] dp = new int [ 0 ] ;
rank: 907
score: 99.19686185396634
patch: final int dp = Math * p 1 [ i ] ;
rank: 908
score: 99.28398786272321
patch: final int dp = p 1 [ i ] - i $NUMBER$ ;
rank: 908
score: 99.26021321614583
patch: final int dp = p 1 [ i ] - p $NUMBER$ : 1
rank: 908
score: 99.19605364118304
patch: final int dp = - 1 - p $NUMBER$ [ i ] ;
rank: 909
score: 99.28334263392857
patch: final String dp = p 1 [ i ] + $STRING$ $NUMBER$ ;
rank: 909
score: 99.24929809570312
patch: Double dp = p 1 [ i ] - p 1 [ i ] ;
rank: 909
score: 99.23336588541666
patch: sum += dp $NUMBER$ [ i ] + p $NUMBER$ [ i ] ;
rank: 909
score: 99.2282002766927
patch: final int dp $NUMBER$ = p 1 [ i ] ;
rank: 909
score: 99.21985802283653
patch: int dp = p 1 [ p 1 [ i ] ;
rank: 909
score: 99.19560895647321
patch: dp [ i ] = p 1 [ i - 1 ] ;
rank: 910
score: 99.31056213378906
patch: i dp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 910
score: 99.25953020368304
patch: sum += p 1 [ i ] > p $NUMBER$ [ i ]
rank: 910
score: 99.24912109375
patch: cp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 910
score: 99.23025076729911
patch: int dp = int [ ] - p 1 [ i ] ;
rank: 910
score: 99.21890694754464
patch: final int [ ] dp = p 1 [ i ] ; ;
rank: 910
score: 99.19522798978366
patch: final int dp = p $NUMBER$ [ i + 1 ] ;
rank: 911
score: 99.28260091145833
patch: hash = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 911
score: 99.25932094029018
patch: sum += p 1 [ i ] - p $NUMBER$ [ i +
rank: 911
score: 99.24898529052734
patch: final start = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 911
score: 99.2400634765625
patch: int dp = name [ i ] - p $NUMBER$ [ i ] ;
rank: 911
score: 99.22987467447916
patch: int [ ] sum = new int [ p 1 . length ] ;
rank: 911
score: 99.22771344866071
patch: final int dp = p 1 [ i ] - ( int ;
rank: 911
score: 99.19504018930289
patch: final int dp = p 1 [ i ] / $STRING$ ;
rank: 912
score: 99.31841278076172
patch: dp [ = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 912
score: 99.30977630615234
patch: Object dp = dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 912
score: 99.25928548177083
patch: final int dp = p 1 > i + p $NUMBER$ [ i ]
rank: 912
score: 99.2484619140625
patch: item = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 912
score: 99.22661884014423
patch: int dp = dp ] - p $NUMBER$ [ i ] ;
rank: 912
score: 99.21742600661058
patch: int [ ] p 1 = p 1 [ i ] ;
rank: 912
score: 99.19420514787946
patch: dp 1 [ i ] = p $NUMBER$ [ i ] ; }
rank: 913
score: 99.2581787109375
patch: sum += p 1 : p 1 [ i ] ; }
rank: 913
score: 99.2473876953125
patch: minimum += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 913
score: 99.23837890625
patch: final int dp = p 1 [ i ] - [ 1 ] ;
rank: 913
score: 99.22423444475446
patch: final int dp 1 = p 1 [ i ] - 1 ;
rank: 913
score: 99.1941669170673
patch: final int dp ; dp = p 1 [ i ] ;
rank: 914
score: 99.25804036458334
patch: return p $NUMBER$ [ i ] + p $NUMBER$ [ i ] ; }
rank: 914
score: 99.247314453125
patch: bounds = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 914
score: 99.23612758091518
patch: final int dp = p 1 [ i ] [ $STRING$ ] ;
rank: 914
score: 99.21499197823661
patch: final int [ ] p 1 = new int [ i ] ;
rank: 915
score: 99.31649780273438
patch: final int dp = p 1 [ i ] - p $NUMBER$ >> i ;
rank: 915
score: 99.27956918569711
patch: int dp = p 1 [ i ] + 1 $NUMBER$ ;
rank: 915
score: 99.2469970703125
patch: dimension = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 915
score: 99.21963065011161
patch: if ( p 1 [ i ] instanceof double [ ] ) {
rank: 915
score: 99.21865234375
patch: int dp = p 1 [ i ] . get ( dp ) ;
rank: 915
score: 99.19130295973558
patch: final int dp = p 1 [ i ] + true ;
rank: 916
score: 99.25752766927083
patch: final int dp = p 1 : p 1 1 [ i ] ;
rank: 916
score: 99.24695638020833
patch: preferred = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 916
score: 99.21888146033653
patch: final int dp = p 1 [ i ] ; if ;
rank: 916
score: 99.2138671875
patch: final int [ ] dp = new int [ $NUMBER$ ] ;
rank: 916
score: 99.19105747767857
patch: final int dp 1 = 1 - p 1 [ i ] ;
rank: 917
score: 99.31489562988281
patch: final int dp = in [ i ] - p $NUMBER$ [ i ] ;
rank: 917
score: 99.25703938802083
patch: sum += p 1 [ i ] - p $NUMBER$ [ i ] ?
rank: 917
score: 99.2460693359375
patch: r = p 1 [ i ] - p 1 [ i ] ;
rank: 917
score: 99.2181884765625
patch: int dp = p 1 [ i ] . distance ( dp ) ;
rank: 917
score: 99.21583775111607
patch: final int dp = p $NUMBER$ [ i ] [ 1 ] ;
rank: 917
score: 99.21360560825893
patch: final int [ ] Comparable dp = p 1 [ i ] ;
rank: 917
score: 99.19071742466518
patch: final final int dp = p 1 [ i - i ] ;
rank: 918
score: 99.27811104910714
patch: final int dp = p 1 [ i ] & 0 dp ;
rank: 918
score: 99.24589029947917
patch: x += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 918
score: 99.21808268229167
patch: int += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 918
score: 99.2134258563702
patch: final int dp = p 1 [ i ] == null ;
rank: 918
score: 99.19039481026786
patch: final final int dp = p 1 [ i + i ] ;
rank: 919
score: 99.25375162760416
patch: final int dp = p 1 [ i ] - p $NUMBER$ - i
rank: 919
score: 99.21782575334821
patch: int dp = int [ ] + p 1 [ i ] ;
rank: 919
score: 99.21247209821429
patch: for p 1 [ i ] = p $NUMBER$ [ i ] ;
rank: 919
score: 99.18983811598558
patch: final int dp = p 1 [ i + dp ] ;
rank: 920
score: 99.25306803385416
patch: sum += p 1 [ i ] <= p $NUMBER$ [ i ] ?
rank: 920
score: 99.24574381510416
patch: z = p 1 [ i ] - p 1 [ i ] ;
rank: 920
score: 99.21236478365384
patch: final int [ ] dp = exp 1 [ i ] ;
rank: 920
score: 99.21230844350961
patch: final double dp = p 1 [ i ] - 1 ;
rank: 921
score: 99.25266927083334
patch: int dp = p 1 - i - p $NUMBER$ [ i ] ;
rank: 921
score: 99.24562174479166
patch: cell = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 921
score: 99.21538899739583
patch: sum += p $NUMBER$ [ i ] - dp $NUMBER$ [ i ] ;
rank: 921
score: 99.21086774553571
patch: if ( p 1 [ i ] == - 1 ) continue ;
rank: 921
score: 99.1890869140625
patch: final int dp = p $NUMBER$ [ i - i ] ;
rank: 922
score: 99.296630859375
patch: sum += distance 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 922
score: 99.27576497395833
patch: dp = p 1 [ i ] - start $NUMBER$ [ i ] ;
rank: 922
score: 99.25215657552083
patch: sum += p 1 . length - p $NUMBER$ [ i ] ; }
rank: 922
score: 99.24447428385416
patch: array = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 922
score: 99.2124755859375
patch: int dp = dp [ i ] + p $NUMBER$ [ i ] ;
rank: 922
score: 99.18857985276442
patch: final int dp p 1 = p 1 [ i ] ;
rank: 923
score: 99.27434430803571
patch: final int dp = p 1 [ i ] + 1 ] ;
rank: 923
score: 99.25047084263393
patch: sum += p 1 [ i ] <= p $NUMBER$ [ i ]
rank: 923
score: 99.2440185546875
patch: ip = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 923
score: 99.21241978236607
patch: int dp = [ i ] - p 1 [ i ] ;
rank: 923
score: 99.20988246372768
patch: final int [ ] p 1 = new int [ 1 ] ;
rank: 923
score: 99.18777029854911
patch: final int dp i = p 1 [ i - $NUMBER$ ] ;
rank: 924
score: 99.29436848958333
patch: if ( p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 924
score: 99.27303873697916
patch: ret = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 924
score: 99.24994303385417
patch: return p 1 [ i ] / p $NUMBER$ [ i ] ; }
rank: 924
score: 99.24400227864584
patch: ch = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 924
score: 99.2278564453125
patch: final int dp = p 1 i - p 1 [ i ] ;
rank: 924
score: 99.2095196063702
patch: final int dp = ( ) p 1 [ i ] ;
rank: 924
score: 99.20182582310268
patch: final int dp = p $NUMBER$ [ p 1 [ i ] ;
rank: 924
score: 99.18766566685268
patch: final int dp [ ] = p 1 [ [ i ] ;
rank: 925
score: 99.2434326171875
patch: instance = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 925
score: 99.2119140625
patch: sum += dp $NUMBER$ [ i ] - p 1 [ i ] ;
rank: 925
score: 99.20949143629808
patch: final int dp = p 1 [ i ] != null ;
rank: 925
score: 99.1979229266827
patch: if ( p 1 [ i ] != - 1 ) {
rank: 925
score: 99.18722098214286
patch: final int dp = 0 ] - p $NUMBER$ [ i ] ;
rank: 926
score: 99.2470458984375
patch: sum += dp 1 [ i ] + p $NUMBER$ [ i ] +
rank: 926
score: 99.24339192708334
patch: working = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 926
score: 99.20869663783482
patch: final int < Object > dp = p 1 [ i ] ;
rank: 926
score: 99.19717843191964
patch: final int dp = p 1 [ i ] >> >= 1 ;
rank: 926
score: 99.18686349051339
patch: final int dp = p 1 [ i - i ] ] ;
rank: 927
score: 99.2457763671875
patch: sum += p 1 [ i ] < p $NUMBER$ [ i ] +
rank: 927
score: 99.24319661458334
patch: s = p 1 [ i ] - p 1 [ i ] ;
rank: 927
score: 99.2075946514423
patch: final int dp = i + p 1 [ i ] ;
rank: 927
score: 99.19650503305289
patch: if ( p 1 [ i ] != 0 ) continue ;
rank: 927
score: 99.18678635817308
patch: final int dp = p 1 [ i ] ; this }
rank: 928
score: 99.2428466796875
patch: orig = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 928
score: 99.2226318359375
patch: the = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 928
score: 99.21065848214286
patch: final int dp = dp ] - p $NUMBER$ [ i ] ;
rank: 928
score: 99.20696551983173
patch: final int dp = p 1 [ i ] & null ;
rank: 928
score: 99.19505818684895
patch: final int dp = p 1 [ i ] ) ;
rank: 928
score: 99.18595668247768
patch: final int dp = p 1 [ i ] , dp ++ }
rank: 929
score: 99.28875325520833
patch: sum = p 1 [ i ] - p 1 [ i ] ;
rank: 929
score: 99.27007184709821
patch: final double dp = p 1 [ i ] + p $NUMBER$ ;
rank: 929
score: 99.24541829427083
patch: final int dp = p 1 + i - p $NUMBER$ [ i ]
rank: 929
score: 99.241748046875
patch: max = p 1 [ i ] - p 1 [ i ] ;
rank: 929
score: 99.21990094866071
patch: int dp = p 1 ) - p $NUMBER$ [ i ] ;
rank: 929
score: 99.20955403645833
patch: final int dp = p 1 [ i ] - p $NUMBER$ [ }
rank: 929
score: 99.20682466947116
patch: int dp = p 1 [ i ] [ 0 ] ;
rank: 929
score: 99.1924579326923
patch: final int dp = p 1 [ i ] << $NUMBER$ ;
rank: 929
score: 99.18458775111607
patch: final int dp ; { dp = p 1 [ i ] ;
rank: 930
score: 99.28812662760417
patch: sum += p 1 [ 0 ] - p $NUMBER$ [ i ] ;
rank: 930
score: 99.26988118489584
patch: middle = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 930
score: 99.24534388950893
patch: sum += [ i ] - p $NUMBER$ [ i ] ; }
rank: 930
score: 99.24132486979167
patch: first = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 930
score: 99.21988118489584
patch: final int dp = 1 - i - p $NUMBER$ [ i ] ;
rank: 930
score: 99.20668247767857
patch: final int dp = p $NUMBER$ [ i ] [ 0 ] ;
rank: 930
score: 99.18198939732143
patch: final int dp dp = p 1 [ i + 1 ] ;
rank: 931
score: 99.26886455829327
patch: p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 931
score: 99.24424641927084
patch: final int dp = p 1 ++ - p $NUMBER$ [ i ] ;
rank: 931
score: 99.24088541666667
patch: path = p 1 [ i ] - p 1 [ i ] ;
rank: 931
score: 99.20628138950893
patch: final int < double > dp = p 1 [ i ] ;
rank: 931
score: 99.20186070033482
patch: final int dp = distance ( p 1 [ i ] ) ;
rank: 931
score: 99.18160574776786
patch: final final int dp = p 1 [ i - $NUMBER$ ] ;
rank: 932
score: 99.29451497395833
patch: int dp = p 1 [ i ] - p $NUMBER$ . i ;
rank: 932
score: 99.28642578125
patch: null = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 932
score: 99.24400227864584
patch: int dp = p 1 [ i ] - p $NUMBER$ : $NUMBER$ ;
rank: 932
score: 99.2400146484375
patch: img = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 932
score: 99.20595877511161
patch: for p 1 [ i ] = p 1 [ i ] ;
rank: 932
score: 99.18809291294643
patch: if ( p 1 [ i ] == null ) return 0 ;
rank: 932
score: 99.18116978236607
patch: final int dp $NUMBER$ = p 1 [ i - $NUMBER$ ] ;
rank: 933
score: 99.26796177455357
patch: final int dp = p $NUMBER$ [ i ] + p $NUMBER$ ;
rank: 933
score: 99.24383951822917
patch: sum = p 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 933
score: 99.239599609375
patch: j += p 1 [ i ] - p 1 [ i ] ;
rank: 933
score: 99.20526994977679
patch: final int < int > dp = p $NUMBER$ [ i ] ;
rank: 933
score: 99.19975934709821
patch: int dp = p 1 ] - p 1 [ i ] ;
rank: 933
score: 99.18619210379464
patch: final int dp = p 1 [ i ] - i ; ;
rank: 934
score: 99.28573404947916
patch: i = distance 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 934
score: 99.26608712332589
patch: p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ; }
rank: 934
score: 99.24331868489584
patch: final int dp = p 1 : int [ ] - p $NUMBER$ ;
rank: 934
score: 99.2130596454327
patch: return dp [ i ] - p $NUMBER$ [ i ] ;
rank: 934
score: 99.20325646033653
patch: final Object dp [ ] = p 1 [ i ] ;
rank: 934
score: 99.1978290264423
patch: final int dp = p 1 [ i ] - dp ;
rank: 934
score: 99.18067278180804
patch: final int dp ; int dp = p 1 [ i ] ;
rank: 935
score: 99.28310546875
patch: top = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 935
score: 99.26604352678571
patch: final int dp = p 1 [ i ] - System $NUMBER$ ;
rank: 935
score: 99.239111328125
patch: score = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 935
score: 99.20101224459134
patch: final int dp [ ] = dp 1 [ i ] ;
rank: 935
score: 99.17854527064732
patch: final int dp 1 = i - p $NUMBER$ [ i ] ;
rank: 936
score: 99.24072265625
patch: final int dp = p 1 : p 1 : i ;
rank: 936
score: 99.23815104166667
patch: ret += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 936
score: 99.19966343470982
patch: final int dp = p 1 [ i ] >> - 1 ;
rank: 936
score: 99.187255859375
patch: final int dp = p 1 [ i ] - sum ;
rank: 936
score: 99.18410081129808
patch: switch ( p 1 [ i ] ) { case 0 :
rank: 936
score: 99.1771709735577
patch: final int dp = Math = p $NUMBER$ [ i ] ;
rank: 937
score: 99.26516287667411
patch: final int dp = p $NUMBER$ [ i ] + 1 $NUMBER$ ;
rank: 937
score: 99.23746744791667
patch: align += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 937
score: 99.21018880208334
patch: final int dp = $NUMBER$ - i - p $NUMBER$ [ i ] ;
rank: 937
score: 99.19876534598214
patch: final String dp = p 1 [ i ] [ i ] ;
rank: 937
score: 99.18338716947116
patch: final float dp = p 1 [ i ] - 1 ;
rank: 937
score: 99.17604282924107
patch: final p 1 [ i ] = p 1 [ i ] ;
rank: 937
score: 99.17294311523438
patch: final int dp = p 1 [ i ] ] ;
rank: 938
score: 99.28098842075893
patch: for ( int [ ] dp = p 1 [ i ] ;
rank: 938
score: 99.27945149739584
patch: dp < p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 938
score: 99.26392473493304
patch: int dp = p 1 [ i ] - p $NUMBER$ i ;
rank: 938
score: 99.23738316127232
patch: if ( p 1 [ i ] - p $NUMBER$ [ i ]
rank: 938
score: 99.23578287760417
patch: word = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 938
score: 99.20939127604167
patch: static += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 938
score: 99.19780622209821
patch: final int dp = ( String ) p 1 [ i ] ;
rank: 938
score: 99.17122708834134
patch: final int dp = 0 - dp $NUMBER$ [ i ] ;
rank: 939
score: 99.23616245814732
patch: final Object dp = p 1 : p 1 [ i ] ;
rank: 939
score: 99.23545735677084
patch: left += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 939
score: 99.18267822265625
patch: if ( p 1 [ i ] == - 1 ) break ;
rank: 939
score: 99.17230224609375
patch: dp = dp [ i ] - p $NUMBER$ [ i ] ;
rank: 939
score: 99.17107684795673
patch: final int dp = p 1 [ i ] + this ;
rank: 940
score: 99.27396647135417
patch: dp -= p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 940
score: 99.25374930245536
patch: final String dp = p 1 [ i ] - $STRING$ $NUMBER$ ;
rank: 940
score: 99.23612758091518
patch: sum += p 1 [ i ] == p $NUMBER$ [ i ]
rank: 940
score: 99.23513997395834
patch: column = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 940
score: 99.20563151041667
patch: y = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 940
score: 99.18197195870536
patch: switch ( p 1 [ i ] ) { case - 1 :
rank: 940
score: 99.17177036830357
patch: p 1 [ i ] = p 1 [ i ] ; }
rank: 940
score: 99.16872934194711
patch: final int dp = 0 ; final int dp = 1 ;
rank: 941
score: 99.23507486979166
patch: parsed = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 941
score: 99.23175518329327
patch: sum += p 1 + p $NUMBER$ [ i ] ; }
rank: 941
score: 99.19561767578125
patch: final int [ ] p 1 = dp $NUMBER$ [ i ] ;
rank: 941
score: 99.18036760602679
patch: final int dp = 1 1 [ p 1 [ i ] ;
rank: 941
score: 99.17133440290179
patch: final int dp = dp ] - p 1 [ i ] ;
rank: 941
score: 99.16855875651042
patch: final int dp i = p 1 [ i ] ;
rank: 942
score: 99.25191824776786
patch: final int dp = p 1 [ i ] - 1 1 ;
rank: 942
score: 99.23484700520834
patch: n = p 1 [ i ] - p 1 [ i ] ;
rank: 942
score: 99.23080679086539
patch: final int dp = p 1 : p $NUMBER$ : i ;
rank: 942
score: 99.1684100811298
patch: final int dp p $NUMBER$ = p 1 [ i ] ;
rank: 943
score: 99.25050706129808
patch: final String dp = p 1 [ i ] - $STRING$ ;
rank: 943
score: 99.23448079427084
patch: rect = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 943
score: 99.22760009765625
patch: int dp = p 1 [ i + p $NUMBER$ [ i ]
rank: 943
score: 99.20432942708334
patch: final int dp = p 1 , p $NUMBER$ = i - i ;
rank: 943
score: 99.19510591947116
patch: final String dp [ ] = p $NUMBER$ [ i ] ;
rank: 943
score: 99.17005266462054
patch: final int dp = int 1 [ p 1 [ i ] ;
rank: 943
score: 99.16829740084134
patch: int dp = p 1 [ i ] ; dp -- ;
rank: 944
score: 99.24784633091518
patch: final Integer dp = p 1 [ i ] - 1 $NUMBER$ ;
rank: 944
score: 99.23448079427084
patch: x += p 1 [ i ] - p 1 [ i ] ;
rank: 944
score: 99.22705078125
patch: double dp = p 1 : p 1 [ i ] ;
rank: 944
score: 99.201416015625
patch: int dp = p 1 + p 1 [ i ] ;
rank: 944
score: 99.19268329326923
patch: final boolean dp = p 1 [ i ] != null ;
rank: 944
score: 99.17979847301136
patch: final float dp = p 1 [ i ] ;
rank: 944
score: 99.16939603365384
patch: int dp = p 1 - p 1 [ i ] ;
rank: 945
score: 99.2466571514423
patch: final int dp = p 1 [ i ] - System ;
rank: 945
score: 99.23422037760416
patch: S = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 945
score: 99.22527204241071
patch: sum += dp 1 [ i ] == p $NUMBER$ [ i ]
rank: 945
score: 99.19182880108173
patch: final int [ ] min = p 1 [ i ] ;
rank: 945
score: 99.16214693509616
patch: final int dp = p 1 [ i ] ; / /
rank: 946
score: 99.2730712890625
patch: for ( int [ ] dp : p 1 [ i ] ) {
rank: 946
score: 99.23317057291666
patch: begin += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 946
score: 99.19684709821429
patch: return dp 1 [ i ] + p $NUMBER$ [ i ] ;
rank: 946
score: 99.19019493689903
patch: final int [ ] dp = p 1 [ $NUMBER$ ] ;
rank: 947
score: 99.27257486979167
patch: distance += p $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 947
score: 99.26180013020833
patch: dp -= p 1 [ i ] - p 1 [ i ] ;
rank: 947
score: 99.24185616629464
patch: final double dp = p 1 [ i ] - 1 $NUMBER$ ;
rank: 947
score: 99.232958984375
patch: v += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 947
score: 99.18949068509616
patch: final double [ ] dp = p $NUMBER$ [ i ] ;
rank: 947
score: 99.17335862379808
patch: final int dp = 1 + p $NUMBER$ [ i ] ;
rank: 947
score: 99.16816057477679
patch: int dp = p 1 [ i ] $NUMBER$ [ i ] ;
rank: 947
score: 99.15963040865384
patch: final int dp = $STRING$ - p $NUMBER$ [ i ] ;
rank: 948
score: 99.269287109375
patch: sum += dp 1 [ i ] - p $NUMBER$ [ 1 ] ;
rank: 948
score: 99.24128941127232
patch: int dp = p 1 [ i ] - p $NUMBER$ ] ;
rank: 948
score: 99.2322021484375
patch: base = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 948
score: 99.18680513822116
patch: final Integer [ ] dp = p 1 [ i ] ;
rank: 948
score: 99.15894493689903
patch: final int dp [ ] = p 1 [ 0 ] ;
rank: 949
score: 99.2687255859375
patch: dp = p 1 [ 0 ] - p $NUMBER$ [ i ] ;
rank: 949
score: 99.23987755408653
patch: final String dp = p 1 [ i ] + $STRING$ ;
rank: 949
score: 99.23018391927083
patch: res = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 949
score: 99.21758161272321
patch: sum += p 1 [ i + p $NUMBER$ [ i ] +
rank: 949
score: 99.1907958984375
patch: sum += distance [ i ] - p $NUMBER$ [ i ] ;
rank: 949
score: 99.18668306790866
patch: int dp = p 1 [ i ] [ 1 ] ;
rank: 949
score: 99.1697528545673
patch: int dp = p 1 [ p $NUMBER$ [ i ] ;
rank: 949
score: 99.16644287109375
patch: int dp = p 1 [ i ] 1 [ dp ] ;
rank: 949
score: 99.157958984375
patch: final int dp >= 0 = p 1 [ i ] ;
rank: 950
score: 99.25778634207589
patch: final float dp = p 1 [ i ] [ i ] ;
rank: 950
score: 99.23902239118304
patch: final int dp = p $NUMBER$ [ i ] & p $NUMBER$ ;
rank: 950
score: 99.23011881510416
patch: image = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 950
score: 99.21697126116071
patch: final int dp = p 1 [ i ] & 0 i ;
rank: 950
score: 99.18555626502403
patch: final boolean [ ] dp = p 1 [ i ] ;
rank: 950
score: 99.16944298377403
patch: final int dp = p 1 [ i ] - max ;
rank: 950
score: 99.1576397235577
patch: final int dp = p 1 [ i ] ; / *
rank: 951
score: 99.25724283854167
patch: int dp = 0 [ i ] - p 1 [ i ] ;
rank: 951
score: 99.23816789899554
patch: assert p 1 [ i ] < p $NUMBER$ [ i ] ;
rank: 951
score: 99.23008626302084
patch: m += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 951
score: 99.21521868024554
patch: sum += p $NUMBER$ [ i ] + p $NUMBER$ [ i ]
rank: 951
score: 99.18770054408482
patch: final int dp = p 1 , p $NUMBER$ [ i ] ;
rank: 951
score: 99.15692608173077
patch: final int dp = p 1 [ i ] int } ;
rank: 952
score: 99.23522010216347
patch: int dp = p 1 [ i ] % p $NUMBER$ ;
rank: 952
score: 99.21511404854911
patch: int dp = p 1 [ i ] - p $NUMBER$ : i
rank: 952
score: 99.186767578125
patch: final int dp = p 1 [ i ] , p $NUMBER$ ;
rank: 952
score: 99.18211951622597
patch: final int dp = $STRING$ + p $NUMBER$ [ i ] ;
rank: 952
score: 99.15638146033653
patch: final int dp = p $NUMBER$ [ i + i ] ;
rank: 953
score: 99.23226224459134
patch: int dp = p 1 [ i ] + i $NUMBER$ ;
rank: 953
score: 99.22976888020834
patch: itr = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 953
score: 99.16719876802884
patch: if ( p 1 [ i ] != 0 ) break ;
rank: 953
score: 99.15395883413461
patch: final int dp = p 1 [ i ] ; dp :
rank: 954
score: 99.22913411458333
patch: start += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 954
score: 99.2288818359375
patch: final int dp = p 1 [ i ] - get ;
rank: 954
score: 99.20967320033482
patch: final int i = p 1 : p 1 [ i ] ;
rank: 954
score: 99.18418666294643
patch: final int dp = p 1 < p 1 [ i ] ;
rank: 954
score: 99.16673865685097
patch: final int i = p 1 [ i ] - i ;
rank: 954
score: 99.15338604266827
patch: final int dp = 0 ; final int dp = i ;
rank: 955
score: 99.26101449819711
patch: final int dp = p 1 [ i ] - } ;
rank: 955
score: 99.228759765625
patch: source = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 955
score: 99.20879255022321
patch: return dp [ i ] + p $NUMBER$ [ i ] ; }
rank: 955
score: 99.17693536931819
patch: final Object dp = p 1 [ i ] ;
rank: 955
score: 99.1613300030048
patch: int dp = dp ] - p 1 [ i ] ;
rank: 956
score: 99.22860514322916
patch: res += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 956
score: 99.22625262920673
patch: final Integer dp = p 1 [ i ] - 1 ;
rank: 956
score: 99.20730154854911
patch: sum += p 1 [ i ] [ p $NUMBER$ [ i ]
rank: 956
score: 99.18137904575893
patch: final int dp = i ) - p $NUMBER$ [ i ] ;
rank: 956
score: 99.17665452223558
patch: final int [ ] 0 = p 1 [ i ] ;
rank: 956
score: 99.16131591796875
patch: int dp = int i ] - p $NUMBER$ [ i ] ;
rank: 956
score: 99.15044696514423
patch: final int dp dp i = p 1 [ i ] ;
rank: 957
score: 99.228466796875
patch: selection = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 957
score: 99.20361328125
patch: final int dp = p 1 [ i ] - p $NUMBER$
rank: 957
score: 99.18073381696429
patch: final int dp = p 1 [ i ] ; sum ++ ;
rank: 957
score: 99.16067068917411
patch: int dp = p 1 [ i ] - p $NUMBER$ ) ;
rank: 957
score: 99.15968674879808
patch: dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 958
score: 99.2272705078125
patch: final int dp = p 1 [ i ] - int [ ] ;
rank: 958
score: 99.20262732872597
patch: final int dp = p 1 : p 1 [ i ]
rank: 958
score: 99.17973981584821
patch: final int dp = p 1 | p $NUMBER$ [ i ] ;
rank: 958
score: 99.17569673978366
patch: final byte [ ] dp = p 1 [ i ] ;
rank: 958
score: 99.15740497295673
patch: final double dp = p 1 [ i ] - i ;
rank: 958
score: 99.15560477120536
patch: final int dp = p 1 [ [ i ] - $NUMBER$ ;
rank: 959
score: 99.14618389423077
patch: final int dp dp 1 = p 1 [ i ] ;
rank: 960
score: 99.22686360677083
patch: obj = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 960
score: 99.2227313701923
patch: int dp = p 1 [ i ] & p $NUMBER$ ;
rank: 960
score: 99.20011683872768
patch: sum = p 1 [ i ] - p $NUMBER$ [ i ]
rank: 960
score: 99.17316143329327
patch: final byte dp [ ] = p 1 [ i ] ;
rank: 960
score: 99.15478515625
patch: final int dp = p 1 [ i ] << 1 ;
rank: 960
score: 99.15107945033482
patch: p 1 [ i ] = p $NUMBER$ [ i ] ; }
rank: 960
score: 99.14511343149039
patch: int [ ] p $NUMBER$ = p 1 [ i ] ;
rank: 961
score: 99.19740513392857
patch: return distance [ i ] - p $NUMBER$ [ i ] ; }
rank: 961
score: 99.17874581473214
patch: return dp $NUMBER$ [ i ] - p $NUMBER$ [ i ] ;
rank: 961
score: 99.173095703125
patch: int dp = p 1 [ i ] [ $NUMBER$ ] ;
rank: 961
score: 99.15082659040179
patch: final int dp = p 1 [ i + p 1 ] ;
rank: 961
score: 99.14459698016827
patch: final int dp = p 1 [ i - dp ] ;
rank: 962
score: 99.22556966145834
patch: marker = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 962
score: 99.21798270089286
patch: final int dp = p $NUMBER$ [ i ] + i $NUMBER$ ;
rank: 962
score: 99.19731794084821
patch: sum += dp 1 [ i ] > p $NUMBER$ [ i ]
rank: 962
score: 99.14307579627403
patch: final final int dp dp = p 1 [ i ] ;
rank: 963
score: 99.2249267578125
patch: x = p 1 [ i ] - p 1 [ i ] ;
rank: 963
score: 99.21615835336539
patch: int dp = p 1 [ i ] - $STRING$ $NUMBER$ ;
rank: 963
score: 99.19607979910714
patch: final int dp = dp 1 : p $NUMBER$ [ i ] ;
rank: 963
score: 99.17274983723958
patch: int [ ] dp = p 1 [ i ] ;
rank: 963
score: 99.16968645368304
patch: final int dp = p 1 < p $NUMBER$ [ i ] ;
rank: 963
score: 99.1429443359375
patch: final int dp = p 1 [ i / 1 ] ;
rank: 964
score: 99.24046107700893
patch: final int dp = p 1 [ i + - $NUMBER$ ] ;
rank: 964
score: 99.22773088727679
patch: final float dp = p 1 [ i ] - p $NUMBER$ ;
rank: 964
score: 99.22458321707589
patch: final int dp = p 1 [ i ] - p $NUMBER$ [
rank: 964
score: 99.21613420758929
patch: final int dp = p 1 [ i ] - start ] ;
rank: 964
score: 99.19521658761161
patch: sum += dp 1 [ i ] [ p $NUMBER$ [ i ]
rank: 964
score: 99.17005333533653
patch: final boolean dp = p 1 [ i ] == null ;
rank: 964
score: 99.14283165564903
patch: final int dp 1 = p 1 [ i ] ] ;
rank: 965
score: 99.2245361328125
patch: panel = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 965
score: 99.19510323660714
patch: final String dp = p 1 : p 1 [ i ] ;
rank: 965
score: 99.16461181640625
patch: final int dp = p 1 + i - [ i ] ;
rank: 965
score: 99.14722618689903
patch: if ( p 1 [ i ] > - 1 ) {
rank: 965
score: 99.14195838341347
patch: final int dp - 1 = p 1 [ i ] ;
rank: 965
score: 99.1358173076923
patch: final int dp = p 1 [ i ] - key ;
rank: 966
score: 99.22624860491071
patch: final Integer dp = p 1 [ i ] [ i ] ;
rank: 966
score: 99.22451985677084
patch: n += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 966
score: 99.21470289963942
patch: final int dp = p $NUMBER$ [ i ] - start ;
rank: 966
score: 99.19396033653847
patch: final int dp = p 1 : i - p $NUMBER$ ;
rank: 966
score: 99.16692645733173
patch: int dp = p 1 [ i ] & - $NUMBER$ ;
rank: 966
score: 99.14593036358173
patch: dp 0 [ i ] = p $NUMBER$ [ i ] ;
rank: 966
score: 99.14058743990384
patch: final int dp = $NUMBER$ - p 1 [ i ] ;
rank: 967
score: 99.19390869140625
patch: sum += dp 1 [ i ] <= p $NUMBER$ [ i ]
rank: 967
score: 99.1666259765625
patch: final String dp = p 1 [ i ] ;
rank: 967
score: 99.16379018930289
patch: return distance [ i ] - p $NUMBER$ [ i ] ;
rank: 967
score: 99.14327298677884
patch: final int start = p 1 [ i ] - 1 ;
rank: 967
score: 99.14005220853366
patch: final int dp = new int dp 1 [ i ] ;
rank: 968
score: 99.22394205729167
patch: final return dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 968
score: 99.2107403094952
patch: int dp = p 1 [ i ] & 0 ] ;
rank: 968
score: 99.19347272600446
patch: final int dp = p $NUMBER$ : p 1 [ i ] ;
rank: 968
score: 99.16552734375
patch: int dp = ( int ) p $NUMBER$ [ i ] ;
rank: 968
score: 99.14304762620192
patch: Double dp = ( Double ) p 1 [ i ] ;
rank: 968
score: 99.13985501802884
patch: final int dp = p 1 [ i / i ] ;
rank: 968
score: 99.13274676983173
patch: final int dp = p 1 [ i ] : 0 ;
rank: 969
score: 99.2235595703125
patch: listener = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 969
score: 99.19342912946429
patch: dp = p 1 [ i ] - p $NUMBER$ : 0 ;
rank: 969
score: 99.16100202287946
patch: final int dp = p 1 | p 1 [ i ] ;
rank: 969
score: 99.14229642427884
patch: final int dp $NUMBER$ = p 1 [ i ] ) ;
rank: 969
score: 99.137939453125
patch: final int dp dp $NUMBER$ = p 1 [ i ] ;
rank: 970
score: 99.22817758413461
patch: final int dp = p 1 [ 1 [ i ] ;
rank: 970
score: 99.22294108072917
patch: delta = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 970
score: 99.21670096261161
patch: final int dp = p 1 [ i ] [ p $NUMBER$ ;
rank: 970
score: 99.16225961538461
patch: final int [ ] in = p 1 [ i ] ;
rank: 970
score: 99.16067068917411
patch: final int dp = read ( p 1 [ i ] ) ;
rank: 970
score: 99.13756385216347
patch: final int dp dp -- = p 1 [ i ] ;
rank: 970
score: 99.13434307391827
patch: final int dp = p $NUMBER$ [ i ] + $STRING$ ;
rank: 971
score: 99.22284342447917
patch: in = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 971
score: 99.21495710100446
patch: final int dp = p 1 [ i ] < p $NUMBER$ ;
rank: 972
score: 99.22190755208334
patch: frame = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 972
score: 99.21473911830357
patch: dp = 0 [ i ] - p $NUMBER$ [ i ] ;
rank: 972
score: 99.18944440569196
patch: if ( dp 1 [ i ] + p $NUMBER$ [ i ]
rank: 972
score: 99.16086989182692
patch: final int [ ] exp = p 1 [ i ] ;
rank: 972
score: 99.15424455915179
patch: final int dp = p $NUMBER$ + p 1 [ i ] ;
rank: 972
score: 99.13738544170673
patch: final final final int dp = p 1 [ i ] ;
rank: 972
score: 99.13304725060097
patch: final int dp = p 1 [ i ] + dp ;
rank: 973
score: 99.2218017578125
patch: sash = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 973
score: 99.21531325120192
patch: final int dp = p 1 [ i ] - min ;
rank: 973
score: 99.18792724609375
patch: final int dp = p 1 + dp $NUMBER$ [ i ] ;
rank: 973
score: 99.18531212439903
patch: int dp = p 1 [ i ] & 0 $NUMBER$ ;
rank: 973
score: 99.16054124098558
patch: final float [ ] dp = p 1 [ i ] ;
rank: 973
score: 99.1329012784091
patch: final int i = p 1 [ i ] ;
rank: 973
score: 99.1192626953125
patch: dp [ i ] = p 1 [ i ] ;
rank: 973
score: 99.11239858774039
patch: int dp = new int [ p 1 [ i ] ;
rank: 974
score: 99.21988932291667
patch: button = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 974
score: 99.18612905649039
patch: return p 1 [ i ] + p $NUMBER$ [ i ]
rank: 975
score: 99.21849772135417
patch: dl = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 975
score: 99.15887920673077
patch: final char dp [ ] = p 1 [ i ] ;
rank: 975
score: 99.10037935697116
patch: final int dp = ] - p 1 [ i ] ;
rank: 975
score: 99.09124755859375
patch: final int dp = p 1 [ [ i ] ;
rank: 976
score: 99.21844889322917
patch: level = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 976
score: 99.21106828962054
patch: for ( int dp = i - p $NUMBER$ [ i ] ;
rank: 976
score: 99.17983774038461
patch: final int dp = p 1 > p $NUMBER$ [ i ]
rank: 976
score: 99.15796837439903
patch: int dp = p $NUMBER$ [ i ] [ i ] ;
rank: 976
score: 99.129931640625
patch: double dp = p 1 [ i ] ;
rank: 976
score: 99.08932495117188
patch: final int dp 1 = p $NUMBER$ [ i ] ;
rank: 977
score: 99.17672025240384
patch: int dp = p 1 [ i ] & - 1 ;
rank: 977
score: 99.174560546875
patch: final int dp = p 1 + p $NUMBER$ : i ;
rank: 977
score: 99.13189227764423
patch: final int dp = $STRING$ + p 1 [ i ] ;
rank: 977
score: 99.09821026141827
patch: final int dp = int + p 1 [ i ] ;
rank: 977
score: 99.0775655110677
patch: final int p $NUMBER$ = p 1 [ i ] ;
rank: 978
score: 99.2166748046875
patch: exp = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 978
score: 99.1739971454327
patch: return p 1 [ i ] - p $NUMBER$ [ i ]
rank: 978
score: 99.15651292067308
patch: int dp = ( Integer ) p 1 [ i ] ;
rank: 978
score: 99.12703763521634
patch: final int dp = p 1 , [ ] [ ] ;
rank: 979
score: 99.21664225260416
patch: delta += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 979
score: 99.175048828125
patch: int dp = p 1 [ i ] + i ] ;
rank: 979
score: 99.17398775540866
patch: sum += p 1 : p $NUMBER$ [ i ] ; }
rank: 979
score: 99.15357555042614
patch: final int dp = p 1 [ 0 ] ;
rank: 979
score: 99.12777944711539
patch: final int dp = p 1 [ i ] * $NUMBER$ ;
rank: 979
score: 99.12139423076923
patch: final int dp = p 1 , p $NUMBER$ = i ;
rank: 979
score: 99.06526692708333
patch: final int dp = p 1 [ i ] ; dp
rank: 980
score: 99.2166015625
patch: it = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 980
score: 99.2067401592548
patch: for ( int i = 0 ; i < p 1 [
rank: 980
score: 99.17472017728366
patch: final int dp = p 1 [ i ] & ] ;
rank: 980
score: 99.17234450120192
patch: final int dp = p 1 + p $NUMBER$ [ i ]
rank: 980
score: 99.15291654146634
patch: final double dp [ ] = p $NUMBER$ [ i ] ;
rank: 980
score: 99.11952561598558
patch: final int dp = $NUMBER$ + p 1 [ i ] ;
rank: 980
score: 99.05634099786931
patch: final int dp = dp 1 [ i ] ;
rank: 981
score: 99.2166015625
patch: folder = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 981
score: 99.1738750751202
patch: int dp = p 1 [ i ] - 1 ] ;
rank: 981
score: 99.16765887920673
patch: sum += p 1 + p 1 [ i ] ; }
rank: 981
score: 99.15114182692308
patch: final int [ ] start = p 1 [ i ] ;
rank: 981
score: 99.11492919921875
patch: int dp = p 1 [ i ] - 1 ;
rank: 981
score: 99.08804086538461
patch: final int dp = ] - p $NUMBER$ [ i ] ;
rank: 981
score: 99.02266068892045
patch: final int dp = p 1 [ 1 ] ;
rank: 982
score: 99.21640625
patch: toc = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 982
score: 99.17348069411058
patch: int dp = p 1 [ i ] - $NUMBER$ $NUMBER$ ;
rank: 982
score: 99.1630389873798
patch: final int dp = p 1 : p 1 - i ;
rank: 982
score: 99.1118672688802
patch: final int int dp = p 1 [ i ] ;
rank: 983
score: 99.2158935546875
patch: event = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 983
score: 99.10999474158653
patch: sum += [ i ] - p $NUMBER$ [ i ] ;
rank: 983
score: 99.10538736979167
patch: final int dp = p 1 [ i ] ; ;
rank: 983
score: 99.08713942307692
patch: int dp = distance ( p 1 [ i ] ) ;
rank: 984
score: 99.21559244791666
patch: picture = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 984
score: 99.16812838040866
patch: p 1 [ i ] += p $NUMBER$ [ i ] ;
rank: 984
score: 99.15244704026442
patch: sum += p 1 [ i + p $NUMBER$ [ i ]
rank: 984
score: 99.15081317608173
patch: final int dp = p $NUMBER$ [ i ] - 0 ;
rank: 984
score: 99.10828653971355
patch: final int dp = p 1 . [ i ] ;
rank: 984
score: 99.09738159179688
patch: final int dp 0 = p 1 [ i ] ;
rank: 984
score: 99.08669809194711
patch: int dp = i ] - p $NUMBER$ [ i ] ;
rank: 985
score: 99.21517740885416
patch: temp += p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 985
score: 99.16586538461539
patch: final int dp = p $NUMBER$ [ i ] + i ;
rank: 985
score: 99.14701021634616
patch: Object dp = p 1 : p 1 [ i ] ;
rank: 985
score: 99.09013671875
patch: float dp = p 1 [ i ] ;
rank: 985
score: 99.08495154747597
patch: int dp = get ( p 1 [ i ] ) ;
rank: 985
score: 99.001953125
patch: final Integer dp = p 1 [ i ] ;
rank: 986
score: 99.21444498697916
patch: ret += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 986
score: 99.09192911783855
patch: int dp [ ] = p 1 [ i ] ;
rank: 986
score: 99.07264293323864
patch: final double dp = p $NUMBER$ [ i ] ;
rank: 986
score: 99.001708984375
patch: final int dp = 1 [ i ] ;
rank: 987
score: 99.21431477864583
patch: bounds += dp 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 987
score: 99.14545147235577
patch: double dp = p 1 : p $NUMBER$ [ i ] ;
rank: 987
score: 99.08632590553977
patch: final int dp = - 1 [ i ] ;
rank: 987
score: 99.0564473470052
patch: if ( p 1 [ i ] != 0 ) {
rank: 988
score: 99.21287434895834
patch: i -= p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 988
score: 99.15924541766827
patch: final int dp = p $NUMBER$ [ i ] - $NUMBER$ ;
rank: 988
score: 99.05147298177083
patch: int dp = p 1 [ i ] - $NUMBER$ ;
rank: 988
score: 99.04461115056819
patch: final long dp = p 1 [ i ] ;
rank: 988
score: 98.98471901633523
patch: final int dp += p 1 [ i ] ;
rank: 989
score: 99.21279296875
patch: area = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 989
score: 98.97617409446023
patch: final int dp = max 1 [ i ] ;
rank: 990
score: 99.212646484375
patch: d = p 1 [ i ] - p 1 [ i ] ;
rank: 990
score: 99.1546630859375
patch: double dp = p 1 [ i ] - p $NUMBER$ ;
rank: 990
score: 99.14322603665866
patch: sum += dp 1 : p 1 [ i ] ; }
rank: 990
score: 99.01915486653645
patch: int dp = p 1 [ i ] . length ;
rank: 990
score: 98.9805575284091
patch: final char dp = p 1 [ i ] ;
rank: 990
score: 98.97387084960937
patch: int dp = p $NUMBER$ [ i ] ;
rank: 991
score: 99.21133626302084
patch: iter = p 1 [ i ] - p $NUMBER$ [ i ] ;
rank: 991
score: 99.15235314002403
patch: for ( int i = 0 ; i < p $NUMBER$ [
rank: 991
score: 99.14901968149039
patch: final double dp = p 1 [ i ] - start ;
rank: 991
score: 99.13597693810097
patch: final int dp = i - dp $NUMBER$ [ i ] ;
rank: 991
score: 98.92841796875
patch: final int dp = p 1 [ i ;
rank: 992
score: 99.08812537560097
patch: final int dp = p 1 [ } - i ] ;
rank: 992
score: 98.9324951171875
patch: final int sum = p 1 [ i ] ;
rank: 992
score: 98.87555541992188
patch: final int dp = 0 [ i ] ;
rank: 993
score: 99.1489727313702
patch: final int dp = p 1 [ $NUMBER$ [ i ] ;
rank: 993
score: 99.13407076322116
patch: sum += p 1 [ i ] & - $NUMBER$ ; }
rank: 993
score: 98.9305419921875
patch: String dp = p 1 [ i ] ;
rank: 994
score: 99.14820274939903
patch: if ( p 1 [ i ] == - $NUMBER$ ) {
rank: 994
score: 99.12802358774039
patch: int dp = p 1 [ i ] - p $NUMBER$ :
rank: 994
score: 99.08480130709134
patch: final int dp = p 1 [ i ] - distance ;
rank: 994
score: 98.92273559570313
patch: long dp = p 1 [ i ] ;
rank: 994
score: 98.91794655539773
patch: int dp = p 1 [ [ i ] ;
rank: 994
score: 98.84381103515625
patch: final int dp = 0 ;
rank: 995
score: 98.93325805664062
patch: int i = p 1 [ i ] ;
rank: 995
score: 98.91197374131944
patch: dp = p 1 [ i ] ;
rank: 995
score: 98.895361328125
patch: int dp = dp 1 [ i ] ;
rank: 995
score: 98.68391248914931
patch: final int dp = 0 - i ;
rank: 996
score: 99.1007792154948
patch: if ( p 1 [ i ] == 0 ) {
rank: 996
score: 98.49115862165179
patch: final int dp = null ;
rank: 997
score: 98.87861938476563
patch: double dp = p $NUMBER$ [ i ] ;
rank: 997
score: 98.8205078125
patch: final int dp = p 1 [ i ]
rank: 997
score: 98.43137904575893
patch: final int dp = Math ;
rank: 998
score: 99.09018776633523
patch: final int dp = p 1 [ i ] -
rank: 998
score: 98.9838623046875
patch: sum += p 1 [ i ] ; }
rank: 998
score: 98.88787231445312
patch: p 1 = p 1 [ i ] ;
rank: 998
score: 98.86235961914062
patch: byte dp = p 1 [ i ] ;
rank: 998
score: 98.75777180989583
patch: sum += p 1 [ i ] ;
rank: 998
score: 98.35525076729911
patch: final int dp = i ;
rank: 999
score: 98.9696044921875
patch: Object dp = p 1 [ i ] ;
rank: 999
score: 98.89110107421875
patch: final int dp = p 1 . length ;
rank: 999
score: 98.86823120117188
patch: sum += dp 1 [ i ] ; }
rank: 999
score: 98.8561279296875
patch: char dp = p 1 [ i ] ;
rank: 999
score: 98.74278428819444
patch: if ( p 1 [ i ] ;
rank: 999
score: 98.30521065848214
patch: final int dp = $STRING$ ;
rank: 999
score: 98.29349190848214
patch: final int dp = 1 ;
rank: 999
score: 97.69840698242187
patch: final int dp ;
rank: 1000
score: 98.15099080403645
patch: int dp = 0 ;
rank: 1000
score: 96.97245788574219
patch: dp ++ ;
rank: 1000
score: 96.86273193359375
patch: final int dp
rank: 1000
score: 96.13357543945312
patch: final
rank: 1000
score: 93.00129699707031
patch: /
